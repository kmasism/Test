using Microsoft.VisualBasic;
using Microsoft.VisualBasic.Compatibility.VB6;
using System;
using System.Data;
using System.Data.Common;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Text;
using System.Windows.Forms;
using UpgradeHelpers.DB.ADO;
using UpgradeHelpers.Gui;
using UpgradeHelpers.Gui.Controls;
using UpgradeHelpers.Gui.Utils;
using UpgradeHelpers.Helpers;
using UpgradeStubs;

namespace JETNET_Homebase
{
	internal partial class frm_aircraft
		: System.Windows.Forms.Form
	{

		//******************************************************************************************


		//==================
		// Public Variables
		//==================

		public bool RemoveExclusive = false;
		public bool NeedToClearSpecs = false;
		public bool ComingBackFromTransaction = false;
		public string DetailName = "";
		public string DetailDescription = "";
		public string DetailType = "";
		public bool SecondExclusive = false;
		public int JournalIDToShow = 0;
		public bool LeaseSuccess = false;
		public int tmp_ac_journ_id = 0;
		public string temp_acfaa_reg_no0 = "";
		public string temp_acfaa_reg_no1 = "";
		public string temp_acfaa_reg_no2 = "";
		public string temp_acfaa_reg_no3 = "";
		public string temp_acfaa_reg_status0 = "";
		public string temp_acfaa_reg_status1 = "";
		public string temp_acfaa_reg_status2 = "";
		public string temp_acfaa_reg_status3 = "";
		public string temp_acfaa_party_comp_name0 = "";
		public string temp_acfaa_party_comp_name1 = "";
		public string temp_acfaa_party_comp_name2 = "";
		public string temp_acfaa_party_comp_name3 = "";
		public string temp_acfaa_party_comp_name4 = "";
		public string temp_acfaa_party_comp_name5 = "";
		public string temp_acfaa_party_comp_name6 = "";
		public string temp_acfaa_party_comp_name7 = "";
		public string temp_acfaa_party_comp_name8 = "";
		public string temp_acfaa_party_comp_name9 = "";
		public string temp_acfaa_notes = "";
		public int Reference_Aircraft_ID = 0;
		public int Reference_Journal_ID = 0;
		public int Reference_Company_ID = 0;
		public int FirstHistoricalPurchase_JournID = 0;
		public bool AssociateCompanyFlag = false; //aey 12/20/04
		public int VS_journ_id_ForSale = 0; //Tom 5/24/2010 New ID to hold the journal record created for Verified Status

		//===================
		// Private Variables
		//===================

		private const int chkIncMktSummary_INDEX = 0;
		private const int chkJournOnlyShowFirst_INDEX = 1;
		private const int chkDisplaySalePrice_INDEX = 2;
		private const int chkExclusiveExp_INDEX = 3;
		private const int chkLeasedFlag_INDEX = 4;
		private const int chkExclusiveFlag_INDEX = 5;
		private const int chkAvailableFlag_INDEX = 6;

		private bool bControlProductCodeMsg = false;

		private int mlNextTraceID = 0;

		private bool gbTimer1DoubleClick = false;
		private bool gbTimer1SingleClick = false;

		// Declare All Form ADODB Recordset
		private ADORecordSetHelper adoAircraftRecordset = null;
		private ADORecordSetHelper adoAircraftDatesRecordset = null;

		// Declare All Form Recordset
		private ADORecordSetHelper snp_Damage_Journal = null; //aey 6/10/04
		private ADORecordSetHelper snp_Inspect_Journal = null; //aey 6/10/04
		private ADORecordSetHelper ado_DocLog = null;
		private ADORecordSetHelper snp_AircraftContacts = null;

		private ADORecordSetHelper snp_Journal = null;
		private ADORecordSetHelper snp_AircraftAvionics = null; //aey 6/10/04
		private ADORecordSetHelper snp_Aircraft_Certified = null; //aey 6/10/04
		private ADORecordSetHelper snp_Aircraft_FAA = null; //aey 7/29/05
		private ADORecordSetHelper snp_Aircraft_Model = null;
		private ADORecordSetHelper snp_History = null; //aey 6/10/04
		private bool isExpired = false;
		private double PercentTotal = 0;

		private bool HistoricalContactTypeSupported = false;
		bool NeedToSaveContactTransmits = false;
		private string strJournalOrderBy = "";
		private bool TransDateChanged = false;
		private bool ModelChanged = false;
		private bool MakeChanged = false;
		private bool HelicopterChanged = false;
		private bool SerialNumberChanged = false;
		private int SpecsJournID = 0;
		private bool bolRetrieveSpecs = false;
		private bool ContactRecordsetFilled = false;
		public bool MaintenanceGridChanged = false;
		private bool InteriorGridChanged = false;
		private bool ExteriorGridChanged = false;
		private bool EquipmentGridChanged = false;
		private bool CockpitGridChanged = false;
		private bool InteriorGeneralChanged = false;
		private bool InteriorLavatoryChanged = false;
		private bool InteriorAirConditioningChanged = false;
		private bool ExteriorColorsChanged = false;
		private bool EquipmentGeneralChanged = false;
		private bool CockpitGeneralChanged = false;
		public bool MaintenanceInspectionChanged = false;
		private string RememberWhatChanged = "";
		private bool AllowDBLClick = false;
		private bool HistoricalContactsChanged = false;
		private int tmpContactChangeJournID = 0;
		private int tmpOwnerChangeJournID = 0;
		private bool DontWantToSave = false;
		private string RememberHistoryDate = "";
		private int OwnerCompanyID = 0;
		private int OperatorCompanyID = 0;
		private int Additional1CompanyID = 0;
		private string OnOffMarket = "";
		private bool DeletedHistory = false;
		private string TransmitRecordAction = "";
		private bool WasExclusive = false;
		private int GetJournalID = 0;
		private bool AnsweredCancel = false;
		private string tmpRememberMakeModel = "";
		private bool WasVerified = false;
		private ADORecordSetHelper snpLease = null;
		private int HistoricalJournalID = 0;
		private int For_Sale_Journ_ID = 0; // Journal ID of on/off market journal entry
		private int Status_Change_Journ_ID = 0; // Journal ID of major status changes
		private int Serial_Number_Change_Journ_ID = 0; // Journal ID of Serial Number change
		private int Model_Change_Journ_ID = 0; // Journal ID of Model Change
		private int Remove_Exclusive_Journ_ID = 0; // Journal ID when removing exclusive status
		private string Hyphen = "";

		private int primary_comp_id = 0;
		private string Aircraft_Account_Rep = "";
		private string tmpExclusiveBroker = "";
		private int Total_Exclusive = 0;
		private string gbl_status = "";
		private string Temp_Avionics = "";

		private string RecordStat = "";

		private CheckState tmp_ac_forsale_flag = CheckState.Unchecked; //RTW
		private string tmp_ac_status = "";
		private string strOwner = "";
		private bool bKeyFeaturesChanged = false; // Identifies whether the key features grid had changes
		private bool bKeyFeature1 = false;
		private bool bKeyFeature2 = false;
		private bool bKeyFeature3 = false;
		private bool bKeyFeature4 = false;
		private bool bKeyFeature5 = false;
		private bool bKeyFeature6 = false;
		private bool bKeyFeatureDamage = false;
		private bool bAvionicsChanged = false; // Identifies whether the avionics grid had changes
		private bool bModificationsChanged = false; // Identifies whether the modifications grid had changes
		private bool bCertificationsChanged = false; // Identifies whether the certifications grid had changes
		private bool bSpecificationsChanged = false; // Identifies whether the specifications grid had changes
		private bool Transmit_Change_Flag = false; // Flag identifying whether transmits need to be written
		private bool bLeaseChanged = false;
		private bool bLeaseShouldTransmit = false;
		private bool bFAAChanged = false;
		private string[] arr_Transmit_Fields = null; // Array of fields with changes to be transmitted
		private Array arrAvionics = null;
		private bool AskingPriceChanged = false;
		private bool MakeOfferPriceChanged = false; // tom 8/10/2010
		private string OldAskingPrice = "";
		private string OldMakeOfferPrice = ""; // tom 8/10/2010
		private string NewAskingPrice = "";
		private string NewMakeOfferPrice = ""; // tom 8/10/2010
		private string RemeberDocumentAccountRep = "";
		private string ErrorMsgInfo = "";
		private bool tmpBaseCodeChanged = false;
		private string tmpOldBaseName = "";
		private bool tmpRegNbrChanged = false;
		private string tmpOldRegNbr = "";
		private bool tmpAFTTChanged = false;
		private string tmpOldAFTT = "";
		private bool HasOperator = false;
		private bool owner_is_awaiting_DOC = false;

		private bool Release_Lock = false; //aey 9/27/04
		private string Airframe_Type_Code = "";

		// VARIABLES FOR ENSURING THAT GRIDS ARE LOADED
		private bool bInteriorGridLoaded = false;
		private bool bExteriorGridLoaded = false;
		private bool bMaintenanceGridLoaded = false;
		private bool bEquipmentGridLoaded = false;

		// VARIABLE FOR VERIFYING REGNO AND BASE
		// IF THESE ARE SET TO TRUE THEN THESE FIELDS HAVE
		// ALREADY BEEN VERIFIED AND NEED NOT BE VERIFIED AGAIN.
		private bool bVerifiedRegNo = false;
		private bool bVerifiedBase = false;
		private bool bVerifiedEMP = false; //aey 6/28/04 #242
		private bool bVerifiedEMGP = false;
		private bool bVerifiedAMP = false;
		private bool bVerifiedAMTP = false;

		private modGlobalVars.e_find_form_action_types tCompFind_ActionTypes = (modGlobalVars.e_find_form_action_types) 0;
		private modGlobalVars.e_find_form_entry_points tCompFind_EntryPoints = (modGlobalVars.e_find_form_entry_points) 0;

		private modGlobalVars.e_first_start_form tStart_Form = (modGlobalVars.e_first_start_form) 0;

		// Variable for casading date changes to history 5/5/2004 aey
		private bool bVerifyDateChange = false;

		private int Found_Aircraft_Company_ID = 0;
		private int Found_Aircraft_Company_JID = 0;
		private string Found_Aircraft_Company_Type = "";
		private int Found_Aircraft_Contact_ID = 0;
		private int Found_Aircraft_Contact_JID = 0;

		private string Found_Historical_Contact_Type = "";
		private int Found_Historical_Contact_ID = 0;
		private int Found_Historical_Contact_JID = 0;
		private int Found_Historical_Company_ID = 0;
		private string Found_New_Company_Name = "";

		private string sOwnerWillChange = "";

		private string RememberOldCompName = "";
		private string RememberOldCompType = "";

		private bool bEdit_PurchQuest_Outstanding = false;
		private bool bEdit_HelicopterGrid_Outstanding = false;
		private int RememberGridRow = 0;
		private int RememberGridCol = 0;
		private frm_ShareRelationships new_frm_ShareRelationships = null;
		private bool bWasExpiredAlready = false;

		private bool bInFillBase = false;
		private bool bBaseControlLostFocus = false;
		private int nBaseControlThatLostFocus = 0;

		// RTW - ADDED ON 3/1/2012 - TO IDENTIFY IF CLICKED INTO VARIOUS TABS
		private bool tab_avionics_loaded = false;
		private bool tab_certifications_loaded = false;
		private bool tab_damage_loaded = false;
		private bool tab_faa_loaded = false;
		private bool tab_lease_loaded = false;
		private bool gbOpenDocInBrowser = false;

		private bool bFormLoad = false;
		private bool bFormInitalize = false;
		private bool bFormActivate = false;
		private bool bDisplayAircraft = false;

		public string Companies_Connected_List = "";
		private bool re_load_history = false;
		private bool re_load_history2 = false;
		private bool dont_do_events_journal = false;
		private string strPhoneGrid = "";

		// RTW - ADDED FROM MODEL SELECT TO CONSTRAIN ENTRY
		//       OF ENGINE AND PROPELLER DATA
		private int int_Num_Engines = 0;
		private int int_Num_Props = 0;
		private bool ASK_TO_CLEAR_NOTES = false;
		private bool ASK_TO_CLEAR_MAINT = false;
		private bool skip_question_EMP = false;

		public bool skip_question_ac_maintained = false;
		public bool added_research_only = false;
		public string Last_Journal_ID = "";

		public bool Lock_Avionics = false;
		public string aport_country_temp = "";
		public string aport_state_temp = "";
		public frm_aircraft()
			: base()
		{
			if (m_vb6FormDefInstance is null)
			{
				if (m_InitializingDefInstance)
				{
					m_vb6FormDefInstance = this;
				}
				else
				{
					try
					{
						//For the start-up form, the first instance created is the default instance.
						if (!(System.Reflection.Assembly.GetExecutingAssembly().EntryPoint is null) && System.Reflection.Assembly.GetExecutingAssembly().EntryPoint.DeclaringType == this.GetType())
						{
							m_vb6FormDefInstance = this;
						}
					}
					catch
					{
					}
				}
			}
			//This call is required by the Windows Form Designer.
			isInitializingComponent = true;
			InitializeComponent();
			isInitializingComponent = false;
			ReLoadForm(false);
		}


		public void check_for_acfl(ref bool passed_test)
		{

			passed_test = true;
			if (lbl_gen[15].Text == "Current Account Rep:  ACFL")
			{
				if (MessageBox.Show("This is an ACFL company, check research manual for special instructions, if none exist proceed with transaction.  Do you wish to continue? Yes/No?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
				{
					passed_test = false;
				}
			}

		}


		public string check_for_View_Aircraft_Intelligence(int ac_id)
		{

			string result = "";

			string intelmessage = "";
			string temp_query = "";

			string Query = "SELECT intelmessage, INTELTYPE, ac_journ_id, ac_id FROM View_Aircraft_Intelligence WITH(NOLOCK)";
			Query = $"{Query} WHERE ac_id = {ac_id.ToString()} ";

			ADORecordSetHelper adoRs = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

			if (!(adoRs.BOF && adoRs.EOF))
			{

				while(!adoRs.EOF)
				{

					temp_query = $"select top 1 journ_id from journal with (NOLOCK) where journ_ac_id = {Convert.ToString(adoRs["ac_id"])} and journ_subject like '%({Convert.ToString(adoRs["ac_journ_id"])})' ";

					if (!modAdminCommon.Exist(temp_query))
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoRs["intelmessage"]))
						{
							result = $"{result}{Convert.ToString(adoRs["INTELTYPE"])}: ";
							result = $"{result}{Convert.ToString(adoRs["intelmessage"])}{Environment.NewLine}{Environment.NewLine}";
						}
					}

					adoRs.MoveNext();
				};
			}


			adoRs.Close();




			return result;
		}

		public void clear_serials()
		{
			// created - MSW - 10/5/21
			txt_ac_engine_ser_no[0].Text = "";
			txt_ac_engine_ser_no[1].Text = "";
			txt_ac_engine_ser_no[2].Text = "";
			txt_ac_engine_ser_no[3].Text = "";
			txt_ac_apu[0].Text = "";

			txt_ac_prop_ser_no[0].Text = "";
			txt_ac_prop_ser_no[1].Text = "";
			txt_ac_prop_ser_no[2].Text = "";
			txt_ac_prop_ser_no[3].Text = "";




		}

		public void enable_or_unenable_aport(bool enable_or_no)
		{

			Application.DoEvents();
			Application.DoEvents();
			Application.DoEvents();
			txtBaseCity.Enabled = enable_or_no;
			//txtBaseAirportName.Enabled = enable_or_no   ' airport name should never be editable
			cboBaseCountry.Enabled = enable_or_no;
			cboBaseState.Enabled = enable_or_no;
			Application.DoEvents();
			Application.DoEvents();
			Application.DoEvents();

			// added in MSW - 7/6/23
			chk_ac_aport_private[0].Enabled = enable_or_no;
			chk_ac_aport_private[2].Enabled = enable_or_no;

			//  If enable_or_no = False Then
			//           chk_ac_aport_private(0).Value = 0 ' private
			//           chk_ac_aport_private(2).Value = 0 ' transient
			//  End If

			Application.DoEvents();
			Application.DoEvents();
		}

		private void load_status_block(ref string Error_Message, ref string original_asking)
		{

			pnl_Sale_Data.BackColor = Color.FromArgb(192, 255, 192);
			if (($"{Convert.ToString(adoAircraftRecordset["ac_forsale_flag"])}{modGlobalVars.cEmptyString}").Trim().ToUpper() == "Y")
			{
				chkArray[chkAvailableFlag_INDEX].CheckState = CheckState.Checked;
				pnl_Sale_Data.Visible = true;
			}
			else
			{
				chkArray[chkAvailableFlag_INDEX].CheckState = CheckState.Unchecked;
				if (Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]) == 0)
				{
					pnl_Sale_Data.Visible = false;
				}
				else
				{
					pnl_Sale_Data.BackColor = SystemColors.Control;
					pnl_Sale_Data.Visible = true;
				}
			}

			tmp_ac_forsale_flag = chkArray[chkAvailableFlag_INDEX].CheckState;

			if (Information.IsDate(snp_Aircraft_Model["amod_common_verify_days"]))
			{
				modAdminCommon.tempdate = DateTime.Parse(modAdminCommon.DateToday).AddDays(Double.Parse(Convert.ToDateTime(snp_Aircraft_Model["amod_common_verify_days"]).ToString("d")));
			}
			else
			{
				modAdminCommon.tempdate = DateTime.Parse(modAdminCommon.DateToday);
			}


			if (Information.IsDate(snp_Aircraft_Model["amod_sale_verify_days"]))
			{
				modAdminCommon.tempdate = DateTime.Parse(modAdminCommon.DateToday).AddDays(Double.Parse(Convert.ToDateTime(snp_Aircraft_Model["amod_sale_verify_days"]).ToString("d")));
			}
			else
			{
				modAdminCommon.tempdate = DateTime.Parse(modAdminCommon.DateToday);
			}

			Error_Message = "Fill Aircraft Status List";
			modFillAircraftControls.Fill_Aircraft_Status_List(cbo_ac_status, (int) chkArray[chkAvailableFlag_INDEX].CheckState);

			cbo_ac_status.SelectedIndex = 0;
			int tempForEndVar = cbo_ac_status.Items.Count - 1;
			for (int I = 0; I <= tempForEndVar; I++)
			{
				if (cbo_ac_status.GetListItem(I).ToLower() == ($"{Convert.ToString(adoAircraftRecordset["ac_status"])}{modGlobalVars.cEmptyString}").Trim().ToLower())
				{
					cbo_ac_status.SelectedIndex = I;
					break;
				}
			}


			Remove_Unwated_Statuses();




			cbo_ac_use_code.SelectedIndex = 0;
			cbo_ac_use_code.Tag = "";

			int tempForEndVar2 = cbo_ac_use_code.Items.Count - 1;
			for (int I = 0; I <= tempForEndVar2; I++)
			{
				if (($"{cbo_ac_use_code.GetListItem(I)}{modGlobalVars.cEmptyString}").Substring(0, Math.Min(1, ($"{cbo_ac_use_code.GetListItem(I)}{modGlobalVars.cEmptyString}").Length)).ToLower() == ($"{Convert.ToString(adoAircraftRecordset["ac_use_code"])}{modGlobalVars.cEmptyString}").ToLower())
				{
					cbo_ac_use_code.SelectedIndex = I;
					ToolTipMain.SetToolTip(cbo_ac_use_code, cbo_ac_use_code.Text);
					cbo_ac_use_code.Tag = cbo_ac_use_code.Text;
					break;
				}
			}

			int tempForEndVar3 = cbo_ac_asking.Items.Count - 1;
			for (int I = 0; I <= tempForEndVar3; I++)
			{
				if (cbo_ac_asking.GetListItem(I).ToLower() == ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_asking"])}").Trim().ToLower())
				{
					cbo_ac_asking.SelectedIndex = I;
					break;
				}
			}

			//   added MSW - 7/15/20 - to put back to back in case its not asking
			// if its not price, then no matter what we set it back to plain
			// if it is price, it will have set it as needed earlier in program
			if (cbo_ac_asking.Text != "Price")
			{
				lbl_gen[9].ForeColor = Color.Black;
				cbo_ac_asking.BackColor = Color.White;
			}

			//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
			if (!Convert.IsDBNull(adoAircraftRecordset["ac_status"]))
			{
				if (Convert.ToString(adoAircraftRecordset["ac_status"]).Trim() != "")
				{
					tmp_ac_status = Convert.ToString(adoAircraftRecordset["ac_status"]).Trim();
				}
				else
				{
					tmp_ac_status = "";
				}
			}
			else
			{
				tmp_ac_status = "";
			}

			//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
			if (!Convert.IsDBNull(adoAircraftRecordset["ac_purchase_date"]))
			{
				txt_ac_purchase_date.Text = DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_purchase_date"]).Trim()).ToString("d");
			}
			else
			{
				txt_ac_purchase_date.Text = modGlobalVars.cEmptyString;
			}





			// we only have to check for exclusive status if aircraft is forsale
			//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
			if (!Convert.IsDBNull(adoAircraftRecordset["ac_exclusive_flag"]) && (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked))
			{
				if (Convert.ToString(adoAircraftRecordset["ac_exclusive_flag"]).Trim().ToUpper() == "Y")
				{
					// Exclusive Flag
					chkArray[chkExclusiveFlag_INDEX].CheckState = CheckState.Checked;
					chkArray[chkExclusiveFlag_INDEX].Visible = true;
				}
				else
				{
					// Exclusive Flag
					chkArray[chkExclusiveFlag_INDEX].CheckState = CheckState.Unchecked;
					chkArray[chkExclusiveFlag_INDEX].Visible = true;
				}

				// only get these fields if our aircraft is forsale and on exclusive
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_exclusive_verify_date"]))
				{
					if (Information.IsDate(adoAircraftRecordset["ac_exclusive_verify_date"]))
					{
						txt_exclusive_verify_date.Text = DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_exclusive_verify_date"]).Trim()).ToString("d");
					}
					else
					{
						txt_exclusive_verify_date.Text = modGlobalVars.cEmptyString;
					}
				}
				else
				{
					txt_exclusive_verify_date.Text = modGlobalVars.cEmptyString;
				}

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_exclusive_expiration_flag"]))
				{
					if (Convert.ToString(adoAircraftRecordset["ac_exclusive_expiration_flag"]).Trim().ToUpper() == "Y")
					{
						// Exclusive Expiration
						chkArray[chkExclusiveExp_INDEX].CheckState = CheckState.Checked;
					}
					else
					{
						// Exclusive Expiration
						chkArray[chkExclusiveExp_INDEX].CheckState = CheckState.Unchecked;
					}
				}
				else
				{
					// Exclusive Expiration
					chkArray[chkExclusiveExp_INDEX].CheckState = CheckState.Unchecked;
				}

			}
			else
			{
				// Exclusive Flag
				chkArray[chkExclusiveFlag_INDEX].CheckState = CheckState.Unchecked;
				chkArray[chkExclusiveFlag_INDEX].Visible = false;
			}

			// Exclusive Flag
			if (chkArray[chkExclusiveFlag_INDEX].CheckState == CheckState.Checked)
			{
				mnuRemoveExclusive.Enabled = true;
				// Exclusive Flag
				chkArray[chkExclusiveFlag_INDEX].Visible = true;
				// Exclusive Expiration
				chkArray[chkExclusiveExp_INDEX].Visible = true;
				txt_exclusive_verify_date.Visible = true;
				lbl_gen[11].Visible = true;

			}
			else
			{
				mnuRemoveExclusive.Enabled = false;

				// Exclusive Flag
				chkArray[chkExclusiveFlag_INDEX].Visible = false;
				// Exclusive Expiration
				chkArray[chkExclusiveExp_INDEX].Visible = false;
				txt_exclusive_verify_date.Visible = false;
				lbl_gen[11].Visible = false;

			}

			int tempForEndVar4 = cbo_ac_delivery.Items.Count - 1;
			for (int I = 0; I <= tempForEndVar4; I++)
			{
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_delivery"]))
				{
					if (cbo_ac_delivery.GetListItem(I) == Convert.ToString(adoAircraftRecordset["ac_delivery"]).Trim())
					{
						cbo_ac_delivery.SelectedIndex = I;
						break;
					}
				}
			}

			//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
			if (!Convert.IsDBNull(adoAircraftRecordset["ac_delivery_date"]))
			{
				txt_ac_delivery_date.Text = DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_delivery_date"]).Trim()).ToString("d");
				txt_ac_delivery_date.Visible = true;
				lbl_gen[17].Visible = true;
			}
			else
			{
				txt_ac_delivery_date.Text = modGlobalVars.cEmptyString;
			}

			//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
			if (!Convert.IsDBNull(adoAircraftRecordset["ac_delivery"]))
			{
				if (Convert.ToString(adoAircraftRecordset["ac_delivery"]).Trim() == "Date")
				{
					lbl_gen[17].Visible = true;
					txt_ac_delivery_date.Visible = true;
				}
			}

			if (cbo_ac_asking.Text == "Price")
			{
				txt_ac_asking_price.Visible = true;
				// ElseIf cbo_ac_asking = "Make Offer" Then
				//   txt_ac_asking_price.Visible = True
			}
			else if (cbo_ac_asking.Text == "Make Offer" || cbo_ac_asking.Text == "")
			{ 
				if (txt_ac_asking_price.Text.Trim() != "" && txt_ac_asking_price.Text.Trim() != "0")
				{
					// dont set it, if its historical, it should be visible
				}
				else
				{
					txt_ac_asking_price.Visible = false;
				}
			}
			else
			{
				txt_ac_asking_price.Visible = false;
			}


			txt_ac_asking_price.Text = modGlobalVars.cEmptyString;
			//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
			if (!Convert.IsDBNull(adoAircraftRecordset["ac_asking_price"]))
			{
				if (Convert.ToDouble(adoAircraftRecordset["ac_asking_price"]) > 0)
				{
					if (cbo_ac_asking.Text == "Price")
					{
						txt_ac_asking_price.Text = $"${Strings.FormatNumber(adoAircraftRecordset["ac_asking_price"], 0, TriState.False, TriState.False, TriState.True)}";
						//added MSW - 5/10/16
					}
					else if (tmp_ac_journ_id > 0)
					{ 
						original_asking = $"${Strings.FormatNumber(adoAircraftRecordset["ac_asking_price"], 0, TriState.False, TriState.False, TriState.True)}";
						txt_ac_asking_price.Text = original_asking;
						txt_ac_asking_price.Visible = true;
						//            ElseIf cbo_ac_asking = "Make Offer" Then
						//                If Not IsNull(adoAircraftRecordset("ac_asking_price")) Then
						//                    If CDbl(adoAircraftRecordset("ac_asking_price").Value) > 0 Then
						//                        txt_ac_asking_price.Text = "$" & FormatNumber(adoAircraftRecordset("ac_hidden_asking_price").Value, 2, vbFalse, vbFalse, vbTrue)
						//                    End If    ' If CDbl(adoAircraftRecordset("ac_asking_price").Value) > 0 Then
						//                End If    ' If Not IsNull(adoAircraftRecordset("ac_asking_price")) Then
					} // If cbo_ac_asking = "Price" Then
				}
			}



			txt_ac_list_date.Text = modGlobalVars.cEmptyString;
			//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
			if (!Convert.IsDBNull(adoAircraftRecordset["ac_list_date"]))
			{
				if (Convert.ToString(adoAircraftRecordset["ac_list_date"]).Trim() != modGlobalVars.cEmptyString)
				{
					if (Information.IsDate(adoAircraftRecordset["ac_list_date"]))
					{
						txt_ac_list_date.Text = DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_list_date"]).Trim()).ToString("d");
					}
				}
			}

			lbl_gen[13].Text = $"Entered:         {Convert.ToString(adoAircraftRecordset["ac_ent_user_id"]).Trim()}      {Convert.ToDateTime(adoAircraftRecordset["ac_ent_date"]).ToString()}";
			lbl_gen[14].Text = $"Updated:         {Convert.ToString(adoAircraftRecordset["ac_upd_user_id"]).Trim()}      {Convert.ToDateTime(adoAircraftRecordset["ac_upd_date"]).ToString()}";
			lbl_gen[245].Text = $"Last Verified Date:  {Convert.ToDateTime(adoAircraftRecordset["ac_last_verified_date"]).ToString("d")}";
			lbl_gen[256].Text = $"Next Verified Date:  {Convert.ToDateTime(adoAircraftRecordset["ac_next_verified_date"]).ToString("d")}";

		}




		public void Remove_Unwated_Statuses()
		{


			// MSW 10/30/19 - REMOVE SEE NOTES ------------
			if (cbo_ac_status.Text != "See Notes")
			{
				int tempForEndVar = cbo_ac_status.Items.Count - 1;
				for (int I = 0; I <= tempForEndVar; I++)
				{
					if (cbo_ac_status.GetListItem(I).Trim() == "See Notes")
					{
						cbo_ac_status.RemoveItem(I);
					}
				}
			}
			else if (tmp_ac_journ_id == 0)
			{  // added this from a blank else statement - msw - 1/31/20
				MessageBox.Show("'See Notes' Status Is No Longer a Valid Choice, Please Correct", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
			}

			// MSW 10/30/19 - REMOVE SEE NOTES ------------
			if (cbo_ac_status.Text != "Historical")
			{
				int tempForEndVar2 = cbo_ac_status.Items.Count - 1;
				for (int I = 0; I <= tempForEndVar2; I++)
				{
					if (cbo_ac_status.GetListItem(I).Trim() == "Historical")
					{
						cbo_ac_status.RemoveItem(I);
					}
				}
			}
			else if (tmp_ac_journ_id == 0)
			{ 
				MessageBox.Show("'Historical' Status Is No Longer a Valid Choice, Please Correct", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
			}

			// MSW 10/30/19 - REMOVE SEE NOTES ------------
			if (cbo_ac_status.Text != "Sealed Bid")
			{
				int tempForEndVar3 = cbo_ac_status.Items.Count - 1;
				for (int I = 0; I <= tempForEndVar3; I++)
				{
					if (cbo_ac_status.GetListItem(I).Trim() == "Sealed Bid")
					{
						cbo_ac_status.RemoveItem(I);
					}
				}
			}
			else
			{
				MessageBox.Show("'Sealed Bid' Status Is No Longer a Valid Choice, Please Correct", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
			}



		}


		public void return_usage_full(ref string usage_string)
		{

			string Query = "";
			ADORecordSetHelper ado_Usage = new ADORecordSetHelper();

			try
			{
				Query = $"SELECT * FROM aircraft_useage WITH(NOLOCK) where acuse_code = '{usage_string}' ORDER BY acuse_code";

				ado_Usage.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(ado_Usage.BOF && ado_Usage.EOF))
				{

					while(!ado_Usage.EOF)
					{
						usage_string = ($"{Convert.ToString(ado_Usage["acuse_code"])} - {Convert.ToString(ado_Usage["acuse_name"])}").Trim();
						ado_Usage.MoveNext();
					};
				}
				ado_Usage.Close();
				ado_Usage = null;
			}
			catch
			{
			}


		}

		public void Save_Aircraft_Click()
		{

			string strQuery1 = "";
			string temp_journ = "";
			bool note_added = false;
			string skip_save_reason = "";
			bool skip_save = false;
			bool did_heli_change = false;
			string year_mfr_changes = "";
			string year_dlv_changes = "";

			// 5/5/2004 aey
			// update for cascading date changes
			// 5/11/004 aey
			// force refresh for current tab

			// Temp Hold
			//adoAircraftRecordset.Resync adAffectCurrent, adResyncUnderlyingValues

			Application.DoEvents();
			if (adoAircraftRecordset.State == ConnectionState.Open)
			{
				Application.DoEvents();
				//UPGRADE_WARNING: (1068) adoAircraftRecordset.Source of type object is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				strQuery1 = Convert.ToString(adoAircraftRecordset.Source);
				Application.DoEvents();
				ErrorHandlingHelper.ResumeNext(
					() => {adoAircraftRecordset.Update();}, 
					() => {adoAircraftRecordset.Close();}, 
					() => {Application.DoEvents();}, 
					() => {Application.DoEvents();}, 
					() => {adoAircraftRecordset.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockOptimistic);}, 
					() => {Application.DoEvents();});
			}

			tab_aircraft_details.Enabled = false;
			tbr_ToolBar.Enabled = false;
			tab_ACMain.Enabled = false;
			bVerifyDateChange = false;

			//save the helicopter grid
			if (Airframe_Type_Code == "R" && HelicopterChanged)
			{
				did_heli_change = true;
				//8/12/2005 aey
				Save_Helicopter_Grid();
				Fill_Helicopter_Grid();
			}

			temp_journ = "";
			if (txt_ac_year[0].Text.Trim() != Convert.ToString(txt_ac_year[0].Tag).Trim())
			{
				temp_journ = $"Year Manufactured Changed, From {Convert.ToString(txt_ac_year[0].Tag).Trim()} to {txt_ac_year[0].Text.Trim()}, numrecschanged History records changed ";
				year_mfr_changes = temp_journ;
			}

			if (txt_ac_year[1].Text.Trim() != Convert.ToString(txt_ac_year[1].Tag).Trim())
			{
				if (temp_journ.Trim() != "")
				{
					temp_journ = $"Year Manufactured Changed, From {Convert.ToString(txt_ac_year[0].Tag).Trim()} to {txt_ac_year[0].Text.Trim()}, Year Delivered Changed, From {Convert.ToString(txt_ac_year[1].Tag).Trim()} to {txt_ac_year[1].Text.Trim()}, numrecschanged History records changed ";
					year_dlv_changes = $"Year Delivered Changed, From {Convert.ToString(txt_ac_year[1].Tag).Trim()} to {txt_ac_year[1].Text.Trim()}, numrecschanged History records changed ";
				}
				else
				{
					temp_journ = $"Year Delivered Changed, From {Convert.ToString(txt_ac_year[1].Tag).Trim()} to {txt_ac_year[1].Text.Trim()}, numrecschanged History records changed ";
					year_dlv_changes = temp_journ;
				}
			}

			if (temp_journ.Trim() == "")
			{
				temp_journ = "Year Delivered or Manufactured Changed, numrecschanged History records changed";
			}

			if (cbo_ac_status.Text == "See Notes")
			{
				skip_save = true;
				skip_save_reason = "'See Notes' Field is no Longer as Option. Please Correct.";
			}

			if (cbo_ac_status.Text == "Historical")
			{
				skip_save = true;
				skip_save_reason = "'Historical' Field is no Longer as Option. Please Correct.";
			}

			if (cbo_ac_status.Text == "Sealed Bid")
			{
				skip_save = true;
				skip_save_reason = "'Sealed Bid' Field is no Longer as Option. Please Correct.";
			}

			// added MSW - 5/10/23
			if (cbo_ac_use_code.Text == "")
			{
				skip_save = true;
				skip_save_reason = "Usage Code is not allowed to be blank";
			}



			if (skip_save)
			{
				MessageBox.Show($"Save Aborted, Reason: {skip_save_reason}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
			}
			else
			{

				// SAVE THE AIRCRAFT
				Application.DoEvents();
				Transaction_Save_Aircraft();
				Application.DoEvents();

				//added MSW - if helicopter items changed
				if (did_heli_change)
				{
					InsertJournalNote_AC("Helicopter Items Changed", "");
				}



				//added in along with the false on top because people were being confused it was re-loading

				if (TransDateChanged)
				{
					TransDateChanged = false;
					Fill_Aircraft_History_Grid();
				}
				cbo_ac_status.Visible = true;
				note_added = false;
				if (bVerifyDateChange)
				{
					CascadeDateChanges(temp_journ, ref note_added); //aey 5/5/04
				}

				// then our cascade didnt work 4/18/22-----------------------
				// if there was no historical changes to be changed
				if (temp_journ.IndexOf("numrecschanged") >= 0)
				{
					temp_journ = temp_journ.Substring(0, Math.Min((temp_journ.IndexOf("numrecschanged") + 1) - 3, temp_journ.Length));
				}

				if (year_mfr_changes.IndexOf("numrecschanged") >= 0)
				{
					year_mfr_changes = year_mfr_changes.Substring(0, Math.Min((year_mfr_changes.IndexOf("numrecschanged") + 1) - 3, year_mfr_changes.Length));
				}

				if (year_dlv_changes.IndexOf("numrecschanged") >= 0)
				{
					year_mfr_changes = year_dlv_changes.Substring(0, Math.Min((year_dlv_changes.IndexOf("numrecschanged") + 1) - 3, year_dlv_changes.Length));
				}
				//-------------------------------------

				// BOTH ADDED MSW - 10/5/2020
				if (!note_added)
				{
					if (year_mfr_changes.Trim() != "")
					{
						InsertJournalNote_AC(year_mfr_changes, "");
					}

					if (year_dlv_changes.Trim() != "")
					{
						InsertJournalNote_AC(year_dlv_changes, "");
					}
				}


				tab_aircraft_details_SelectedIndexChanged(tab_aircraft_details, new EventArgs()); //5/11/2004

				tab_aircraft_details.Enabled = true;
				tbr_ToolBar.Enabled = true;
				tab_ACMain.Enabled = true;
			}

		}

		public void set_changes_to_false()
		{

			bAvionicsChanged = false;
			bKeyFeaturesChanged = false;
			bKeyFeature1 = false;
			bKeyFeature2 = false;
			bKeyFeature3 = false;
			bKeyFeature4 = false;
			bKeyFeature5 = false;
			bKeyFeature6 = false;
			bKeyFeatureDamage = false;
			bFAAChanged = false;
			bLeaseChanged = false;
			MaintenanceGridChanged = false;
			MaintenanceInspectionChanged = false;
			InteriorGridChanged = false;
			InteriorLavatoryChanged = false;
			InteriorAirConditioningChanged = false;
			ExteriorGridChanged = false;
			ExteriorColorsChanged = false;
			EquipmentGridChanged = false;
			EquipmentGeneralChanged = false;
			CockpitGridChanged = false;
			CockpitGeneralChanged = false;

		}

		public void setup_doc_request()
		{

			frm_WebCrawl.DefInstance.cmd_pub_Click(frm_WebCrawl.DefInstance.cmd_pub, new EventArgs());
			frm_WebCrawl.DefInstance.txt_pub[5].Text = ""; // Doc Requested
			frm_WebCrawl.DefInstance.txt_pub[1].Text = txt_ac_id.Text; // ac id
			frm_WebCrawl.DefInstance.cbo_pub[6].Text = "Doc Request";
			frm_WebCrawl.DefInstance.cbo_pub[1].Text = "O - Open";
			frm_WebCrawl.DefInstance.cbo_pub[0].Text = "TN01";
			frm_WebCrawl.DefInstance.from_spot = "AC";

		}

		public void setup_memo_request()
		{

			frm_WebCrawl.DefInstance.cmd_pub_Click(frm_WebCrawl.DefInstance.cmd_pub, new EventArgs());
			frm_WebCrawl.DefInstance.txt_pub[5].Text = ""; // title ' removed memo from title - msw - 4/30/21
			frm_WebCrawl.DefInstance.txt_pub[1].Text = txt_ac_id.Text; // ac id
			frm_WebCrawl.DefInstance.cbo_pub[6].Text = "Memo"; // ccategory
			frm_WebCrawl.DefInstance.cbo_pub[1].Text = "O - Open";
			frm_WebCrawl.DefInstance.cbo_pub[0].Text = "All";
			frm_WebCrawl.DefInstance.from_spot = "AC";

			frm_WebCrawl.DefInstance.move_notes_over();

		}



		public modGlobalVars.e_first_start_form StartForm
		{
			get => tStart_Form;
			set => tStart_Form = value;
		}


		private void CascadeDateChanges(string journal_note, ref bool note_added)
		{
			//aey 5/5/2004
			//---------------------------------------------------------------------
			//This subroutine will (1) cascade date changes to historical records
			// (2) Flag records for evotion update and (3) Create pc update records
			// (4) Post journal entry with record count
			//---------------------------------------------------------------------

			ADORecordSetHelper snpAircraftHistory = new ADORecordSetHelper();
			string[] tmparray = new string[]{""};

			//update b set b.ac_mfr_year= a.ac_mfr_year ,b.ac_year=a.ac_year
			//from aircraft as a,aircraft as b  where
			//a.ac_id=b.ac_id and a.ac_journ_id=0 and b.ac_journ_id>0 and
			//((a.ac_mfr_year is not null and a.ac_mfr_year <> '' and (a.ac_mfr_year <>  b.ac_mfr_year or b.ac_mfr_year is null))
			//or (a.ac_year is not null and a.ac_year <> '' and (a.ac_year <>  b.ac_year or b.ac_year is null)))

			int NumRecsChanged = 0;
			tmparray[0] = modGlobalVars.cEmptyString;

			if (txt_ac_year[0].Text.Trim() == "")
			{
				txt_ac_year[0].Text = modGlobalVars.cEmptyString;
			}
			if (txt_ac_year[1].Text.Trim() == "")
			{
				txt_ac_year[1].Text = modGlobalVars.cEmptyString;
			}

			string Query = "SELECT * FROM aircraft WHERE";
			Query = $"{Query} ac_journ_id > 0 AND ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
			Query = $"{Query} AND (('{txt_ac_year[0].Text}' <>  ac_mfr_year or ac_mfr_year is null)";
			Query = $"{Query} OR ('{txt_ac_year[1].Text}' <>  ac_year or ac_year is null))";

			snpAircraftHistory.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockOptimistic);

			if (!(snpAircraftHistory.EOF || snpAircraftHistory.BOF))
			{

				modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "cascade");

				while (!snpAircraftHistory.EOF)
				{
					NumRecsChanged++;
					snpAircraftHistory["ac_mfr_year"] = txt_ac_year[0].Text.Substring(Math.Min(0, txt_ac_year[0].Text.Length), Math.Min(4, Math.Max(0, txt_ac_year[0].Text.Length)));
					snpAircraftHistory["ac_year"] = txt_ac_year[1].Text.Substring(Math.Min(0, txt_ac_year[1].Text.Length), Math.Min(4, Math.Max(0, txt_ac_year[1].Text.Length)));
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					snpAircraftHistory["ac_action_date"] = DBNull.Value;
					snpAircraftHistory.Update();
					//update pc records
					modAdminCommon.Record_Transmit(Convert.ToString(snpAircraftHistory["ac_ser_no_full"]), Convert.ToInt32(snpAircraftHistory["ac_id"]), Convert.ToInt32(snpAircraftHistory["ac_journ_id"]), Convert.ToInt32(snpAircraftHistory["ac_amod_id"]), "Transaction", "Change", ref tmparray);
					snpAircraftHistory.MoveNext();
				}

				// INSERT THE JOURNAL ENTRY


				if (journal_note.Trim() != "")
				{
					modAdminCommon.Rec_Journal_Info.journ_subject = StringsHelper.Replace(journal_note, "numrecschanged", NumRecsChanged.ToString(), 1, -1, CompareMethod.Binary);
				}
				else
				{
					modAdminCommon.Rec_Journal_Info.journ_subject = $"Year Delivered or Manufactured Changed,{Conversion.Str(NumRecsChanged)} History records changed";
				}

				modAdminCommon.Rec_Journal_Info.journ_description = " ";
				modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
				modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
				modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
				modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
				modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
				modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
				modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
				modAdminCommon.Rec_Journal_Info.journ_status = "A";
				modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

				note_added = true;

				frm_Journal.DefInstance.Commit_Journal_Entry();

				modAdminCommon.ADO_Transaction("CommitTrans");

				Fill_Aircraft_Journal_Grid();
				search_off();

			}

			snpAircraftHistory.Close();

		}

		private void CascadeDateChanges(string journal_note)
		{
			bool tempRefParam = false;
			CascadeDateChanges(journal_note, ref tempRefParam);
		}

		private void CascadeDateChanges()
		{
			bool tempRefParam2 = false;
			CascadeDateChanges("", ref tempRefParam2);
		}

		private void ChangeFSPENDtoFractionalSeller()
		{

			string NewSubject = "";
			string[] tmpArrayToPass = null;

			string Query = "UPDATE Aircraft_Reference ";
			Query = $"{Query}SET cref_contact_type = '69' ";
			Query = $"{Query}WHERE cref_contact_type = '91' ";
			Query = $"{Query}AND cref_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} ";
			Query = $"{Query}AND cref_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";

			DbCommand TempCommand = null;
			TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
			TempCommand.CommandText = Query;
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
			TempCommand.ExecuteNonQuery(); //6/10/04 aey

			string NewTransCode = modCommon.Transaction_Code("FS", Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]));

			modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "FSpend");

			if (NewTransCode.Substring(Math.Max(NewTransCode.Length - 1, 0)) == "*")
			{
				MessageBox.Show("Transaction Code Did Not Change Because New Code Not Found", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
			}
			else
			{

				NewSubject = NewTransCode.Substring(Math.Min(NewTransCode.IndexOf('*') + 1, NewTransCode.Length));
				NewTransCode = NewTransCode.Substring(0, Math.Min(NewTransCode.IndexOf('*'), NewTransCode.Length));

				Query = "UPDATE Journal ";
				Query = $"{Query}SET journ_subcategory_code = '{NewTransCode}', ";

				//check to see if this category code is to have action date nullified 6/25/04 aey
				if (!modCommon.GetTransWeb(NewTransCode))
				{
					Query = $"{Query}journ_action_date = '{modAdminCommon.DateToday}', ";
				}
				else
				{
					Query = $"{Query}journ_action_date = '1/1/1900', "; //6/25/04
				}


				Query = $"{Query}journ_subject = '{NewSubject}' ";
				Query = $"{Query}WHERE journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";

				DbCommand TempCommand_2 = null;
				TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
				TempCommand_2.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand_2.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
				TempCommand_2.ExecuteNonQuery();

			}

			modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Fractional Sold", "Add", ref tmpArrayToPass);
			modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Transaction", "Add", ref tmpArrayToPass);

			modAdminCommon.ADO_Transaction("CommitTrans");

			Select_Aircraft();
			Fill_Aircraft_History_Grid();

		}

		private void ChangePercentage(string inPercent, string inContactType, int inACID, int inJournID, int incompid)
		{

			string[] arrTempArray = new string[]{"", ""};

			string Query = "UPDATE Aircraft_Reference";
			Query = $"{Query} SET cref_owner_percent = {Double.Parse(inPercent).ToString()}";
			Query = $"{Query} WHERE cref_ac_id = {inACID.ToString()}";
			Query = $"{Query} AND cref_comp_id = {incompid.ToString()}";
			Query = $"{Query} AND cref_contact_type = '{inContactType}'";
			Query = $"{Query} AND cref_journ_id = {inJournID.ToString()}";

			DbCommand TempCommand = null;
			TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
			TempCommand.CommandText = Query;
			//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
			TempCommand.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
			TempCommand.ExecuteNonQuery();

			Query = $"UPDATE Aircraft SET ac_action_date = NULL WHERE ac_id = {inACID.ToString()} AND ac_journ_id = {inJournID.ToString()}";
			DbCommand TempCommand_2 = null;
			TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
			TempCommand_2.CommandText = Query;
			//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
			TempCommand_2.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
			TempCommand_2.ExecuteNonQuery();

			modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), 0, inJournID, cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex), "Fractional Owner", "Change", ref arrTempArray, incompid);

		}

		private void CheckForAvionicsDeleteTransmit()
		{
			bool ReDimError = false;
			bool CheckForAvionicsDeleteTransmit_Error = false;


			try
			{
				CheckForAvionicsDeleteTransmit_Error = true;
				ReDimError = false;

				int tempForEndVar = arrAvionics.GetUpperBound(0);
				for (int I = 1; I <= tempForEndVar; I++)
				{
					if (!InAvionicsGrid((string) arrAvionics.GetValue(I, 1)))
					{

						switch(((string) arrAvionics.GetValue(I, 1)).Trim().ToLower())
						{
							case "adf" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_adf"; 
								 
								break;
							case "avionics package" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_avncs"; 
								 
								break;
							case "altimeter" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_altimtr"; 
								 
								break;
							case "flight director" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_fdir"; 
								 
								break;
							case "radar altimeter" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_rdr_alt"; 
								 
								break;
							case "autopilot" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_a_p"; 
								 
								break;
							case "rnav" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_rnav"; 
								 
								break;
							case "radar" : case "weather radar" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_radar"; 
								 
								break;
							case "loran" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_loran"; 
								 
								break;
							case "communication radios" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_comms"; 
								 
								break;
							case "rmi" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_rmi"; 
								 
								break;
							case "navigation radios" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_navs"; 
								 
								break;
							case "hsi" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_hsi"; 
								 
								break;
							case "dme" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_dme"; 
								 
								break;
							case "compass" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_compass"; 
								 
								break;
							case "flight phone" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_fphone"; 
								 
								break;
							case "tpdr" : case "transponder" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_tpdr"; 
								 
								break;
							case "hi frequency" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_hi_freq"; 
								 
								break;
							case "lrn" : case "afis" : case "fms" : case "gps" : case "ins" : case "irs" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_lrn"; 
								 
								break;
							case "efis" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_efis"; 
								 
								break;
							case "stormscope" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_stormscope"; 
								 
								break;
							case "tcas" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_tcas"; 
								 
								break;
							case "cvr" : case "fdr" : 
								 
								Transmit_Change_Flag = true; 
								 
								ReDimError = true; 
								CheckForAvionicsDeleteTransmit_Error = false; 
								arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2}); 
								arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_cvrfdr"; 
								 
								break;
						}

					}
				}
			}
			catch (Exception excep)
			{
				if (!ReDimError && !CheckForAvionicsDeleteTransmit_Error)
				{
					throw excep;
				}

				if (CheckForAvionicsDeleteTransmit_Error)
				{

					modAdminCommon.Report_Error($"CheckForAvionicsDeleteTransmit_Error:{excep.Message}");

					return;

				}
				if (ReDimError || CheckForAvionicsDeleteTransmit_Error)
				{

					arr_Transmit_Fields = new string[]{""};
					//UPGRADE_TODO: (1065) Error handling statement (Resume Next) could not be converted. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1065
					UpgradeHelpers.Helpers.NotUpgradedHelper.NotifyNotUpgradedElement("Resume Next Statement");

				}
			}

		}

		private bool CheckForWanteds(int inACID)
		{


			string Query = "SELECT amwant_amod_id FROM Aircraft_Model_Wanted WITH(NOLOCK), Company WITH(NOLOCK), Aircraft_Reference WITH(NOLOCK)";
			Query = $"{Query} WHERE amwant_comp_id = comp_id";
			Query = $"{Query} AND comp_id = cref_comp_id";
			Query = $"{Query} AND comp_journ_id = cref_journ_id";
			Query = $"{Query} AND cref_journ_id = 0";
			Query = $"{Query} AND cref_ac_id = {inACID.ToString()}";
			Query = $"{Query} AND cref_primary_poc_flag = 'Y'";

			if (modAdminCommon.Exist(Query))
			{ //aey 7/13/04 - now using exist function
				return true;
			}
			else
			{
				return false;
			}

		}

		private void ClearFAADataScreen()
		{


			string Query = "DELETE FROM Aircraft_FAA_Document ";
			Query = $"{Query}WHERE acfaa_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} ";
			Query = $"{Query}AND acfaa_journ_id = 0";

			DbCommand TempCommand = null;
			TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
			TempCommand.CommandText = Query;
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
			TempCommand.ExecuteNonQuery();

		}

		private void ClearSpecsFromRecord()
		{

			try
			{

				// ====================================================================================
				// Written By : Keith Humpf
				// Created    : 12/06/2001
				// Modified   : 12/07/2001
				// Function   : ClearSpecsFromRecord
				// Parameters : none
				//
				// Returns    : none
				//
				// Notes      : This procedure is used to clear the "specs" off an aircraft record
				//            : when it goes on market.  The top section of fields need to write
				//            : transmits, the second block do not currently have fields in the
				//            : customer app, therefore no transmits are needed, and the last block
				//            : of fields are the three grids that we need to clear
				//
				// RTW - 4/27/2004 - ADDED ERROR CODE AND MODIFIED FEATURE CODE CLEARING TO
				// SET RECORDS TO "NO" INSTEAD OF "UNKNOWN" AND IGNORE AUTOMATED
				// FEATURE CODES
				//
				// ====================================================================================

				string Query = "";

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_times_as_of_date"] = DBNull.Value;
				Add_To_Transmit_List("ac_times_as_of_date");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_airframe_tot_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_airframe_tot_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_airframe_tot_landings"] = DBNull.Value;
				Add_To_Transmit_List("ac_airframe_tot_landings");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_1_tot_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_engine_1_tot_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_2_tot_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_engine_2_tot_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_3_tot_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_engine_3_tot_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_4_tot_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_engine_4_tot_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_1_soh_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_engine_1_soh_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_2_soh_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_engine_2_soh_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_3_soh_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_engine_3_soh_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_4_soh_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_engine_4_soh_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_1_shi_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_engine_1_shi_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_2_shi_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_engine_2_shi_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_3_shi_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_engine_3_shi_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_4_shi_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_engine_4_shi_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_prop_1_soh_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_prop_1_soh_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_prop_2_soh_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_prop_2_soh_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_prop_1_soh_moyear"] = DBNull.Value;
				Add_To_Transmit_List("ac_prop_1_moyear");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_prop_2_soh_moyear"] = DBNull.Value;
				Add_To_Transmit_List("ac_prop_2_moyear");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_apu_tot_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_apu_tot_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_apu_soh_hrs"] = DBNull.Value;
				Add_To_Transmit_List("ac_apu_soh_hrs");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_1_snew_cycles"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_2_snew_cycles"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_3_snew_cycles"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_4_snew_cycles"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_1_soh_cycles"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_2_soh_cycles"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_3_soh_cycles"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_4_soh_cycles"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_1_shs_cycles"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_2_shs_cycles"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_3_shs_cycles"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_engine_4_shs_cycles"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_prop_1_snew_hrs"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_prop_2_snew_hrs"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_prop_3_snew_hrs"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_prop_4_snew_hrs"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_prop_3_soh_hrs"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_prop_4_soh_hrs"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_prop_3_soh_moyear"] = DBNull.Value;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_prop_4_soh_moyear"] = DBNull.Value;

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_apu_shi_hrs"] = DBNull.Value;

				//aey 5/25/2006
				Query = $"delete from Helicopter_Detail_Times where heldt_journ_id = 0 and heldt_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();
			}
			catch
			{
				//UPGRADE_TODO: (1067) Member String is not defined in type VBA.ErrObject(...). More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modAdminCommon.Report_Error($"ClearSpecsFromRecord_Error: {Convert.ToString(Information.Err().Description)}");
			}

		}

		private void DeleteNTSBDocument()
		{

			string strDelete1 = "";
			string strMsg = "";
			string FileName = "";
			string FAAProcessing = "";
			int iErrCnt = 0;

			try
			{

				iErrCnt = 0;
				strMsg = "Are You Sure You Want To Delete This NTSB Document";

				if (MessageBox.Show(strMsg, AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
				{

					// 03/17/2014 - By David D. Cruger
					// Added Record Event For Delete NTSB Document
					modAdminCommon.Record_Event("NTSB", $"Delete NTSB Document Id:=[{Convert.ToString(ado_DocLog["faalog_id"])}]", Convert.ToInt32(ado_DocLog["faalog_ac_id"]), Convert.ToInt32(ado_DocLog["faalog_journ_id"]), 0, false);

					//get the path
					FAAProcessing = modCommon.Return_FAA_Document_Root_Directory(($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim());

					strDelete1 = "DELETE FROM FAA_Document_Log ";
					strDelete1 = $"{strDelete1}WHERE faalog_id = {Convert.ToString(ado_DocLog["faalog_id"])}";

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = strDelete1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();

					FileName = $"{FAAProcessing}{Convert.ToString(ado_DocLog["faalog_id"])}.html";

					if (File.Exists(FileName))
					{
						//UPGRADE_WARNING: (2081) DeleteFile has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
						File.Delete(FileName);
					}

					Fill_FAA_Doc_Grid();

				} // If MsgBox(strMsg, vbYesNo) = vbYes Then
			}
			catch (Exception e)
			{
				// Permission Denied Error
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				if ((Information.Err().Number == 70) && (iErrCnt <= 3))
				{
					iErrCnt++;
					modCommon.DelaySeconds(1);
					//UPGRADE_TODO: (1065) Error handling statement (Resume) could not be converted. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1065
					UpgradeHelpers.Helpers.NotUpgradedHelper.NotifyNotUpgradedElement("Resume Statement");
				}

				modAdminCommon.Report_Error("DeleteNTSBDocument_Error:");
			}

		}

		private void DeleteFAAPDFDocument()
		{

			string strDelete1 = "";
			string strMsg = "";
			string strFileName = "";
			string strFAAProcessDir = "";

			try
			{

				strMsg = "Are You Sure You Want To Delete This FAA PDF Document";

				if (MessageBox.Show(strMsg, AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
				{

					modAdminCommon.Record_Event("FAAPDF", $"Delete FAA PDF Document Id:=[{Convert.ToString(ado_DocLog["faalog_id"])}]", Convert.ToInt32(ado_DocLog["faalog_ac_id"]), Convert.ToInt32(ado_DocLog["faalog_journ_id"]), 0, false);

					strFAAProcessDir = modCommon.Return_FAA_Document_Root_Directory(($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim());
					strFileName = modCommon.Get_FAA_Document_In_Process_File_Name(Convert.ToInt32(ado_DocLog["faalog_id"]), Convert.ToInt32(ado_DocLog["faalog_ac_id"]));

					strDelete1 = "DELETE FROM FAA_Document_Log ";
					strDelete1 = $"{strDelete1}WHERE (faalog_id = {Convert.ToString(ado_DocLog["faalog_id"])}) ";

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = strDelete1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();

					if (File.Exists($"{strFAAProcessDir}{strFileName}"))
					{
						//UPGRADE_WARNING: (2081) DeleteFile has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
						File.Delete($"{strFAAProcessDir}{strFileName}");
					}

					Fill_FAA_Doc_Grid();

				} // If MsgBox(strMsg, vbYesNo + vbApplicationModal) = vbYes Then
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Report_Error("DeleteFAAPDFDocument_Error", excep.Message);
			}

		} // DeleteFAAPDFDocument

		private void DeleteRedundantLease()
		{


			string Query = "DELETE FROM Aircraft_Lease ";
			Query = $"{Query}WHERE aclease_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} ";
			Query = $"{Query}AND aclease_journ_id = 0";

			DbCommand TempCommand = null;
			TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
			TempCommand.CommandText = Query;
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
			TempCommand.ExecuteNonQuery(); //6/10/04 aey

		}

		private bool FAAScreenIsBlank()
		{

			if (txt_acfaa_party_comp_name[0].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_party_comp_name[1].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_party_comp_name[2].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_party_comp_name[3].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_party_comp_name[4].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_party_comp_name[5].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_party_comp_name[6].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_party_comp_name[7].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_party_comp_name[8].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_party_comp_name[9].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_reg_no[0].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_reg_no[1].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_reg_no[2].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_reg_no[3].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_reg_status[0].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_reg_status[1].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_reg_status[2].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_reg_status[3].Text.Trim() != modGlobalVars.cEmptyString || txt_acfaa_notes.Text.Trim() != modGlobalVars.cEmptyString)
			{

				return false;

			}
			else
			{

				return true;

			}

		}

		private void Fill_Helicopter_Grid()
		{
			//fill helicopter detail grid aey 8/10/05

			ADORecordSetHelper helidata = null;
			string Query = "";

			try
			{

				GrdHelicopter.BorderStyle = BorderStyle.None;
				GrdHelicopter.Visible = false;
				GrdHelicopter.Enabled = false;
				GrdHelicopter.Clear();

				GrdHelicopter.ColumnsCount = 6;
				GrdHelicopter.RowsCount = 2;

				GrdHelicopter.FixedRows = 1;
				GrdHelicopter.FixedColumns = 0;

				GrdHelicopter.CurrentRowIndex = 0;
				GrdHelicopter.CurrentColumnIndex = 0;

				GrdHelicopter.SetColumnWidth(GrdHelicopter.CurrentColumnIndex, 133);
				GrdHelicopter.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = "Category Type";

				GrdHelicopter.CurrentColumnIndex = 1;
				GrdHelicopter.SetColumnWidth(GrdHelicopter.CurrentColumnIndex, 80);
				GrdHelicopter.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = "Subcat";

				GrdHelicopter.CurrentColumnIndex = 2;
				GrdHelicopter.SetColumnWidth(GrdHelicopter.CurrentColumnIndex, 67);
				GrdHelicopter.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = "Serial # ";

				GrdHelicopter.CurrentColumnIndex = 3;
				GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = "TTSN";
				GrdHelicopter.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				GrdHelicopter.SetColumnWidth(GrdHelicopter.CurrentColumnIndex, 40);

				GrdHelicopter.CurrentColumnIndex = 4;
				GrdHelicopter.SetColumnWidth(GrdHelicopter.CurrentColumnIndex, 63);
				GrdHelicopter.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = "Hrs Remain";

				GrdHelicopter.CurrentColumnIndex = 5;
				GrdHelicopter.SetColumnWidth(GrdHelicopter.CurrentColumnIndex, 40);
				GrdHelicopter.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = "SOH";

				Query = $"SELECT * FROM Helicopter_Detail_Times WITH(NOLOCK) WHERE heldt_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
				Query = $"{Query} AND heldt_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";
				Query = $"{Query} ORDER BY heldt_category_type, heldt_subcat_type";

				helidata = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(helidata.Fields) && !(helidata.BOF && helidata.EOF))
				{

					GrdHelicopter.CurrentRowIndex = 1;


					while(!helidata.EOF)
					{

						GrdHelicopter.CurrentColumnIndex = 0;
						GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(helidata["heldt_category_type"]))
						{
							GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = Convert.ToString(helidata["heldt_category_type"]).Trim();
						}
						if (GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Trim().ToUpper().IndexOf("BLADES") >= 0)
						{
							GrdHelicopter.CellBackColor = SystemColors.Control;
						}

						GrdHelicopter.CurrentColumnIndex = 1;
						GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(helidata["heldt_subcat_type"]))
						{
							GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = Convert.ToString(helidata["heldt_subcat_type"]).Trim();
						}

						GrdHelicopter.CurrentColumnIndex = 2;
						GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(helidata["heldt_ser_no_full"]))
						{
							GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = Convert.ToString(helidata["heldt_ser_no_full"]).Trim();
						}
						GrdHelicopter.CurrentColumnIndex = 3;
						GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(helidata["heldt_ttsn"]))
						{
							GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = Convert.ToString(helidata["heldt_ttsn"]).Trim();
						}

						GrdHelicopter.CurrentColumnIndex = 4;
						GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(helidata["heldt_remaining_hours"]))
						{
							GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = Convert.ToString(helidata["heldt_remaining_hours"]).Trim();
						}

						GrdHelicopter.CurrentColumnIndex = 5;
						GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(helidata["heldt_soh"]))
						{
							GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = Convert.ToString(helidata["heldt_soh"]).Trim();
						}

						GrdHelicopter.set_RowData(GrdHelicopter.CurrentRowIndex, Convert.ToInt32(helidata["heldt_id"]));

						helidata.MoveNext();

						GrdHelicopter.RowsCount++;
						GrdHelicopter.CurrentRowIndex++;

					};

					GrdHelicopter.RowsCount--;

					helidata.Close();

				}
				else
				{

					GrdHelicopter.FixedRows = 0;
					GrdHelicopter.RowsCount = 1;
					GrdHelicopter.CurrentRowIndex = 0;

				}

				helidata = null;
				GrdHelicopter.CurrentColumnIndex = 0;

				GrdHelicopter.Enabled = true;
				GrdHelicopter.Visible = true;
				GrdHelicopter.Redraw = true;

				HelicopterChanged = false;

				search_off();
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Report_Error($"Fill_Helicopter_Grid_Error {excep.Message}");
				search_off();

				return;
			}

		}

		private void Fill_Aircraft_Document_Grid_Headers()
		{


			grdAircraftDocuments.Clear();
			grdAircraftDocuments.RowsCount = 1;
			grdAircraftDocuments.ColumnsCount = 5;

			grdAircraftDocuments.CurrentRowIndex = 0;
			grdAircraftDocuments.CurrentColumnIndex = 0;

			grdAircraftDocuments[grdAircraftDocuments.CurrentRowIndex, grdAircraftDocuments.CurrentColumnIndex].Value = "Date";
			
			grdAircraftDocuments.ColAlignment[0] = DataGridViewContentAlignment.MiddleLeft;
			grdAircraftDocuments.SetColumnWidth(grdAircraftDocuments.CurrentColumnIndex, 67);

			grdAircraftDocuments.CurrentColumnIndex = 1;
			grdAircraftDocuments[grdAircraftDocuments.CurrentRowIndex, grdAircraftDocuments.CurrentColumnIndex].Value = "Type";
			
			grdAircraftDocuments.ColAlignment[1] = DataGridViewContentAlignment.MiddleLeft;
			grdAircraftDocuments.SetColumnWidth(grdAircraftDocuments.CurrentColumnIndex, 200);

			grdAircraftDocuments.CurrentColumnIndex = 2;
			grdAircraftDocuments[grdAircraftDocuments.CurrentRowIndex, grdAircraftDocuments.CurrentColumnIndex].Value = "Journal Subject";
			
			grdAircraftDocuments.ColAlignment[2] = DataGridViewContentAlignment.MiddleLeft;
			grdAircraftDocuments.SetColumnWidth(grdAircraftDocuments.CurrentColumnIndex, 587);

			grdAircraftDocuments.CurrentColumnIndex = 3;
			grdAircraftDocuments[grdAircraftDocuments.CurrentRowIndex, grdAircraftDocuments.CurrentColumnIndex].Value = "Doc";
			
			grdAircraftDocuments.ColAlignment[3] = DataGridViewContentAlignment.MiddleLeft;
			grdAircraftDocuments.SetColumnWidth(grdAircraftDocuments.CurrentColumnIndex, 30);

			grdAircraftDocuments.CurrentColumnIndex = 4;
			grdAircraftDocuments[grdAircraftDocuments.CurrentRowIndex, grdAircraftDocuments.CurrentColumnIndex].Value = "Tape Date";
			
			grdAircraftDocuments.ColAlignment[4] = DataGridViewContentAlignment.MiddleLeft;
			grdAircraftDocuments.SetColumnWidth(grdAircraftDocuments.CurrentColumnIndex, 67);

			grdAircraftDocuments.RowsCount++;
			grdAircraftDocuments.FixedRows = 1;
			grdAircraftDocuments.FixedColumns = 0;


		} // Fill_Aircraft_Document_Grid_Headers

		public void FillAircraftDocumentsGrid(string SortBy = "")
		{

			//******************************************************************************************
			// FILL THE AIRCRAFT DOCUMENTS TAB
			//******************************************************************************************
			string Query = "";
			try
			{

				ADORecordSetHelper snpACDocs = new ADORecordSetHelper(); //aey 6/10/04
				int lCnt1 = 0;
				int lRow1 = 0;

				grdAircraftDocuments.Visible = false;
				grdAircraftDocuments.Enabled = false;
				grdAircraftDocuments.Redraw = false;

				Fill_Aircraft_Document_Grid_Headers();

				Query = "SELECT * FROM FAA_Document_Log WITH(NOLOCK) ";
				Query = $"{Query}RIGHT OUTER JOIN Aircraft_Document WITH(NOLOCK) ";
				Query = $"{Query}INNER JOIN Journal WITH(NOLOCK) ";
				Query = $"{Query}ON Aircraft_Document.adoc_journ_id = Journal.journ_id  ";
				Query = $"{Query}ON FAA_Document_Log.faalog_ac_id = Aircraft_Document.adoc_ac_id ";
				Query = $"{Query}AND FAA_Document_Log.faalog_journ_id = Aircraft_Document.adoc_journ_id ";
				Query = $"{Query}AND FAA_Document_Log.faalog_journ_seq_no = Aircraft_Document.adoc_journ_seq_no ";
				Query = $"{Query}WHERE (Aircraft_Document.adoc_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}) ";

				if (SortBy.Trim() == modGlobalVars.cEmptyString)
				{
					Query = $"{Query}ORDER BY adoc_doc_date DESC, faalog_tape_date DESC, journ_id ";
				}
				else
				{
					Query = $"{Query}{SortBy.Trim()}";
				}

				snpACDocs.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockOptimistic);

				if (!snpACDocs.BOF && !snpACDocs.EOF)
				{

					lRow1 = 0;

					do 
					{ // Loop Until snpACDocs.EOF = True


						lRow1++;

						grdAircraftDocuments.RowsCount = lRow1 + 1;
						grdAircraftDocuments.CurrentRowIndex = lRow1;

						grdAircraftDocuments.CurrentColumnIndex = 0;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snpACDocs["adoc_doc_date"]))
						{
							grdAircraftDocuments[grdAircraftDocuments.CurrentRowIndex, grdAircraftDocuments.CurrentColumnIndex].Value = Convert.ToDateTime(snpACDocs["adoc_doc_date"]).ToString("MM/dd/yyyy");
						}

						grdAircraftDocuments.CurrentColumnIndex = 1;
						grdAircraftDocuments[grdAircraftDocuments.CurrentRowIndex, grdAircraftDocuments.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpACDocs["adoc_doc_type"])}").Trim();

						grdAircraftDocuments.CurrentColumnIndex = 2;
						grdAircraftDocuments[grdAircraftDocuments.CurrentRowIndex, grdAircraftDocuments.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpACDocs["journ_subject"])}").Trim();

						grdAircraftDocuments.CurrentColumnIndex = 3;

						if (modAdminCommon.Exist($"SELECT faalog_journ_id FROM FAA_Document_Log WITH(NOLOCK) WHERE faalog_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} AND faalog_journ_id = {Convert.ToString(snpACDocs["journ_id"])}"))
						{
							grdAircraftDocuments[grdAircraftDocuments.CurrentRowIndex, grdAircraftDocuments.CurrentColumnIndex].Value = "X";
						}

						grdAircraftDocuments.CurrentColumnIndex = 4;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snpACDocs["faalog_tape_date"]))
						{
							grdAircraftDocuments[grdAircraftDocuments.CurrentRowIndex, grdAircraftDocuments.CurrentColumnIndex].Value = Convert.ToDateTime(snpACDocs["faalog_tape_date"]).ToString("MM/dd/yyyy");
						}

						grdAircraftDocuments.set_RowData(grdAircraftDocuments.CurrentRowIndex,Convert.ToInt32( snpACDocs.GetField("journ_id")));
						//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grdAircraftDocuments.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						grdAircraftDocuments.setBandData(Convert.ToInt32(Double.Parse($"0{($"{modGlobalVars.cEmptyString}{Convert.ToString(snpACDocs["faalog_id"])}").Trim()}")), grdAircraftDocuments.CurrentRowIndex);

						lCnt1++;
						if (lCnt1 == 24)
						{
							grdAircraftDocuments.Visible = true;
							grdAircraftDocuments.Enabled = true;
							grdAircraftDocuments.Redraw = true;
							Application.DoEvents();
							grdAircraftDocuments.Enabled = false;
							grdAircraftDocuments.Redraw = false;
						}
						 // grdAircraftDocuments

						snpACDocs.MoveNext();

					}
					while(!snpACDocs.EOF);

				} // If snpACDocs.BOF = False And snpACDocs.EOF = False Then

				snpACDocs.Close();
				snpACDocs = null;

				grdAircraftDocuments.Visible = true;
				grdAircraftDocuments.Enabled = true;
				grdAircraftDocuments.Redraw = true;

				search_off();
			}
			catch (System.Exception excep)
			{

				search_off();
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"FillAircraftDocumentsGrid_Error: {Information.Err().Number.ToString()} {excep.Message} {excep.Source} {Query}");
			}

		}

		private void FillAircraftPicturesList()
		{

			string Query = "";
			ADORecordSetHelper snpPics = new ADORecordSetHelper(); //aey 6/10/04
			string picDate = "";
			int lCnt1 = 0;

			try
			{

				//   movACMovie.Visible = False

				lstAcPictures.Items.Clear();
				imgACPicture.Visible = false;

				Query = "SELECT * FROM Aircraft_Pictures WITH (NOLOCK) ";
				Query = $"{Query}WHERE (acpic_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}) ";
				Query = $"{Query}AND (acpic_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}) ";
				Query = $"{Query}AND (acpic_hide_flag='N') ";
				Query = $"{Query}ORDER BY acpic_seq_no";

				snpPics.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!snpPics.BOF && !snpPics.EOF)
				{

					while(!snpPics.EOF)
					{

						picDate = "<Unknown>";

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snpPics["acpic_date"]))
						{
							if (Information.IsDate(snpPics["acpic_date"]))
							{
								picDate = Convert.ToDateTime(snpPics["acpic_date"]).ToString("MM/dd/yyyy");
							}
						}

						// 05/30/2008 - By David D. Cruger
						// If picDate is Blank Use Entry Date

						if (picDate == "<Unknown>")
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(snpPics["acpic_entry_date"]))
							{
								if (Information.IsDate(snpPics["acpic_entry_date"]))
								{
									picDate = Convert.ToDateTime(snpPics["acpic_entry_date"]).ToString("MM/dd/yyyy");
								}
							}
						}

						lstAcPictures.AddItem($"{($"{modGlobalVars.cEmptyString}{Convert.ToString(snpPics["acpic_seq_no"])}").Trim()} - {picDate.Trim()} - {($"{modGlobalVars.cEmptyString}{Convert.ToString(snpPics["acpic_subject"])}").Trim()} [{($"{modGlobalVars.cEmptyString}{Convert.ToString(snpPics["acpic_image_type"])}").Trim()}]");
						lstAcPictures.SetItemData(lstAcPictures.Items.Count - 1, Convert.ToInt32(snpPics["acpic_id"]));

						snpPics.MoveNext();

					};

				} // If (snpPics.BOF = False And snpPics.EOF = False) Then

				if (lstAcPictures.Items.Count > 0)
				{
					ListBoxHelper.SetSelectedIndex(lstAcPictures, 0);
				}

				snpPics.Close();
				snpPics = null;
			}
			catch (System.Exception excep)
			{

				search_off();
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"FillAircraftPicturesList_Error: {Information.Err().Number.ToString()} {excep.Message} {excep.Source} {Query}");
			}

		} // FillAircraftPicturesList

		private void FillTransDocsGrid()
		{

			ADORecordSetHelper snpTransDocs = new ADORecordSetHelper(); //aey 6/10/04
			Object fso = new Object();
			string RootPath = ""; //aey 12/14/05


			grdTransactionDocuments.Visible = false;

			grdTransactionDocuments.Clear();
			grdTransactionDocuments.ColumnsCount = 3;
			grdTransactionDocuments.RowsCount = 2;
			grdTransactionDocuments.FixedRows = 1;

			grdTransactionDocuments.CurrentRowIndex = 0;

			grdTransactionDocuments.CurrentColumnIndex = 0;
			grdTransactionDocuments[grdTransactionDocuments.CurrentRowIndex, grdTransactionDocuments.CurrentColumnIndex].Value = "Seq";
			grdTransactionDocuments.SetColumnWidth(0, 33);

			grdTransactionDocuments.CurrentColumnIndex = 1;
			grdTransactionDocuments[grdTransactionDocuments.CurrentRowIndex, grdTransactionDocuments.CurrentColumnIndex].Value = "Type";
			grdTransactionDocuments.SetColumnWidth(1, 160);

			grdTransactionDocuments.CurrentColumnIndex = 2;
			grdTransactionDocuments[grdTransactionDocuments.CurrentRowIndex, grdTransactionDocuments.CurrentColumnIndex].Value = "Doc";
			grdTransactionDocuments.SetColumnWidth(2, 33);

			string Query = $"SELECT * FROM Aircraft_Document WITH(NOLOCK) WHERE adoc_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
			Query = $"{Query} AND adoc_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";
			Query = $"{Query} ORDER BY adoc_journ_seq_no";

			snpTransDocs.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpTransDocs.BOF && snpTransDocs.EOF))
			{
				grdTransactionDocuments.Visible = true;

				while(!snpTransDocs.EOF)
				{

					grdTransactionDocuments.CurrentRowIndex = grdTransactionDocuments.RowsCount - 1;

					grdTransactionDocuments.CurrentColumnIndex = 0;
					grdTransactionDocuments[grdTransactionDocuments.CurrentRowIndex, grdTransactionDocuments.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpTransDocs["adoc_journ_seq_no"])}").Trim();

					grdTransactionDocuments.CurrentColumnIndex = 1;
					grdTransactionDocuments[grdTransactionDocuments.CurrentRowIndex, grdTransactionDocuments.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpTransDocs["adoc_doc_type"])}").Trim();

					grdTransactionDocuments.CurrentColumnIndex = 2;
					if (Strings.Len(modAdminCommon.gbl_Documents.Trim()) > 0)
					{
						//
						// RTW - 3/29/2004
						// SEE IF THE FILE IS ON THE SERVER
						//
						RootPath = ($"{modCommon.DLookUp("aconfig_faapdf_maindir", "application_configuration")}{modGlobalVars.cEmptyString}").Trim();
						modAdminCommon.gbl_Documents = RootPath;

						if (File.Exists(modCommon.Get_Document_File_Name(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(Double.Parse(($"{modGlobalVars.cEmptyString}{Convert.ToString(snpTransDocs["adoc_journ_seq_no"])}").Trim())), "FAAPDF", ".pdf")))
						{
							// If fso.FileExists(gbl_Documents & "\" & adoAircraftRecordset!ac_id & cHyphen & adoAircraftRecordset!ac_journ_id & cHyphen & Trim(cEmptyString & snpTransDocs!adoc_journ_seq_no) & ".pdf") = True Then

							grdTransactionDocuments[grdTransactionDocuments.CurrentRowIndex, grdTransactionDocuments.CurrentColumnIndex].Value = "Yes";
							grdTransactionDocuments.set_RowData(grdTransactionDocuments.CurrentRowIndex, Convert.ToInt32(snpTransDocs["adoc_journ_seq_no"].ToString().Trim()));

						}
						else
						{
							grdTransactionDocuments[grdTransactionDocuments.CurrentRowIndex, grdTransactionDocuments.CurrentColumnIndex].Value = "No";

						}
					}
					else
					{
						grdTransactionDocuments[grdTransactionDocuments.CurrentRowIndex, grdTransactionDocuments.CurrentColumnIndex].Value = "No";
					}

					snpTransDocs.MoveNext();
					grdTransactionDocuments.RowsCount++;
				};
				grdTransactionDocuments.RowsCount--;
			}

			grdTransactionDocuments.Redraw = true;

			// 10/16/2002 - By David D. Cruger; Added Close/Destory
			snpTransDocs.Close();
			snpTransDocs = null;

			fso = null;

			search_off();

		}

		public bool FindContactType(int inIndex)
		{
			//aey 7/23/04 looks for index of contact type in menu list
			bool result = false;
			int I = 0;


			for (int i_2 = 0; i_2 <= mnuChangeContactType.Length - 1; i_2++)
			{
				if (!(mnuChangeContactType[i_2] is null))
				{
					I = ControlArrayHelper.GetControlIndex(mnuChangeContactType[i_2]);
					if (I == inIndex)
					{ //success
						result = true;
						break;
					}

					if (I > inIndex)
					{ //quit if we have gone past
						break;
					}

				}
			}


			return result;
		}

		private void GetDocLogNote(int inID)
		{

			//===============================================================================
			// Created 6/25/2003 by Keith Humpf
			// Last Modified 6/25/2003 by Keith Humpf
			//
			// The purpose of this sub is to display the Document Note
			// (and account rep) for an aircraft document that is already
			// attached to a journal record
			//===============================================================================

			string Query = "";
			ADORecordSetHelper snpDocLogNote = new ADORecordSetHelper();

			try
			{

				txtDocNotes[1].Text = modGlobalVars.cEmptyString;
				cboAcctRep[1].SelectedIndex = -1;

				if (inID > 0)
				{
					Query = $"SELECT faalog_general_note, faalog_user_id FROM FAA_Document_Log WITH(NOLOCK) WHERE faalog_id = {inID.ToString()}";

					snpDocLogNote.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

					if (!(snpDocLogNote.BOF && snpDocLogNote.EOF))
					{
						txtDocNotes[1].Text = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpDocLogNote["faalog_general_note"])}").Trim();

						int tempForEndVar = cboAcctRep[1].Items.Count - 1;
						for (int I = 0; I <= tempForEndVar; I++)
						{
							if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snpDocLogNote["faalog_user_id"])}").Trim() == cboAcctRep[1].GetListItem(I))
							{
								cboAcctRep[1].SelectedIndex = I;
								break;
							}
						}

					}

					snpDocLogNote.Close();
					snpDocLogNote = null;
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"{Information.Err().Number.ToString()} - {excep.Message}");
			}

		}

		private string GetPCRecKey(int PassedJournID)
		{

			// Dim snpPCRecKey As Recordset converted to ado 7/25/05 aey
			string result = "";
			ADORecordSetHelper snpPCRecKey = new ADORecordSetHelper();

			string Query = $"SELECT journ_pcreckey FROM Journal WITH(NOLOCK) WHERE journ_id = {PassedJournID.ToString()}";

			snpPCRecKey.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpPCRecKey.BOF && snpPCRecKey.EOF))
			{
				result = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpPCRecKey["journ_pcreckey"])}").Trim();
			}
			else
			{
				result = "<None>";
			}

			snpPCRecKey.Close();

			return result;
		}

		private void ChangeTransactionDate()
		{

			string Query = "";
			string TransType = "";
			string[] tmparray = new string[]{""};
			bool fowner_flag = false; // identifies if journal is fractional sold transaction
			string MaxDate = "";
			ADORecordSetHelper adoMaxDate = new ADORecordSetHelper();
			DialogResult Ans = (DialogResult) 0;

			try
			{

				TransType = GetTransType(Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]));

				Query = $"select journ_fractsld_id from Journal where journ_fractsld_id > 0 and journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";

				fowner_flag = modAdminCommon.Exist(Query);

				modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "TransDate");

				Query = $"UPDATE Journal SET journ_date = '{DateTime.Parse(txtHistoryDate.Text).ToString("d")}', ";

				if (!modCommon.GetTransWeb(TransType))
				{
					Query = $"{Query}journ_action_date = '{DateTime.Parse(modAdminCommon.DateToday).ToString("d")}' ";
				}
				else
				{
					Query = $"{Query}journ_action_date = '1/1/1900'"; //6/25/04
				}

				Query = $"{Query} WHERE journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";

				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();

				TransDateChanged = true;

				RememberHistoryDate = DateTime.Parse(txtHistoryDate.Text).ToString("d");

				modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Transaction", "Change", ref tmparray);

				if (fowner_flag)
				{
					modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Fractional Sold", "Change", ref tmparray);
				}

				modAdminCommon.ADO_Transaction("CommitTrans");

				//aey 8/3/04
				//if this a new date and this is the most recent sale
				// then ask about updating sale date on current a/c (journ=0)
				if (lbl_gen[199].Text.ToUpper() == "CURRENT AIRCRAFT")
				{
					return;
				}
				//first determine if this is the correct history record

				Query = "SELECT MAX(journ_date) AS maxdate, journ_ac_id From Journal WITH(NOLOCK)";
				Query = $"{Query} WHERE (LEFT(journ_subcategory_code, 2) = 'WS') AND (NOT (journ_subcategory_code = 'WSCORR')) AND (NOT (RIGHT(journ_subcategory_code, 2) = 'IT')) AND ";
				Query = $"{Query}(journ_ac_id ={txt_ac_id.Text}) ";
				Query = $"{Query}GROUP BY journ_ac_id";

				adoMaxDate.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(adoMaxDate.BOF && adoMaxDate.EOF))
				{
					MaxDate = DateTimeHelper.ToString(DateTime.Parse($"{Convert.ToString(adoMaxDate["MaxDate"])}{modGlobalVars.cEmptyString}"));
					if (DateTime.Parse(MaxDate) == DateTime.Parse(txtHistoryDate.Text))
					{ // the most recent sale has been found
						// if it is the correct history record, ask if they want to carry the date foreward
						Ans = MessageBox.Show("Do you want to transfer this purchase date forward to the current record?", "Sold Date", MessageBoxButtons.YesNo);

						if (Ans == System.Windows.Forms.DialogResult.Yes)
						{
							Query = $"Update aircraft set ac_purchase_date ='{DateTime.Parse(txtHistoryDate.Text).ToString("d")}' where ac_id = {txt_ac_id.Text} and ac_journ_id=0 ";
							DbCommand TempCommand_2 = null;
							TempCommand_2 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
							TempCommand_2.CommandText = Query;
							TempCommand_2.CommandType = CommandType.Text;
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
							TempCommand_2.ExecuteNonQuery();
						}

					}
				}

				adoMaxDate.Close();
				adoMaxDate = null;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.ADO_Transaction("RollbackTrans");
				MessageBox.Show($"Error Changing Transaction Date: {excep.Message}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
				search_off();
			}

		}

		private string CheckForOwnerChange(int new_comp_id)
		{

			string result = "";
			string Msg = "";
			DialogResult Answer = (DialogResult) 0;
			string ExistQuery = "";

			result = "No";

			Select_Aircraft_Contact();

			if (!ContactRecordsetFilled)
			{ //9/29/06 mjm
				return result;
			}

			// TEMP HOLD MSW
			if ((FirstHistoricalPurchase_JournID == Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"])) && Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]) > 0 && FirstHistoricalPurchase_JournID > 0)
			{

				if (Convert.ToString(snp_AircraftContacts["cref_contact_type"]) == "96" || Convert.ToString(snp_AircraftContacts["cref_contact_type"]) == "51" || Convert.ToString(snp_AircraftContacts["cref_contact_type"]) == "52")
				{

					ExistQuery = "SELECT comp_id FROM Company WITH(NOLOCK), Aircraft_Reference WITH(NOLOCK)";
					ExistQuery = $"{ExistQuery} WHERE comp_id = {Convert.ToString(snp_AircraftContacts["cref_comp_id"])}";
					ExistQuery = $"{ExistQuery} AND comp_id = cref_comp_id AND cref_contact_type in ('00','17') ";
					//ExistQuery = ExistQuery & " AND comp_id = cref_comp_id AND cref_contact_type = '00'"
					ExistQuery = $"{ExistQuery} AND comp_journ_id = cref_journ_id AND comp_journ_id = 0";

					if (modAdminCommon.Exist(ExistQuery))
					{

						Msg = $"This is the latest transaction and the {RememberOldCompType} is currently the same as the owner/program holder.";
						Msg = $"{Msg}{Environment.NewLine}{Environment.NewLine}";
						Msg = $"{Msg}Do you want the owner to be set to the new {RememberOldCompType}?";
						Msg = $"{Msg}{Environment.NewLine}{Environment.NewLine}";
						Msg = $"{Msg}(Yes will change current owner AND {RememberOldCompType}, No will only change the {RememberOldCompType})";

						Answer = MessageBox.Show(Msg, "Change Current Owner", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
						if (Answer == System.Windows.Forms.DialogResult.Yes)
						{
							result = "Yes";
						}
						else if (Answer == System.Windows.Forms.DialogResult.No)
						{ 
							result = "No";
						}
						else
						{
							result = "Cancel";
						}

					}

				}

			}


			return result;
		}

		private string GetSubcategoryCode(int PassedJournID)
		{

			//    Dim snpSubCat As Recordset converted to ado 7/25/05 aey
			string result = "";
			ADORecordSetHelper snpSubCat = new ADORecordSetHelper();

			result = modGlobalVars.cEmptyString;

			string Query = "SELECT jcat_category_code FROM Journal WITH(NOLOCK)";
			Query = $"{Query} INNER JOIN Journal_Category WITH(NOLOCK) ON jcat_subcategory_code = journ_subcategory_code";
			Query = $"{Query} WHERE journ_id = {PassedJournID.ToString()}";

			snpSubCat.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpSubCat.BOF && snpSubCat.EOF))
			{
				result = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpSubCat["jcat_category_code"])}").Trim();
			}

			snpSubCat.Close();

			return result;
		}

		private string GetTransType(int PassedJournID)
		{

			string result = "";
			ADORecordSetHelper snpTransType = new ADORecordSetHelper(); //aey 6/25/04 converted to ado

			result = modGlobalVars.cEmptyString;

			string Query = $"SELECT journ_subcategory_code FROM Journal WITH(NOLOCK) WHERE journ_id = {PassedJournID.ToString()}";

			snpTransType.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpTransType.BOF && snpTransType.EOF))
			{
				result = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpTransType["journ_subcategory_code"])}").Trim();
			}

			snpTransType.Close();

			return result;
		}

		private void HandleModelChange()
		{

			bool SerialChanged = false;

			string strTempSerialNum = $"{($"{txt_ac_ser_no[0].Text}{modGlobalVars.cEmptyString}").Trim()}{Hyphen}" +
			                          $"{($"{txt_ac_ser_no[1].Text}{modGlobalVars.cEmptyString}").Trim()}" +
			                          $"{($"{txt_ac_ser_no[2].Text}{modGlobalVars.cEmptyString}").Trim()}";

			//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_ser_no_full.OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			SerialChanged = strTempSerialNum != Convert.ToString(adoAircraftRecordset.GetField("ac_ser_no_full").OriginalValue);

			if (MakeChanged || SerialChanged)
			{

				//The model changed... so we know we can run a delete and add transmit for the aircraft (delete OLD model, add NEW model)
				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0)
				{
					//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_amod_id.OriginalValue of type Variant is being forced to int. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
					//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_ser_no_full.OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
					modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset.GetField("ac_ser_no_full").OriginalValue), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset.GetField("ac_amod_id").OriginalValue), "Aircraft", "Delete", ref arr_Transmit_Fields);
					modAdminCommon.Record_Transmit(strTempSerialNum, Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Add", ref arr_Transmit_Fields);
				}
				else
				{

					//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_amod_id.OriginalValue of type Variant is being forced to int. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
					//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_ser_no_full.OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
					modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset.GetField("ac_ser_no_full").OriginalValue), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset.GetField("ac_amod_id").OriginalValue), "Transaction", "Delete", ref arr_Transmit_Fields);
					modAdminCommon.Record_Transmit(strTempSerialNum, Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Transaction", "Add", ref arr_Transmit_Fields);
				}

			}
			else
			{

				//The model changed... so we know we can run a delete and add transmit for the aircraft (delete OLD model, add NEW model)
				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0)
				{
					modAdminCommon.Record_Transmit(strTempSerialNum, Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Change", ref arr_Transmit_Fields);
				}
				else
				{
					modAdminCommon.Record_Transmit(strTempSerialNum, Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Transaction", "Change", ref arr_Transmit_Fields);
				}

			}

			if (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked && OnOffMarket != "On")
			{
				modAdminCommon.Record_Transmit(strTempSerialNum, Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Change", ref arr_Transmit_Fields);
			}

			modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);

			modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
			modAdminCommon.Rec_Journal_Info.journ_description = " ";
			modAdminCommon.Rec_Journal_Info.journ_account_id = " ";

			modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
			modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;

			modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
			modAdminCommon.Rec_Journal_Info.journ_status = "A";
			modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CMAKE";
			modAdminCommon.Rec_Journal_Info.journ_subject = $"Make/Model Changed From {tmpRememberMakeModel} to {cbo_amod_make_name.Text}";
			frm_Journal.DefInstance.Reference_Ac_Id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);

			Model_Change_Journ_ID = frm_Journal.DefInstance.Commit_Journal_Entry();

		}

		private void HandleSerialNumberChange()
		{
			// RTW - MODIFED BY RTW ON 4/18/2011 PER DAVID TO REMOVE THE DELETE TRANSMIT

			string strTempSerialNum = modGlobalVars.cEmptyString;
			strTempSerialNum = $"{txt_ac_ser_no[0].Text.Trim()}{Hyphen}" +
			                   $"{txt_ac_ser_no[1].Text.Trim()}" +
			                   $"{txt_ac_ser_no[2].Text.Trim()}";


			adoAircraftRecordset["ac_ser_no_full"] = strTempSerialNum;
			adoAircraftRecordset["ac_ser_no_sort"] = modCommon.Format_Ser_No_Sort(txt_ac_ser_no[0].Text.Trim(), txt_ac_ser_no[1].Text.Trim(), txt_ac_ser_no[2].Text.Trim(), Airframe_Type_Code);

			//aey 6/13/05 change historical serial numbers
			string Query = $"Update Aircraft Set ac_ser_no_full='{strTempSerialNum}', ac_ser_no_prefix='{txt_ac_ser_no[0].Text}', ac_ser_no='{txt_ac_ser_no[1].Text}', ";
			Query = $"{Query} ac_ser_no_suffix='{txt_ac_ser_no[2].Text}', ac_ser_no_sort ='{Convert.ToString(adoAircraftRecordset["ac_ser_no_sort"])}', ";
			//UPGRADE_WARNING: (1068) GetSerNoValue() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			Query = $"{Query} ac_ser_no_value={Convert.ToString(modCommon.GetSerNoValue(txt_ac_ser_no[1].Text.Trim()))} ";
			Query = $"{Query}where ac_journ_id >0 and ac_id={Convert.ToString(adoAircraftRecordset["ac_id"])} ";
			//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_ser_no_full.OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			Query = $"{Query}and ac_ser_no_full ='{Convert.ToString(adoAircraftRecordset.GetField("ac_ser_no_full").OriginalValue)}' ";

			DbCommand TempCommand = null;
			TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
			TempCommand.CommandText = Query;
			//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
			TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
			TempCommand.ExecuteNonQuery();

			modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
			modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
			modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;

			modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
			modAdminCommon.Rec_Journal_Info.journ_description = " ";
			modAdminCommon.Rec_Journal_Info.journ_account_id = " ";
			modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
			modAdminCommon.Rec_Journal_Info.journ_status = "A";
			modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CSERNO";
			//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_ser_no_full.OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			modAdminCommon.Rec_Journal_Info.journ_subject = $"Serial Number Changed From {Convert.ToString(adoAircraftRecordset.GetField("ac_ser_no_full").OriginalValue)} to {Convert.ToString(adoAircraftRecordset["ac_ser_no_full"])}";
			frm_Journal.DefInstance.Reference_Ac_Id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);

			Serial_Number_Change_Journ_ID = frm_Journal.DefInstance.Commit_Journal_Entry();

			//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_amod_id.OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset.GetField("ac_amod_id").OriginalValue)}").Trim() == ($"{modGlobalVars.cEmptyString}{cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex).ToString()}").Trim())
			{

				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0)
				{
					//The serial Number changed on a Current Aircraft so we need to "Delete" and then "Add" an aircraft transmit
					// RTW - MODIFED BY RTW ON 4/18/2011 PER DAVID TO REMOVE THE DELETE TRANSMIT
					//Call Record_Transmit(adoAircraftRecordset!ac_ser_no_full.OriginalValue, adoAircraftRecordset!AC_ID, adoAircraftRecordset!AC_Journ_id, adoAircraftRecordset!ac_amod_id.OriginalValue, "Aircraft", "Delete", arr_Transmit_Fields)
					modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Add", ref arr_Transmit_Fields);
				}
				else
				{
					modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Transaction", "Change", ref arr_Transmit_Fields);
				}

				//If the aircraft is available AND it didn't just get changed to available, we can run a delete and add from the Available aircraft
				if (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked && OnOffMarket != "On" && Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0)
				{
					modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Change", ref arr_Transmit_Fields);
				}

			}

		}

		private bool HasDocument(int inACID, int inJournID)
		{


			bool result = false;

			string Query = $"SELECT faalog_journ_id FROM FAA_Document_Log WHERE faalog_ac_id = {inACID.ToString()}";
			Query = $"{Query} AND faalog_journ_id = {inJournID.ToString()}";

			if (modAdminCommon.Exist(Query))
			{
				result = true;
			}

			return result;
		}

		private bool InAvionicsGrid(string PassedAvionic)
		{


			bool result = false;

			if (grd_AircraftAvionics.RowsCount > 0)
			{
				grd_AircraftAvionics.CurrentColumnIndex = 0;

				int tempForEndVar = grd_AircraftAvionics.RowsCount - 1;
				for (int I = 1; I <= tempForEndVar; I++)
				{
					grd_AircraftAvionics.CurrentRowIndex = I;
					if (grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim() == PassedAvionic.Trim())
					{
						return true;
					}
				}
			}
			return result;
		}

		private bool isValidACYear(string inYear)
		{

			//'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			// This function determines if the aircraft year is within
			// reasonable boundaries
			//'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

			if (inYear.Trim() == modGlobalVars.cEmptyString)
			{
				return true;
			}

			if (!Information.IsNumeric(inYear))
			{
				return false;
			}

			//----------------------------------------------------------------------
			// Should be between 1940 and the current year plus 10
			// aey 3/31/05 changed from 1950
			// aey 5/25/05 changed from 1945
			// 02/15/2007 - By David D. Cruger; Per Lucia change Year to 15+
			//----------------------------------------------------------------------
			return Conversion.Val(inYear) >= 1940 && Conversion.Val(inYear) <= DateTime.Now.Year + 15;

		}

		public void MenuEnable(string Direction)
		{
			//aey 6/17/04
			//disable or enable menu's


			bool tf = true;
			if (Direction.ToUpper() == "OFF")
			{
				tf = false;
			}

			mnu_File.Enabled = tf;
			mnu_Edit.Enabled = tf;
			mnuView.Enabled = tf;
			mnuTransactions.Enabled = tf;
			mnureport.Enabled = tf;
			mnuPubs.Enabled = tf; //aey 7/23/04
			mnuAttachedSpecs.Enabled = tf; // ddc 12/27/2007
			mnu_Help.Enabled = tf;
			cmd_Save.Enabled = tf;
			tab_aircraft_details.Enabled = tf;

		}

		private bool MoreExclusiveBrokersExist()
		{

			//    Dim snpEx As Recordset converted to ado 7/25/05 aey
			bool result = false;
			ADORecordSetHelper snpEx = new ADORecordSetHelper();

			string Query = "SELECT count(*) AS ExCount ";
			Query = $"{Query}FROM Aircraft_Reference WITH(NOLOCK) WHERE cref_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} ";
			Query = $"{Query}AND cref_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])} ";
			Query = $"{Query}AND cref_contact_type in ('93', '99')";
			snpEx.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpEx.BOF && snpEx.EOF))
			{
				result = Conversion.Val(Convert.ToString(snpEx["ExCount"])) > 1;
			}
			else
			{
				result = false;
			}

			snpEx.Close();

			return result;
		}

		private void MoveDocToDifferentAircraft()
		{

			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			string strQuery1 = "";
			string strUpdate1 = "";
			string strMsg = "";
			string strMake = "";
			string strModel = "";
			string strSerNbr = "";

			string strProcessDir = "";
			string strFromFileName = "";
			string strToFileName = "";
			string strACId = "";

			try
			{

				strACId = txtDocNotes[2].Text.Trim();

				if (strACId != "")
				{

					if (Information.IsNumeric(strACId))
					{

						strQuery1 = "SELECT amod_make_name, amod_model_name, ac_id, ac_ser_no_full ";
						strQuery1 = $"{strQuery1}FROM Aircraft WITH (NOLOCK) ";
						strQuery1 = $"{strQuery1}INNER JOIN Aircraft_Model WITH (NOLOCK) ON ac_amod_id = amod_id ";
						strQuery1 = $"{strQuery1}WHERE (ac_id = {strACId}) ";
						strQuery1 = $"{strQuery1}AND (ac_journ_id = 0) ";

						rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

						if (!rstRec1.BOF && !rstRec1.EOF)
						{

							strMake = ($"{Convert.ToString(rstRec1["amod_make_name"])} ").Trim();
							strModel = ($"{Convert.ToString(rstRec1["amod_model_name"])} ").Trim();
							strSerNbr = ($"{Convert.ToString(rstRec1["ac_ser_no_full"])} ").Trim();

							strMsg = $"Are You Sure You Want To Move This Document To{Environment.NewLine}{Environment.NewLine}";
							strMsg = $"{strMsg}{strMake} / {strModel} {strSerNbr}";

							if (MessageBox.Show(strMsg, AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
							{

								strFromFileName = modCommon.Get_FAA_Document_In_Process_File_Name(Convert.ToInt32(ado_DocLog["faalog_id"]), Convert.ToInt32(ado_DocLog["faalog_ac_id"]));
								strToFileName = modCommon.Get_FAA_Document_In_Process_File_Name(Convert.ToInt32(ado_DocLog["faalog_id"]), Convert.ToInt32(Double.Parse(strACId)));
								strProcessDir = modCommon.Return_FAA_Document_Root_Directory(($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim());

								if (File.Exists($"{strProcessDir}{strFromFileName}"))
								{

									if (!File.Exists($"{strProcessDir}{strToFileName}") || ($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim().TrimStart().ToUpper() == "NTS")
									{

										// 03/17/2014 - By David D. Cruger
										// Added Record Event For Move Document

										modAdminCommon.Record_Event("HBFAADocLog", $"Move FAA Document To Different Aircraft Document Id:=[{Convert.ToString(ado_DocLog["faalog_id"])}]  To ACId:=[{strACId}]  Note:=[{txtDocNotes[0].Text}]", Convert.ToInt32(ado_DocLog["faalog_ac_id"]), 0, 0, false);

										//Move the doc

										strUpdate1 = "UPDATE FAA_Document_Log SET ";
										strUpdate1 = $"{strUpdate1}faalog_ac_id = {strACId}, ";
										strUpdate1 = $"{strUpdate1}faalog_make_name = '{StringsHelper.Replace(strMake, "'", "''", 1, -1, CompareMethod.Binary)}', ";
										strUpdate1 = $"{strUpdate1}faalog_ser_no_full = '{StringsHelper.Replace(strSerNbr, "'", "''", 1, -1, CompareMethod.Binary)}', ";

										//----------------------------------------------------------------------------------------
										// 01/24/2017 - Per Karen/Patty; clear out the notes field and move to account rep TN01

										strUpdate1 = $"{strUpdate1}faalog_general_note = '', ";
										strUpdate1 = $"{strUpdate1}faalog_user_id = 'TN01' ";

										strUpdate1 = $"{strUpdate1}WHERE (faalog_id = {Convert.ToString(ado_DocLog["faalog_id"])}) ";

										DbCommand TempCommand = null;
										TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
										UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
										TempCommand.CommandText = strUpdate1;
										//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
										//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
										TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
										UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
										TempCommand.ExecuteNonQuery();

										if (strFromFileName != strToFileName)
										{

											File.Copy($"{strProcessDir}{strFromFileName}", $"{strProcessDir}{strToFileName}", true);
											//UPGRADE_WARNING: (2081) DeleteFile has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
											File.Delete($"{strProcessDir}{strFromFileName}");

										} // If strFromFileName <> strToFileName Then

										Fill_FAA_Doc_Grid();

									}
									else
									{
										MessageBox.Show($"A Matching Document With That Aircraft Already Exists{Environment.NewLine}{Environment.NewLine}{strToFileName}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
									} // If gfso.FileExists(strProcessDir & strToFileName) = False Or LTrim(Trim(ado_DocLog!faalog_doc_type & " ")) = "nts" Then

								}
								else
								{
									MessageBox.Show("Cannot Find Document File To Move", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
								} // If gfso.FileExists(strProcessDir & strFromFileName) = True Then

							} // If MsgBox(strMsg, vbYesNo) = vbYes Then

						}
						else
						{
							MessageBox.Show($"Aircraft Not Found{Environment.NewLine}{Environment.NewLine}Please Specify A Different ID And Try Again", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
							txtDocNotes[2].Focus();
						} // If (rstRec1.BOF = False And rstRec1.EOF = False) Then

						rstRec1.Close();

					}
					else
					{
						MessageBox.Show("Aircraft ID Must Be A Number", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
						txtDocNotes[2].Focus();
					} // If IsNumeric(strACId) = True Then

				}
				else
				{
					MessageBox.Show("You Must Specify An Aircraft ID", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
					txtDocNotes[2].Focus();
				} // If strACId <> "" Then

				rstRec1 = null;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Record_Error("MoveDocToDifferentAircraft_Error", excep.Message);
			}

		} // MoveDocToDifferentAircraft

		private void cmdCancelLease_Click()
		{

			pnl_LeaseEntry.Visible = false;
			pnl_LeaseList.Visible = true;

		}

		private void RemindUserAboutWanteds()
		{

			MessageBox.Show("Don't forget to Verify the Wanteds", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
			modAdminCommon.HasWanteds = false;

		}

		private void HandleExclusiveRep(int nPassedCompanyID, int nPassedCompanyJID, string sPassedCompanyType, int nPassedContactID)
		{

			int nRememberCompID = 0;
			int nRememberJournID = 0;
			string sCallbackDate = modGlobalVars.cEmptyString;

			if (nPassedCompanyJID == 0)
			{
				if (!SecondExclusive)
				{

					frm_PopUp.DefInstance.ComingFrom = sPassedCompanyType;
					frm_PopUp.DefInstance.EndUser = true;
					modCommon.CenterFormOnHomebaseMainForm(frm_PopUp.DefInstance);
					frm_PopUp.DefInstance.ShowDialog();

					sCallbackDate = frm_PopUp.DefInstance.CallbackDate;
				}
			}

			modAdminCommon.ADO_Transaction("BeginTrans");

			if (sPassedCompanyType == "99" && sCallbackDate != modGlobalVars.cEmptyString)
			{ // ExclusiveBroker
				if (!modAircraft.InsertExclusiveBroker(adoAircraftRecordset, nPassedCompanyID, nPassedCompanyJID, nPassedContactID, ref modGlobalVars.snp_Company, ref modGlobalVars.snp_Contacts, ref modGlobalVars.snp_Company_Phones, ref modGlobalVars.snp_Company_Btypes))
				{
					modAdminCommon.ADO_Transaction("RollbackTrans");
					MessageBox.Show("Insert Exclusive Broker Failed", "Aircraft : Insert Exclusive Broker", MessageBoxButtons.OK, MessageBoxIcon.Information);
					return;
				}

				if (!SecondExclusive)
				{

					if (!modAircraft.MakeAircraftExclusive(adoAircraftRecordset, sCallbackDate))
					{
						modAdminCommon.ADO_Transaction("RollbackTrans");
						MessageBox.Show("Make Aircraft Exclusive Failed", "Aircraft : Insert Exclusive Broker", MessageBoxButtons.OK, MessageBoxIcon.Information);
						return;
					}

					nRememberCompID = modAircraft.MakePrimaryExclusive(adoAircraftRecordset);

					if (nRememberCompID > 0)
					{
						if (!modAircraft.MakeExclusivePrimary(adoAircraftRecordset, nPassedCompanyID, nPassedContactID, nRememberCompID))
						{
							modAdminCommon.ADO_Transaction("RollbackTrans");
							MessageBox.Show("Make Exclusive Primary Failed", "Aircraft : Insert Exclusive Broker", MessageBoxButtons.OK, MessageBoxIcon.Information);
							return;
						}

					}
					else
					{
						modAdminCommon.ADO_Transaction("RollbackTrans");
						MessageBox.Show("Make Primary Exclusive Failed", "Aircraft : Insert Exclusive Broker", MessageBoxButtons.OK, MessageBoxIcon.Information);
						return;

					}

				}

			}
			else if (sPassedCompanyType == "93" && sCallbackDate != modGlobalVars.cEmptyString)
			{  // ExclusiveRep

				if (!modAircraft.InsertExclusiveRep(adoAircraftRecordset, nPassedCompanyID, nPassedCompanyJID, nPassedContactID, ref modGlobalVars.snp_Company, ref modGlobalVars.snp_Contacts, ref modGlobalVars.snp_Company_Phones, ref modGlobalVars.snp_Company_Btypes))
				{
					modAdminCommon.ADO_Transaction("RollbackTrans");
					MessageBox.Show("Insert Exclusive Rep Failed", "Aircraft : Insert Exclusive Rep", MessageBoxButtons.OK, MessageBoxIcon.Information);
					return;
				}

				if (!SecondExclusive)
				{

					if (!modAircraft.MakeAircraftExclusive(adoAircraftRecordset, sCallbackDate))
					{
						modAdminCommon.ADO_Transaction("RollbackTrans");
						MessageBox.Show("Make Aircraft Exclusive Failed", "Aircraft : Insert Exclusive Rep", MessageBoxButtons.OK, MessageBoxIcon.Information);
						return;
					}

					nRememberCompID = modAircraft.MakePrimaryExclusive(adoAircraftRecordset);

					if (nRememberCompID > 0)
					{
						if (!modAircraft.MakeExRepPrimary(adoAircraftRecordset, nPassedCompanyID, nPassedContactID, nRememberCompID))
						{
							modAdminCommon.ADO_Transaction("RollbackTrans");
							MessageBox.Show("Make Exclusive Rep Primary Failed", "Aircraft : Insert Exclusive Rep", MessageBoxButtons.OK, MessageBoxIcon.Information);
							return;
						}

					}
					else
					{
						modAdminCommon.ADO_Transaction("RollbackTrans");
						MessageBox.Show("Make Primary Exclusive Failed", "Aircraft : Insert Exclusive Rep", MessageBoxButtons.OK, MessageBoxIcon.Information);
						return;

					}

				}

			}
			else if (sPassedCompanyType == "99" && SecondExclusive)
			{  // ExclusiveBroker

				if (!modAircraft.InsertExclusiveBroker(adoAircraftRecordset, nPassedCompanyID, nPassedCompanyJID, nPassedContactID, ref modGlobalVars.snp_Company, ref modGlobalVars.snp_Contacts, ref modGlobalVars.snp_Company_Phones, ref modGlobalVars.snp_Company_Btypes))
				{
					modAdminCommon.ADO_Transaction("RollbackTrans");
					MessageBox.Show("Insert Exclusive Broker Failed", "Aircraft : Insert Exclusive Broker", MessageBoxButtons.OK, MessageBoxIcon.Information);
					return;
				}


			}
			else if (sPassedCompanyType == "93" && SecondExclusive)
			{  // ExclusiveRep

				if (!modAircraft.InsertExclusiveRep(adoAircraftRecordset, nPassedCompanyID, nPassedCompanyJID, nPassedContactID, ref modGlobalVars.snp_Company, ref modGlobalVars.snp_Contacts, ref modGlobalVars.snp_Company_Phones, ref modGlobalVars.snp_Company_Btypes))
				{
					modAdminCommon.ADO_Transaction("RollbackTrans");
					MessageBox.Show("Insert Exclusive Rep Failed", "Aircraft : Insert Exclusive Rep", MessageBoxButtons.OK, MessageBoxIcon.Information);
					return;
				}

			}
			else
			{
				return;
			}

			// ADDED MSW/RTW 5/20/15
			if (SecondExclusive)
			{
				modCommon.InsertPriorityEvent("ACOEX", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, $" With {modCommon.GetCompanyName(nPassedCompanyID, 0)}", nPassedCompanyID, nPassedContactID, "Y");

				modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
				// Rec_Journal_Info.journ_subcategory_code = "ACOEX"
				modAdminCommon.Rec_Journal_Info.journ_subject = $"Added Co-Exclusive with {modCommon.GetCompanyName(nPassedCompanyID, 0)}";
				modAdminCommon.Rec_Journal_Info.journ_description = " ";
				modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);

				modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
				modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;

				modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
				modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
				modAdminCommon.Rec_Journal_Info.journ_status = "A";

				modAdminCommon.EventTempCompName = modCommon.GetCompanyName(nPassedCompanyID, 0);
				modAdminCommon.EventTempCompID = nPassedCompanyID;
				modAdminCommon.EventTempContactID = nPassedContactID;

				nRememberJournID = frm_Journal.DefInstance.Commit_Journal_Entry();


				if (nRememberJournID > 0)
				{

					modAdminCommon.ADO_Transaction("CommitTrans");
					frm_Journal.DefInstance.Reference_Journal_ID = nRememberJournID;
					modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
					frm_Journal.DefInstance.ShowDialog();
					this.Activate();
					search_off();

				}
				else
				{
					modAdminCommon.ADO_Transaction("RollbackTrans");
					MessageBox.Show("The journal entry was not inserted.", "Aircraft : Insert Not Done", MessageBoxButtons.OK, MessageBoxIcon.Information);
					return;
				}
			}


			if (!SecondExclusive)
			{

				Select_Aircraft_Contact();

				if (!ContactRecordsetFilled)
				{ //9/29/06 mjm
					return;
				}

				modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "EXON";
				modAdminCommon.Rec_Journal_Info.journ_subject = "On Exclusive";
				modAdminCommon.Rec_Journal_Info.journ_description = " ";
				modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);

				modAdminCommon.Rec_Journal_Info.journ_comp_id = nPassedCompanyID;
				modAdminCommon.Rec_Journal_Info.journ_contact_id = nPassedContactID;

				modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
				modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
				modAdminCommon.Rec_Journal_Info.journ_status = "A";

				modAdminCommon.EventTempCompName = modCommon.GetCompanyName(nPassedCompanyID, 0);
				modAdminCommon.EventTempCompID = nPassedCompanyID;
				modAdminCommon.EventTempContactID = nPassedContactID;

				nRememberJournID = frm_Journal.DefInstance.Commit_Journal_Entry();

				if (nRememberJournID > 0)
				{

					modAdminCommon.ADO_Transaction("CommitTrans");
					frm_Journal.DefInstance.Reference_Journal_ID = nRememberJournID;
					modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
					frm_Journal.DefInstance.ShowDialog();
					this.Activate();
					search_off();

				}
				else
				{
					modAdminCommon.ADO_Transaction("RollbackTrans");
					MessageBox.Show("The journal entry was not inserted.", "Aircraft : Insert Not Done", MessageBoxButtons.OK, MessageBoxIcon.Information);
					return;
				}
			}
			else
			{
				// if we were in a transaction then commit it if we started it
				if (modAdminCommon.ADO_Transaction("CheckStatus") == 1)
				{
					modAdminCommon.ADO_Transaction("CommitTrans");
				}

			}

			NeedToSaveContactTransmits = true;

			Select_Aircraft();

		}

		private bool CheckSpecialRemoveCompanyAssociations()
		{

			bool result = false;
			string Query = "";

			result = true;

			Select_Aircraft_Contact();

			if (!ContactRecordsetFilled)
			{ //9/29/06 mjm
				return result;
			}

			if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_transmit_seq_no"])}").Trim() == "2" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_transmit_seq_no"])}").Trim() == "6")
			{

				Query = "SELECT cref_transmit_seq_no ";
				Query = $"{Query}FROM Aircraft_Reference WITH(NOLOCK) ";
				Query = $"{Query}WHERE (cref_transmit_seq_no = 7 ";
				Query = $"{Query}OR cref_transmit_seq_no = 8) ";
				Query = $"{Query}AND cref_comp_id = {Convert.ToString(snp_AircraftContacts["cref_comp_id"])} ";
				Query = $"{Query}AND cref_ac_id = {Convert.ToString(snp_AircraftContacts["cref_ac_id"])}";

				if (modAdminCommon.Exist(Query))
				{

					if (MessageBox.Show($"You have other contacts associated with this one.{Environment.NewLine}They will no longer be sent to customers.{Environment.NewLine}{Environment.NewLine}Do you want to continue?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
					{
						return false;
					}
					else
					{
						Query = "UPDATE Aircraft_Reference ";
						Query = $"{Query}SET cref_transmit_seq_no = 99 ";
						Query = $"{Query}WHERE cref_ac_id = {Convert.ToString(snp_AircraftContacts["cref_ac_id"])}";
						Query = $"{Query} AND cref_comp_id = {Convert.ToString(snp_AircraftContacts["cref_comp_id"])}";
						Query = $"{Query} AND cref_journ_id = 0";
						Query = $"{Query} AND (cref_transmit_seq_no = 7 OR cref_transmit_seq_no = 8)";

						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Query;
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery(); //6/10/04 aey

					}
				}
			}

			return result;
		}

		private void DisableAllCompanyHistoryOptions()
		{

			int I = 0;

			// The menu indicies do not go in order (they correspond to the contact type)
			// therefore we need to 'On Error Resume Next' otherwise it will get mad when
			// it finds one that isn't real

			//mnuHistoricalTransaction list: 0,8,12,27,51,52,53,54,56,60,61,62,69,70,91,95,96 '7/12/04
			//For i = mnuChangeContactType.LBound To mnuChangeContactType.UBound
			//    mnuChangeContactType(i).Enabled = False
			//Next i

			mnuChangeContactType[0].Enabled = false;
			ErrorHandlingHelper.ResumeNext( // Change Owner
				() => {mnuChangeContactType[8].Enabled = false;},  // Change Co-Owner
				() => {mnuChangeContactType[12].Enabled = false;},  // Change Lesse
				() => {mnuChangeContactType[13].Enabled = false;},  // Change Lessor
				() => {mnuChangeContactType[27].Enabled = false;},  // Change Trustee
				() => {mnuChangeContactType[39].Enabled = false;},  // Change Sub-Lessee
				() => {mnuChangeContactType[51].Enabled = false;},  // Change Seized By
				() => {mnuChangeContactType[52].Enabled = false;},  // Change Foreclosed By
				() => {mnuChangeContactType[53].Enabled = false;},  // Change Financials On Behalf Of
				() => {mnuChangeContactType[54].Enabled = false;},  // Change Financials In Favor Of
				() => {mnuChangeContactType[56].Enabled = false;},  // Change Previous Owner
				() => {mnuChangeContactType[60].Enabled = false;},  // Change Registered As Seller
				() => {mnuChangeContactType[61].Enabled = false;},  // Change Registered As Purchaser
				() => {mnuChangeContactType[62].Enabled = false;},  // Change Registered As Owner
				() => {mnuChangeContactType[69].Enabled = false;},  // Change Fraction Seller
				() => {mnuChangeContactType[91].Enabled = false;},  // Change Fractional Owner Pending Sale
				() => {mnuChangeContactType[96].Enabled = false;},  // Change Purchaser
				() => {mnuConvertFSPEND.Enabled = false;}, 
				() => {mnuChangeHistPercentage.Enabled = false;});

		}

		private void DisableAllCompanyTransmitOptions()
		{

			mnuSendAsOwner.Enabled = false;
			mnuSendAsOperator.Enabled = false;
			mnuSendAsChiefPilot.Enabled = false;
			mnuSendAsExclusiveBroker.Enabled = false;
			mnuSendAsExclusiveRepresentative.Enabled = false;
			mnuSendAsAdditional1.Enabled = false;
			mnuSendAsAdditional2.Enabled = false;
			mnuSendAsAdditional3.Enabled = false;
			mnuSendAsRegisteredAsOwner.Enabled = false;
			mnuSendAsPurchaser.Enabled = false;
			mnuSendAsRegisteredAsPurchaser.Enabled = false;
			mnuDoNotSend.Enabled = false;

		}


		private void GetSerialPrefixSuffix(int PassedModelID)
		{

			ADORecordSetHelper snpModelPrefixSuffix = new ADORecordSetHelper();

			string Query = $"SELECT amod_ser_no_prefix, amod_ser_no_suffix FROM Aircraft_Model WITH(NOLOCK) WHERE amod_id = {PassedModelID.ToString()}";

			snpModelPrefixSuffix.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpModelPrefixSuffix.BOF && snpModelPrefixSuffix.EOF))
			{
				snpModelPrefixSuffix.MoveFirst();
				if (txt_ac_ser_no[0].Text != ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpModelPrefixSuffix["amod_ser_no_prefix"])}").Trim())
				{
					txt_ac_ser_no[0].Font = txt_ac_ser_no[0].Font.Change(bold:true);
				}
				else
				{
					txt_ac_ser_no[0].Font = txt_ac_ser_no[0].Font.Change(bold:false);
				}

				if (txt_ac_ser_no[2].Text != ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpModelPrefixSuffix["amod_ser_no_suffix"])}").Trim())
				{
					txt_ac_ser_no[2].Font = txt_ac_ser_no[2].Font.Change(bold:true);
				}
				else
				{
					txt_ac_ser_no[2].Font = txt_ac_ser_no[2].Font.Change(bold:false);
				}

			}

			snpModelPrefixSuffix.Close();

		}

		private void GetJournalNotes()
		{

			ADORecordSetHelper snpJournNotes = new ADORecordSetHelper();

			string Query = "SELECT journ_customer_note, journ_description FROM Journal WITH(NOLOCK)";
			Query = $"{Query} WHERE journ_id = {tmp_ac_journ_id.ToString()}";

			snpJournNotes.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpJournNotes.BOF && snpJournNotes.EOF))
			{
				txt_customer_notes.Text = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpJournNotes["journ_customer_note"])}").Trim();
				txt_internal_notes.Text = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpJournNotes["journ_description"])}").Trim();
			}

			snpJournNotes.Close();

		}

		private void RetrieveSpecs(int inJournID)
		{
			// applies historical specs to current aircraft
			// first fills form with historical information
			// then saves data to current a/c record

			ADORecordSetHelper snpSpecs = new ADORecordSetHelper(); //aey 6/10/04

			bolRetrieveSpecs = true;
			SpecsJournID = inJournID; //***  SpecsJournID is used by fill_grid functions to populate grids

			string Query = $"SELECT * FROM Aircraft WITH(NOLOCK) WHERE ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} AND ac_journ_id = {inJournID.ToString()}";

			//*******************************************
			//put old a/c information in snpSpecs
			//******************************************
			snpSpecs.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpSpecs.BOF && snpSpecs.EOF))
			{
				tmp_ac_journ_id = 0;
				Select_Aircraft(); //******* Re-Select current a/c *************

				//*************************************************
				//populate current a/c data from historical record
				//**************************************************

				adoAircraftRecordset["ac_times_as_of_date"] = snpSpecs["ac_times_as_of_date"];
				adoAircraftRecordset["ac_airframe_tot_hrs"] = snpSpecs["ac_airframe_tot_hrs"];
				adoAircraftRecordset["ac_airframe_tot_landings"] = snpSpecs["ac_airframe_tot_landings"];
				adoAircraftRecordset["ac_engine_maint_prog"] = snpSpecs["ac_engine_maint_prog"];
				adoAircraftRecordset["ac_engine_1_tot_hrs"] = snpSpecs["ac_engine_1_tot_hrs"];
				adoAircraftRecordset["ac_engine_2_tot_hrs"] = snpSpecs["ac_engine_2_tot_hrs"];
				adoAircraftRecordset["ac_engine_3_tot_hrs"] = snpSpecs["ac_engine_3_tot_hrs"];
				adoAircraftRecordset["ac_engine_4_tot_hrs"] = snpSpecs["ac_engine_4_tot_hrs"];
				adoAircraftRecordset["ac_engine_1_soh_hrs"] = snpSpecs["ac_engine_1_soh_hrs"];
				adoAircraftRecordset["ac_engine_2_soh_hrs"] = snpSpecs["ac_engine_2_soh_hrs"];
				adoAircraftRecordset["ac_engine_3_soh_hrs"] = snpSpecs["ac_engine_3_soh_hrs"];
				adoAircraftRecordset["ac_engine_4_soh_hrs"] = snpSpecs["ac_engine_4_soh_hrs"];
				adoAircraftRecordset["ac_engine_1_shi_hrs"] = snpSpecs["ac_engine_1_shi_hrs"];
				adoAircraftRecordset["ac_engine_2_shi_hrs"] = snpSpecs["ac_engine_2_shi_hrs"];
				adoAircraftRecordset["ac_engine_3_shi_hrs"] = snpSpecs["ac_engine_3_shi_hrs"];
				adoAircraftRecordset["ac_engine_4_shi_hrs"] = snpSpecs["ac_engine_4_shi_hrs"];
				adoAircraftRecordset["ac_prop_1_soh_hrs"] = snpSpecs["ac_prop_1_soh_hrs"];
				adoAircraftRecordset["ac_prop_2_soh_hrs"] = snpSpecs["ac_prop_2_soh_hrs"];
				adoAircraftRecordset["ac_prop_1_soh_moyear"] = snpSpecs["ac_prop_1_soh_moyear"];
				adoAircraftRecordset["ac_prop_2_soh_moyear"] = snpSpecs["ac_prop_2_soh_moyear"];
				adoAircraftRecordset["ac_apu_tot_hrs"] = snpSpecs["ac_apu_tot_hrs"];
				adoAircraftRecordset["ac_apu_soh_hrs"] = snpSpecs["ac_apu_soh_hrs"];
				//adoAircraftRecordset!ac_certification = snpSpecs!ac_certification '6/3/04 aey
				adoAircraftRecordset["ac_maint_prog_name"] = snpSpecs["ac_maint_prog_name"];
				adoAircraftRecordset["ac_maint_eoh_by_name"] = snpSpecs["ac_maint_eoh_by_name"];
				adoAircraftRecordset["ac_maint_hots_by_name"] = snpSpecs["ac_maint_hots_by_name"];
				adoAircraftRecordset["ac_interior_rating"] = snpSpecs["ac_interior_rating"];
				adoAircraftRecordset["ac_interior_moyear"] = snpSpecs["ac_interior_moyear"];
				adoAircraftRecordset["ac_exterior_rating"] = snpSpecs["ac_exterior_rating"];
				adoAircraftRecordset["ac_exterior_moyear"] = snpSpecs["ac_exterior_moyear"];
				adoAircraftRecordset["ac_passenger_count"] = snpSpecs["ac_passenger_count"];
				adoAircraftRecordset["ac_engine_1_snew_cycles"] = snpSpecs["ac_engine_1_snew_cycles"];
				adoAircraftRecordset["ac_engine_2_snew_cycles"] = snpSpecs["ac_engine_2_snew_cycles"];
				adoAircraftRecordset["ac_engine_3_snew_cycles"] = snpSpecs["ac_engine_3_snew_cycles"];
				adoAircraftRecordset["ac_engine_4_snew_cycles"] = snpSpecs["ac_engine_4_snew_cycles"];
				adoAircraftRecordset["ac_engine_1_soh_cycles"] = snpSpecs["ac_engine_1_soh_cycles"];
				adoAircraftRecordset["ac_engine_2_soh_cycles"] = snpSpecs["ac_engine_2_soh_cycles"];
				adoAircraftRecordset["ac_engine_3_soh_cycles"] = snpSpecs["ac_engine_3_soh_cycles"];
				adoAircraftRecordset["ac_engine_4_soh_cycles"] = snpSpecs["ac_engine_4_soh_cycles"];
				adoAircraftRecordset["ac_engine_1_shs_cycles"] = snpSpecs["ac_engine_1_shs_cycles"];
				adoAircraftRecordset["ac_engine_2_shs_cycles"] = snpSpecs["ac_engine_2_shs_cycles"];
				adoAircraftRecordset["ac_engine_3_shs_cycles"] = snpSpecs["ac_engine_3_shs_cycles"];
				adoAircraftRecordset["ac_engine_4_shs_cycles"] = snpSpecs["ac_engine_4_shs_cycles"];
				adoAircraftRecordset["ac_prop_1_snew_hrs"] = snpSpecs["ac_prop_1_snew_hrs"];
				adoAircraftRecordset["ac_prop_2_snew_hrs"] = snpSpecs["ac_prop_2_snew_hrs"];
				adoAircraftRecordset["ac_prop_3_snew_hrs"] = snpSpecs["ac_prop_3_snew_hrs"];
				adoAircraftRecordset["ac_prop_4_snew_hrs"] = snpSpecs["ac_prop_4_snew_hrs"];
				adoAircraftRecordset["ac_prop_1_soh_hrs"] = snpSpecs["ac_prop_1_soh_hrs"];
				adoAircraftRecordset["ac_prop_2_soh_hrs"] = snpSpecs["ac_prop_2_soh_hrs"];
				adoAircraftRecordset["ac_prop_3_soh_hrs"] = snpSpecs["ac_prop_3_soh_hrs"];
				adoAircraftRecordset["ac_prop_4_soh_hrs"] = snpSpecs["ac_prop_4_soh_hrs"];
				//adoAircraftRecordset!ac_prop_3_soh_moyear = snpSpecs!ac_prop_3_soh_moyear
				adoAircraftRecordset["ac_prop_1_soh_moyear"] = snpSpecs["ac_prop_1_soh_moyear"];
				adoAircraftRecordset["ac_prop_2_soh_moyear"] = snpSpecs["ac_prop_2_soh_moyear"];
				adoAircraftRecordset["ac_prop_3_soh_moyear"] = snpSpecs["ac_prop_3_soh_moyear"];
				adoAircraftRecordset["ac_prop_4_soh_moyear"] = snpSpecs["ac_prop_4_soh_moyear"];
				adoAircraftRecordset["ac_apu_maint_prog"] = snpSpecs["ac_apu_maint_prog"];
				adoAircraftRecordset["ac_apu_shi_hrs"] = snpSpecs["ac_apu_shi_hrs"];
				//''''''
				// Changed field name from ac_warranty_notes to ac_maintained - 6/17/2002 kth
				//adoAircraftRecordset!ac_warranty_notes = snpSpecs!ac_warranty_notes
				adoAircraftRecordset["ac_maintained"] = snpSpecs["ac_maintained"];
				adoAircraftRecordset["ac_maint_tracking_name"] = snpSpecs["ac_maint_tracking_name"];
				adoAircraftRecordset["ac_main_eoh_moyear"] = snpSpecs["ac_main_eoh_moyear"];
				adoAircraftRecordset["ac_maint_hots_moyear"] = snpSpecs["ac_maint_hots_moyear"];
				adoAircraftRecordset["ac_interior_doneby_name"] = snpSpecs["ac_interior_doneby_name"];
				adoAircraftRecordset["ac_exterior_doneby_name"] = snpSpecs["ac_exterior_doneby_name"];
				adoAircraftRecordset["ac_interior_config_name"] = snpSpecs["ac_interior_config_name"];

				Display_Aircraft(); // display old information on screen

				//flag fields as changed
				int tempForEndVar = adoAircraftRecordset.FieldsMetadata.Count - 1;
				for (int I = 0; I <= tempForEndVar; I++)
				{
					adoAircraftRecordset[I] = adoAircraftRecordset.GetField(I).OriginalValue;
				}

				bAvionicsChanged = true;
				bKeyFeaturesChanged = true;
				bKeyFeature1 = true;
				bKeyFeature2 = true;
				bKeyFeature3 = true;
				bKeyFeature4 = true;
				bKeyFeature5 = true;
				bKeyFeature6 = true;
				bKeyFeatureDamage = true;
				bFAAChanged = true;
				bLeaseChanged = true;
				MaintenanceGridChanged = true;
				MaintenanceInspectionChanged = true;
				InteriorGridChanged = true;
				InteriorLavatoryChanged = true;
				InteriorAirConditioningChanged = true;
				ExteriorGridChanged = true;
				ExteriorColorsChanged = true;
				EquipmentGridChanged = true;
				EquipmentGeneralChanged = true;
				CockpitGridChanged = true;
				CockpitGeneralChanged = true;

			}

			snpSpecs.Close();
			snpSpecs = null;
			bolRetrieveSpecs = false;
			SpecsJournID = 0;

		}

		private void Save_Helicopter_Grid()
		{
			//save the contents of the helicopter grid
			//Process: Delete then add
			//8/10/05 aey

			StringBuilder Query = new StringBuilder();
			int K = 0;
			string exists_select = "";

			try
			{

				modAdminCommon.ADO_Transaction("BeginTrans");

				Query = new StringBuilder($"DELETE FROM Helicopter_Detail_Times WHERE heldt_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}");
				Query.Append($" and heldt_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}");

				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query.ToString();
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();
				modAdminCommon.ADO_Transaction("CommitTrans");

				//ADDED MSW - 9/12/18
				JetNetSupport.PInvoke.SafeNative.kernel32.Sleep(10);
				JetNetSupport.PInvoke.SafeNative.kernel32.Sleep(10);
				Application.DoEvents();
				Application.DoEvents();
				JetNetSupport.PInvoke.SafeNative.kernel32.Sleep(10);
				JetNetSupport.PInvoke.SafeNative.kernel32.Sleep(10);
				Application.DoEvents();
				Application.DoEvents();
				JetNetSupport.PInvoke.SafeNative.kernel32.Sleep(10);
				JetNetSupport.PInvoke.SafeNative.kernel32.Sleep(10);

				modAdminCommon.ADO_Transaction("BeginTrans");
				int tempForEndVar = GrdHelicopter.RowsCount - 1;
				for (K = 1; K <= tempForEndVar; K++)
				{
					GrdHelicopter.CurrentRowIndex = K;
					GrdHelicopter.CurrentColumnIndex = 0; //category code

					if (GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
					{

						exists_select = $" select * from Helicopter_Detail_Times with (NOLOCK) where heldt_ac_id =  {Convert.ToString(adoAircraftRecordset["ac_id"])}";
						exists_select = $"{exists_select} and heldt_journ_id = 0 ";
						GrdHelicopter.CurrentColumnIndex = 0;
						exists_select = $"{exists_select} and heldt_category_type = '{GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Substring(0, Math.Min(40, GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Length)).Trim()}' ";
						GrdHelicopter.CurrentColumnIndex = 1; //sub cat
						exists_select = $"{exists_select} and heldt_subcat_type = '{GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Substring(0, Math.Min(40, GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Length)).Trim()}' ";
						GrdHelicopter.CurrentColumnIndex = 2; //ser no full
						exists_select = $"{exists_select} and heldt_ser_no_full = '{modAdminCommon.Fix_Quote(GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Substring(0, Math.Min(20, GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Length))).Trim()}' ";
						//    exists_select = exists_select & " and heldt_ttsn = "
						//    If Trim$(GrdHelicopter.Text) = cEmptyString Then
						//        exists_select = exists_select & "'NULL'"
						//    Else
						//        exists_select = exists_select & "'" & Trim$(Replace(GrdHelicopter.Text, ",", cEmptyString)) & "'"
						//    End If
						//
						//    exists_select = exists_select & " and heldt_remaining_hours = '" & Trim$(left$(GrdHelicopter.Text, 40)) & "' "
						//    If Trim$(GrdHelicopter.Text) = cEmptyString Then
						//        exists_select = exists_select & "NULL,"
						//    Else
						//        exists_select = exists_select & Trim$(Replace(GrdHelicopter.Text, ",", cEmptyString)) & ","
						//    End If
						//
						//    exists_select = exists_select & " and heldt_soh = '" & Trim$(left$(GrdHelicopter.Text, 40)) & "' "
						//     If Trim$(GrdHelicopter.Text) = cEmptyString Then
						//        exists_select = exists_select & "NULL)"
						//    Else
						//        exists_select = exists_select & Trim$(Replace(GrdHelicopter.Text, ",", cEmptyString)) & ")"
						//    End If

						if (!modAdminCommon.Exist(exists_select))
						{

							Query = new StringBuilder("INSERT INTO Helicopter_Detail_Times (heldt_ac_id, heldt_journ_id, heldt_category_type, heldt_subcat_type, heldt_ser_no_full,");
							Query.Append("heldt_ttsn, heldt_remaining_hours, heldt_soh) ");
							Query.Append($"Values({Convert.ToString(adoAircraftRecordset["ac_id"])},{Convert.ToString(adoAircraftRecordset["ac_journ_id"])},");
							GrdHelicopter.CurrentColumnIndex = 0;
							Query.Append($"'{GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Substring(0, Math.Min(40, GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Length)).Trim()}',");

							GrdHelicopter.CurrentColumnIndex = 1; //sub cat
							Query.Append($"'{GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Substring(0, Math.Min(40, GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Length)).Trim()}',");

							GrdHelicopter.CurrentColumnIndex = 2; //ser no full
							Query.Append($"'{modAdminCommon.Fix_Quote(GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Substring(0, Math.Min(20, GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Length))).Trim()}',");

							GrdHelicopter.CurrentColumnIndex = 3; //ttsn
							if (GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Trim() == modGlobalVars.cEmptyString)
							{
								Query.Append("NULL,");
							}
							else
							{
								Query.Append($"{StringsHelper.Replace(GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString(), ",", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary).Trim()},");
							}
							GrdHelicopter.CurrentColumnIndex = 4; //remaining hours
							if (GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Trim() == modGlobalVars.cEmptyString)
							{
								Query.Append("NULL,");
							}
							else
							{
								Query.Append($"{StringsHelper.Replace(GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString(), ",", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary).Trim()},");
							}
							GrdHelicopter.CurrentColumnIndex = 5; //soh
							if (GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Trim() == modGlobalVars.cEmptyString)
							{
								Query.Append("NULL)");
							}
							else
							{
								Query.Append($"{StringsHelper.Replace(GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString(), ",", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary).Trim()})");
							}

							DbCommand TempCommand_2 = null;
							TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
							TempCommand_2.CommandText = Query.ToString();
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
							TempCommand_2.ExecuteNonQuery();
						}


					}

				}

				modAdminCommon.ADO_Transaction("CommitTrans");
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Save_Helicopter_Grid_Error ({Information.Err().Number.ToString()}) {excep.Message} {excep.Source}{Environment.NewLine}Row: {K.ToString()}{Environment.NewLine}AC ID: {Convert.ToString(adoAircraftRecordset["ac_id"])}{Environment.NewLine}Journ ID: {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}{Environment.NewLine}");
				modAdminCommon.ADO_Transaction("RollbackTrans");
			}

		}

		public void SaveAircraftContactTransmits()
		{
			bool SaveAircraftContactTransmits_Error = false;

			try
			{
				SaveAircraftContactTransmits_Error = true;

				int ArrayCount = 0;
				ArrayCount = 0;
				string strPrefix = "";
				bool bStartTrans = false;
				bStartTrans = false;

				int tempForEndVar = modAdminCommon.arrCurrentKeyACContacts.GetUpperBound(0);
				for (int I = 1; I <= tempForEndVar; I++)
				{
					//      ' check for change in company or contact
					// RTW - LEFT THIS RESUME NEXT SINCE IT WAS ONLY APPLYING TO A FEW LINES AND I DIDN'T KNOW WHY
					if (modAdminCommon.arrPriorKeyACContacts[I, 1] != modAdminCommon.arrCurrentKeyACContacts[I, 1] || modAdminCommon.arrPriorKeyACContacts[I, 2] != modAdminCommon.arrCurrentKeyACContacts[I, 2])
					{
						Exception ex = null;
						ErrorHandlingHelper.ResumeNext(out ex);
						if (ex != null)
						{
							try
							{
								Information.Err().Clear();
								SaveAircraftContactTransmits_Error = false;

								break;
							}
							catch
							{
							}
						}

						switch(I)
						{
							case 1 : 
								strPrefix = "owner_"; 
								break;
							case 2 : 
								strPrefix = "operator_"; 
								break;
							case 3 : 
								strPrefix = "chp_"; 
								break;
							case 4 : 
								strPrefix = "excbrk1_"; 
								break;
							case 5 : 
								strPrefix = "excbrk2_"; 
								break;
							case 6 : 
								strPrefix = "alt1_"; 
								break;
							case 7 : 
								strPrefix = "alt2_"; 
								break;
							case 8 : 
								strPrefix = "alt3_"; 
								break;
							case 9 : 
								strPrefix = "owner_regas_"; 
								 
								break;
						}

						// 10=Purchaser
						// 11=Registered As Purchaser

						if (modAdminCommon.arrPriorKeyACContacts[I, 1] != modAdminCommon.arrCurrentKeyACContacts[I, 1])
						{
							ErrorHandlingHelper.ResumeNext( // check for company changes
									//           redim transmit array to arraycount+X ' based on the number of company fields to be added

								() => {Add_To_Transmit_List($"{strPrefix}comp_name");}, 
								() => {Add_To_Transmit_List($"{strPrefix}comp_address");}, 
								() => {Add_To_Transmit_List($"{strPrefix}comp_city");}, 
								() => {Add_To_Transmit_List($"{strPrefix}comp_state");}, 
								() => {Add_To_Transmit_List($"{strPrefix}comp_zip_code");}, 
								() => {Add_To_Transmit_List($"{strPrefix}contact_phone1");}, 
								() => {Add_To_Transmit_List($"{strPrefix}contact_phone2");}, 

									//             ' .... state,zip, address, country, x,y,z
								() => {ArrayCount += 7;});
						} // if company change

						if (modAdminCommon.arrPriorKeyACContacts[I, 2] != modAdminCommon.arrCurrentKeyACContacts[I, 2])
						{
							ErrorHandlingHelper.ResumeNext( // check for contact changes
									//            redim transmit array to arraycount+X ' based on the number of contact fields to be added

								() => {Add_To_Transmit_List($"{strPrefix}contact_name");}, 
								() => {Add_To_Transmit_List($"{strPrefix}contact_phone1");}, 
								() => {Add_To_Transmit_List($"{strPrefix}contact_phone2");}, 
								() => {Add_To_Transmit_List($"{strPrefix}contact_email_address");}, 

									//            transmitarray(ArrayCount) = strPrefix & "contact_name"
									//            transmitarray(ArrayCount + 1) = strPrefix & "contact_title"
									// .... state,zip, address, country, x,y,z
								() => {ArrayCount += 3;});
						} // if contact change
						//
					} // was there a change to the company or contact in the array
				}

				if (ArrayCount > 0)
				{ // we have transmits to send
					//    build header data
					//   build ac transmit (array,y)

					// if we are not in a transaction and start one
					if (modAdminCommon.ADO_Transaction("CheckStatus") == 0)
					{
						modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "SaveTrans");
						bStartTrans = true;
					}

					if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0)
					{
						modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Transaction", "Change", ref arr_Transmit_Fields);
					}
					else
					{
						modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Change", ref arr_Transmit_Fields);
						if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_forsale_flag"])}").Trim() == "Y")
						{
							modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Change", ref arr_Transmit_Fields);
						}
					}

					// if we were in a transaction then commit it if we started it
					if (modAdminCommon.ADO_Transaction("CheckStatus") == 1 && bStartTrans)
					{
						modAdminCommon.ADO_Transaction("CommitTrans");
					}

				}

				AssociateCompanyFlag = false; //aey 12/20/04
			}
			catch (Exception excep)
			{
				if (!SaveAircraftContactTransmits_Error)
				{
					throw excep;
				}
				if (SaveAircraftContactTransmits_Error)
				{

					modAdminCommon.Report_Error($"SaveAircraftContactTransmits_Error:{excep.Message}");
				}
			}

		}

		private bool RemoveAircraftFromExclusive()
		{
			//
			// This function:
			// 1. resets the the aircraft exclusive flag to not exclusive
			// 2. removes the exclusive broker and representative
			// 3. records an aircraft change transmit and an availability change record
			// 4. inserts a journal entry.
			//
			bool result = false;
			string strQuery1 = "";
			string strUpdate1 = "";
			string strDelete1 = "";

			string strOwner = "";
			int lOwrCompId = 0;
			int lOWRContactId = 0;

			string strBroker = "";
			int lEXBCompId = 0;
			int lEXBContactId = 0;

			try
			{

				strOwner = "";
				lOwrCompId = 0;
				lOWRContactId = 0;

				strBroker = "";
				lEXBCompId = 0;
				lEXBContactId = 0;

				result = true;

				strOwner = modAircraft.GetCurrentOwner(Convert.ToInt32(adoAircraftRecordset["ac_id"]));
				lOwrCompId = modAircraft.GetOwnerCompanyID(Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0);
				lOWRContactId = modAircraft.GetOwnerContactID(Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0);

				modAircraft.Return_Aircraft_Exclusive_Broker_CompName_CompId_ContactId(Convert.ToInt32(adoAircraftRecordset["ac_id"]), ref strBroker, ref lEXBCompId, ref lEXBContactId);

				tmpExclusiveBroker = strBroker;

				//======================
				// remove the exclusive broker classifications
				strUpdate1 = "UPDATE Aircraft SET ";
				strUpdate1 = $"{strUpdate1}ac_exclusive_flag = 'N', ";
				strUpdate1 = $"{strUpdate1}ac_exclusive_verify_date = NULL, ";
				strUpdate1 = $"{strUpdate1}ac_action_date = NULL ";
				strUpdate1 = $"{strUpdate1}WHERE ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} ";
				strUpdate1 = $"{strUpdate1}AND ac_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";
				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = strUpdate1;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();

				// remove the references associated with exclusive brokers
				strDelete1 = "DELETE FROM Aircraft_Reference ";
				strDelete1 = $"{strDelete1}WHERE cref_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
				strDelete1 = $"{strDelete1} AND cref_journ_id = 0";
				strDelete1 = $"{strDelete1} AND cref_contact_type IN ('99','93')";
				DbCommand TempCommand_2 = null;
				TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
				TempCommand_2.CommandText = strDelete1;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
				TempCommand_2.ExecuteNonQuery();

				modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Change", ref arr_Transmit_Fields);
				if (Convert.ToString(adoAircraftRecordset["ac_forsale_flag"]) == "Y")
				{
					modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Change", ref arr_Transmit_Fields);
				}

				modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "EXOFF";
				modAdminCommon.Rec_Journal_Info.journ_subject = $"Off Exclusive - Previously With {strBroker}";
				modAdminCommon.Rec_Journal_Info.journ_description = " ";
				modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);


				// 09/28/2016 - Per Jackie this is to be blank so they can select "Who" told them it's off exclusive
				if (MessageBox.Show("Would You Like to Attach the Previous Exclusive Broker To the Journal Note?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
				{
					modAdminCommon.Rec_Journal_Info.journ_comp_id = lEXBCompId;
				}
				else
				{
					modAdminCommon.Rec_Journal_Info.journ_comp_id = 0; // lEXBCompId
				}



				modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;

				modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
				modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
				modAdminCommon.Rec_Journal_Info.journ_status = "A";

				Remove_Exclusive_Journ_ID = frm_Journal.DefInstance.Commit_Journal_Entry(false, strBroker, lEXBCompId, lEXBContactId);

				if (!(Remove_Exclusive_Journ_ID > 0))
				{
					modAdminCommon.ADO_Transaction("RollbackTrans");
					result = false;
					MessageBox.Show("The journal entry was not inserted.", "Insert Not Done", MessageBoxButtons.OK, MessageBoxIcon.Information);
					return result;
				}

				// 09/28/2016 - By David D. Cruger
				// Record an Event so EMail Event Listener
				// Can determine who the Exc Broker was

				modAdminCommon.Record_Event("Homebase-EXOFF", "EXOFF - Off Exclusive", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Remove_Exclusive_Journ_ID, lEXBCompId, false, 0, lEXBContactId);

				txt_exclusive_verify_date.Text = modGlobalVars.cEmptyString;
				txt_exclusive_verify_date.Visible = false;
				// Exclusive Flag
				chkArray[chkExclusiveFlag_INDEX].CheckState = CheckState.Unchecked;
				chkArray[chkExclusiveFlag_INDEX].Visible = false;
				// Exclusive Expiration
				chkArray[chkExclusiveExp_INDEX].CheckState = CheckState.Unchecked;
				chkArray[chkExclusiveExp_INDEX].Visible = false;
				lbl_gen[11].Visible = false;
			}
			catch
			{

				result = false;
			}

			return result;
		} // RemoveAircraftFromExclusive

		private void SaveDetailGrid(string inGridName, UpgradeHelpers.DataGridViewFlex inActualGrid)
		{


			search_on($"Saving {inGridName} Details...");

			StringBuilder Query = new StringBuilder();
			Query.Append("DELETE FROM Aircraft_Details ");
			Query.Append($"WHERE adet_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} ");
			Query.Append($"AND adet_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])} ");
			Query.Append($"AND adet_data_type = '{inGridName}'");

			DbCommand TempCommand = null;
			TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
			TempCommand.CommandText = Query.ToString();
			//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
			TempCommand.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
			TempCommand.ExecuteNonQuery();

			int tempForEndVar = inActualGrid.RowsCount - 1;
			for (int I = 1; I <= tempForEndVar; I++)
			{
				inActualGrid.CurrentRowIndex = I;
				inActualGrid.CurrentColumnIndex = 0;

				Query = new StringBuilder("INSERT INTO Aircraft_Details (");
				Query.Append("adet_ac_id, ");
				Query.Append("adet_journ_id, ");
				Query.Append("adet_data_type, ");
				Query.Append("adet_data_name, ");
				Query.Append("adet_data_description ");
				Query.Append(") VALUES (");
				Query.Append($"{Convert.ToString(adoAircraftRecordset["ac_id"])}, ");
				Query.Append($"{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}, ");
				Query.Append($"'{inGridName}', ");
				Query.Append($"'{modAdminCommon.Fix_Quote(modCommon.CleanSpecial(inActualGrid[inActualGrid.CurrentRowIndex, inActualGrid.CurrentColumnIndex].FormattedValue.ToString()))}', ");
				inActualGrid.CurrentColumnIndex++;
				// 08/11/2003 - By David D. Cruger; ACDetails Description Do NOT save a CrLf
				Query.Append($"'{modCommon.CleanSpecial(modAdminCommon.Fix_Quote(StringsHelper.Replace(inActualGrid[inActualGrid.CurrentRowIndex, inActualGrid.CurrentColumnIndex].FormattedValue.ToString(), Environment.NewLine, " ", 1, -1, CompareMethod.Binary)))}')");

				DbCommand TempCommand_2 = null;
				TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
				TempCommand_2.CommandText = Query.ToString();
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand_2.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
				TempCommand_2.ExecuteNonQuery();

			}



		}

		private void SetColorConfirm(int LblIndex, string CName, object tmpDate)
		{
			//6/28/04 aey

			Color BColor = System.Drawing.Color.Black;
			string strMsg = "";

			try
			{

				strMsg = "Date";
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (Convert.IsDBNull(tmpDate))
				{
					tmpDate = DateTime.Now.ToString("d");
				}
				if (!Information.IsDate(tmpDate))
				{
					tmpDate = DateTime.Now.ToString("d");
				}

				strMsg = "Compare";
				//UPGRADE_WARNING: (1068) tmpDate of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				if (DateTime.Parse(Convert.ToString(tmpDate)) <= DateTime.Parse(modAdminCommon.DateToday))
				{
					BColor = Color.FromArgb(255, 192, 192);
					lbl_gen[LblIndex].ForeColor = Color.Red;
				}
				else
				{
					BColor = Color.White;
					lbl_gen[LblIndex].ForeColor = Color.Black;
				}

				strMsg = "Case";
				switch(CName)
				{ //7/16/04 aey
					case "cbo_ac_engine_maint_prog" : 
						cbo_ac_engine_maint_prog.BackColor = BColor; 
						break;
					case "cbo_ac_engine_management_prog_EMGP" : 
						cbo_ac_engine_management_prog_EMGP.BackColor = BColor; 
						break;
					case "cbo_ac_airframe_maintenance_prog_AMP" : 
						cbo_ac_airframe_maintenance_prog_AMP.BackColor = BColor; 
						break;
					case "cbo_ac_airframe_maint_tracking_prog_AMTP" : 
						cbo_ac_airframe_maint_tracking_prog_AMTP.BackColor = BColor; 
						break;
					case "cbo_ac_asking" : 
						cbo_ac_asking.BackColor = BColor; 
						break;
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				strMsg = $"SetColorConfirm_Error: {strMsg} {Information.Err().Number.ToString()} {excep.Message}";
				modAdminCommon.Record_Error("Aircraft", $"Color Confirm: {strMsg}");
				MessageBox.Show(strMsg, AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
			}
		}

		private void SetCompanyTransmitNumber(int PassedNumber)
		{

			string Query = "";

			try
			{

				StoreKeyAircraftContacts();

				Select_Aircraft_Contact();

				if (!ContactRecordsetFilled)
				{ //9/29/06 mjm
					return;
				}

				if (PassedNumber < 99)
				{
					Query = "UPDATE Aircraft_Reference ";
					Query = $"{Query}SET cref_transmit_seq_no = 99 ";
					Query = $"{Query}WHERE cref_transmit_seq_no = {PassedNumber.ToString()} ";
					Query = $"{Query}AND cref_ac_id = {($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_ac_id"])}").Trim()} ";
					Query = $"{Query}AND cref_journ_id = {($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_journ_id"])}").Trim()}";

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = Query;
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery(); //6/10/04 aey

				}

				Query = "UPDATE Aircraft_Reference ";
				Query = $"{Query}SET cref_transmit_seq_no = {PassedNumber.ToString()} ";
				Query = $"{Query}WHERE cref_comp_id = {($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_comp_id"])}").Trim()}";
				Query = $"{Query} AND cref_contact_id = {($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_id"])}").Trim()}";
				Query = $"{Query} AND cref_ac_id = {($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_ac_id"])}").Trim()}";
				Query = $"{Query} AND cref_contact_type = '{($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim()}'";
				Query = $"{Query} AND cref_journ_id = {($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_journ_id"])}").Trim()}";

				DbCommand TempCommand_2 = null;
				TempCommand_2 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
				TempCommand_2.CommandText = Query;
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
				TempCommand_2.ExecuteNonQuery(); //6/10/04 aey

				Fill_Aircraft_Contact_Grid();

				search_on("Saving Transmits...");

				SaveAircraftContactTransmits();

				modCommon.ClearAircraftActionDate(Convert.ToInt32(snp_AircraftContacts["cref_ac_id"]), Convert.ToInt32(snp_AircraftContacts["cref_journ_id"]));

				search_off();

				grd_AircraftContacts.Redraw = true;
			}
			catch (System.Exception excep)
			{
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Record_Error("Aircraft", $"SetCompanyTransmitNumber_Error: {Information.Err().Number.ToString()} {excep.Message}");
				//UPGRADE_TODO: (1065) Error handling statement (Resume Next) could not be converted. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1065
				UpgradeHelpers.Helpers.NotUpgradedHelper.NotifyNotUpgradedElement("Resume Next Statement");
			}

		}

		private void SetupCompanyChangeHistoryOptions()
		{

			try
			{

				//Disable all the options
				DisableAllCompanyHistoryOptions();

				Select_Aircraft_Contact();

				if (!ContactRecordsetFilled)
				{ //9/29/06 mjm
					return;
				}

				Exception ex = null;
				ErrorHandlingHelper.ResumeNext(out ex, 
					() => {mnuChangeContactType[Convert.ToInt32(Conversion.Val(Convert.ToString(snp_AircraftContacts["cref_contact_type"])))].Enabled = true;});

				if (ex != null)
				{
					ErrorHandlingHelper.ResumeNext(
						() => {Information.Err().Clear();}, 
						() => {SetupCompanyTransmitOptions();});
					HistoricalContactTypeSupported = false;
				}
				else
				{
					if (ErrorHandlingHelper.ResumeNextExpr<bool>(() => Convert.ToString(snp_AircraftContacts["cref_contact_type"]) == "91"))
					{
						try
						{
							mnuConvertFSPEND.Enabled = true;
						}
						catch
						{
						}
					}
					HistoricalContactTypeSupported = true;
				}

				//1E, 1F, 08 - share- added 7/1/04 aey
				//7/9/04 >>>>> now will allow percentage to be changed, if a percent exists >0 and <100
				mnuChangeHistPercentage.Enabled = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "97" || (Conversion.Val($"{Convert.ToString(snp_AircraftContacts["cref_owner_percent"])}{modGlobalVars.cEmptyString}") > 0 && Conversion.Val($"{Convert.ToString(snp_AircraftContacts["cref_owner_percent"])}{modGlobalVars.cEmptyString}") < 100) || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "17" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "18" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "69" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "1E" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "1F" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "08" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "70";

				grd_AircraftContacts.Redraw = true;
			}
			catch
			{

				//aey 7/23/04
				modAdminCommon.Display_Error("SetupCompanyChangeHistoryOptions_Error:");
				//UPGRADE_TODO: (1065) Error handling statement (Resume Next) could not be converted. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1065
				UpgradeHelpers.Helpers.NotUpgradedHelper.NotifyNotUpgradedElement("Resume Next Statement");
			}

		}

		private void SetupCompanyTransmitOptions()
		{

			int RememberCol = 0;
			string strError = ""; //11/15/05 aey

			try
			{

				Select_Aircraft_Contact();

				if (!ContactRecordsetFilled)
				{ //9/29/06 mjm
					return;
				}

				strError = "init";
				mnuChangeBusinessType.Enabled = true;

				RememberCol = grd_AircraftContacts.CurrentColumnIndex;

				//Disable all the options
				strError = "disable";

				DisableAllCompanyTransmitOptions();

				strOwner = modCommon.AircraftLocked(Convert.ToInt32(Double.Parse(txt_ac_id.Text)), tmp_ac_journ_id);

				//If someone has this locked who is not "me" then say so
				strError = "lock";

				if (strOwner != "False" && strOwner != Convert.ToString(modAdminCommon.snp_User["user_id"]))
				{
					mnuChangeBusinessType.Enabled = false;
					//Record is locked
				}
				else
				{
					strError = "align";

					//Align the snapshot with the current grid row and position us on the current seq no
					grd_AircraftContacts.CurrentColumnIndex = 0;
					snp_AircraftContacts.MoveFirst();
					int tempForEndVar = grd_AircraftContacts.CurrentRowIndex - 1;
					for (int I = 1; I <= tempForEndVar; I++)
					{
						snp_AircraftContacts.MoveNext();
					}

					// If they are a 2,7,8,99 - Additional 1
					if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString() == "2" || grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString() == "7" || grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString() == "8" || grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim() == modGlobalVars.cEmptyString)
					{

						if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim() != "6")
						{
							mnuSendAsAdditional1.Enabled = true;
						}
						if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim() != "2")
						{
							mnuSendAsOperator.Enabled = true;
						}

					}

					// If they are a 2 and same as 1 or 6
					//or
					// if they are a 6,7,8,99 and same company as 1,2, or 6 - Additional 2 or 3
					if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString() == "2" && (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_id"])}").Trim() == OwnerCompanyID.ToString().Trim() || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_id"])}").Trim() == OperatorCompanyID.ToString().Trim()))
					{

						mnuSendAsAdditional2.Enabled = true;
						mnuSendAsAdditional3.Enabled = true;
					}


					switch(grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim())
					{
						case "6" : case "7" : case "8" : case modGlobalVars.cEmptyString : 
							 
							if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_id"])}").Trim() == OwnerCompanyID.ToString().Trim() || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_id"])}").Trim() == OperatorCompanyID.ToString().Trim() || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_id"])}").Trim() == Additional1CompanyID.ToString().Trim())
							{

								if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim() != "7")
								{
									mnuSendAsAdditional2.Enabled = true;
								}
								if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim() != "8")
								{
									mnuSendAsAdditional3.Enabled = true;
								}
							} 
							 
							break;
					}


					switch(grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString())
					{
						// If they are already an Operator or Additional 1, 2, or 3, then they can be marked 'Do Not Send'
						case "2" : case "6" : case "7" : case "8" : 
							if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
							{
								mnuDoNotSend.Enabled = true;
							} 
							 
							break;
					}

					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "99" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "93")
					{
						mnuChangeBusinessType.Enabled = false;
						if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim() != "4")
						{
							mnuSendAsExclusiveBroker.Enabled = true;
						}
						if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim() != "5")
						{
							mnuSendAsExclusiveRepresentative.Enabled = true;
						}
						if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
						{
							mnuDoNotSend.Enabled = true;
						}
					}

					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "08")
					{
						mnuSendAsOwner.Enabled = true;
					}

					//1E, 1F, 08 -share added - aey 7/1/04
					strError = "contact_type";

					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "97" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "17" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "18" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "69" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "1E" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "1F" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "08" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "70")
					{

						mnuChangePercentage.Enabled = true;
					}
					else
					{
						mnuChangePercentage.Enabled = false;
					}

					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "71")
					{
						DisableAllCompanyTransmitOptions();
						mnuDoNotSend.Enabled = true;
					}

					if (mnuSendAsOperator.Enabled && HasOperator)
					{
						mnuSendAsOperator.Enabled = false;
					}

					if (!HasOperator)
					{ //aey 1/10/2005
						mnuSendAsOperator.Enabled = true;
						mnuDoNotSend.Enabled = true;
					}

					if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString() == "1")
					{ //2/18/2006 aey
						mnuSendAsOperator.Enabled = false;
					}
					else
					{
						mnuSendAsOperator.Enabled = true;
					}


					// Put us back on the column we clicked on
					grd_AircraftContacts.CurrentColumnIndex = RememberCol;
				}

				grd_AircraftContacts.Redraw = true;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				strError = $"{Information.Err().Number.ToString()} {strError} {excep.Message}";
				modAdminCommon.Report_Error($"SetupCompanyTransmitOptions_Error: {strError}");
			}

		}

		private void StoreKeyAircraftContacts() => modAdminCommon.arrPriorKeyACContacts = (string[, ]) ArraysHelper.DeepCopy(modAdminCommon.arrCurrentKeyACContacts);


		public void turn_top_menu_items_off_on(bool turn_on)
		{


			mnu_Edit.Available = turn_on;
			mnuView.Available = turn_on;
			mnuTransactions.Available = turn_on;
			mnureport.Available = turn_on;
			mnuPubs.Available = turn_on;
			mnuAttachedSpecs.Available = turn_on;
			mnu_Help.Available = turn_on;
			mnuTools.Available = turn_on;
			cmdAircraftSearch.Available = turn_on;


		}

		private void TurnOnOffCompanyButtons()
		{

			Select_Aircraft_Contact();

			if (!ContactRecordsetFilled)
			{ //9/29/06 mjm
				return;
			}

			if (Convert.ToString(snp_AircraftContacts["cref_primary_poc_flag"]).ToUpper() == "Y")
			{
				// Exclusive Flag
				cmd_Set_As_Exclusive.Enabled = cbo_ac_status.Text.Substring(Math.Min(0, cbo_ac_status.Text.Length), Math.Min(11, Math.Max(0, cbo_ac_status.Text.Length))).ToLower() != ("Written Off").ToLower() && chkArray[chkExclusiveFlag_INDEX].CheckState == CheckState.Checked && Convert.ToString(snp_AircraftContacts["cref_primary_poc_flag"]).ToUpper() != "X";
				cmd_Primary.Enabled = false;
				cmd_Remove_Association.Enabled = false;
			}
			else
			{

				cmd_Primary.Enabled = true;
				// Exclusive Flag
				cmd_Set_As_Exclusive.Enabled = cbo_ac_status.Text.Substring(Math.Min(0, cbo_ac_status.Text.Length), Math.Min(11, Math.Max(0, cbo_ac_status.Text.Length))).ToLower() != ("Written Off").ToLower() && chkArray[chkExclusiveFlag_INDEX].CheckState == CheckState.Checked && Convert.ToString(snp_AircraftContacts["cref_primary_poc_flag"]).ToUpper() != "X";

				// Exclusive Flag
				cmd_Clear_Exclusive_Confirmation_Company.Enabled = chkArray[chkExclusiveFlag_INDEX].CheckState == CheckState.Checked && Convert.ToString(snp_AircraftContacts["cref_primary_poc_flag"]).ToUpper() == "X" && Total_Exclusive > 1;

				cmd_Remove_Association.Enabled = true;

				if (Convert.ToString(snp_AircraftContacts["actype_use_flag"]).ToUpper() != "R")
				{
					if (Convert.ToString(snp_AircraftContacts["actype_use_flag"]).ToUpper() == "D")
					{
						cmd_Remove_Association.Enabled = true;
					}
					else if (Convert.ToString(snp_AircraftContacts["actype_use_flag"]).ToUpper() == "L")
					{ 
						cmd_Remove_Association.Enabled = true;
					}
					else
					{
						cmd_Remove_Association.Enabled = false;
					}

					if (Convert.ToString(snp_AircraftContacts["actype_use_flag"]).ToUpper() == "X")
					{
						if (Convert.ToString(snp_AircraftContacts["cref_primary_poc_flag"]).ToUpper() != "Y" && Convert.ToString(snp_AircraftContacts["cref_primary_poc_flag"]).ToUpper() != "X")
						{

							if (MoreExclusiveBrokersExist())
							{
								cmd_Remove_Association.Enabled = true;
							}

						}
					}

				}

			}

			// Exclusive Flag
			if (chkArray[chkExclusiveFlag_INDEX].CheckState == CheckState.Checked)
			{
				if (Convert.ToString(snp_AircraftContacts["cref_contact_type"]).Trim() == "99" || Convert.ToString(snp_AircraftContacts["cref_contact_type"]).Trim() == "93" || Convert.ToString(snp_AircraftContacts["cref_contact_type"]).Trim() == "46")
				{

					cmd_Set_As_Exclusive.Enabled = false;
				}
				else
				{
					cmd_Set_As_Exclusive.Enabled = true;
				}
			}

			//   If Trim$(snp_AircraftContacts("cref_contact_type").Value) = "42" Then
			//      cmd_Remove_Association.Enabled = False
			//   End If

			cmd_AssociateCompany.Enabled = Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]) == 0;

			if (Convert.ToString(snp_AircraftContacts["cref_primary_poc_flag"]).ToUpper() == "X")
			{
				cmd_Remove_Association.Enabled = false;
				cmd_Primary.Enabled = false;
			}

			cmdAddACDetail[5].Enabled = (Convert.ToString(snp_AircraftContacts["cref_contact_type"]).Trim() == "17" || Convert.ToString(snp_AircraftContacts["cref_contact_type"]).Trim() == "97" || Convert.ToString(snp_AircraftContacts["cref_contact_type"]).Trim() == "69" || Convert.ToString(snp_AircraftContacts["cref_contact_type"]).Trim() == "70");

			// added in ms 9/11/17 -- fi its leased you cant just remove lesee or lessor
			if (Convert.ToString(snp_AircraftContacts["cref_contact_type"]).Trim() == "12" || Convert.ToString(snp_AircraftContacts["cref_contact_type"]).Trim() == "13")
			{
				// Leased Flag
				if (chkArray[chkLeasedFlag_INDEX].CheckState == CheckState.Checked)
				{
					cmd_Remove_Association.Enabled = false;
				}
			}


			if (Convert.ToString(snp_AircraftContacts["cref_contact_type"]).Trim() == "2B")
			{
				cmd_Remove_Association.Enabled = true;
			}

			//*********************************************************
			// Don't allow "Set Primary" if the aircraft is "Retired"
			if (Convert.ToString(adoAircraftRecordset["ac_lifecycle_stage"]).Trim() == "4")
			{
				cmd_Primary.Enabled = false;
			}

		}

		private void UpdateFractionalExpireDate(string inExpireDate)
		{


			Select_Aircraft_Contact();

			if (!ContactRecordsetFilled)
			{ //9/29/06 mjm
				return;
			}

			string Query = "UPDATE Aircraft_Reference ";
			if (inExpireDate == "Null" || inExpireDate == "")
			{
				Query = $"{Query}SET cref_fraction_expires_date = NULL ";
			}
			else
			{
				Query = $"{Query}SET cref_fraction_expires_date = '{DateTime.Parse(inExpireDate).ToString("d")}' ";
			}

			Query = $"{Query}WHERE cref_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
			Query = $"{Query} AND cref_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";
			Query = $"{Query} AND cref_comp_id = {Convert.ToString(snp_AircraftContacts["cref_comp_id"])}";
			Query = $"{Query} AND cref_contact_id = {Convert.ToString(snp_AircraftContacts["cref_contact_id"])}";

			DbCommand TempCommand = null;
			TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
			TempCommand.CommandText = Query;
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
			TempCommand.ExecuteNonQuery(); //6/10/04 aey
			grd_AircraftContacts.Redraw = true;
		}


		private bool ValidateAvailableStatus()
		{

			bool result = false;
			result = true;

			if (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked && Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0)
			{

				if (cbo_ac_status.Text.Trim() == modGlobalVars.cEmptyString)
				{
					MessageBox.Show("You must specify a Status if the aircraft is Available.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					result = false;
				}
				if (cbo_ac_delivery.Text.Trim() == modGlobalVars.cEmptyString)
				{
					MessageBox.Show("You must specify a type of Delivery if the aircraft is Available.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					result = false;
				}

			}

			return result;
		}

		private bool ValidateCOR()
		{
			//aey 5/1//06
			//see if registration table matches the current prefix

			bool result = false;
			string RegPrefix = "";
			string Query = "";
			ADORecordSetHelper ado_RegPrefix = new ADORecordSetHelper();
			bool FoundIt = false;

			result = true;

			if (lbl_gen[199].Text == "Current Aircraft")
			{
				//check for military
				Query = "Select * from aircraft_reference ";
				Query = $"{Query}inner join company on cref_comp_id=comp_id and cref_journ_id=comp_journ_id ";
				Query = $"{Query}Where cref_contact_type='00' and cref_ac_id={txt_ac_id.Text} and cref_journ_id=0 ";
				Query = $"{Query}and comp_agency_type = 'G' ";

				if (!modAdminCommon.Exist(Query))
				{
					//non-military
					if (Strings.Len(($"{txt_ac_reg_no[0].Text}{modGlobalVars.cEmptyString}").Trim()) > 0 && Strings.Len(cbo_ac_country_of_registration.Text.Trim()) > 0)
					{
						RegPrefix = txt_ac_reg_no[0].Text.Trim().Substring(Math.Min(0, txt_ac_reg_no[0].Text.Trim().Length), Math.Min(1, Math.Max(0, txt_ac_reg_no[0].Text.Trim().Length)));
						Query = "Select * from Registration_Number_Prefix ";
						Query = $"{Query}where regnbrpref_country_name='{modAdminCommon.Fix_Quote(cbo_ac_country_of_registration.Text)}' ";
						Query = $"{Query}and regnbrpref_prefix like '{RegPrefix}%' ";

						if (!modAdminCommon.Exist(Query))
						{
							MessageBox.Show("This Country of Registration does not match the current Registration Number", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
						}
						else
						{
							FoundIt = false;
							ado_RegPrefix.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

							if (!(ado_RegPrefix.EOF && ado_RegPrefix.BOF))
							{


								while(!ado_RegPrefix.EOF)
								{
									RegPrefix = ($"{Convert.ToString(ado_RegPrefix["regnbrpref_prefix"])}{modGlobalVars.cEmptyString}").Trim();
									if (($"{txt_ac_reg_no[0].Text}{modGlobalVars.cEmptyString}").Substring(0, Math.Min(Strings.Len(RegPrefix), ($"{txt_ac_reg_no[0].Text}{modGlobalVars.cEmptyString}").Length)).Trim() == RegPrefix)
									{
										FoundIt = true;
										break;
									}
									ado_RegPrefix.MoveNext();
								};

								ado_RegPrefix.Close();
							}

							ado_RegPrefix = null;
							if (!FoundIt)
							{
								result = false;
								//MsgBox "This Country of Registration does not match the current Registration Number"
							}
						}
					}
				}
			}

			return result;
		}

		private void ValidateHeliCopterGrid()
		{
			//validation: No duplicate rows
			//8/12/2005 aey

			bool FoundDup = false;

			//errCount = 0
			cmdHelicopter[1].Enabled = false;

			//colorize soh column for each row
			int tempForEndVar = GrdHelicopter.RowsCount - 1;
			for (int I = 1; I <= tempForEndVar; I++)
			{
				GrdHelicopter.CurrentRowIndex = I;
				GrdHelicopter.CurrentColumnIndex = 5;
				if (($"{Convert.ToString(GrdHelicopter[I, 0].Value)}{modGlobalVars.cEmptyString}").ToUpper().IndexOf("BLADES") >= 0)
				{
					GrdHelicopter.CellBackColor = SystemColors.Control; //grey
				}
				else
				{
					GrdHelicopter.CellBackColor = SystemColors.Window; //white
				}
			}

			//validate rows
			int tempForEndVar2 = GrdHelicopter.RowsCount - 2;
			for (int I = 1; I <= tempForEndVar2; I++)
			{
				int tempForEndVar3 = GrdHelicopter.RowsCount - 1;
				for (int K = I + 1; K <= tempForEndVar3; K++)
				{
					if (Convert.ToString(GrdHelicopter[I, 0].Value) != modGlobalVars.cEmptyString)
					{ //omit blank categories
						FoundDup = true;
						for (int J = 0; J <= 1; J++)
						{
							if (Convert.ToString(GrdHelicopter[I, J].Value) != Convert.ToString(GrdHelicopter[K, J].Value))
							{
								FoundDup = false;
							}
						}

						if (FoundDup)
						{
							MessageBox.Show($"Duplicate Found:{Convert.ToString(GrdHelicopter[I, 0].Value)} {Convert.ToString(GrdHelicopter[I, 1].Value)}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
							// errCount = errCount + 1
							break;
						}

					}
				}
			}

			GrdHelicopter.CurrentRowIndex = RememberGridRow;
			GrdHelicopter.CurrentColumnIndex = RememberGridCol;

			this.Cursor = CursorHelper.CursorDefault;


		}

		private void enable_ac_mapingID()
		{


			string sSelectedItem = ac_mapping_list.GetListItem(ListBoxHelper.GetSelectedIndex(ac_mapping_list)).Substring(0, Math.Min(1, ac_mapping_list.GetListItem(ListBoxHelper.GetSelectedIndex(ac_mapping_list)).Length));

			if (sSelectedItem.ToUpper() == "D")
			{

				lbl_gen[111].Enabled = true;
				ac_mapping_id.Enabled = true;

			}
			else
			{

				lbl_gen[111].Enabled = false;
				ac_mapping_id.Enabled = false;

			}


		}

		public void verify_single_ac()
		{

			string[] arrConfirmAircraft = ArraysHelper.InitializeArray<string>(101);

			string strSelectedAircraft = $"{cbo_amod_make_name.Text} - {cbo_ac_status.Text}";

			frm_verify_status.DefInstance.nReference_CompanyJID = Convert.ToInt32(snp_AircraftContacts["cref_journ_id"]);
			frm_verify_status.DefInstance.nReference_CompanyID = Convert.ToInt32(snp_AircraftContacts["cref_comp_id"]);
			frm_verify_status.DefInstance.nSelectedAircraftID = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
			frm_verify_status.DefInstance.strSelectedAircraft = strSelectedAircraft;
			frm_verify_status.DefInstance.nSelectedYachtID = 0;
			frm_verify_status.DefInstance.strSelectedYacht = "";
			frm_verify_status.DefInstance.picked_contact_name = "N";
			frm_verify_status.DefInstance.txt_description.Text = "";
			frm_verify_status.DefInstance.current_status = cbo_ac_status.Text;

			frm_verify_status.DefInstance.nSelectedContactID = Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]);
			grd_AircraftContacts.CurrentColumnIndex = 4;
			frm_verify_status.DefInstance.strSelectedContact = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();

			frm_verify_status.DefInstance.nSelVerifyJournSub = 0;
			frm_verify_status.DefInstance.nSelVerifyAircraft = 0;
			frm_verify_status.DefInstance.sVerifyAircraftStatus = "ONE";
			frm_verify_status.DefInstance.lbl_comp[11].Text = "1/1/2017"; // set to this, should never be this date for last called
			grd_AircraftContacts.CurrentColumnIndex = 2;
			frm_verify_status.DefInstance.form_company_name = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();


			//       snp_AircraftContacts!comp_id
			//snp_AircraftContacts!cref_journ_id
			//        frm_ShareRelationships.EntryPoint = geAddShareRelation    ' set the entry point
			//        frm_ShareRelationships.inACID = adoAircraftRecordset!AC_ID
			//        frm_ShareRelationships.inJournID = adoAircraftRecordset!AC_Journ_id
			//        frm_ShareRelationships.incompid = snp_AircraftContacts!cref_comp_id
			//        frm_ShareRelationships.inContactId = snp_AircraftContacts!cref_contact_id
			//        frm_ShareRelationships.inCrefID = snp_AircraftContacts!cref_id
			//        frm_ShareRelationships.inPercent = snp_AircraftContacts!cref_owner_percent
			//        frm_ShareRelationships.Show    ' show the form
			//        search_off

			grd_AircraftContacts.CurrentColumnIndex = 1; // this is for primary or exclusive color
			string back_color = ColorTranslator.ToOle(grd_AircraftContacts.CellBackColor).ToString();

			frm_verify_status.DefInstance.grd_Company_Aircraft.ColumnsCount = 16;
			int tempForEndVar = grd_AircraftContacts.ColumnsCount - 1;
			for (int C = 0; C <= tempForEndVar; C++)
			{
				frm_verify_status.DefInstance.grd_Company_Aircraft[1, C].Value = Convert.ToString(grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, C].Value);
				frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentColumnIndex = C;
				frm_verify_status.DefInstance.grd_Company_Aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(back_color)));
			}

			//  frm_verify_status.grd_Company_Aircraft.AddItem (grd_Company_Aircraft.Row(grd_Company_Aircraft.Index))

			frm_verify_status.DefInstance.grd_Company_Aircraft[frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentRowIndex, frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentColumnIndex].Value = cbo_amod_make_name.Text;


			frm_verify_status.DefInstance.Show();
			frm_verify_status.DefInstance.display_verify_aircraft_status_pnl_form(frm_aircraft.DefInstance, "One", Convert.ToInt32(snp_AircraftContacts["cref_comp_id"]), Convert.ToInt32(snp_AircraftContacts["cref_journ_id"]), Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]), frm_verify_status.DefInstance.grd_Company_Aircraft, arrConfirmAircraft);


		}

		private void ac_mapping_list_SelectedIndexChanged(Object eventSender, EventArgs eventArgs) => enable_ac_mapingID();




		//UPGRADE_WARNING: (2074) ComboBox event cbo_ac_airframe_maint_tracking_prog_AMTP.Change was upgraded to cbo_ac_airframe_maint_tracking_prog_AMTP.TextChanged which has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2074
		private bool isInitializingComponent;
		private void cbo_ac_airframe_maint_tracking_prog_AMTP_TextChanged(Object eventSender, EventArgs eventArgs)
		{
			if (isInitializingComponent)
			{
				return;
			}
			bVerifiedAMTP = false; //aey 7/1/04
		}

		//UPGRADE_WARNING: (2074) ComboBox event cbo_ac_airframe_maintenance_prog_AMP.Change was upgraded to cbo_ac_airframe_maintenance_prog_AMP.TextChanged which has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2074
		private void cbo_ac_airframe_maintenance_prog_AMP_TextChanged(Object eventSender, EventArgs eventArgs)
		{
			if (isInitializingComponent)
			{
				return;
			}
			bVerifiedAMP = false; //aey 7/1/04
		}

		private void cbo_ac_asking_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (cbo_ac_asking.Text == "Price")
			{
				txt_ac_asking_price.Visible = true;
				// check the recordset
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_asking_price"]))
				{
					if (Convert.ToDouble(adoAircraftRecordset["ac_asking_price"]) > 0)
					{
						txt_ac_asking_price.Text = $"${Strings.FormatNumber(adoAircraftRecordset["ac_asking_price"], 0, TriState.False, TriState.False, TriState.True)}";
					}
				}
				// added in MSw - 3/27/22 - for when its cleared and put back to price
				// Error_Message = "Display Foreign Currency"
				int tempForEndVar = cbo_ac_foreign_currency_name.Items.Count - 1;
				for (int I = 0; I <= tempForEndVar; I++)
				{
					if (Convert.ToString(adoAircraftRecordset["ac_foreign_currency_name"]).Trim().ToLower() == cbo_ac_foreign_currency_name.GetListItem(I).ToLower())
					{
						cbo_ac_foreign_currency_name.SelectedIndex = I;
						break;
					}
				}

				txt_ac_foreign_currency_price.Text = modGlobalVars.cEmptyString;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_foreign_currency_price"]))
				{
					if (Convert.ToDouble(adoAircraftRecordset["ac_foreign_currency_price"]) > 0)
					{ //
						txt_ac_foreign_currency_price.Text = Strings.FormatNumber(adoAircraftRecordset["ac_foreign_currency_price"], 0, TriState.False, TriState.False, TriState.True);
					}
				}


				//    ElseIf tmp_ac_journ_id > 0 Then
				//
				//      If Not adoAircraftRecordset Is Nothing Then
				//        If Not IsNull(adoAircraftRecordset("ac_asking_price")) Then
				//      '    ' added MSW - 5/9/16
				//           If CDbl(adoAircraftRecordset("ac_asking_price").Value) > 0 Then
				//               txt_ac_asking_price.Text = "$" & FormatNumber(adoAircraftRecordset("ac_asking_price").Value, 0, vbFalse, vbFalse, vbTrue)
				//              txt_ac_asking_price.Visible = True
				//          Else
				//              txt_ac_asking_price.Visible = False
				//              txt_ac_asking_price = cEmptyString
				//          End If
				//        Else
				//          txt_ac_asking_price.Visible = False
				//          txt_ac_asking_price = cEmptyString
				//        End If
				//      Else
				//          txt_ac_asking_price.Visible = False
				//        txt_ac_asking_price = cEmptyString
				//      End If
				//


			}
			else
			{
				txt_ac_asking_price.Visible = false;
				txt_ac_asking_price.Text = modGlobalVars.cEmptyString;
				cbo_ac_foreign_currency_name.SelectedIndex = 0; // added MSW to make sure they clear - MSW - 3/27/24
				txt_ac_foreign_currency_price.Text = ""; // added MSW to make sure they clear - MSW - 3/27/24
			}

		}



		private void cbo_ac_country_of_registration_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			// 02/16/2016 - By David D. Cruger;
			// Per Jackie; Only do this check on "Save"

			//If ValidateCOR = False Then
			//  MsgBox "This Country of Registration does not match the current Registration Number"
			// End If

		}

		private void cbo_ac_delivery_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (cbo_ac_delivery.Text == "Date")
			{
				lbl_gen[17].Visible = true;
				txt_ac_delivery_date.Visible = true;
			}
			else
			{
				lbl_gen[17].Visible = false;
				txt_ac_delivery_date.Visible = false;
			}

			if (cbo_ac_delivery.Text != "Date")
			{
				txt_ac_delivery_date.Text = modGlobalVars.cEmptyString;
			}

		}

		//UPGRADE_WARNING: (2074) ComboBox event cbo_ac_engine_maint_prog.Change was upgraded to cbo_ac_engine_maint_prog.TextChanged which has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2074
		private void cbo_ac_engine_maint_prog_TextChanged(Object eventSender, EventArgs eventArgs)
		{
			if (isInitializingComponent)
			{
				return;
			}
			bVerifiedEMP = false; //aey 7/1/04
		}

		//UPGRADE_WARNING: (2074) ComboBox event cbo_ac_engine_management_prog_EMGP.Change was upgraded to cbo_ac_engine_management_prog_EMGP.TextChanged which has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2074
		private void cbo_ac_engine_management_prog_EMGP_TextChanged(Object eventSender, EventArgs eventArgs)
		{
			if (isInitializingComponent)
			{
				return;
			}
			bVerifiedEMGP = false; //aey 7/1/04
		}


		private void cbo_ac_engine_name_KeyPress(Object eventSender, KeyPressEventArgs eventArgs)
		{
			int KeyAscii = Convert.ToInt32(eventArgs.KeyChar);
			try
			{
				if (Strings.Len(cbo_ac_engine_name.Text) > 0)
				{
					MessageBox.Show("Use pulldown to select a valid engine model for this aircraft. If the correct name is not in the pulldown list then contact Eric to have it added.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					KeyAscii = 0;
				}
			}
			finally
			{
				if (KeyAscii == 0)
				{
					eventArgs.Handled = true;
				}
				eventArgs.KeyChar = Convert.ToChar(KeyAscii);
			}
		}

		private void cbo_ac_owner_type_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{


			switch(cbo_ac_owner_type.Text.Substring(0, Math.Min(1, cbo_ac_owner_type.Text.Length)).Trim())
			{
				case "W" : 
					mnueditchange.Enabled = true; 
					mnueditchangeFractional.Enabled = true; 
					mnueditchangeShare.Enabled = true; 
					mnueditchangeSieze.Enabled = true; 
					mnueditchangeForeclosure.Enabled = true; 
					 
					break;
				case "F" : 
					mnueditchange.Enabled = true; 
					mnueditchangeFractional.Enabled = true; 
					mnueditchangeShare.Enabled = false; 
					mnueditchangeSieze.Enabled = true; 
					mnueditchangeForeclosure.Enabled = true; 
					 
					break;
				case "S" : 
					mnueditchange.Enabled = true; 
					mnueditchangeFractional.Enabled = false; 
					mnueditchangeShare.Enabled = true; 
					mnueditchangeSieze.Enabled = true; 
					mnueditchangeForeclosure.Enabled = true; 
					 
					break;
			}

		}

		private void cbo_ac_stage_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{
			// aey 7/16/04

			// If cbo_ac_stage.Text = "4 - Retired" And adoAircraftRecordset!ac_lifecycle_stage.OriginalValue <> 4 Then 'aey 9/26/04
			if (cbo_ac_stage.Text == "4 - Retired")
			{
				int tempForEndVar = 0;
				int tempForEndVar2 = 0;
				int tempForEndVar3 = 0;
				int tempForEndVar4 = 0;
				ErrorHandlingHelper.ResumeNext( //aey 9/26/04
					() => {cbo_ac_engine_maint_prog.SelectedIndex = -1;}, 
					() => {tempForEndVar = cbo_ac_engine_maint_prog.Items.Count - 1;});
				for (int J = 0; J <= tempForEndVar; J++)
				{
					if (ErrorHandlingHelper.ResumeNextExpr<bool>(() => cbo_ac_engine_maint_prog.GetListItem(J) == "U - Unknown - Unknown"))
					{
						try
						{
							cbo_ac_engine_maint_prog.SelectedIndex = J;
							break;
						}
						catch
						{
						}
					}
				}
				cbo_ac_engine_management_prog_EMGP.SelectedIndex = 0;
				try
				{
					tempForEndVar2 = cbo_ac_engine_management_prog_EMGP.Items.Count - 1;
				}
				catch
				{
				}
				for (int J = 0; J <= tempForEndVar2; J++)
				{
					if (ErrorHandlingHelper.ResumeNextExpr<bool>(() => cbo_ac_engine_management_prog_EMGP.GetListItem(J) == "Unknown - Unknown"))
					{
						try
						{
							cbo_ac_engine_management_prog_EMGP.SelectedIndex = J;
							break;
						}
						catch
						{
						}
					}
				}
				cbo_ac_airframe_maintenance_prog_AMP.SelectedIndex = 0;
				try
				{
					tempForEndVar3 = cbo_ac_airframe_maintenance_prog_AMP.Items.Count - 1;
				}
				catch
				{
				}
				for (int J = 0; J <= tempForEndVar3; J++)
				{
					if (ErrorHandlingHelper.ResumeNextExpr<bool>(() => cbo_ac_airframe_maintenance_prog_AMP.GetListItem(J) == "Unknown - Unknown"))
					{
						try
						{
							cbo_ac_airframe_maintenance_prog_AMP.SelectedIndex = J;
							break;
						}
						catch
						{
						}
					}
				}
				cbo_ac_airframe_maint_tracking_prog_AMTP.SelectedIndex = 0;
				try
				{
					tempForEndVar4 = cbo_ac_airframe_maint_tracking_prog_AMTP.Items.Count - 1;
				}
				catch
				{
				}
				for (int J = 0; J <= tempForEndVar4; J++)
				{
					if (ErrorHandlingHelper.ResumeNextExpr<bool>(() => cbo_ac_airframe_maint_tracking_prog_AMTP.GetListItem(J) == "Unknown - Unknown"))
					{
						try
						{
							cbo_ac_airframe_maint_tracking_prog_AMTP.SelectedIndex = J;
							break;
						}
						catch
						{
						}
					}
				}
			}
			else
			{
				// not retired
				// RTW - MODIFIED ON 2/3/2011 TO ADDRESS ISSUES WITH BACK IN SERVICE AIRCRAFT.
				// IF THE AIRCRAFT RECORDSET IS ALREADY LOADED AND THE LIFE CYCLE IS SET TO IN OPERATION AND THE RECORDSET ORIGINALLY WAS RETIRED
				// THEN SET THE STATUS = NOT FOR SALE
				if (adoAircraftRecordset != null)
				{
					if (adoAircraftRecordset.State == ConnectionState.Open)
					{
						//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_lifecycle_stage.OriginalValue of type Variant is being forced to double. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
						if (ErrorHandlingHelper.ResumeNextExpr<bool>(() => cbo_ac_stage.Text == "3 - In Operation" && Convert.ToDouble(adoAircraftRecordset.GetField("ac_lifecycle_stage").OriginalValue) == 4))
						{
							try
							{
								cbo_ac_status.Text = "Not for Sale";
							}
							catch
							{
							}
						}
					}
				}
			}

			if (cbo_ac_stage.Text == "4 - Retired" && cbo_ac_status.Text == "Not for Sale")
			{
				MessageBox.Show("WARNING -- Aircraft status should be changed", "WARNING", MessageBoxButtons.OK);
				cbo_ac_status.Focus();
			}

		}


		private void cbo_ac_status_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_status.OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			if (Convert.ToString(adoAircraftRecordset.GetField("ac_status").OriginalValue) != "Historical")
			{
				if (cbo_ac_status.Text == "Historical")
				{
					MessageBox.Show($"Historical is an automated entry only.{Environment.NewLine}Please choose another status.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					cbo_ac_status.SelectedIndex = 0;
				}
			}


			if (cbo_ac_asking.Enabled)
			{


				// IT has been changed but was price, so between for sale and sale pending
				// ADDED MSW -2/14/20
				//If (Trim(cbo_ac_status.Text) = "Sale Pending" Or left(Trim(cbo_ac_status.Text), 8) = "For Sale") And cbo_ac_asking.Text = "Price" Then
				// switched to be if it is currently "available" then keep the asking status as it was
				//11/9/2021 MSW
				if (chkArray[6].CheckState == CheckState.Checked)
				{

				}
				else
				{
					modFillAircraftControls.Fill_Aircraft_Asking_List_Select(cbo_ac_asking, cbo_ac_status.Text);
				}
			}

		}

		//UPGRADE_WARNING: (2074) ComboBox event cbo_ac_use_code.Change was upgraded to cbo_ac_use_code.TextChanged which has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2074
		private void cbo_ac_use_code_TextChanged(Object eventSender, EventArgs eventArgs)
		{
			if (isInitializingComponent)
			{
				return;
			}


			// added MSW - 5/10/23
			if (cbo_ac_use_code.Text == "")
			{
				MessageBox.Show("Usage Code is not allowed to be blank.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
			}



		}

		private void cbo_ac_use_code_SelectedIndexChanged(Object eventSender, EventArgs eventArgs) => ToolTipMain.SetToolTip(cbo_ac_use_code, cbo_ac_use_code.Text);


		private void cbo_accert_name_SelectionChangeCommitted(Object eventSender, EventArgs eventArgs)
		{

			if (!cmd_Add_Cert[0].Enabled)
			{
				cmd_Add_Cert[0].Enabled = true;
			}

		}

		private void cbo_amod_make_name_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			// 09/24/2002 - By David D. Cruger; Added Message for Lee Howard if she tries to change a model
			string strUserId = "";
			bool bOKModelChange = false;
			DialogResult iMsgBox = (DialogResult) 0;

			string AirframeType = modGlobalVars.cEmptyString;

			if (cbo_amod_make_name.GetListItem(cbo_amod_make_name.SelectedIndex) == "Show All Makes and Models" || cbo_amod_make_name.GetListItem(cbo_amod_make_name.SelectedIndex) == "Show Fixed Wing Makes and Models" || cbo_amod_make_name.GetListItem(cbo_amod_make_name.SelectedIndex) == "Show Rotary Makes and Models")
			{

				if (cbo_amod_make_name.GetListItem(cbo_amod_make_name.SelectedIndex) == "Show Rotary Makes and Models")
				{
					AirframeType = "R";
				}

				if (cbo_amod_make_name.GetListItem(cbo_amod_make_name.SelectedIndex) == "Show Fixed Wing Makes and Models")
				{
					AirframeType = "F";
				}

				bOKModelChange = false;
				strUserId = Convert.ToString(modAdminCommon.snp_User["user_id"]).ToUpper(); // Current User
				if (strUserId == "LMC")
				{ // 10/10/2005 - By David D. Cruger; Changed to LMC from LMH

					iMsgBox = MessageBox.Show($"Now Ms. Lee M. Carnevale.  We have been here before.  {Environment.NewLine}{Environment.NewLine}" +
					          $"Are you SURE and I mean REALLY SURE you want to do this?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNoCancel, MessageBoxIcon.Error);
					if (iMsgBox == System.Windows.Forms.DialogResult.Yes)
					{
						bOKModelChange = true;
					}
				}
				else
				{
					bOKModelChange = true; // Only LEE Gets Checked
				}

				if (bOKModelChange)
				{
					cbo_amod_make_name.RemoveItem(3); //rotary
					cbo_amod_make_name.RemoveItem(2); //fixed wing
					cbo_amod_make_name.RemoveItem(1); //all

					cbo_amod_make_name.SelectedIndex = 0;
					Fill_Aircraft_Make_List(AirframeType);
				}

			}
			else
			{
				GetSerialPrefixSuffix(cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex));
			}

			SetupSerialNumbers();
			ToolTipMain.SetToolTip(cbo_amod_make_name, cbo_amod_make_name.Text);
			ToolTipMain.SetToolTip(lbl_gen[102], cbo_amod_make_name.Text);

		}

		private void cbo_av_description_KeyPress(Object eventSender, KeyPressEventArgs eventArgs)
		{
			int KeyAscii = Convert.ToInt32(eventArgs.KeyChar);
			try
			{

				// ADDED MSW - 6/10/20  --- lock if it is one we have rules for
				if (Lock_Avionics)
				{
					KeyAscii = 0;
					if (KeyAscii == 0)
					{
						eventArgs.Handled = true;
					}
					return;
				}
				else
				{

				}



				search_off();
			}
			finally
			{
				if (KeyAscii == 0)
				{
					eventArgs.Handled = true;
				}
				eventArgs.KeyChar = Convert.ToChar(KeyAscii);
			}
		}

		private void cbo_av_description_Leave(Object eventSender, EventArgs eventArgs) => cbo_av_description.Text = cbo_av_description.Text.Trim().Substring(0, Math.Min(75, cbo_av_description.Text.Trim().Length));



		private void cbo_dam_SelectionChangeCommitted(Object eventSender, EventArgs eventArgs)
		{


			string cellcolor = "";

			int tempForEndVar = grd_AircraftKeyFeatures.RowsCount - 1;
			for (int I = 1; I <= tempForEndVar; I++)
			{
				grd_AircraftKeyFeatures.CurrentRowIndex = I;
				grd_AircraftKeyFeatures.CurrentColumnIndex = 2;
				if (grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim() == "DAM")
				{
					grd_AircraftKeyFeatures.CurrentColumnIndex = 1;
					grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = cbo_dam.Text.Trim();
					grd_AircraftKeyFeatures.CurrentColumnIndex = 3;
					grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "UPDATE";

					if (cbo_dam.Text.Trim() == "Yes")
					{
						cellcolor = modAdminCommon.NoColor;
					}
					if (cbo_dam.Text.Trim() == "No")
					{
						cellcolor = modAdminCommon.NoColor;
					}
					if (cbo_dam.Text.Trim() == "Unknown")
					{
						cellcolor = modAdminCommon.ConfirmColor;
					}
					if (cbo_dam.Text.Trim() == "Accident")
					{
						cellcolor = modAdminCommon.NoColor;
					}
					if (cbo_dam.Text.Trim() == "Incident")
					{
						cellcolor = modAdminCommon.NoColor;
					}

					grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
					cbo_Feature_Options.Text = cbo_dam.Text.Trim();
					txt_Kfeat_Update_Code.Text = "DAM";
					Update_Aircraft_KeyFeature();
				}
			}

			// Call Key_Feature_Auto_Update



		}

		private void cbo_drop_array_SelectionChangeCommitted(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cbo_drop_array, eventSender);

			if (Index == 0)
			{
				if (cbo_drop_array[0].Text.Trim() == "Add - Request Document")
				{
					frm_WebCrawl.DefInstance.WhichAcctRep = modAdminCommon.gbl_Account_ID;

					setup_doc_request();

					frm_WebCrawl.DefInstance.Show();
				}
				else if (cbo_drop_array[0].Text.Trim() != "")
				{ 
					fill_ac_pub_details(0);
				}
			}



		}

		private void cbo_Feature_Options_SelectionChangeCommitted(Object eventSender, EventArgs eventArgs)
		{

			if (cbo_Feature_Options.Text != gbl_status)
			{
				Update_Aircraft_KeyFeature();
				cbo_Feature_Options.Visible = false;
				txt_Kfeat_Update_Code.Visible = false;
				//Fill_Aircraft_Feature_Grid
			}

		}

		private void cbo_Edit_Heli_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (RememberGridRow > 0 && bEdit_HelicopterGrid_Outstanding)
			{

				if (cbo_edit_heli.GetListItem(cbo_edit_heli.SelectedIndex) != modGlobalVars.cEmptyString && (cbo_edit_heli.GetListItem(cbo_edit_heli.SelectedIndex).ToUpper().IndexOf("BLADES") + 1) == 0 && RememberGridCol == 0)
				{
					GrdHelicopter.CurrentColumnIndex = 1;
					GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = "N/A";
				}
				else if (cbo_edit_heli.GetListItem(cbo_edit_heli.SelectedIndex) != modGlobalVars.cEmptyString && cbo_edit_heli.GetListItem(cbo_edit_heli.SelectedIndex).ToUpper().IndexOf("BLADES") >= 0 && RememberGridCol == 0)
				{ 
					GrdHelicopter.CurrentColumnIndex = 1;
					GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
				}
				else if (cbo_edit_heli.GetListItem(cbo_edit_heli.SelectedIndex) == modGlobalVars.cEmptyString)
				{ 

					GrdHelicopter.CurrentColumnIndex = 1;

					if (GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString() == "N/A")
					{
						GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
					}

					GrdHelicopter.CurrentColumnIndex = RememberGridCol;
					GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
				}

				GrdHelicopter.CurrentColumnIndex = RememberGridCol;

				modGridEditCommon.InPlace_Grid_Reset(GrdHelicopter, cbo_edit_heli, RememberGridRow, RememberGridCol);
				bEdit_HelicopterGrid_Outstanding = false;

				GrdHelicopter.Redraw = true;

			}

		}

		private void cbo_ac_purchase_question_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{
			int tmpCrefID = 0;
			string Query = "";

			if (RememberGridRow > 0 && bEdit_PurchQuest_Outstanding)
			{

				tmpCrefID = grd_AircraftContacts.get_RowData(RememberGridRow);

				if (cbo_ac_purchase_question.SelectedIndex < 0)
				{
					cbo_ac_purchase_question.SelectedIndex = 0;
				}

				Query = $"UPDATE Aircraft_Reference SET cref_purchase_question = {cbo_ac_purchase_question.GetItemData(cbo_ac_purchase_question.SelectedIndex).ToString()}";
				Query = $"{Query} WHERE cref_id = {tmpCrefID.ToString()}";

				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				TempCommand.CommandType = CommandType.Text;
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery(); // gap-note check this line during blazor stabilization

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_action_date"] = DBNull.Value;
				adoAircraftRecordset.Update();

				modGridEditCommon.InPlace_Grid_Reset(grd_AircraftContacts, cbo_ac_purchase_question, RememberGridRow, RememberGridCol);
				bEdit_PurchQuest_Outstanding = false;
				grd_AircraftContacts.Redraw = true;

			}

		}

		private void Process_Available_Flag_Check()
		{


			int I = 0;
			int cbo_Move = 0;

			if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0)
			{

				// Exclusive Flag
				WasExclusive = chkArray[chkExclusiveFlag_INDEX].CheckState == CheckState.Checked;

				if (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked)
				{

					pnl_Sale_Data.Visible = true;

					if (cbo_ac_asking.Text == modGlobalVars.cEmptyString)
					{
						cbo_ac_asking.SelectedIndex = 0;
					}

					if (cbo_ac_delivery.Text == modGlobalVars.cEmptyString)
					{
						cbo_ac_delivery.SelectedIndex = 1;
					}

					if (txt_ac_list_date.Text == modGlobalVars.cEmptyString)
					{
						txt_ac_list_date.Text = DateTime.Parse(modAdminCommon.DateToday).ToString("d");
					}

				}
				else
				{

					pnl_Sale_Data.Visible = false;

					// Exclusive Flag
					chkArray[chkExclusiveFlag_INDEX].Visible = false;
					// Exclusive Expiration
					chkArray[chkExclusiveExp_INDEX].Visible = false;
					lbl_gen[11].Visible = false;
					txt_exclusive_verify_date.Visible = false;

					cbo_ac_foreign_currency_name.SelectedIndex = -1;
					txt_ac_foreign_currency_price.Text = modGlobalVars.cEmptyString;
					txt_ac_list_date.Text = modGlobalVars.cEmptyString;




				} // If chkArray(chkAvailableFlag_INDEX).Value = vbChecked Then

				modFillAircraftControls.Fill_Aircraft_Status_List(cbo_ac_status, (int) chkArray[chkAvailableFlag_INDEX].CheckState);

				cbo_ac_status.Enabled = false;
				if (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked)
				{


					while(cbo_Move != cbo_ac_status.Items.Count)
					{
						cbo_ac_status.SelectedIndex = cbo_Move;
						if (cbo_ac_status.Text == "For Sale")
						{
							break;
						}
						cbo_Move++;
					};

				}
				else
				{


					while(cbo_Move != cbo_ac_status.Items.Count)
					{
						cbo_ac_status.SelectedIndex = cbo_Move;
						if (cbo_ac_status.Text == "Not for Sale")
						{
							break;
						}
						cbo_Move++;
					};

				} // If chkArray(chkAvailableFlag_INDEX).Value = 1 Then
				cbo_ac_status.Enabled = true;


			} // If adoAircraftRecordset!AC_Journ_id = 0 Then

		} // Process_Available_Flag_Check

		private void chkArray_CheckStateChanged(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.chkArray, eventSender);


			switch(Index)
			{
				case chkIncMktSummary_INDEX :  // Include Market Summaries 
					 
					Fill_Aircraft_History_Grid(); 
					 
					break;
				case chkJournOnlyShowFirst_INDEX :  // Journal - Only Show First [20] 
					 
					break;
				case chkDisplaySalePrice_INDEX :  // Display Sale Price 
					 
					break;
				case chkExclusiveExp_INDEX :  // Exclusive Expiration 
					 
					break;
				case chkLeasedFlag_INDEX :  // Leased Flag 
					 
					break;
				case chkExclusiveFlag_INDEX :  // Exclusive Flag 
					 
					break;
				case chkAvailableFlag_INDEX :  // Available Flag 
					 
					Process_Available_Flag_Check(); 
					 
					break;
			} // Case Index

			//added MSW - 11/12/19
			Remove_Unwated_Statuses();

		} // chkArray_Click


		private void chkArray_MouseDown(Object eventSender, MouseEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.chkArray, eventSender);
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;



			switch(Index)
			{
				case chkDisplaySalePrice_INDEX :  // Display Sale Price 
					 
					if (chkArray[chkDisplaySalePrice_INDEX].CheckState == CheckState.Checked)
					{

						if (MessageBox.Show("Are you sure you don't want this SALE PRICE displayed to customers anymore?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
						{
							chkArray[chkDisplaySalePrice_INDEX].CheckState = CheckState.Checked;
						}
						else
						{
							chkArray[chkDisplaySalePrice_INDEX].CheckState = CheckState.Unchecked;
						}

					}
					else
					{

						if (MessageBox.Show("Are you sure you want this SALE PRICE displayed to customers", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
						{
							chkArray[chkDisplaySalePrice_INDEX].CheckState = CheckState.Unchecked;
						}
						else
						{
							// launch form
							frm_enter_sale_price_company.DefInstance.txt_asking_price.Text = txt_ac_asking_price.Text;
							frm_enter_sale_price_company.DefInstance.txt_sale_price.Text = txt_ac_sale_price.Text;
							frm_enter_sale_price_company.DefInstance.AC_ID = Convert.ToInt32(Double.Parse(txt_ac_id.Text));
							frm_enter_sale_price_company.DefInstance.journ_id = tmp_ac_journ_id;

							frm_enter_sale_price_company.DefInstance.amod_ID = cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex);
							frm_enter_sale_price_company.DefInstance.trans_date = txtHistoryDate.Text;

							frm_enter_sale_price_company.DefInstance.ShowDialog();

							// Display Sale Price
							chkArray[chkDisplaySalePrice_INDEX].CheckState = CheckState.Checked;
							chkArray[chkDisplaySalePrice_INDEX].Enabled = false;

						} // If MsgBox("Are you sure you want this SALE PRICE displayed to customers", vbYesNo) = vbNo Then

					}  // If chkArray(chkDisplaySalePrice_INDEX).Value = vbChecked Then 
					 
					//------------------------------------------------------------------------------- 
					 
					break;
				case chkAvailableFlag_INDEX :  // Available Flag 
					 
					if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0)
					{
						MessageBox.Show("You Cannot Change The Availability of a Historical Aircraft", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					} 
					 
					int tempForEndVar = grd_AircraftContacts.RowsCount - 1; 
					for (int I = 0; I <= tempForEndVar; I++)
					{

						grd_AircraftContacts.CurrentRowIndex = I;
						grd_AircraftContacts.CurrentColumnIndex = 1;

						if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim() == "Sales Company/Contact")
						{
							if (ColorTranslator.ToOle(grd_AircraftContacts.CellBackColor).ToString() == modAdminCommon.PrimaryColor)
							{
								MessageBox.Show("You Currently Have a Sales Company/Contact as Your Primary Company, Please Remove Before Taking This Aircraft Off Market", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
								chkArray[chkAvailableFlag_INDEX].CheckState = CheckState.Checked;
							}
						}

					} 

					 
					Application.DoEvents(); 
					Application.DoEvents(); 
					Application.DoEvents(); 
					Application.DoEvents(); 
					Application.DoEvents(); 
					Application.DoEvents(); 
					 
					// changed from checked to unchecked, cause it really checks what it "was" before checking 
					if (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Unchecked)
					{

						ASK_TO_CLEAR_MAINT = true;
					} 
					// 
					//      If Trim(frm_Aircraft.txt_ac_confidential_notes) <> "" Then 
					//        DoEvents 
					ASK_TO_CLEAR_NOTES = true; 
					Application.DoEvents(); 
					// MSW - COMMENTED OUT these two lines, was "double" clicking here 
					// chkArray(chkAvailableFlag_INDEX).Value = 0 
					// chkArray_Click (chkAvailableFlag_INDEX) ' chk_forsale_click 
					//        End If 
					 
					//        chkArray(chkAvailableFlag_INDEX).Value = Checked 
					//     Else 
					 
					// MOVED TO HERE MSW - 7/29/19 
					//     If Trim(frm_Aircraft.txt_ac_confidential_notes) <> "" Then 
					//       If MsgBox("Would You Like To Clear The Notes on this Aircraft?", vbYesNo) = vbYes Then 
					//             frm_Aircraft.txt_ac_confidential_notes = "" 
					//       End If 
					//    End If 
					 
					//   End If 
					 
					break;
			} // Case Index

		} // chkArray_MouseDown

		private void chkConfirmedOnly_CheckStateChanged(Object eventSender, EventArgs eventArgs) => FillLeaseGrid();


		private void chkConfirmLeaseExpired_CheckStateChanged(Object eventSender, EventArgs eventArgs) => isExpired = chkConfirmLeaseExpired.CheckState == CheckState.Checked;


		private void chkShowAllContactInfo_CheckStateChanged(Object eventSender, EventArgs eventArgs) => Display_Company_Contact();


		private void cmd_Active_Click(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				if (cmd_Active.Enabled)
				{

					cmd_Active.Enabled = false;

					this.Cursor = Cursors.WaitCursor;

					if (!(DeletedHistory || DontWantToSave))
					{
						Transaction_Save_Aircraft();
					}
					else
					{
						DontWantToSave = false;
						DeletedHistory = false;
					}

					modStatusBar.Clear_Status_Bar(modAdminCommon.SB);

					if (cmd_Active.Text == "View Current Aircraft Record")
					{
						tmp_ac_journ_id = 0;
						modAdminCommon.gbl_Aircraft_Journal_ID = 0;
						cmd_Active.Text = "View Historical Aircraft Record";
						lbl_gen[86].Text = modGlobalVars.cEmptyString;
					}
					else
					{
						cmd_Active.Text = "View Current Aircraft Record";
						tmp_ac_journ_id = grd_AircraftHistory.get_RowData(grd_AircraftHistory.CurrentRowIndex);
						modAdminCommon.gbl_Aircraft_Journal_ID = tmp_ac_journ_id;
						lbl_gen[86].Text = Convert.ToString(grd_AircraftHistory[grd_AircraftHistory.CurrentRowIndex, 1].Value);

					}

					if (tmp_ac_journ_id > 0)
					{
						//UPGRADE_ISSUE: (2064) Threed.SSPanel property pnl_gen.Caption was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						pnl_gen[5].setCaption("Specific Information - History");
						lbl_gen[199].Text = "History as of ";
						txtHistoryDate.Text = DateTime.Parse(Convert.ToString(grd_AircraftHistory[grd_AircraftHistory.CurrentRowIndex, 0].Value)).ToString("d");
						txtHistoryDate.Visible = true;
					}
					else
					{
						modAdminCommon.gbl_Aircraft_Journal_ID = 0;
						tmp_ac_journ_id = 0;
						//UPGRADE_ISSUE: (2064) Threed.SSPanel property pnl_gen.Caption was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						pnl_gen[5].setCaption("Specific Information - Current");
						lbl_gen[199].Text = "Current Aircraft";
						txtHistoryDate.Visible = false;
					}

					grd_AircraftHistory.Redraw = true;


					if (adoAircraftRecordset.State == ConnectionState.Open)
					{
						ErrorHandlingHelper.ResumeNext(
							() => {adoAircraftRecordset.CancelUpdate();}, 
							() => {adoAircraftRecordset.Close();});
					}
					adoAircraftRecordset = null;

					Select_Aircraft();

					this.Cursor = CursorHelper.CursorDefault;

					cmd_Active.Enabled = true;

				} // If cmd_Active.Enabled = True Then
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Report_Error($"cmd_Active_Error: acid{txt_ac_id.Text} {excep.Message}");

				this.Cursor = CursorHelper.CursorDefault;
			}

		} // cmd_Active_Click

		private void cmd_Av_Add_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmd_Av_Add, eventSender);

			this.Cursor = Cursors.WaitCursor;

			switch(Index)
			{
				case 0 : 
					cbo_av_description.Items.Clear(); 
					cbo_av_description.Text = modGlobalVars.cEmptyString; 
					 
					cmd_Av_Add[1].Visible = true;  // update 
					cmd_Av_Add[2].Visible = false;  // delete 
					cmd_Av_Add[3].Visible = true;  // cancel 
					 
					lst_Avionics.Enabled = true; 
					pnl_Av.Visible = true; 
					RecordStat = "Add"; 
					 
					break;
				case 1 : 
					Update_Avionics(); 
					Temp_Avionics = modGlobalVars.cEmptyString; 
					lst_Avionics.Enabled = false; 
					pnl_Av.Visible = false; 
					cmd_Av_Add[1].Visible = false;  // update 
					cmd_Av_Add[2].Visible = false;  // delete 
					cmd_Av_Add[3].Visible = false;  // cancel 
					 
					break;
				case 2 : 
					Delete_Avionics(); 
					Temp_Avionics = modGlobalVars.cEmptyString; 
					cmd_Av_Add[1].Visible = false;  // update 
					cmd_Av_Add[2].Visible = false;  // delete 
					cmd_Av_Add[3].Visible = false;  // cancel 
					lst_Avionics.Enabled = false; 
					pnl_Av.Visible = false; 
					break;
				case 3 : 
					Temp_Avionics = modGlobalVars.cEmptyString; 
					RecordStat = modGlobalVars.cEmptyString; 
					cmd_Av_Add[1].Visible = false;  // update 
					cmd_Av_Add[2].Visible = false;  // delete 
					cmd_Av_Add[3].Visible = false;  // cancel 
					 
					lst_Avionics.Enabled = false; 
					pnl_Av.Visible = false; 
					 
					break;
			}

			this.Cursor = CursorHelper.CursorDefault;

		}

		private void cmd_Add_Cert_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmd_Add_Cert, eventSender);

			try
			{

				switch(Index)
				{
					case 0 :  //cmd_add_cert 
						 
						Update_Certification(); 
						 
						break;
					case 1 :  //cmd_inspectionnote_Click 
						// case 1 - apparently got deleted - msw moved add damange note in here 
						//        frm_Journal.Reference_Journal_ID = 0 
						//        frm_Journal.Reference_Ac_Id = adoAircraftRecordset!ac_id 
						//        frm_Journal.Reference_Comp_Id = snp_AircraftContacts!Comp_id 
						//        frm_Journal.Reference_Contact_Id = snp_AircraftContacts!cref_contact_id 
						//        frm_Journal.Reference_Category_Code = "AH" 
						//        frm_Journal.Reference_Yacht_Id = 0 
						//        frm_Journal.Reference_SubCategory_Code = "IN" 
						//        Rec_Journal_Info.journ_account_id = gbl_Account_ID 
						//        frm_Journal.Show vbModal 
						// 
						//        Call Fill_Aircraft_DamageInspection_Grid 
						//        Call Fill_Aircraft_Journal_Grid 

						 
						try
						{
							this.Cursor = Cursors.WaitCursor;

							frm_Journal.DefInstance.Reference_Journal_ID = 0;
							frm_Journal.DefInstance.Reference_Ac_Id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
							// 09/14/2007 - By David D. Cruger
							// Check BOF/EOF prior to assigning compid/contactid
							if ((!snp_AircraftContacts.BOF) && (!snp_AircraftContacts.EOF))
							{
								frm_Journal.DefInstance.Reference_Comp_Id = Convert.ToInt32(snp_AircraftContacts["comp_id"]);
								frm_Journal.DefInstance.Reference_Contact_Id = Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]);
							}
							else
							{
								frm_Journal.DefInstance.Reference_Comp_Id = 0;
								frm_Journal.DefInstance.Reference_Contact_Id = 0;
							} //

							frm_Journal.DefInstance.Reference_Yacht_Id = 0;
							frm_Journal.DefInstance.Reference_Category_Code = "AH";
							frm_Journal.DefInstance.Reference_SubCategory_Code = "DM";
							modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;

							frm_Journal.DefInstance.ShowDialog();

							Fill_Aircraft_DamageInspection_Grid();

							Fill_Tabs(SSTabHelper.GetSelectedIndex(tab_aircraft_details));

							if ((txt_ac_damage_history_notes.Text != "" || grd_aircraftdamage.RowsCount > 1) && (cbo_dam.Text == "" || cbo_dam.Text == "Unknown"))
							{
								MessageBox.Show("Damage Cannot Be Unknown or Blank when Information is in the Damage Notes Field", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
								cbo_dam.Focus();
							}


							this.Activate();

							return;
						}
						catch (System.Exception excep)
						{
							//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
							modAdminCommon.Report_Error($"cmd_AddDamagenote_error:  {Information.Err().Number.ToString()}  {excep.Message}");
							this.Cursor = CursorHelper.CursorDefault;
							return;
						}
					case 2 :  //cmd_Delete_Cert_Click 
						 
						Delete_Certification(); 
						 
						break;
				}

				Fill_Tabs(SSTabHelper.GetSelectedIndex(tab_aircraft_details));

				this.Activate();
			}
			catch (System.Exception excep)
			{
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_Add_Cert_error: {Index.ToString()} {Information.Err().Number.ToString()}  {excep.Message}");
				this.Cursor = CursorHelper.CursorDefault;
			}

		}
		//UPGRADE_NOTE: (7001) The following declaration (cmd_AddDamagenote_Click) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_AddDamagenote_Click()
		//{
			//
			//try
			//{
				//this.Cursor = Cursors.WaitCursor;
				//
				//frm_Journal.DefInstance.Reference_Journal_ID = 0;
				//frm_Journal.DefInstance.Reference_Ac_Id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
				//// 09/14/2007 - By David D. Cruger
				//// Check BOF/EOF prior to assigning compid/contactid
				//if ((!snp_AircraftContacts.BOF) && (!snp_AircraftContacts.EOF))
				//{
					//frm_Journal.DefInstance.Reference_Comp_Id = Convert.ToInt32(snp_AircraftContacts["comp_id"]);
					//frm_Journal.DefInstance.Reference_Contact_Id = Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]);
				//}
				//else
				//{
					//frm_Journal.DefInstance.Reference_Comp_Id = 0;
					//frm_Journal.DefInstance.Reference_Contact_Id = 0;
				//} //
				//
				//frm_Journal.DefInstance.Reference_Yacht_Id = 0;
				//frm_Journal.DefInstance.Reference_Category_Code = "AH";
				//frm_Journal.DefInstance.Reference_SubCategory_Code = "DM";
				//modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
				//
				//frm_Journal.DefInstance.ShowDialog();
				//
				//Fill_Aircraft_DamageInspection_Grid();
				//
				//Fill_Tabs(SSTabHelper.GetSelectedIndex(tab_aircraft_details));
				//
				//if ((txt_ac_damage_history_notes.Text != "" || grd_aircraftdamage.RowsCount > 1) && (cbo_dam.Text == "" || cbo_dam.Text == "Unknown"))
				//{
					//MessageBox.Show("Damage Cannot Be Unknown or Blank when Information is in the Damage Notes Field", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					//cbo_dam.Focus();
				//}
				//
				//
				//this.Activate();
			//}
			//catch (System.Exception excep)
			//{
				////UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				//modAdminCommon.Report_Error($"cmd_AddDamagenote_error:  {Information.Err().Number.ToString()}  {excep.Message}");
				//this.Cursor = CursorHelper.CursorDefault;
				//return;
			//}
			//
		//}

		private void cmd_AssociateCompany_Click(Object eventSender, EventArgs eventArgs)
		{

			tCompFind_ActionTypes = modGlobalVars.e_find_form_action_types.geAssociateComp;

			added_research_only = false;
			Last_Journal_ID = "";

			if (modGlobalVars.bCallShowAndLoadOnlyOnce)
			{

				//UPGRADE_TODO: (1067) Member Clear_Search_Criteria is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Clear_Search_Criteria(true, true, true);
				//UPGRADE_TODO: (1067) Member EntryPoint is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].EntryPoint = modGlobalVars.e_find_form_entry_points.geAssociateToAircraft;
				//UPGRADE_TODO: (1067) Member ActionTypes is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].ActionTypes = tCompFind_ActionTypes;
				//UPGRADE_TODO: (1067) Member Reference_JournalID is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Reference_JournalID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);
				//UPGRADE_TODO: (1067) Member Reference_AircraftID is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Reference_AircraftID = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
				//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Show();
				//UPGRADE_TODO: (1067) Member ZOrder is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].ZOrder(0);

				modAircraft.SetOperatorFlag(modAdminCommon.gbl_Aircraft_ID, modAdminCommon.gbl_Aircraft_Journal_ID);

			}

			StoreKeyAircraftContacts();


			AssociateCompanyFlag = true;

		}

		private void cmd_cancel_Click(Object eventSender, EventArgs eventArgs)
		{

			pnl_Research_Action.Visible = false;
			pnl_Journal.Visible = true;
			txt_journal_note.Focus();

		}

		private void ClearHotBoxItem()
		{

			//*****************************************************************************************************
			// Function used for updating jounral entries
			//*****************************************************************************************************

			string Query = "";
			ADORecordSetHelper snpCurrentItem = null;
			string sUser = "Unknown";
			string strSubject = "";
			string strSubject_hb = "";
			strSubject = "";
			int lJournId = 0;

			try
			{

				if (ListBoxHelper.GetSelectedIndex(lst_Research_Action) >= 0)
				{

					lJournId = lst_Research_Action.GetItemData(ListBoxHelper.GetSelectedIndex(lst_Research_Action));

					Query = $"SELECT journ_user_id FROM Journal WITH(NOLOCK) WHERE journ_id = {lst_Research_Action.GetItemData(ListBoxHelper.GetSelectedIndex(lst_Research_Action)).ToString()}";
					snpCurrentItem = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

					if (!(snpCurrentItem.BOF && snpCurrentItem.EOF))
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snpCurrentItem["journ_user_id"]))
						{
							if (Convert.ToString(snpCurrentItem["journ_user_id"]).Trim() != modGlobalVars.cEmptyString)
							{
								sUser = Convert.ToString(snpCurrentItem["journ_user_id"]).Trim();
							}
						}
						snpCurrentItem.Close();
					}

					snpCurrentItem = null;

					Query = "UPDATE Journal SET";

					strSubject = lst_Research_Action.Text;
					if (strSubject.Trim() != "")
					{
						strSubject = StringsHelper.Replace(strSubject, strSubject.Substring(0, Math.Min(strSubject.IndexOf(modGlobalVars.cHyphen), strSubject.Length)), $"{DateTime.Parse(modAdminCommon.DateToday).ToString("d")} ", 1, -1, CompareMethod.Binary);
					}
					else
					{
						strSubject = strSubject;
					}

					strSubject_hb = strSubject;

					if (strSubject_hb.Trim() != "")
					{
						if (strSubject_hb.Trim().IndexOf('-') >= 0)
						{
							if (Strings.Len(strSubject_hb.Trim()) == (strSubject_hb.Trim().IndexOf('-') + 1))
							{ // added MSW - 5/13/20
								strSubject_hb = strSubject_hb;
							}
							else
							{
								strSubject_hb = strSubject_hb.Trim().Substring(Math.Max(strSubject_hb.Trim().Length - (Strings.Len(strSubject_hb.Trim()) - (strSubject_hb.Trim().IndexOf('-') + 1) - 1), 0));
							}
						}
					}
					else
					{
						strSubject_hb = strSubject_hb;
					}



					if (Strings.Len(strSubject) + 45 > 120)
					{
						strSubject = $"{($"{strSubject} ").Trim().Substring(0, Math.Min(74, ($"{strSubject} ").Trim().Length))} (ACTION CLEARED - Originally entered by {sUser})";
					}
					else
					{
						strSubject = $"{($"{strSubject} ").Trim()} (ACTION CLEARED - Originally entered by {sUser})";
					}

					strSubject_hb = $"{($"{strSubject_hb} ").Trim()} (ACTION CLEARED - Originally entered by {sUser})";

					Query = $"{Query} journ_subject = '{modAdminCommon.Fix_Quote(strSubject.Trim())}'";

					if (txtAddlHotBoxNotes.Text.Trim() != modGlobalVars.cEmptyString)
					{
						Query = $"{Query}, journ_description = '{modAdminCommon.Fix_Quote(txtAddlHotBoxNotes.Text.Trim()).Substring(0, Math.Min(4000, modAdminCommon.Fix_Quote(txtAddlHotBoxNotes.Text.Trim()).Length))}'";
					}
					else
					{
						Query = $"{Query}, journ_description = null";
					}

					Query = $"{Query}, journ_user_id = '{modAdminCommon.gbl_User_ID}'";
					Query = $"{Query}, journ_status = 'A'";
					Query = $"{Query}, journ_subcategory_code = 'RN'";

					//check to see if this category code is to have action date nullified 6/25/04 aey
					if (!modCommon.GetTransWeb("RN"))
					{
						Query = $"{Query}, journ_action_date = '{DateTime.Parse(modAdminCommon.DateToday).ToString("d")}'";
					}
					else
					{
						Query = $"{Query}, journ_action_date = '{DateTime.Parse("1/1/1900").ToString("d")}'";
					}

					Query = $"{Query} WHERE journ_id = {lst_Research_Action.GetItemData(ListBoxHelper.GetSelectedIndex(lst_Research_Action)).ToString()}";

					modAdminCommon.ADO_Transaction("BeginTrans");
					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();
					modAdminCommon.ADO_Transaction("CommitTrans");

					//05/01/2018 - By David D. Cruger; Added
					modAdminCommon.Record_Event("HOTBOX", $"Clear Hot Box Item:=[{strSubject_hb}]", modAdminCommon.gbl_Aircraft_ID, lJournId, 0, false, 0, 0);

					// RTW - 2/23/2012 - MODIFIED TO UPDATE THE HOT BOX SUMMARY TABLE AS WELL.
					//  Query = "update Hot_Box_Summary set hbs_status='X' where hbs_journ_id = " & lst_Research_Action.ItemData(lst_Research_Action.ListIndex)

					// Call LOCAL_ADO_DB.Execute(Query, , adCmdText)
					// INSERTED MSW - 4/6/2012 - THIS WILL TAKE THE JOURNALS AND DELETE AND RE-INSERT THEM INTO HOT BOX
					int tempRefParam = 0;
					modAircraft.delete_and_insert_hotbox(ref tempRefParam, ref modAdminCommon.gbl_Aircraft_ID);

					Fill_Aircraft_Research_Action();

				} // If lst_Research_Action.ListIndex >= 0 Then
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"ClearHotBoxItem_Error ({Information.Err().Number.ToString()}) {excep.Message}");
				modAdminCommon.ADO_Transaction("RollbackTrans");

				return;
			}

		}

		private void cmd_Clear_Exclusive_Confirmation_Company_Click(Object eventSender, EventArgs eventArgs)
		{

			this.Cursor = Cursors.WaitCursor;

			Clear_Exclusive_Company();

			this.Cursor = CursorHelper.CursorDefault;

		}

		private void cmd_Confirm_Company_Click(Object eventSender, EventArgs eventArgs)
		{

			if (cmd_Confirm_Company.Enabled)
			{

				search_on("Confirming Company...");

				Select_Aircraft_Contact();

				if (!ContactRecordsetFilled)
				{ //9/29/06 mjm
					return;
				}

				modCommon.Confirm_Company(Convert.ToInt32(snp_AircraftContacts["comp_id"]));

				grd_AircraftContacts_singleClickBodyCode();

				grd_AircraftContacts.Redraw = true;

				search_off();

			} // If cmd_Confirm_Company.Enabled = True Then

		}

		//UPGRADE_NOTE: (7001) The following declaration (cmd_convert_Click) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_convert_Click() => convert_prices();//
		//


		public void convert_prices()
		{

			double rate1 = 0;
			int current_usd = 0;
			int current_price = 0;

			try
			{

				current_usd = 0;
				current_price = 0;
				rate1 = 0d;

				if (cbo_ac_foreign_currency_name.Text.Trim() != "")
				{

					rate1 = Double.Parse(modCommon.DLookUp("currency_exchange_rate", "Currency", $"(currency_name = '{cbo_ac_foreign_currency_name.Text}')"));

					if (txt_ac_foreign_currency_price.Text.Trim() != "" && txt_ac_asking_price.Text.Trim() != "")
					{
						//UPGRADE_ISSUE: (1046) MsgBox Parameter 'context' is not supported, and was removed. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-1046
						//UPGRADE_ISSUE: (1046) MsgBox Parameter 'helpfile' is not supported, and was removed. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-1046
						Interaction.MsgBox("The data will not be converted when both Price and Foreign Price have values in them.", MsgBoxStyle.OkCancel, "");
					}
					else
					{

						if (rate1 != 0)
						{
							if (txt_ac_foreign_currency_price.Text.Trim() != "")
							{
								current_price = Convert.ToInt32(Double.Parse(StringsHelper.Replace(txt_ac_foreign_currency_price.Text, ",", "", 1, -1, CompareMethod.Binary)));
								txt_ac_asking_price.Text = Double.Parse((current_price / rate1).ToString(), NumberStyles.Any).ToString("N0");
							}

						}
						else
						{
							//UPGRADE_ISSUE: (1046) MsgBox Parameter 'context' is not supported, and was removed. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-1046
							//UPGRADE_ISSUE: (1046) MsgBox Parameter 'helpfile' is not supported, and was removed. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-1046
							Interaction.MsgBox("This Foreign Currency Has No Value in Our System and Must be Entered Manually", MsgBoxStyle.OkCancel, "");
						} // If rate1 <> 0 Then

					} // If Trim(txt_foreign_price.Text) <> "" And Trim(txt_asking_price.Text) <> "" Then

				} // If Trim(cbo_foreign_currency.Text) <> "" Then
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Record_Error("convert_prices_Error", excep.Message);
			}

		} // convert_prices



		private void cmd_DocsInProcessRefresh_Click(Object eventSender, EventArgs eventArgs) => Fill_FAA_Doc_Grid();
		 // cmd_DocsInProcessRefresh_Click

		private void cmd_jcat_Redisplay_Journal_List_Click(Object eventSender, EventArgs eventArgs)
		{
			search_on("Getting Jfournal List...");

			if ((((Strings.Len(txt_journal_category_start_date.Text.Trim()) > 0) ? -1 : 0) | Strings.Len(txt_journal_category_end_date.Text.Trim())) != 0)
			{

				if (Information.IsDate(txt_journal_category_start_date.Text) && Strings.Len(txt_journal_category_end_date.Text.Trim()) == 0)
				{
					Fill_Aircraft_Journal_Grid();
					return;
				}

				if (Information.IsDate(txt_journal_category_end_date.Text) && Strings.Len(txt_journal_category_start_date.Text.Trim()) == 0)
				{
					Fill_Aircraft_Journal_Grid();
					return;
				}

				if (!Information.IsDate(txt_journal_category_start_date.Text))
				{
					MessageBox.Show("Journal Start Date must be in DD/MM/CCYY Format", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					return;
				}

				if (!Information.IsDate(txt_journal_category_end_date.Text))
				{
					MessageBox.Show("Journal End Date must be in DD/MM/CCYY Format", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					return;

				}

			}

			Fill_Aircraft_Journal_Grid();

			search_off();

		}

		private void cmd_Journal_Note_Cancel_Click(Object eventSender, EventArgs eventArgs)
		{

			pnl_Journal.Visible = false;
			pnl_Research_Action.Visible = true;

		}

		private void cmd_Journal_Note_Save_Click(Object eventSender, EventArgs eventArgs)
		{

			this.Cursor = Cursors.WaitCursor;

			string temp_note = txt_journal_note.Text.Substring(0, Math.Min(200, txt_journal_note.Text.Length));

			Insert_Journal_Note();

			modAdminCommon.Record_Event("HOTBOX", $"Added Hot Box Item:=[{temp_note}]", modAdminCommon.gbl_Aircraft_ID, tmp_ac_journ_id, 0, false, 0, 0);

			Fill_Aircraft_Research_Action();
			//Call Fill_Aircraft_Journal_Grid

			pnl_Journal.Visible = false;
			pnl_Research_Action.Visible = true;

			this.Cursor = CursorHelper.CursorDefault;

		}

		private void cmd_Primary_Click(Object eventSender, EventArgs eventArgs)
		{

			if (MessageBox.Show("Are you sure you want to change the Primary Company/Contact?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
			{

				this.Cursor = Cursors.WaitCursor;

				Update_Primary_Company();

				this.Cursor = CursorHelper.CursorDefault;
			}

		}

		private void cmd_Remove_Association_Click(Object eventSender, EventArgs eventArgs)
		{
			AssociateCompanyFlag = false;
			string strDateTime = "";
			string strInsert1 = "";
			string temp_contact_name = "";
			string temp_var = "";

			bool is_co_exclusve = false;


			if (MessageBox.Show("Are you sure you want to remove this company association?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
			{
				search_on("Removing Company Association");

				StoreKeyAircraftContacts();


				grd_AircraftContacts.CurrentColumnIndex = 1;
				temp_var = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();

				if (temp_var.Trim() == "Exclusive Broker")
				{
					is_co_exclusve = true;
				}


				if (is_co_exclusve)
				{

					grd_AircraftContacts.CurrentColumnIndex = 2;
					modAdminCommon.EventTempCompName = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();
					if (modAdminCommon.EventTempCompName.Trim().IndexOf('[') >= 0)
					{
						modAdminCommon.EventTempCompName = modAdminCommon.EventTempCompName.Trim().Substring(0, Math.Min(modAdminCommon.EventTempCompName.Trim().IndexOf('['), modAdminCommon.EventTempCompName.Trim().Length)).Trim();
					}

					modAdminCommon.EventTempCompID = modAircraft.GetCurrentExclID_From_Name(Convert.ToInt32(adoAircraftRecordset["ac_id"]), ref modAdminCommon.EventTempContactID, modAdminCommon.EventTempCompName);

					//'Call modAdminCommon.ADO_Transaction("BeginTrans", adoAircraftRecordset!AC_ID, adoAircraftRecordset!AC_Journ_id, modAdminCommon.EventTempCompID, "")

					if (temp_var.Trim() == "Exclusive Broker")
					{
						modCommon.InsertPriorityEvent("EXOFF1", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, modAdminCommon.EventTempCompName, modAdminCommon.EventTempCompID, modAdminCommon.EventTempContactID, "N", 0, true);
					}
					else
					{
						modCommon.InsertPriorityEvent("EXOFF", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, modAdminCommon.EventTempCompName, modAdminCommon.EventTempCompID, modAdminCommon.EventTempContactID, "N", 0, true);
					}



					modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
					modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
					//Rec_Journal_Info.journ_subcategory_code = "EXOFF"
					if (temp_var.Trim() == "Exclusive Broker")
					{
						modAdminCommon.Rec_Journal_Info.journ_subject = $"Removed Exclusive Previously With {modAdminCommon.EventTempCompName}";
					}
					else
					{
						modAdminCommon.Rec_Journal_Info.journ_subject = $"Removed Co-Exclusive Previously With {modAdminCommon.EventTempCompName}";
					}

					modAdminCommon.Rec_Journal_Info.journ_description = " ";
					modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);

					// 09/28/2016 - Per Jackie this is to be blank so they can select "Who" told them it's off exclusive
					modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
					modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;

					modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
					modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
					modAdminCommon.Rec_Journal_Info.journ_status = "A";

					Remove_Exclusive_Journ_ID = frm_Journal.DefInstance.Commit_Journal_Entry(true);

					//ADDED MSW - 3/3/16 - SHOW THE JOURNAL NOTE WHEN ITS ENTERED
					if (Remove_Exclusive_Journ_ID > 0)
					{

						//Call modAdminCommon.ADO_Transaction("CommitTrans")
						frm_Journal.DefInstance.Reference_Journal_ID = Remove_Exclusive_Journ_ID;
						modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
						frm_Journal.DefInstance.ShowDialog();

						// 09/28/2016 - By David D. Cruger
						// Record an Event so EMail Event Listener
						// Can determine who the Exc Broker was

						modAdminCommon.Record_Event("Homebase-EXOFF", "EXOFF - Off Exclusive", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Remove_Exclusive_Journ_ID, modAdminCommon.EventTempCompID, false, 0, modAdminCommon.EventTempContactID);

						this.Activate();
						search_off();
						Remove_Exclusive_Journ_ID = 0;

						//frm_Journal.Clear_Journal_Form
					}
					else
					{
						modAdminCommon.ADO_Transaction("RollbackTrans");
						MessageBox.Show("The journal entry was not inserted.", "Aircraft : Insert Not Done", MessageBoxButtons.OK, MessageBoxIcon.Information);
						return;
					}

					//' Call modAdminCommon.ADO_Transaction("CommitTrans")
				}


				if (temp_var.Trim() == "Sales Company/Contact")
				{
					grd_AircraftContacts.CurrentColumnIndex = 2;
					modAdminCommon.EventTempCompName = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();
					if (modAdminCommon.EventTempCompName.Trim().IndexOf('[') >= 0)
					{
						modAdminCommon.EventTempCompName = modAdminCommon.EventTempCompName.Trim().Substring(0, Math.Min(modAdminCommon.EventTempCompName.Trim().IndexOf('['), modAdminCommon.EventTempCompName.Trim().Length)).Trim();
					}
					modAdminCommon.EventTempCompName = StringsHelper.Replace(modAdminCommon.EventTempCompName, "'", "''", 1, -1, CompareMethod.Binary);

					modAdminCommon.EventTempCompID = modAircraft.GetCurrentExclID_From_Name(Convert.ToInt32(adoAircraftRecordset["ac_id"]), ref modAdminCommon.EventTempContactID, modAdminCommon.EventTempCompName);

					modCommon.InsertPriorityEvent("RSCPCT", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, modAdminCommon.EventTempCompName, modAdminCommon.EventTempCompID, modAdminCommon.EventTempContactID, "N", 0, false);

					// added MSW - 3/27/17
					strDateTime = DateTimeHelper.ToString(DateTime.Now);
					strInsert1 = "INSERT INTO Journal (";
					strInsert1 = $"{strInsert1}journ_subcategory_code, journ_description,journ_subject, journ_contact_id, journ_comp_id, ";
					strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date, journ_ac_id ";
					strInsert1 = $"{strInsert1}) VALUES ('RN', '";

					strInsert1 = $"{strInsert1}Removed Sales Company/Contact - {modAdminCommon.EventTempCompName}', 'Removed Sales Company/Contact - {modAdminCommon.EventTempCompName}'";
					strInsert1 = $"{strInsert1},0, {modAdminCommon.EventTempCompID.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
					strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
					strInsert1 = $"{strInsert1},{Convert.ToString(adoAircraftRecordset["ac_id"])}";
					strInsert1 = $"{strInsert1}) ";

					modAdminCommon.ADO_Transaction("BeginTrans");
					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = strInsert1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();
					modAdminCommon.ADO_Transaction("CommitTrans");

				}

				// ADDED MSW - 4/10/20 per request
				if (temp_var.Trim() == "Registered to")
				{
					// extra items added in for ocmp info - MSW - 10/12/22
					grd_AircraftContacts.CurrentColumnIndex = 2;
					modAdminCommon.EventTempCompName = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();
					if (modAdminCommon.EventTempCompName.Trim().IndexOf('[') >= 0)
					{
						modAdminCommon.EventTempCompName = modAdminCommon.EventTempCompName.Trim().Substring(0, Math.Min(modAdminCommon.EventTempCompName.Trim().IndexOf('['), modAdminCommon.EventTempCompName.Trim().Length)).Trim();
					}
					modAdminCommon.EventTempCompName = StringsHelper.Replace(modAdminCommon.EventTempCompName, "'", "''", 1, -1, CompareMethod.Binary);

					modAdminCommon.EventTempCompID = modAircraft.GetCurrentExclID_From_Name(Convert.ToInt32(adoAircraftRecordset["ac_id"]), ref modAdminCommon.EventTempContactID, modAdminCommon.EventTempCompName);

					modCommon.InsertPriorityEvent("RREGTO", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, modAdminCommon.EventTempCompName, modAdminCommon.EventTempCompID, modAdminCommon.EventTempContactID, "N", 0, false);
				}



				// added MSW - per request - 6/3/19
				if (temp_var.Trim() == "Charter Company")
				{
					grd_AircraftContacts.CurrentColumnIndex = 2;
					modAdminCommon.EventTempCompName = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();
					if (modAdminCommon.EventTempCompName.Trim().IndexOf('[') >= 0)
					{
						modAdminCommon.EventTempCompName = modAdminCommon.EventTempCompName.Trim().Substring(0, Math.Min(modAdminCommon.EventTempCompName.Trim().IndexOf('['), modAdminCommon.EventTempCompName.Trim().Length)).Trim();
					}
					modAdminCommon.EventTempCompName = StringsHelper.Replace(modAdminCommon.EventTempCompName, "'", "''", 1, -1, CompareMethod.Binary);

					modAdminCommon.EventTempCompID = modAircraft.GetCurrentExclID_From_Name(Convert.ToInt32(adoAircraftRecordset["ac_id"]), ref modAdminCommon.EventTempContactID, modAdminCommon.EventTempCompName);

					modCommon.InsertPriorityEvent("RCHCMP", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, modAdminCommon.EventTempCompName, modAdminCommon.EventTempCompID, modAdminCommon.EventTempContactID, "N", 0, false);

					strDateTime = DateTimeHelper.ToString(DateTime.Now);
					strInsert1 = "INSERT INTO Journal (";
					strInsert1 = $"{strInsert1}journ_subcategory_code, journ_description,journ_subject, journ_contact_id, journ_comp_id, ";
					strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date, journ_ac_id ";
					strInsert1 = $"{strInsert1}) VALUES ('RN', '";

					strInsert1 = $"{strInsert1}Removed Charter Company - {modAdminCommon.EventTempCompName}', 'Removed Charter Company - {modAdminCommon.EventTempCompName}'";
					strInsert1 = $"{strInsert1},0, {modAdminCommon.EventTempCompID.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
					strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
					strInsert1 = $"{strInsert1},{Convert.ToString(adoAircraftRecordset["ac_id"])}";
					strInsert1 = $"{strInsert1}) ";

					modAdminCommon.ADO_Transaction("BeginTrans");
					DbCommand TempCommand_2 = null;
					TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
					TempCommand_2.CommandText = strInsert1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
					TempCommand_2.ExecuteNonQuery();
					modAdminCommon.ADO_Transaction("CommitTrans");
				}


				// ADDED MSW - 3/2/20
				if (temp_var.Trim() == "Certificate Holder")
				{
					grd_AircraftContacts.CurrentColumnIndex = 2;
					modAdminCommon.EventTempCompName = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();
					if (modAdminCommon.EventTempCompName.Trim().IndexOf('[') >= 0)
					{
						modAdminCommon.EventTempCompName = modAdminCommon.EventTempCompName.Trim().Substring(0, Math.Min(modAdminCommon.EventTempCompName.Trim().IndexOf('['), modAdminCommon.EventTempCompName.Trim().Length)).Trim();
					}
					modAdminCommon.EventTempCompName = StringsHelper.Replace(modAdminCommon.EventTempCompName, "'", "''", 1, -1, CompareMethod.Binary);

					modAdminCommon.EventTempCompID = modAircraft.GetCurrentExclID_From_Name(Convert.ToInt32(adoAircraftRecordset["ac_id"]), ref modAdminCommon.EventTempContactID, modAdminCommon.EventTempCompName);

					modCommon.InsertPriorityEvent("RCERTH", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, modAdminCommon.EventTempCompName, modAdminCommon.EventTempCompID, modAdminCommon.EventTempContactID, "N", 0, false);

					strDateTime = DateTimeHelper.ToString(DateTime.Now);
					strInsert1 = "INSERT INTO Journal (";
					strInsert1 = $"{strInsert1}journ_subcategory_code, journ_description,journ_subject, journ_contact_id, journ_comp_id, ";
					strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date, journ_ac_id ";
					strInsert1 = $"{strInsert1}) VALUES ('RN', '";

					strInsert1 = $"{strInsert1}Removed Certificate Holder - {modAdminCommon.EventTempCompName}', 'Removed Certificate Holder - {modAdminCommon.EventTempCompName}'";
					strInsert1 = $"{strInsert1},0, {modAdminCommon.EventTempCompID.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
					strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
					strInsert1 = $"{strInsert1},{Convert.ToString(adoAircraftRecordset["ac_id"])}";
					strInsert1 = $"{strInsert1}) ";

					modAdminCommon.ADO_Transaction("BeginTrans");
					DbCommand TempCommand_3 = null;
					TempCommand_3 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_3);
					TempCommand_3.CommandText = strInsert1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_3.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_3);
					TempCommand_3.ExecuteNonQuery();
					modAdminCommon.ADO_Transaction("CommitTrans");
				}



				// added MSW - per request - 6/3/19
				if (temp_var.Trim() == "Aircraft Management Company")
				{
					grd_AircraftContacts.CurrentColumnIndex = 2;
					modAdminCommon.EventTempCompName = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();
					if (modAdminCommon.EventTempCompName.Trim().IndexOf('[') >= 0)
					{
						modAdminCommon.EventTempCompName = modAdminCommon.EventTempCompName.Trim().Substring(0, Math.Min(modAdminCommon.EventTempCompName.Trim().IndexOf('['), modAdminCommon.EventTempCompName.Trim().Length)).Trim();
					}
					modAdminCommon.EventTempCompName = StringsHelper.Replace(modAdminCommon.EventTempCompName, "'", "''", 1, -1, CompareMethod.Binary);

					modAdminCommon.EventTempCompID = modAircraft.GetCurrentExclID_From_Name(Convert.ToInt32(adoAircraftRecordset["ac_id"]), ref modAdminCommon.EventTempContactID, modAdminCommon.EventTempCompName);

					modCommon.InsertPriorityEvent("RAMCMP", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, modAdminCommon.EventTempCompName, modAdminCommon.EventTempCompID, modAdminCommon.EventTempContactID, "N", 0, false);

					strDateTime = DateTimeHelper.ToString(DateTime.Now);
					strInsert1 = "INSERT INTO Journal (";
					strInsert1 = $"{strInsert1}journ_subcategory_code, journ_description,journ_subject, journ_contact_id, journ_comp_id, ";
					strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date, journ_ac_id ";
					strInsert1 = $"{strInsert1}) VALUES ('RN', '";

					strInsert1 = $"{strInsert1}Removed Aircraft Management Company - {modAdminCommon.EventTempCompName}', 'Removed Aircraft Management Company - {modAdminCommon.EventTempCompName}'";
					strInsert1 = $"{strInsert1},0, {modAdminCommon.EventTempCompID.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
					strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
					strInsert1 = $"{strInsert1},{Convert.ToString(adoAircraftRecordset["ac_id"])}";
					strInsert1 = $"{strInsert1}) ";

					modAdminCommon.ADO_Transaction("BeginTrans");
					DbCommand TempCommand_4 = null;
					TempCommand_4 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_4);
					TempCommand_4.CommandText = strInsert1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_4.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_4);
					TempCommand_4.ExecuteNonQuery();
					modAdminCommon.ADO_Transaction("CommitTrans");
				}



				if (temp_var.Trim() == "Non-Exclusive Sales Contact")
				{
					grd_AircraftContacts.CurrentColumnIndex = 2;
					modAdminCommon.EventTempCompName = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();
					if (modAdminCommon.EventTempCompName.Trim().IndexOf('[') >= 0)
					{
						modAdminCommon.EventTempCompName = modAdminCommon.EventTempCompName.Trim().Substring(0, Math.Min(modAdminCommon.EventTempCompName.Trim().IndexOf('['), modAdminCommon.EventTempCompName.Trim().Length)).Trim();
					}
					modAdminCommon.EventTempCompName = StringsHelper.Replace(modAdminCommon.EventTempCompName, "'", "''", 1, -1, CompareMethod.Binary);

					modAdminCommon.EventTempCompID = modAircraft.GetCurrentExclID_From_Name(Convert.ToInt32(adoAircraftRecordset["ac_id"]), ref modAdminCommon.EventTempContactID, modAdminCommon.EventTempCompName);

					modCommon.InsertPriorityEvent("RNESC", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, modAdminCommon.EventTempCompName, modAdminCommon.EventTempCompID, modAdminCommon.EventTempContactID, "N", 0, false);

					// added MSW - 3/27/17
					strDateTime = DateTimeHelper.ToString(DateTime.Now);
					strInsert1 = "INSERT INTO Journal (";
					strInsert1 = $"{strInsert1}journ_subcategory_code, journ_description,journ_subject, journ_contact_id, journ_comp_id, ";
					strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date, journ_ac_id ";
					strInsert1 = $"{strInsert1}) VALUES ('RN', '";

					strInsert1 = $"{strInsert1}Removed Non-Exclusive Sales Contact - {modAdminCommon.EventTempCompName}', 'Removed Non-Exclusive Sales Contact - {modAdminCommon.EventTempCompName}'";
					strInsert1 = $"{strInsert1},0, {modAdminCommon.EventTempCompID.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
					strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
					strInsert1 = $"{strInsert1},{Convert.ToString(adoAircraftRecordset["ac_id"])}";
					strInsert1 = $"{strInsert1}) ";

					modAdminCommon.ADO_Transaction("BeginTrans");
					DbCommand TempCommand_5 = null;
					TempCommand_5 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_5);
					TempCommand_5.CommandText = strInsert1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_5.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_5);
					TempCommand_5.ExecuteNonQuery();
					modAdminCommon.ADO_Transaction("CommitTrans");

				}


				//Research Only
				if (temp_var.Trim() == "Research Only")
				{
					grd_AircraftContacts.CurrentColumnIndex = 2;


					modAdminCommon.EventTempCompName = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();
					if (modAdminCommon.EventTempCompName.Trim().IndexOf('[') >= 0)
					{
						modAdminCommon.EventTempCompName = modAdminCommon.EventTempCompName.Trim().Substring(0, Math.Min(modAdminCommon.EventTempCompName.Trim().IndexOf('['), modAdminCommon.EventTempCompName.Trim().Length)).Trim();
					}

					modAdminCommon.EventTempCompID = modAircraft.GetCurrentExclID_From_Name(Convert.ToInt32(adoAircraftRecordset["ac_id"]), ref modAdminCommon.EventTempContactID, modAdminCommon.EventTempCompName);

					//  Call InsertPriorityEvent("RNESC", adoAircraftRecordset!AC_ID, 0, modAdminCommon.EventTempCompName, modAdminCommon.EventTempCompID, modAdminCommon.EventTempContactID, "N", 0, False)


					// added MSW - 3/27/17
					strDateTime = DateTimeHelper.ToString(DateTime.Now);
					strInsert1 = "INSERT INTO Journal (";
					strInsert1 = $"{strInsert1}journ_subcategory_code, journ_description,journ_subject, journ_contact_id, journ_comp_id, ";
					strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date, journ_ac_id ";
					strInsert1 = $"{strInsert1}) VALUES ('RN', '";

					strInsert1 = $"{strInsert1}', 'Removed Research Only Company - {StringsHelper.Replace(modAdminCommon.EventTempCompName, "'", "''", 1, -1, CompareMethod.Binary)} ({modAdminCommon.EventTempCompID.ToString()})'";
					strInsert1 = $"{strInsert1},0, {modAdminCommon.EventTempCompID.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
					strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
					strInsert1 = $"{strInsert1},{Convert.ToString(adoAircraftRecordset["ac_id"])}";
					strInsert1 = $"{strInsert1}) ";

					modAdminCommon.ADO_Transaction("BeginTrans");
					DbCommand TempCommand_6 = null;
					TempCommand_6 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_6);
					TempCommand_6.CommandText = strInsert1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_6.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_6);
					TempCommand_6.ExecuteNonQuery();
					modAdminCommon.ADO_Transaction("CommitTrans");

				}


				if (temp_var.Trim() == "Chief Pilot")
				{
					grd_AircraftContacts.CurrentColumnIndex = 2;

					modAdminCommon.EventTempCompName = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();
					if (modAdminCommon.EventTempCompName.Trim().IndexOf('[') >= 0)
					{
						modAdminCommon.EventTempCompName = modAdminCommon.EventTempCompName.Trim().Substring(0, Math.Min(modAdminCommon.EventTempCompName.Trim().IndexOf('['), modAdminCommon.EventTempCompName.Trim().Length)).Trim();
					}

					// set this so that it finds it ? - msw - 11/2/21
					modAdminCommon.EventTempContactID = -2;

					modAdminCommon.EventTempCompID = modAircraft.GetCurrentExclID_From_Name(Convert.ToInt32(adoAircraftRecordset["ac_id"]), ref modAdminCommon.EventTempContactID, modAdminCommon.EventTempCompName, "44");


					if (modAdminCommon.EventTempContactID < 0)
					{
						modAdminCommon.EventTempContactID = 0;
					}

					modCommon.InsertPriorityEvent("RCHPI", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, modCommon.GetContactName(modAdminCommon.EventTempContactID, 0), modAdminCommon.EventTempCompID, modAdminCommon.EventTempContactID, "N", 0, false);




					// added MSW - 3/27/17
					strDateTime = DateTimeHelper.ToString(DateTime.Now);
					strInsert1 = "INSERT INTO Journal (";
					strInsert1 = $"{strInsert1}journ_subcategory_code, journ_description,journ_subject, journ_contact_id, journ_comp_id, ";
					strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date, journ_ac_id ";
					strInsert1 = $"{strInsert1}) VALUES ('RN', '";

					strInsert1 = $"{strInsert1}', 'Removed Chief Pilot - {StringsHelper.Replace(modCommon.GetContactName(modAdminCommon.EventTempContactID, 0), "'", "''", 1, -1, CompareMethod.Binary)} ({modAdminCommon.EventTempCompID.ToString()})'";
					strInsert1 = $"{strInsert1},0, {modAdminCommon.EventTempCompID.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
					strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
					strInsert1 = $"{strInsert1},{Convert.ToString(adoAircraftRecordset["ac_id"])}";
					strInsert1 = $"{strInsert1}) ";

					modAdminCommon.ADO_Transaction("BeginTrans");
					DbCommand TempCommand_7 = null;
					TempCommand_7 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_7);
					TempCommand_7.CommandText = strInsert1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_7.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_7);
					TempCommand_7.ExecuteNonQuery();
					modAdminCommon.ADO_Transaction("CommitTrans");
				}

				if (temp_var.Trim() == "Delivery Position Holder")
				{
					grd_AircraftContacts.CurrentColumnIndex = 2;

					modAdminCommon.EventTempCompName = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();
					if (modAdminCommon.EventTempCompName.Trim().IndexOf('[') >= 0)
					{
						modAdminCommon.EventTempCompName = modAdminCommon.EventTempCompName.Trim().Substring(0, Math.Min(modAdminCommon.EventTempCompName.Trim().IndexOf('['), modAdminCommon.EventTempCompName.Trim().Length)).Trim();
					}

					modAdminCommon.EventTempCompID = modAircraft.GetCurrentExclID_From_Name(Convert.ToInt32(adoAircraftRecordset["ac_id"]), ref modAdminCommon.EventTempContactID, modAdminCommon.EventTempCompName);

					modCommon.InsertPriorityEvent("RDEP", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, modAdminCommon.EventTempCompName, modAdminCommon.EventTempCompID, modAdminCommon.EventTempContactID, "N", 0, false);


					// added MSW - 3/27/17
					strDateTime = DateTimeHelper.ToString(DateTime.Now);
					strInsert1 = "INSERT INTO Journal (";
					strInsert1 = $"{strInsert1}journ_subcategory_code, journ_description,journ_subject, journ_contact_id, journ_comp_id, ";
					strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date, journ_ac_id ";
					strInsert1 = $"{strInsert1}) VALUES ('RN', '";

					strInsert1 = $"{strInsert1}', 'Removed Delivery Position - {StringsHelper.Replace(modAdminCommon.EventTempCompName, "'", "''", 1, -1, CompareMethod.Binary)} ({modAdminCommon.EventTempCompID.ToString()})'";
					strInsert1 = $"{strInsert1},0, {modAdminCommon.EventTempCompID.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
					strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
					strInsert1 = $"{strInsert1},{Convert.ToString(adoAircraftRecordset["ac_id"])}";
					strInsert1 = $"{strInsert1}) ";

					modAdminCommon.ADO_Transaction("BeginTrans");
					DbCommand TempCommand_8 = null;
					TempCommand_8 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_8);
					TempCommand_8.CommandText = strInsert1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_8.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_8);
					TempCommand_8.ExecuteNonQuery();
					modAdminCommon.ADO_Transaction("CommitTrans");
				}


				if (temp_var.Trim() == "CAMO")
				{
					grd_AircraftContacts.CurrentColumnIndex = 2;

					modAdminCommon.EventTempCompName = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();
					if (modAdminCommon.EventTempCompName.Trim().IndexOf('[') >= 0)
					{
						modAdminCommon.EventTempCompName = modAdminCommon.EventTempCompName.Trim().Substring(0, Math.Min(modAdminCommon.EventTempCompName.Trim().IndexOf('['), modAdminCommon.EventTempCompName.Trim().Length)).Trim();
					}

					modAdminCommon.EventTempCompID = modAircraft.GetCurrentExclID_From_Name(Convert.ToInt32(adoAircraftRecordset["ac_id"]), ref modAdminCommon.EventTempContactID, modAdminCommon.EventTempCompName);

					modCommon.InsertPriorityEvent("RCAMO", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, modAdminCommon.EventTempCompName, modAdminCommon.EventTempCompID, modAdminCommon.EventTempContactID, "N", 0, false);


					// added MSW - 3/27/17
					strDateTime = DateTimeHelper.ToString(DateTime.Now);
					strInsert1 = "INSERT INTO Journal (";
					strInsert1 = $"{strInsert1}journ_subcategory_code, journ_description,journ_subject, journ_contact_id, journ_comp_id, ";
					strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date, journ_ac_id ";
					strInsert1 = $"{strInsert1}) VALUES ('RN', '";

					strInsert1 = $"{strInsert1}', 'Removed CAMO Company - {StringsHelper.Replace(modAdminCommon.EventTempCompName, "'", "''", 1, -1, CompareMethod.Binary)} ({modAdminCommon.EventTempCompID.ToString()})'";
					strInsert1 = $"{strInsert1},0, {modAdminCommon.EventTempCompID.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
					strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
					strInsert1 = $"{strInsert1},{Convert.ToString(adoAircraftRecordset["ac_id"])}";
					strInsert1 = $"{strInsert1}) ";

					modAdminCommon.ADO_Transaction("BeginTrans");
					DbCommand TempCommand_9 = null;
					TempCommand_9 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_9);
					TempCommand_9.CommandText = strInsert1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_9.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_9);
					TempCommand_9.ExecuteNonQuery();
					modAdminCommon.ADO_Transaction("CommitTrans");
				}











				if (CheckSpecialRemoveCompanyAssociations())
				{

					Remove_Company_Association();

					modAircraft.SetOperatorFlag(modAdminCommon.gbl_Aircraft_ID, modAdminCommon.gbl_Aircraft_Journal_ID);

					Fill_Aircraft_Contact_Grid();

					search_on("Saving Transmits...");

					SaveAircraftContactTransmits();

					// INSERTED MSW - 4/6/2012 - THIS WILL TAKE THE JOURNALS AND DELETE AND RE-INSERT THEM INTO HOT BOX
					int tempRefParam = 0;
					modAircraft.delete_and_insert_hotbox(ref tempRefParam, ref modAdminCommon.gbl_Aircraft_ID);

				}

				search_off();
			}

		}

		private void cmd_Save_Click(Object eventSender, EventArgs eventArgs)
		{

			tbr_ToolBar.Enabled = false; // added MSw - so u cant go back before its finished

			// added MSW - to fix state in case i need to
			//    If isnothing(aport_country_temp) Then
			//        aport_country_temp = ""
			//    End If
			//    If isnothing(aport_state_temp) Then
			//        aport_state_temp = ""
			//    End If


			//   ' switched all of the 'aport_country_temp' in this area to cbobasecountry. 3 of them
			//    If Trim(cboBaseCountry.Text) <> "" Then
			//        If Trim(cboBaseState.Text) = "" Then
			//            Dim i As Integer
			//            Call enable_or_unenable_aport(True) ' make them not editable - MSW - 6/9/21
			//
			//                Call modFillCompConControls.fill_state_FromArray(cboBaseState, True, False, False, cboBaseCountry.Text)
			//
			//              DoEvents
			//              DoEvents
			//
			//                If Trim(cboBaseCountry.Text) <> "" Then
			//                        cboBaseState.ListIndex = -1
			//                        For i = 0 To cboBaseState.ListCount - 1
			//                            If LCase$(cboBaseState.List(i)) = LCase$(Trim$(aport_state_temp)) Then
			//                                cboBaseState.ListIndex = i
			//                                Exit For
			//                            End If
			//                        Next i
			//                End If
			//
			//            Call enable_or_unenable_aport(False) ' make them not editable - MSW - 6/9/21
			//        End If
			//    End If


			// add in checking to make sure it is correctly formatted
			// 7/12/23 MSW
			if (chk_ac_aport_private[0].CheckState == CheckState.Checked && chk_ac_aport_private[2].CheckState == CheckState.Checked)
			{
				MessageBox.Show("AC Base Tab Issue: Your Airport Base is checked 'Transient' and 'Private'. Please Adjust Before Saving.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
				tbr_ToolBar.Enabled = true;
				SSTabHelper.SetSelectedIndex(tab_ACMain, 4);
				return;
			}
			else if (chk_ac_aport_private[2].CheckState == CheckState.Checked && txtBaseAirportName.Text != "Transient")
			{ 
				MessageBox.Show("AC Base Tab Issue: Your Airport Base is checked 'Transient' but not named 'Transient'. Please Adjust Before Saving.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
				tbr_ToolBar.Enabled = true;
				SSTabHelper.SetSelectedIndex(tab_ACMain, 4);
				return;
			}
			else if (chk_ac_aport_private[2].CheckState == CheckState.Unchecked && txtBaseAirportName.Text == "Transient")
			{ 
				MessageBox.Show("AC Base Tab Issue: Your Airport Base is named 'Transient' but not checked 'Transient'. Please Adjust Before Saving.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
				tbr_ToolBar.Enabled = true;
				SSTabHelper.SetSelectedIndex(tab_ACMain, 4);
				return;
			}
			else if (chk_ac_aport_private[0].CheckState == CheckState.Unchecked && txtBaseAirportName.Text == "Private")
			{ 
				MessageBox.Show("AC Base Tab Issue: Your Airport Base is named 'Private' but not checked 'Private'. Please Adjust Before Saving.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
				tbr_ToolBar.Enabled = true;
				SSTabHelper.SetSelectedIndex(tab_ACMain, 4);
				return;
			}
			else if (chk_ac_aport_private[0].CheckState == CheckState.Checked && txtBaseAirportName.Text != "Private")
			{ 
				MessageBox.Show("AC Base Tab Issue: Your Airport Base is checked 'Private' but not named 'Private'. Please Adjust Before Saving.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
				tbr_ToolBar.Enabled = true;
				SSTabHelper.SetSelectedIndex(tab_ACMain, 4);
				return;
			}
			else if (txtBaseCity.Text != "" && cboBaseState.Items.Count > 1 && cboBaseState.Text.Trim() == "")
			{ 
				// if you have a city and states, but no state picked
				MessageBox.Show("AC Base Tab Issue: You Must select an Airport 'State' if you have an Airport Country with 'States' and have a 'City' Entered. Please Adjust Before Saving.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
				tbr_ToolBar.Enabled = true;
				SSTabHelper.SetSelectedIndex(tab_ACMain, 4);
				return;
			}
			else if (chk_ac_aport_private[0].CheckState == CheckState.Checked && cboBaseCountry.Text.Trim() == "")
			{ 
				// if its private and named private there must be a country
				MessageBox.Show("AC Base Tab Issue: You Must select an Airport 'Country' if you have a 'Private' Airport. Please Adjust Before Saving.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
				tbr_ToolBar.Enabled = true;
				SSTabHelper.SetSelectedIndex(tab_ACMain, 4);
				return;
			}


			// added MSW - 9/29/23
			if (cbo_ac_country_of_registration.Text.Trim() == "" && txt_ac_reg_no[0].Text.Trim() != "")
			{
				// if its private and named private there must be a country
				MessageBox.Show("You have a Blank Country of Registration. Please select a Valid Country before Saving.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
				return;
			}


			Save_Aircraft_Click();

			tbr_ToolBar.Enabled = true;

		}

		private void cmd_Set_As_Exclusive_Click(Object eventSender, EventArgs eventArgs)
		{

			grd_AircraftContacts.CurrentColumnIndex = 1;

			if (MessageBox.Show($"Are you sure you want to make {grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString()} the Exclusive Confirmation Company for this aircraft?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
			{
				this.Cursor = Cursors.WaitCursor;

				Set_Exclusive_Company();

				this.Cursor = CursorHelper.CursorDefault;
			}

			grd_AircraftContacts.Redraw = true;

		}

		private void cmd_set_mapping_flag_Click(Object eventSender, EventArgs eventArgs) => lbl_gen[110].Text = set_homebase_Reference(modAdminCommon.gbl_Aircraft_ID);


		//
		//
		private void cmdAddACDetail_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmdAddACDetail, eventSender);

			bool bIsAllReadyOpen = false;
			object Obj = null;
			int tmp_rows = 0;
			int NewCompID = 0;
			int New_Aircraft_Reference_ID = 0;
			string query1 = "";
			int lJournId = 0;
			string journal_text = "";
			string tmpquery = "";
			string testtextbefore = "";
			string testtextafter = "";
			int temp_row = 0;

			string temp_contact = Convert.ToString(cbo_company_research_contact.Tag);


			// Temp Hold
			//Set new_frm_ShareRelationships = New frm_ShareRelationships

			try
			{

				frm_AircraftDetails.DefInstance.DetailID = 0;
				frm_AircraftDetails.DefInstance.inACID = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
				frm_AircraftDetails.DefInstance.inJournID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);


				string[] tmpArrayToPass = null;

				switch(Index)
				{
					case 0 : 
						frm_AircraftDetails.DefInstance.DetailType = "Interior"; 
						 
						break;
					case 1 : 
						frm_AircraftDetails.DefInstance.DetailType = "Exterior"; 
						 
						break;
					case 2 : 
						frm_AircraftDetails.DefInstance.DetailType = "Equipment"; 
						 
						break;
					case 3 : 
						frm_AircraftDetails.DefInstance.DetailType = "Maintenance"; 
						 
						break;
					case 4 : 
						frm_AircraftDetails.DefInstance.DetailType = "Addl Cockpit Equipment"; 
						 
						break;
					case 5 :  // View Shared Relationship 
						 
						frm_ShareRelationships.DefInstance.Close(); 
						//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
						//VB.Global.Load(frm_ShareRelationships.DefInstance); 
						 
						frm_ShareRelationships.DefInstance.EntryPoint = modGlobalVars.e_find_form_entry_points.geAddShareRelation;  // set the entry point 
						frm_ShareRelationships.DefInstance.inACID = Convert.ToInt32(adoAircraftRecordset["ac_id"]); 
						frm_ShareRelationships.DefInstance.inJournID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]); 
						frm_ShareRelationships.DefInstance.incompid = Convert.ToInt32(snp_AircraftContacts["cref_comp_id"]); 
						frm_ShareRelationships.DefInstance.inContactId = Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]); 
						frm_ShareRelationships.DefInstance.inCrefID = Convert.ToInt32(snp_AircraftContacts["cref_id"]); 
						frm_ShareRelationships.DefInstance.inPercent = Convert.ToDouble(snp_AircraftContacts["cref_owner_percent"]); 
						frm_ShareRelationships.DefInstance.Show();  // show the form 
						search_off(); 
						 
						//    Case 3 
						// 
						// 
						//        If CheckForAnyChanges("", "", "", False, 0, "", False) = True Then 
						//          Call MsgBox("This Aircraft has changes that need to be Saved before a new window is launched. It will ask to save your current record", vbOKOnly) 
						//          Call Save_Aircraft_Click 
						//        End If 
						// 
						//        frm_Web_Page.AC_ID = adoAircraftRecordset!AC_ID 
						//        frm_Web_Page.Ac_Maint_ID = 0 
						//       ' frm_Web_Page.Enabled = True 
						//        'frm_Web_Page.SetFocus 
						//        'frm_Web_Page.WhichReport = "View Maintenance Details" 
						//        Load frm_Web_Page 
						//        frm_Web_Page.Show 
						// 
						 
						break;
					case 6 : 

						 
						//        Load frm_WebReport 
						//        frm_WebReport.AC_ID = adoAircraftRecordset!AC_ID 
						//        frm_WebReport.Ac_Maint_ID = 0 
						//        frm_WebReport.WhichReport = "View Maintenance Details" 
						//        frm_WebReport.Show 
						 
						string tempRefParam = ""; 
						string tempRefParam2 = ""; 
						string tempRefParam3 = ""; 
						bool tempRefParam4 = false; 
						int tempRefParam5 = 0; 
						string tempRefParam6 = ""; 
						bool tempRefParam7 = false; 
						if (CheckForAnyChanges(ref tempRefParam, ref tempRefParam2, ref tempRefParam3, ref tempRefParam4, ref tempRefParam5, ref tempRefParam6, ref tempRefParam7))
						{
							MessageBox.Show("This Aircraft has changes that need to be Saved before a new window is launched. It will ask to save your current record", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
							// Call Save_Aircraft_Click
							Transaction_Save_Aircraft();
						}
						else
						{
							// IF THERE HAVE BEEN NO CHANGES, STILL TRANSMIT
							// ADDED IN MSW 4/16/20 - MAKE SURE WE RE_TRANSMIT WHEN DONE -----------------
							tmpArrayToPass = new string[]{"", ""};

							//    If MsgBox("This will send this aircraft to the customers even if NO CHANGES have been made." & vbCrLf & vbCrLf & "Are you sure you want to transmit this Aircraft?", vbYesNo) = vbYes Then

							modCommon.ClearAircraftActionDate(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]));

							modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "MTrans");

							if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0)
							{
								modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Change", ref tmpArrayToPass);
								if (Convert.ToString(adoAircraftRecordset["ac_forsale_flag"]) == "Y")
								{
									modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Change", ref tmpArrayToPass);
								}
							}
							else
							{

								modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Transaction", "Change", ref tmpArrayToPass);
							}


							modAdminCommon.ADO_Transaction("CommitTrans");
							//  MsgBox "Transmit Successful"
							//   End If
						} 
						 
						frm_Web_Page.DefInstance.AC_ID = Convert.ToInt32(adoAircraftRecordset["ac_id"]); 
						frm_Web_Page.DefInstance.Ac_Maint_ID = 0; 
						// frm_Web_Page.Enabled = True 
						//frm_Web_Page.SetFocus 
						//frm_Web_Page.WhichReport = "View Maintenance Details" 
						//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
						//VB.Global.Load(frm_Web_Page.DefInstance); 
						frm_Web_Page.DefInstance.Show(); 





						 
						break;
					case 7 : 
						//----- ADDED MSW - UPDATING/CHANGING COMPANY RELATOINSHIPS-------------- 
						Select_Aircraft_Contact(); 
						 
						if (!ContactRecordsetFilled)
						{ //9/29/06 mjm
							return;
						} 
						 
						// temp_row = grd_AircraftContacts.Row 
						NewCompID = Convert.ToInt32(snp_AircraftContacts["comp_id"]); 
						New_Aircraft_Reference_ID = Convert.ToInt32(snp_AircraftContacts["cref_id"]); 
						lJournId = Convert.ToInt32(snp_AircraftContacts["cref_journ_id"]); 
						 
						// BUILD UPDATE QUERY 1 TO REMOVE ANY PRIMARY FROM THE AIRCRAFT 
						query1 = "UPDATE Aircraft_Reference SET "; 

						 
						// added MSW - 10/19/2020---------------- 
						query1 = $"{query1} cref_verified_flag = '"; 
						 
						if (chk_verified.CheckState == CheckState.Checked)
						{ //if its unverified
							query1 = $"{query1}N";
						}
						else
						{
							query1 = $"{query1}Y";
						} 
						 
						query1 = $"{query1}', "; 

						 
						if (Convert.ToString(chk_verified.Tag) == "1" && chk_verified.CheckState == CheckState.Unchecked)
						{ // then it has changed to be 0, which is verified
							journal_text = "Company/Aircraft Relationship Updated to be Verified";
							InsertJournalNote_AC(journal_text, "", NewCompID);
						}
						else if (Convert.ToString(chk_verified.Tag) == "0" && chk_verified.CheckState == CheckState.Checked)
						{  // has been changed to un verified/checked
							journal_text = "Company/Aircraft Relationship Updated to be Unverified";
							InsertJournalNote_AC(journal_text, "", NewCompID);
						} 
						//-------------------------------------- 
						 
						if (cbo_change_rel.Visible)
						{

							query1 = $"{query1}  cref_contact_type = '{modGlobalVars.ContactType_Array[cbo_change_rel.GetItemData(cbo_change_rel.SelectedIndex), 2]}' ";



							switch(modGlobalVars.ContactType_Array[cbo_change_rel.GetItemData(cbo_change_rel.SelectedIndex), 2].Trim())
							{
								case "36" : 
									// Query = Query & OperatorSEQNo & ",0)" 
									// looks like if someone in 2, then do 99, otherwise do 2 

									 
									tmpquery = "SELECT cref_transmit_seq_no FROM Aircraft_Reference WITH(NOLOCK)"; 
									tmpquery = $"{tmpquery} WHERE cref_ac_id = {Convert.ToString(snp_AircraftContacts["cref_ac_id"])}"; 
									tmpquery = $"{tmpquery} AND cref_transmit_seq_no = '2'"; 
									tmpquery = $"{tmpquery} AND cref_journ_id = {lJournId.ToString()}"; 
									 
									if (modAdminCommon.Exist(tmpquery))
									{
										query1 = $"{query1}, cref_transmit_seq_no = '99' ";
									}
									else
									{
										query1 = $"{query1}, cref_transmit_seq_no = '2' ";
									} 
									 
									break;
								case "44" : 
									query1 = $"{query1}, cref_transmit_seq_no = '3' "; 
									break;
								case "99" : 
									query1 = $"{query1}, cref_transmit_seq_no = '4' "; 
									break;
								case "93" : 
									query1 = $"{query1}, cref_transmit_seq_no = '5' "; 
									break;
								case "62" : case "60" : 
									query1 = $"{query1}, cref_transmit_seq_no = '9' "; 
									break;
								case "96" : 
									query1 = $"{query1}, cref_transmit_seq_no = '10' "; 
									break;
								case "61" : 
									query1 = $"{query1}, cref_transmit_seq_no = '11' "; 
									break;
								default:
									query1 = $"{query1}, cref_transmit_seq_no = '99' "; 
									break;
							}


						} 




						 
						if (cbo_company_research_contact.Visible)
						{
							if (cbo_change_rel.Visible)
							{
								query1 = $"{query1}, ";
							}
							query1 = $"{query1} cref_contact_id = {cbo_company_research_contact.GetItemData(cbo_company_research_contact.SelectedIndex).ToString()}";
						} 

						 
						query1 = $"{query1} WHERE (cref_id = {New_Aircraft_Reference_ID.ToString()}) "; 
						query1 = query1; 
						DbCommand TempCommand = null; 
						TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand(); 
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand); 
						TempCommand.CommandText = query1; 
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
						//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021 
						TempCommand.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords(); 
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand); 
						TempCommand.ExecuteNonQuery(); 


						 
						if (cbo_change_rel.Visible && cbo_change_rel.Text.Trim() != Convert.ToString(cbo_change_rel.Tag).Trim())
						{
							journal_text = $"Updated relationship from {Convert.ToString(cbo_change_rel.Tag)} to {cbo_change_rel.Text}";

							InsertJournalNote_AC(journal_text, "", NewCompID);
						} 
						 
						if (cbo_company_research_contact.Visible)
						{
							journal_text = "";
							if (Convert.ToString(cbo_company_research_contact.Tag).Trim() == "")
							{
								journal_text = $"Updated Contact from Blank to {StringsHelper.Replace(cbo_company_research_contact.Text, "'", "''", 1, -1, CompareMethod.Binary)}";
							}
							else if (Convert.ToString(cbo_company_research_contact.Tag).Trim() != cbo_company_research_contact.Text.Trim())
							{  // added MSW - was putting in blanks - 10/21/2020
								journal_text = $"Updated Contact from {Convert.ToString(cbo_company_research_contact.Tag)} to {StringsHelper.Replace(cbo_company_research_contact.Text, "'", "''", 1, -1, CompareMethod.Binary)}";
							}

							if (journal_text.Trim() != "")
							{
								InsertJournalNote_AC(journal_text, "", NewCompID);
							}
						} 

						 
						if (cbo_change_rel.Text.Trim() != Convert.ToString(cbo_change_rel.Tag).Trim())
						{
							if (modGlobalVars.ContactType_Array[cbo_change_rel.GetItemData(cbo_change_rel.SelectedIndex), 2].Trim() == "44")
							{
								modCommon.InsertPriorityEvent("NCHP", frm_AircraftDetails.DefInstance.inACID, 0, modCommon.GetCompanyName(NewCompID, 0), NewCompID);

								journal_text = $"Update Relationship to New Chief Pilot - {modCommon.GetCompanyName(NewCompID, 0)}";
								InsertJournalNote_AC(journal_text, "", NewCompID);
							}


							// CHANGED TO CERTIFICATE HOLDER - MSW - 3/2/20
							if (modGlobalVars.ContactType_Array[cbo_change_rel.GetItemData(cbo_change_rel.SelectedIndex), 2].Trim() == "1V")
							{
								modCommon.InsertPriorityEvent("NCERTH", frm_AircraftDetails.DefInstance.inACID, 0, modCommon.GetCompanyName(NewCompID, 0), NewCompID);
							}


							// MSW/RTW this is inserting an event when a delivery position holder association is added - 7/19/2011
							if (modGlobalVars.ContactType_Array[cbo_change_rel.GetItemData(cbo_change_rel.SelectedIndex), 2].Trim() == "42")
							{
								modCommon.InsertPriorityEvent("NDP", frm_AircraftDetails.DefInstance.inACID, 0, modCommon.GetCompanyName(NewCompID, 0), NewCompID);
							}

							if (modGlobalVars.ContactType_Array[cbo_change_rel.GetItemData(cbo_change_rel.SelectedIndex), 2].Trim() == "36")
							{
								modCommon.InsertPriorityEvent("NOPR", frm_AircraftDetails.DefInstance.inACID, 0, modCommon.GetCompanyName(NewCompID, 0), NewCompID);
								modAdminCommon.Record_Event("Operating Company Change", "Operating Company Change", frm_AircraftDetails.DefInstance.inACID, 0, NewCompID, false, 0, 0); // ADDED MSW - 4/16/20
								// COMMENTED OUT BY RTW SINCE WILL BE MANAGED BY FIX OPERATOR
								// Insert_Job "Update Aircraft Company Roles", frm_AircraftDetails.inACID
							}

							//- ADDED MSW - 9/11/17-------------------------
							if (modGlobalVars.ContactType_Array[cbo_change_rel.GetItemData(cbo_change_rel.SelectedIndex), 2].Trim() == "94")
							{
								modCommon.InsertPriorityEvent("NCHCMP", frm_AircraftDetails.DefInstance.inACID, 0, modCommon.GetCompanyName(NewCompID, 0), NewCompID);
							}

							// ADDED MSW - 4/10/20
							if (modGlobalVars.ContactType_Array[cbo_change_rel.GetItemData(cbo_change_rel.SelectedIndex), 2].Trim() == "62")
							{
								modCommon.InsertPriorityEvent("NREGTO", frm_AircraftDetails.DefInstance.inACID, 0, modCommon.GetCompanyName(NewCompID, 0), NewCompID);
							}


							if (modGlobalVars.ContactType_Array[cbo_change_rel.GetItemData(cbo_change_rel.SelectedIndex), 2].Trim() == "31")
							{
								modCommon.InsertPriorityEvent("NAMCMP", frm_AircraftDetails.DefInstance.inACID, 0, modCommon.GetCompanyName(NewCompID, 0), NewCompID);
							}

							if (modGlobalVars.ContactType_Array[cbo_change_rel.GetItemData(cbo_change_rel.SelectedIndex), 2].Trim() == "38")
							{
								modCommon.InsertPriorityEvent("NSCPCT", frm_AircraftDetails.DefInstance.inACID, 0, modCommon.GetCompanyName(NewCompID, 0), NewCompID);
							}

							if (modGlobalVars.ContactType_Array[cbo_change_rel.GetItemData(cbo_change_rel.SelectedIndex), 2].Trim() == "2X")
							{
								modCommon.InsertPriorityEvent("NNESC", frm_AircraftDetails.DefInstance.inACID, 0, modCommon.GetCompanyName(NewCompID, 0), NewCompID);
							}
							//----------------------------------------------
						} 
						 
						Fill_Aircraft_Contact_Grid(temp_row); 
						 
						// added MSW - 10/16/17 
						modCommon.ClearAircraftActionDate(frm_AircraftDetails.DefInstance.inACID, 0); 
						break;
					case 8 : 
						 
						verify_single_ac(); 
						 
						//----- ADDED MSW - UPDATING/CHANGING COMPANY RELATOINSHIPS-------------- 

						 
						break;
					case 9 : 
						 
						convert_prices(); 
						break;
					case 10 : 
						 
						if (Convert.ToString(cmdAddACDetail[10].Tag) == "C")
						{
							confirm_callback_company("C", grd_AircraftContacts.CurrentRowIndex);
						}
						else
						{
							confirm_callback_company("M", grd_AircraftContacts.CurrentRowIndex);
						} 
						 
						cmdAddACDetail[10].Visible = false; 
						 
						break;
				}

				if (Index < 5)
				{
					frm_AircraftDetails.DefInstance.ShowDialog();
					this.Activate();
				}

				if (DetailName != modGlobalVars.cEmptyString)
				{

					// ADDED IN FROM CODE - TO REPLACE ITEMS - MSW/RTW------------------------------------------------
					// FORWARD GALLEY IN GENERAL TEST
					//  testtextbefore = "RS externally servicable forward galley"

					// LAV ENTRY IN GENERAL TEST
					//  testtextbefore = "RS externally servicable aft flusing toilet"
					//
					//  testtextafter = Apply_Aircraft_Rules(testtextbefore, "Interior", "Lavatory")
					//
					//  MsgBox ("BEFORE: " & testtextbefore & " --- AFTER: " & testtextafter)

					testtextbefore = DetailDescription;

					DetailDescription = Apply_Aircraft_Rules(DetailDescription, DetailType, DetailName);
					// MsgBox ("BEFORE: " & testtextbefore & " --- testtextafter: " & DetailDescription)
					// ADDED IN FROM CODE - TO REPLACE ITEMS - MSW/RTW------------------------------------------------



					switch(Index)
					{
						case 0 : 
							 
							//*************************************************************** 
							// CHECK FOR INTERIOR CHANGES 
							tmp_rows = grd_Interior.RowsCount; 
							int tempForEndVar = tmp_rows - 1; 
							for (int I = 1; I <= tempForEndVar; I++)
							{
								grd_Interior.CurrentRowIndex = I;
								grd_Interior.CurrentColumnIndex = 0;
								if (DetailName == grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].FormattedValue.ToString())
								{
									grd_Interior.CurrentColumnIndex = 1;
									if (DetailDescription == grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].FormattedValue.ToString())
									{
										MessageBox.Show("Duplicate Interior Entry Attempted: Aborted", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
										goto DuplicateEntry;
									}
								}
							} 
							grd_Interior.RowsCount = tmp_rows; 
							grd_Interior.RowsCount++; 
							grd_Interior.CurrentRowIndex = grd_Interior.RowsCount - 1; 
							grd_Interior.CurrentColumnIndex = 0; 
							grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].Value = DetailName; 
							grd_Interior.CurrentColumnIndex = 1; 
							grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].Value = DetailDescription; 
							 
							if (Convert.ToString(grd_Interior[0, 0].Value) == "None Found")
							{
								grd_Interior.CurrentRowIndex = 0;
								grd_Interior.CurrentColumnIndex = 0;
								grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].Value = "Name";
								grd_Interior.CurrentColumnIndex = 1;
								grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].Value = "Description";
								grd_Interior.FixedRows = 1;
							} 
							 
							InteriorGridChanged = true; 
							 
							// INTERIOR GENERAL 
							if (DetailName.Trim().ToLower() == "general")
							{
								InteriorGeneralChanged = true;
							} 
							if (DetailName.Trim().ToLower() == "seating")
							{
								InteriorGeneralChanged = true;
							} 
							if (DetailName.Trim().ToLower() == "headliner")
							{
								InteriorGeneralChanged = true;
							} 
							if (DetailName.Trim().ToLower() == "carpet")
							{
								InteriorGeneralChanged = true;
							} 
							if (DetailName.Trim().ToLower() == "refreshment equipment")
							{
								InteriorGeneralChanged = true;
							} 
							if (DetailName.Trim().ToLower() == "cabinetry")
							{
								InteriorGeneralChanged = true;
							} 
							if (DetailName.Trim().ToLower() == "entertainment equipment")
							{
								InteriorGeneralChanged = true;
							} 
							if (DetailName.Trim().ToLower() == "business equipment")
							{
								InteriorGeneralChanged = true;
							} 
							if (DetailName.Trim().ToLower() == "storage")
							{
								InteriorGeneralChanged = true;
							} 
							if (DetailName.Trim().ToLower() == "accessories")
							{
								InteriorGeneralChanged = true;
							} 

							 
							// INTERNAL LAVATORY 
							if (DetailName.Trim().ToLower() == "lavatory")
							{
								InteriorLavatoryChanged = true;
							} 
							 
							// INTERNAL AIR CONDITIONING 
							if (DetailName.Trim().ToLower() == "air conditioning")
							{
								InteriorAirConditioningChanged = true;
							} 
							 
							grd_Interior.FirstDisplayedScrollingRowIndex = grd_Interior.RowsCount - 1; 
							grd_Interior.CurrentRowIndex = grd_Interior.RowsCount - 1; 
							grd_Interior.CurrentColumnIndex = 1; 
							grd_Interior.CellAlignment = DataGridViewContentAlignment.TopLeft; 
							grd_Interior.CurrentColumnIndex = 0; 
							 
							break;
						case 1 : 
							//*************************************************************** 
							// CHECK FOR EXTERIOR CHANGES 
							tmp_rows = grd_Exterior.RowsCount; 
							int tempForEndVar2 = tmp_rows - 1; 
							for (int I = 1; I <= tempForEndVar2; I++)
							{
								grd_Exterior.CurrentRowIndex = I;
								grd_Exterior.CurrentColumnIndex = 0;
								if (DetailName == grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].FormattedValue.ToString())
								{
									grd_Exterior.CurrentColumnIndex = 1;
									if (DetailDescription == grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].FormattedValue.ToString())
									{
										MessageBox.Show("Duplicate Exterior Entry Attempted: Aborted", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
										goto DuplicateEntry;
									}
								}
							} 
							grd_Exterior.RowsCount = tmp_rows; 
							grd_Exterior.RowsCount++; 
							grd_Exterior.CurrentRowIndex = grd_Exterior.RowsCount - 1; 
							grd_Exterior.CurrentColumnIndex = 0; 
							grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].Value = DetailName; 
							grd_Exterior.CurrentColumnIndex = 1; 
							grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].Value = DetailDescription; 
							 
							if (Convert.ToString(grd_Exterior[0, 0].Value) == "None Found")
							{
								grd_Exterior.CurrentRowIndex = 0;
								grd_Exterior.CurrentColumnIndex = 0;
								grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].Value = "Name";
								grd_Exterior.CurrentColumnIndex = 1;
								grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].Value = "Description";
								grd_Exterior.FixedRows = 1;
							} 
							 
							ExteriorGridChanged = true; 
							if (DetailName.Trim().ToLower() == "colors")
							{
								ExteriorColorsChanged = true;
							} 
							 
							grd_Exterior.FirstDisplayedScrollingRowIndex = grd_Exterior.RowsCount - 1; 
							grd_Exterior.CurrentRowIndex = grd_Exterior.RowsCount - 1; 
							grd_Exterior.CurrentColumnIndex = 1; 
							grd_Exterior.CellAlignment = DataGridViewContentAlignment.TopLeft; 
							grd_Exterior.CurrentColumnIndex = 0; 
							 
							break;
						case 2 : 
							//*************************************************************** 
							// CHECK FOR EQUIPMENT CHANGES 
							// NEED TO CHECK IF ALREADY IN GRID 
							tmp_rows = grd_Equipment.RowsCount; 
							int tempForEndVar3 = tmp_rows - 1; 
							for (int I = 1; I <= tempForEndVar3; I++)
							{
								grd_Equipment.CurrentRowIndex = I;
								grd_Equipment.CurrentColumnIndex = 0;
								if (DetailName == grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].FormattedValue.ToString())
								{
									grd_Equipment.CurrentColumnIndex = 1;
									if (DetailDescription == grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].FormattedValue.ToString())
									{
										MessageBox.Show("Duplicate Equipment Entry Attempted: Aborted", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
										goto DuplicateEntry;
									}
								}
							} 
							grd_Equipment.RowsCount = tmp_rows; 
							grd_Equipment.RowsCount++; 
							grd_Equipment.CurrentRowIndex = grd_Equipment.RowsCount - 1; 
							grd_Equipment.CurrentColumnIndex = 0; 
							grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].Value = DetailName; 
							grd_Equipment.CurrentColumnIndex = 1; 
							grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].Value = DetailDescription; 
							 
							if (Convert.ToString(grd_Equipment[0, 0].Value) == "None Found")
							{
								grd_Equipment.CurrentRowIndex = 0;
								grd_Equipment.CurrentColumnIndex = 0;
								grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].Value = "Name";
								grd_Equipment.CurrentColumnIndex = 1;
								grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].Value = "Description";
								grd_Equipment.FixedRows = 1;
							} 
							 
							EquipmentGridChanged = true; 
							if (DetailName.Trim().ToLower() == "general")
							{
								EquipmentGeneralChanged = true;
							} 
							if (DetailName.Trim().ToLower() == "modification")
							{
								EquipmentGeneralChanged = true;
							} 
							if (DetailName.Trim().ToLower() == "lights")
							{
								EquipmentGeneralChanged = true;
							} 
							 
							grd_Equipment.FirstDisplayedScrollingRowIndex = grd_Equipment.RowsCount - 1; 
							grd_Equipment.CurrentRowIndex = grd_Equipment.RowsCount - 1; 
							grd_Equipment.CurrentColumnIndex = 1; 
							grd_Equipment.CellAlignment = DataGridViewContentAlignment.TopLeft; 
							grd_Equipment.CurrentColumnIndex = 0; 
							 
							break;
						case 3 : 
							//*************************************************************** 
							// CHECK FOR MAINTENANCE CHANGES 
							tmp_rows = grd_Maintenance.RowsCount; 
							int tempForEndVar4 = tmp_rows - 1; 
							for (int I = 1; I <= tempForEndVar4; I++)
							{
								grd_Maintenance.CurrentRowIndex = I;
								grd_Maintenance.CurrentColumnIndex = 0;
								if (DetailName == grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].FormattedValue.ToString())
								{
									grd_Maintenance.CurrentColumnIndex = 1;
									if (DetailDescription == grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].FormattedValue.ToString())
									{
										MessageBox.Show("Duplicate Maintenace Entry Attempted: Aborted", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
										goto DuplicateEntry;
									}
								}
							} 
							grd_Maintenance.RowsCount = tmp_rows; 
							grd_Maintenance.RowsCount++; 
							grd_Maintenance.CurrentRowIndex = grd_Maintenance.RowsCount - 1; 
							grd_Maintenance.CurrentColumnIndex = 0; 
							grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].Value = DetailName; 
							grd_Maintenance.CurrentColumnIndex = 1; 
							grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].Value = DetailDescription; 
							 
							if (Convert.ToString(grd_Maintenance[0, 0].Value) == "None Found")
							{
								grd_Maintenance.CurrentRowIndex = 0;
								grd_Maintenance.CurrentColumnIndex = 0;
								grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].Value = "Name";
								grd_Maintenance.CurrentColumnIndex = 1;
								grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].Value = "Description";
								grd_Maintenance.FixedRows = 1;
							} 
							 
							MaintenanceGridChanged = true; 
							if (DetailName.Trim().ToLower() == "inspection")
							{
								MaintenanceInspectionChanged = true;
							} 
							 
							grd_Maintenance.FirstDisplayedScrollingRowIndex = grd_Maintenance.RowsCount - 1; 
							grd_Maintenance.CurrentRowIndex = grd_Maintenance.RowsCount - 1; 
							grd_Maintenance.CurrentColumnIndex = 1; 
							grd_Maintenance.CellAlignment = DataGridViewContentAlignment.TopLeft; 
							grd_Maintenance.CurrentColumnIndex = 0; 
							 
							break;
						case 4 : 
							//*************************************************************** 
							// CHECK FOR COCKPIT CHANGES 
							tmp_rows = grd_Cockpit.RowsCount; 
							int tempForEndVar5 = tmp_rows - 1; 
							for (int I = 1; I <= tempForEndVar5; I++)
							{
								grd_Cockpit.CurrentRowIndex = I;
								grd_Cockpit.CurrentColumnIndex = 0;
								if (DetailName == grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].FormattedValue.ToString())
								{
									grd_Cockpit.CurrentColumnIndex = 1;
									if (DetailDescription == grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].FormattedValue.ToString())
									{
										MessageBox.Show("Duplicate Cockpit Entry Attempted: Aborted", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
										goto DuplicateEntry;
									}
								}
							} 
							grd_Cockpit.RowsCount = tmp_rows; 
							grd_Cockpit.RowsCount++; 
							grd_Cockpit.CurrentRowIndex = grd_Cockpit.RowsCount - 1; 
							grd_Cockpit.CurrentColumnIndex = 0; 
							grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].Value = DetailName; 
							grd_Cockpit.CurrentColumnIndex = 1; 
							grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].Value = DetailDescription; 
							 
							if (Convert.ToString(grd_Cockpit[0, 0].Value) == "None Found")
							{
								grd_Cockpit.CurrentRowIndex = 0;
								grd_Cockpit.CurrentColumnIndex = 0;
								grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].Value = "Name";
								grd_Cockpit.CurrentColumnIndex = 1;
								grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].Value = "Description";
								grd_Cockpit.FixedRows = 1;
							} 
							 
							CockpitGridChanged = true; 
							if (DetailName.Trim().ToLower() == "general")
							{
								CockpitGeneralChanged = true;
							} 
							if (DetailName.Trim().ToLower() == "crew accessories")
							{
								CockpitGeneralChanged = true;
							} 
							 
							grd_Cockpit.FirstDisplayedScrollingRowIndex = grd_Cockpit.RowsCount - 1; 
							grd_Cockpit.CurrentRowIndex = grd_Cockpit.RowsCount - 1; 
							grd_Cockpit.CurrentColumnIndex = 1; 
							grd_Cockpit.CellAlignment = DataGridViewContentAlignment.TopLeft; 
							grd_Cockpit.CurrentColumnIndex = 0; 
							 
							break;
					}

					DetailName = modGlobalVars.cEmptyString;
					DetailDescription = modGlobalVars.cEmptyString;

				}

				grd_Exterior.Redraw = true;
				grd_Interior.Redraw = true;
				grd_Cockpit.Redraw = true;
				grd_Maintenance.Redraw = true;
				grd_Equipment.Redraw = true;
				DuplicateEntry:
				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmdAddACDetail_error: {Index.ToString()} {Information.Err().Number.ToString()}  {excep.Message}");
				search_off();
			}

		}

		public void confirm_callback_company(string type_of, int lRow)
		{

			string journ_subject = "";
			string strToday = DateTime.Now.ToString("d");
			int ac_id = 0;
			int comp_id = 0;

			//grd_Company_Aircraft.Col = 8
			//grd_Company_Aircraft.Row = lRow
			//
			//If left(Trim(grd_Company_Aircraft.Text), 5) = "AMCMP" Or left(Trim(grd_Company_Aircraft.Text), 5) = "CHCMP" Then
			//
			//    grd_Company_Aircraft.Col = 3
			//    If Trim(grd_Company_Aircraft.Text) = "" Then
			//        grd_Company_Aircraft.Row = grd_Company_Aircraft.Row - 1
			//
			//        grd_Company_Aircraft.Col = 3
			//        If Trim(grd_Company_Aircraft.Text) = "" Then
			//            grd_Company_Aircraft.Row = grd_Company_Aircraft.Row - 1
			//
			//            grd_Company_Aircraft.Col = 3
			//            If Trim(grd_Company_Aircraft.Text) = "" Then
			//                grd_Company_Aircraft.Row = grd_Company_Aircraft.Row - 1
			//
			//                    grd_Company_Aircraft.Col = 3
			//                    If Trim(grd_Company_Aircraft.Text) = "" Then
			//                        grd_Company_Aircraft.Row = grd_Company_Aircraft.Row - 1
			//
			//                        grd_Company_Aircraft.Col = 3
			//                        If Trim(grd_Company_Aircraft.Text) = "" Then
			//                            grd_Company_Aircraft.Row = grd_Company_Aircraft.Row - 1
			//                        End If
			//                    End If
			//            End If
			//
			//        End If
			//    End If

			// If Trim(grd_Company_Aircraft.Text) = "" Then
			//   Call MsgBox("Could Not Find Correct Information", vbOKOnly)
			//  Else
			if (Convert.ToString(cmdAddACDetail[10].Tag).Trim() == "M")
			{
				journ_subject = "Confirmed Management Company ";
			}
			else if (Convert.ToString(cmdAddACDetail[10].Tag).Trim() == "C")
			{ 
				journ_subject = "Confirmed Charter Company ";
			}

			// company name
			grd_AircraftContacts.CurrentColumnIndex = 2;
			journ_subject = $"{journ_subject}{grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString()}";

			modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(strToday.Trim());
			if (Convert.ToString(cmdAddACDetail[10].Tag).Trim() == "M")
			{
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CMC";
			}
			else
			{
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CCC";
			}
			modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";
			modAdminCommon.Rec_Journal_Info.journ_subject = journ_subject;
			modAdminCommon.Rec_Journal_Info.journ_description = "";
			modAdminCommon.Rec_Journal_Info.journ_ac_id = Reference_Aircraft_ID;
			modAdminCommon.Rec_Journal_Info.journ_comp_id = Reference_Company_ID;
			modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;

			modAdminCommon.Rec_Journal_Info.journ_account_id = ""; // Trim$(cbo_comp_account(COMP_ACCOUNT_REP).Text)
			modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
			modAdminCommon.Rec_Journal_Info.journ_status = "A";

			frm_Journal.DefInstance.Commit_Journal_Entry();
			//  End If

			//End If

		}



		public void cmdaddnote_Click(Object eventSender, EventArgs eventArgs)
		{

			frm_Journal.DefInstance.Reference_Journal_ID = 0;
			frm_Journal.DefInstance.Historical_Journal_ID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);
			frm_Journal.DefInstance.Reference_Ac_Id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
			frm_Journal.DefInstance.Reference_Comp_Id = 0;
			frm_Journal.DefInstance.Reference_Subject = modGlobalVars.cEmptyString;
			frm_Journal.DefInstance.Reference_Yacht_Id = 0;

			if (!(snp_AircraftContacts.BOF && snp_AircraftContacts.EOF))
			{
				frm_Journal.DefInstance.Reference_Contact_Id = Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]);
			}
			else
			{
				frm_Journal.DefInstance.Reference_Contact_Id = 0;
			}

			frm_Journal.DefInstance.Reference_Category_Code = "AR";
			frm_Journal.DefInstance.Reference_SubCategory_Code = "NOTE";
			frm_Journal.DefInstance.pnl_Journal_Heading.Visible = false;
			modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
			frm_Journal.DefInstance.txt_journ_subject.Enabled = true;
			frm_Journal.DefInstance.ShowDialog();

			Fill_Aircraft_Journal_Grid();
			this.Activate();
			search_off();

		}

		public void cmdAircraftSearch_Click(Object eventSender, EventArgs eventArgs)
		{


			turn_top_menu_items_off_on(false);

			modAdminCommon.gbl_Aircraft_ID = 0;

			frm_PopUp.DefInstance.ComingFrom = "Aircraft Search";
			frm_PopUp.DefInstance.ShowDialog();

			SSTabHelper.SetSelectedIndex(tab_aircraft_details, 0);

			if (modAdminCommon.gbl_Aircraft_ID > 0)
			{
				modAdminCommon.gbl_Aircraft_Journal_ID = 0;

				// added MSW - 9/23/19 so that it will re-load on a new ac
				tab_lease_loaded = false;

				frm_aircraft.DefInstance.Form_Initialize();
				frm_aircraft.DefInstance.StartForm = StartForm;
				frm_aircraft.DefInstance.Reference_Aircraft_ID = modAdminCommon.gbl_Aircraft_ID;
				frm_aircraft.DefInstance.Reference_Journal_ID = modAdminCommon.gbl_Aircraft_Journal_ID;
				frm_aircraft.DefInstance.Reference_Company_ID = 0;
				frm_aircraft.DefInstance.Show();
				//UPGRADE_WARNING: (2065) Form method frm_aircraft.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
				frm_aircraft.DefInstance.BringToFront();
				//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
				frm_aircraft.DefInstance.Form_Activated(frm_aircraft.DefInstance, new EventArgs());

				//RTW - MODIFIED TO CHANGE 2ND PARAMETER TO NOT SAVE COMPANY  WHEN HIDING FORM
				// THIS WAS CAUSING HOMEBASE TO FREAK OUT/FLICKER ON CERTAIN COMPANIES
				//  Hide_MySelf True, False
			} // If gbl_Aircraft_ID > 0 Then


			turn_top_menu_items_off_on(true);

		}


		private void cmdClearResearchAction_Click(Object eventSender, EventArgs eventArgs)
		{

			if (MessageBox.Show("Are you sure you want to clear this Research Action?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
			{
				ClearHotBoxItem();
			}

		}

		private void cmdFinancialDocuments_Click(Object eventSender, EventArgs eventArgs)
		{

			string strHDate = "";
			System.DateTime dtHDate = DateTime.FromOADate(0);
			System.DateTime dtToDay = DateTime.FromOADate(0);

			//-----------------------------------------------------------
			// 06/27/2008 - By David D. Cruger
			// Per LF; If this is a transaction
			// The transaction date must be less than today
			//-----------------------------------------------------------

			bool bContinue = true;
			if (modAdminCommon.gbl_Aircraft_Journal_ID > 0)
			{ // History Record - Check History Date

				//-----------------------------------------------------------
				// The History/Transaction date must be less than today
				//-----------------------------------------------------------
				bContinue = false;
				strHDate = ($"{txtHistoryDate.Text} ").Trim();

				if (strHDate != " ")
				{

					if (Information.IsDate(strHDate))
					{

						System.DateTime TempDate2 = DateTime.FromOADate(0);
						dtHDate = DateTime.Parse((DateTime.TryParse(strHDate, out TempDate2)) ? TempDate2.ToString("MM/dd/yyyy") : strHDate);
						dtToDay = DateTime.Parse(DateTime.Now.ToString("MM/dd/yyyy"));
						if (dtHDate < dtToDay)
						{
							bContinue = true;
						}

					} // If IsDate(strHDate) = True Then

				} // If strHDate <> " " Then

			} // If gbl_Aircraft_Journal_ID > 0 Then

			if (bContinue)
			{

				modAdminCommon.gbl_Aircraft_ID = Convert.ToInt32(Double.Parse(txt_ac_id.Text));
				frm_Transaction_Documents.DefInstance.Journal_ID = tmp_ac_journ_id;
				frm_Transaction_Documents.DefInstance.Entry_Point = "Aircraft";
				frm_Transaction_Documents.DefInstance.Show();

				Unload_Aircraft_Form();
				this.Close();

			}
			else
			{
				MessageBox.Show($"Cannot attach a document to a transaction{Environment.NewLine}where the transaction date equals today!{Environment.NewLine}Transaction Date = [{strHDate}]", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
			} // If bContinue = True Then

		} // cmdFinancialDocuments_Click

		private void cmdHelicopter_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmdHelicopter, eventSender);
			//add/remove rows from grdHelicopter
			//aey 8/10/05
			int nRememberRow = 0;

			if (Index == 0)
			{ //add row

				GrdHelicopter.RowsCount++;
				GrdHelicopter.CurrentRowIndex = GrdHelicopter.RowsCount - 1; //set active row to last row

				if (GrdHelicopter.RowsCount == 2)
				{
					GrdHelicopter.FixedRows = 1;
				}

				//moves new blank row to row 1 and pushes other rows down
				//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property GrdHelicopter.RowPosition was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				GrdHelicopter.setRowPosition(1, GrdHelicopter.CurrentRowIndex);

			}
			else
			{
				//remove row
				nRememberRow = GrdHelicopter.CurrentRowIndex;

				if (GrdHelicopter.RowsCount == 2)
				{
					GrdHelicopter.FixedRows = 0;
				}

				GrdHelicopter.RemoveItem(nRememberRow);

			}

			GrdHelicopter.Refresh();
			GrdHelicopter.Redraw = true;
			HelicopterChanged = true;
			cmdHelicopter[1].Enabled = false;

		}

		private void cmdModifyTransaction_Click(Object eventSender, EventArgs eventArgs)
		{

			frm_Aircraft_Change.DefInstance.Show();
			frm_Aircraft_Change.DefInstance.Aircraft_ID = Convert.ToInt32(Conversion.Val(txt_ac_id.Text));
			frm_Aircraft_Change.DefInstance.Journal_ID = grd_AircraftHistory.get_RowData(grd_AircraftHistory.CurrentRowIndex);
			frm_Aircraft_Change.DefInstance.Trans_Type = "Modify";
			frm_Aircraft_Change.DefInstance.Activate();

			Unload_Aircraft_Form();
			this.Close();

		}

		private void cmdRetrieveSpecs_Click(Object eventSender, EventArgs eventArgs)
		{

			if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0)
			{
				if (MessageBox.Show("Are you sure you want to apply these specs?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
				{

					RetrieveSpecs(Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]));

				}
			}

		}

		private void cmdSaveDocNotes_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmdSaveDocNotes, eventSender);

			string Query = "";
			string strUpdate1 = "";
			string strFaaNote = ""; //aey 7/15/05
			string strDocType = "";
			string strDocName = "";
			string strCurAcctRep = "";
			string strNewAcctRep = "";

			string strNewDocType = "";
			string strCurrentDocType = "";
			string strCurrentFAAProcessDir = "";
			int lFAALogId = 0;
			string strCurrentFileName = "";
			string strNewFAAProcessDir = "";
			int lACId = 0;
			string strNewFileName = "";
			string strFAALogId = "";
			string strFolderName = "";

			switch(Index)
			{
				case 0 :  // Save Document 
					 
					strCurAcctRep = ($"{Convert.ToString(ado_DocLog["faalog_user_id"])} ").Trim(); 
					strNewAcctRep = ($"{cboAcctRep[0].Text} ").Trim(); 
					strDocType = ($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim(); 
					strDocName = modCommon.DLookUp("doctype_description", "Document_Type", $"(doctype_code = '{strDocType}')"); 
					 
					//aey 7/12/04 docs in process hotbox items - #257 
					strFaaNote = ($"{modAdminCommon.Fix_Quote(txtDocNotes[0].Text.Trim())}{((Strings.Len(($"{txtDocNotes[3].Text}{modGlobalVars.cEmptyString}").Trim()) == 0) ? modGlobalVars.cEmptyString : $" {modAdminCommon.Fix_Quote(($"{txtDocNotes[3].Text}{modGlobalVars.cEmptyString}").Trim())}")}").Substring(0, Math.Min(900, ($"{modAdminCommon.Fix_Quote(txtDocNotes[0].Text.Trim())}{((Strings.Len(($"{txtDocNotes[3].Text}{modGlobalVars.cEmptyString}").Trim()) == 0) ? modGlobalVars.cEmptyString : $" {modAdminCommon.Fix_Quote(($"{txtDocNotes[3].Text}{modGlobalVars.cEmptyString}").Trim())}")}").Length));  // changed to 900 - MSW - 1/22/23 
					strUpdate1 = $"UPDATE FAA_Document_Log SET faalog_general_note = '{strFaaNote}', "; 
					strUpdate1 = $"{strUpdate1}faalog_user_id = '{cboAcctRep[0].Text}' "; 
					strUpdate1 = $"{strUpdate1}WHERE (faalog_id = {Convert.ToString(ado_DocLog["faalog_id"])}) "; 
					 
					DbCommand TempCommand = null; 
					TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand(); 
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand); 
					TempCommand.CommandText = strUpdate1; 
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
					//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021 
					TempCommand.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords(); 
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand); 
					TempCommand.ExecuteNonQuery(); 
					 
					// 03/17/2014 - By David D. Cruger 
					// Added ACId To Event Record 
					modAdminCommon.Record_Event("HBFAADocLog", $"Saved FAA Document Id:=[{Convert.ToString(ado_DocLog["faalog_id"])}] DocType:=[{strDocName}]", Convert.ToInt32(ado_DocLog["faalog_ac_id"]), 0, 0, false, 0, 0); 
					 
					// 03/30/2017 - By David D. Cruger 
					// Record Event For Account Reassign For Doc In Process 
					if (strCurAcctRep != strNewAcctRep)
					{
						modAdminCommon.Record_Event("HBFAADocLog", $"Doc In Process Reassigned From AcctRep:=[{strCurAcctRep}] to [{strNewAcctRep}] DocId:=[{Convert.ToString(ado_DocLog["faalog_id"])}] DocType:={strDocName}]", Convert.ToInt32(ado_DocLog["faalog_ac_id"]), 0, 0, false, 0, 0);
					} 
					 
					Fill_FAA_Doc_Grid(); 
					 
					//aey 7/12/04 docs in process hotbox items - #257 
					if (Strings.Len(($"{txtDocNotes[3].Text}{modGlobalVars.cEmptyString}").Trim()) == 0)
					{
						return;
					} 
					 
					// INSERT JOURNAL ENTRY aey - 7/12/04 
					modAdminCommon.Rec_Journal_Info.journ_subject = ($"Doc Resp: {($"{txtDocNotes[3].Text}{modGlobalVars.cEmptyString}").Trim()}").Substring(0, Math.Min(200, ($"Doc Resp: {($"{txtDocNotes[3].Text}{modGlobalVars.cEmptyString}").Trim()}").Length)); 
					modAdminCommon.Rec_Journal_Info.journ_description = ($"{txtDocNotes[0].Text}{modGlobalVars.cEmptyString}").Trim().Substring(0, Math.Min(4000, ($"{txtDocNotes[0].Text}{modGlobalVars.cEmptyString}").Trim().Length)); 
					modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]); 
					modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RDR";  //response to research action 
					modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday); 
					modAdminCommon.Rec_Journal_Info.journ_comp_id = 0; 
					modAdminCommon.Rec_Journal_Info.journ_contact_id = 0; 
					modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID; 
					modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep; 
					modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " "; 
					modAdminCommon.Rec_Journal_Info.journ_status = "A"; 
					modAdminCommon.Rec_Journal_Info.journ_category_code = "RN"; 
					GetJournalID = frm_Journal.DefInstance.Commit_Journal_Entry(); 
					txtDocNotes[3].Text = modGlobalVars.cEmptyString; 
					 
					break;
				case 1 :  // Fill Aircraft Picture List 
					 
					frm_AircraftPictures.DefInstance.inACID = Convert.ToInt32(adoAircraftRecordset["ac_id"]); 
					frm_AircraftPictures.DefInstance.inJournID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]); 
					modCommon.CenterFormOnHomebaseMainForm(frm_AircraftPictures.DefInstance); 
					frm_AircraftPictures.DefInstance.ShowDialog(); 
					FillAircraftPicturesList(); 
					search_off(); 
					 
					break;
				case 2 :  // Move Document 
					 
					MoveDocToDifferentAircraft(); 
					 
					break;
				case 3 :  // Delete Document 
					 
					strDocType = ($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim().TrimStart().ToUpper(); 
					 
					switch(strDocType)
					{
						case "NTS" : 
							DeleteNTSBDocument(); 
							 
							// 02/27/2020 - By David D. Cruger; 337 PDF Documents are stored just like other documents 
							//Case "337" 
							//  DoEvents 
							 
							break;
						default:
							DeleteFAAPDFDocument(); 
							 
							break;
					}  // Case strDocType 
					break;
				case 4 : 
					// update 
					 
					strUpdate1 = ""; 
					strCurrentDocType = ""; 
					strCurrentFAAProcessDir = ""; 
					lFAALogId = 0; 
					strCurrentFileName = ""; 
					strNewFAAProcessDir = ""; 
					strNewFileName = ""; 
					strFAALogId = ""; 


					 
					strNewDocType = cbo_drop_array[1].Text.Substring(0, Math.Min(3, cbo_drop_array[1].Text.Length)); 
					 
					if (StringsHelper.ToDoubleSafe(Convert.ToString(cmdSaveDocNotes[4].Tag)) != 0 && strNewDocType.Trim() != "")
					{

						strCurrentDocType = Convert.ToString(cmdSaveDocNotes[4].Tag);
						lFAALogId = Convert.ToInt32(Double.Parse(Convert.ToString(cmdSaveDocNotes[4].Tag)));
						strFAALogId = lFAALogId.ToString();
						lACId = Convert.ToInt32(adoAircraftRecordset["ac_id"]);


						strCurrentFileName = modCommon.Get_FAA_Document_In_Process_File_Name(lFAALogId, lACId);

						strUpdate1 = $"UPDATE FAA_Document_Log SET faalog_doc_type = '{strNewDocType}' ";
						strUpdate1 = $"{strUpdate1}WHERE (faalog_id = {Convert.ToString(cmdSaveDocNotes[4].Tag)}) ";

						DbCommand TempCommand_2 = null;
						TempCommand_2 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
						TempCommand_2.CommandText = strUpdate1;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
						TempCommand_2.ExecuteNonQuery();

						Fill_FAA_Doc_Grid();

						// make sure this is set



						if (strCurrentDocType != strNewDocType)
						{

							if (MessageBox.Show($"Change Current Document Type To {Environment.NewLine}{Environment.NewLine}{strNewDocType}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
							{

								// strFAALogId = grd_DocumentLog.TextMatrix(lRow1, 10)
								//  lFAALogId = CLng(strFAALogId)
								//  lACId = grd_DocumentLog.RowData(lRow1)

								strCurrentFAAProcessDir = modCommon.Return_FAA_Document_Root_Directory(strCurrentDocType);


								//-- Now Update Document Log Table
								strNewFAAProcessDir = modCommon.Return_FAA_Document_Root_Directory(strNewDocType);
								strNewFileName = modCommon.Get_FAA_Document_In_Process_File_Name(lFAALogId, lACId);

								if (File.Exists($"{strCurrentFAAProcessDir}{strCurrentFileName}"))
								{

									if (File.Exists($"{strNewFAAProcessDir}{strNewFileName}"))
									{
										//UPGRADE_WARNING: (2081) DeleteFile has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
										File.Delete($"{strNewFAAProcessDir}{strNewFileName}");
									}

									File.Move($"{strCurrentFAAProcessDir}{strCurrentFileName}", $"{strNewFAAProcessDir}{strNewFileName}");

								} // If gfso.FileExists(strCurrentFAAProcessDir + strCurrentFileName) = True Then

								// grd_DocumentLog.TextMatrix(lRow1, 2) = strNewDocType

								modAdminCommon.Record_Event("Change FAALog DocType", $"ChangedDocument Type From [{strCurrentDocType}] To [{strNewDocType}] On FAALogId: [{strFAALogId}]", lACId, 0, 0, false, 0, 0);

								// grd_DocumentLog.Row = lRow1
								// Highlight_Grid_Row grd_DocumentLog

							} // If MsgBox("Change Current Document Type To " & vbCrLf & vbCrLf & cmbDocType.Text, vbYesNo) = vbYes Then

						} // If strCurrentDocType <> strNewDocType Then
					} 
					break;
				case 5 : 
					 
					// need to create the directory in case it isnt there 
					CreateOriginalImageDirectory(ref strFolderName); 
					 
					// added MSW - 4/19/23 
					lblOpenOriginalImageDirectory_Click(strFolderName); 
					 
					// added MSW - upload picture 
					//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
					//VB.Global.Load(frm_WebReport.DefInstance); 
					frm_WebReport.DefInstance.ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]); 
					 
					if (modAdminCommon.LOCAL_ADO_DB.ConnectionString.IndexOf("jetnet_ra_test") >= 0)
					{
						frm_WebReport.DefInstance.WhichReport = "Image Uploader Test";
					}
					else
					{
						frm_WebReport.DefInstance.WhichReport = "Image Uploader Live";
					} 
					 
					frm_WebReport.DefInstance.ShowDialog(); 
					break;
				case 6 : 
					FillAircraftPicturesList(); 
					break;
			} // Case Index

		} // cmdSaveDocNotes_Click


		// 05/30/2008 - By David D. Cruger
		// Opens Explorer to The Original Picture Directory
		private void lblOpenOriginalImageDirectory_Click(string strFolderName)
		{

			Object fso = new Object();


			try
			{


				if (Directory.Exists(strFolderName))
				{

					//--------------------------------------------------
					// 11/05/2013 - By David D. Cruger
					// Force Folders Into Internet Explorer
					// The other browsers will not open a Folder

					//ShellOpenURLInBrowser "I", strFolderName
					// changed for different launch of file browswer - msw - 9/28/23
					JetNetSupport.PInvoke.SafeNative.shell32.ShellExecute(0, "open", strFolderName, "", strFolderName, 1);

				}
				else
				{
					MessageBox.Show($"Unable To Find Original Picture Folder{Environment.NewLine}{strFolderName}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
				} // If fso.FolderExists(strMainDir) = True Then

				fso = null;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Record_Error("lblOpenOriginalImageDirectory_Click_Error: ", excep.Message);
			}

		} // lblOpenOriginalImageDirectory_Click



		// 05/30/2008 - By David D. Cruger
		// Make Sure Original Picture Image Directory
		// Is Available
		// copied from pictures - MSW
		private void CreateOriginalImageDirectory(ref string strFolderName)
		{

			Object fso = new Object();

			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			string strQuery1 = "";

			string strMainDir = "";
			string strMake = "";
			string strModel = "";
			string strSerNbr = "";

			try
			{

				//-------------------------------------
				// 08/19/2008 - By David D. Cruger
				// Made this a configuration option
				//-------------------------------------
				strMainDir = modCommon.DLookUp("aconfig_aircraft_pictures_original", "Application_Configuration", "aconfig_aircraft_pictures_original IS NOT NULL");

				if (Directory.Exists(strMainDir))
				{

					strQuery1 = "SELECT amod_airframe_type_code, amod_type_code, amod_make_name, amod_model_name, ac_ser_no_full ";
					strQuery1 = $"{strQuery1}FROM Aircraft ";
					strQuery1 = $"{strQuery1}INNER JOIN Aircraft_Model ON ac_amod_id = amod_id ";
					strQuery1 = $"{strQuery1}WHERE (ac_id = {modAdminCommon.gbl_Aircraft_ID.ToString()}) ";
					strQuery1 = $"{strQuery1}AND (ac_journ_id = 0) ";

					rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

					if ((!rstRec1.BOF) && (!rstRec1.EOF))
					{


						switch(Convert.ToString(rstRec1["amod_type_code"]))
						{
							case "J" : 
								strFolderName = $"{strMainDir}Jets\\"; 
								 
								break;
							case "T" : 
								 
								switch(Convert.ToString(rstRec1["amod_airframe_type_code"]))
								{
									case "F" : 
										strFolderName = $"{strMainDir}Turbos\\"; 
										break;
									case "R" : 
										strFolderName = $"{strMainDir}Turbines\\"; 
										break;
								} 
								 
								break;
							case "E" : 
								strFolderName = $"{strMainDir}Executive\\"; 
								 
								break;
							case "P" : 
								strFolderName = $"{strMainDir}Pistons\\"; 
								 
								break;
						} // Select Case rstRec1!amod_type_code

						if (Directory.Exists(strFolderName))
						{

							//--------------------------------------------------------
							// 06/17/2008 - By David D. Cruger
							// Added replace / in Make/Model to a dash -
							// Directories can not be made with the /
							//--------------------------------------------------------
							strMake = ($"{Convert.ToString(rstRec1["amod_make_name"])} ").Trim();
							strMake = StringsHelper.Replace(strMake, "/", "-", 1, -1, CompareMethod.Binary); // AGUSTA/WESTLAND = AGUSTA-WESTLAND

							strModel = ($"{Convert.ToString(rstRec1["amod_model_name"])} ").Trim().ToUpper();
							strModel = StringsHelper.Replace(strModel, "/", "-", 1, -1, CompareMethod.Binary); // OH-13/M74 = 0H-13-M74

							strSerNbr = ($"{Convert.ToString(rstRec1["ac_ser_no_full"])} ").Trim().ToUpper();
							strSerNbr = StringsHelper.Replace(strSerNbr, "/", "-", 1, -1, CompareMethod.Binary); // 2385/40 = 2385-40

							// Does Make Folder Exist
							strFolderName = $"{strFolderName}{strMake}\\";
							if (!Directory.Exists(strFolderName))
							{
								Directory.CreateDirectory(strFolderName);
							}

							// Does Model Folder Exist
							strFolderName = $"{strFolderName}{strModel}\\";
							if (!Directory.Exists(strFolderName))
							{
								Directory.CreateDirectory(strFolderName);
							}

							// Does Model Folder Exist
							strFolderName = $"{strFolderName}{strSerNbr}\\";
							if (!Directory.Exists(strFolderName))
							{
								Directory.CreateDirectory(strFolderName);
							}

							// Now The SerNbr Folder Should Exist
							if (Directory.Exists(strFolderName))
							{
								//           lblOpenOriginalImageDirectory.Enabled = True
								//           lblOpenOriginalImageDirectory.Visible = True
								//           lblOpenOriginalImageDirectory.Tag = strFolderName
							}
							else
							{
								//   lblOpenOriginalImageDirectory.Enabled = False
								//   lblOpenOriginalImageDirectory.Visible = False
								MessageBox.Show($"Unable To Find and/or Create Original Picture Folder{Environment.NewLine}{strFolderName}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
							} // If fso.FolderExists(strFolderName) = True Then

						}
						else
						{
							MessageBox.Show($"Unable To Find Original Picture Folder{Environment.NewLine}{strFolderName}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
						} // If fso.FolderExists(strFolderName) = True Then

					}
					else
					{
						MessageBox.Show("Unable To Find Aircraft Information", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
					} // If (rstRec1.BOF = False) And (rstRec1.EOF = False) Then

					rstRec1.Close();

				}
				else
				{
					MessageBox.Show($"Unable To Find Main Original Picture Folder{Environment.NewLine}{strMainDir}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
				} // If fso.FolderExists(strMainDir) = True Then

				rstRec1 = null;
				fso = null;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Record_Error("CreateOriginalImageDirectory_Error: ", excep.Message);
			}

		} // CreateOriginalImageDirectory


		private void cmdSaveLease_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmdSaveLease, eventSender);

			string[] tmparray = new string[]{"", ""};
			string Query = "";
			int Lessee_Reference_ID = 0; // aircraft reference id to be removed for lessee
			int Lessor_Reference_ID = 0; // aircraft reference id to be removed for lessor
			string errMsg = "";
			int comp_id = 0;
			DialogResult Ans = (DialogResult) 0;
			bool NoDate = false;
			string tmp_journ_note = "";
			int Lessor_comp_id = 0;
			int Lessee_comp_id = 0;
			bool MultipleLease = false; // used to identify whether the current aircraft has multiple lease records
			string temp_desc = "";
			bool fails_date = false;
			try
			{


				switch(Index)
				{
					case 0 : 
						 
						if (txtLeaseExpireConfirmDate.Text.Trim() != "")
						{
							if (chkConfirmLeaseExpired.CheckState == CheckState.Checked && DateTime.Parse(txtLeaseExpireConfirmDate.Text) > DateTime.Today)
							{
								fails_date = true;
							}
						} 
						 
						if (fails_date)
						{
							//UPGRADE_ISSUE: (1046) MsgBox Parameter 'context' is not supported, and was removed. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-1046
							//UPGRADE_ISSUE: (1046) MsgBox Parameter 'helpfile' is not supported, and was removed. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-1046
							Interaction.MsgBox("You are not Allowed to Have an Expired Date In the Future", MsgBoxStyle.OkCancel, "");
						}
						else
						{

							errMsg = "delete";
							bLeaseChanged = true;
							NoDate = false;

							if (cmdSaveLease[0].Text == "Delete")
							{
								if (MessageBox.Show($"This record is redundant with an existing transaction record.{Environment.NewLine}Please make sure that data from this lease record is MANUALLY transferred to the appropriate lease record before deleting.{Environment.NewLine}Are you sure you want to DELETE this lease record?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
								{
									DeleteRedundantLease();
								}
							}
							else
							{
								errMsg = "confirm exp ";

								if (chkConfirmLeaseExpired.CheckState == CheckState.Checked && (!WasVerified))
								{

									// RTW - 3/16/2004
									// IF THE LEASE EXPIRATION DATE IS FILLED IN BUT NOT A VALID DATE THEN
									// ABORT THE SAVE PROCESS

									if (!modCommon.pf_ValidateDate(txtLeaseExpireConfirmDate.Text, true))
									{
										NoDate = true;
										Ans = MessageBox.Show($"The expiration date entered is not valid.{Environment.NewLine}Do you wish to continue?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo);
										if (Ans == System.Windows.Forms.DialogResult.No)
										{
											goto AbortLeaseSave;
										}
										if (txt_ac_lease_type[2].Text.Trim() == "")
										{
											MessageBox.Show("Please Enter a Note.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
											goto AbortLeaseSave;
										}
										isExpired = true;

									}

									if (MessageBox.Show($"Unlike other saves, this will IMMEDIATELY make changes to the Database.{Environment.NewLine}{Environment.NewLine}Are you sure you want to verify this Lease Expiration?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
									{

										grdLeaseInfo.CurrentColumnIndex = 0;
										if (txt_ac_lease_expire_date.Text.Trim() != modGlobalVars.cEmptyString)
										{
											grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = DateTime.Parse(txt_ac_lease_expire_date.Text.Trim()).ToString("d");
										}
										else
										{
											grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
										}

										grdLeaseInfo.CurrentColumnIndex++;
										grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = txt_ac_lease_type[0];

										grdLeaseInfo.CurrentColumnIndex++;
										grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = txt_ac_lease_type[1];

										grdLeaseInfo.CurrentColumnIndex++;
										if (chkConfirmLeaseExpired.CheckState == CheckState.Checked)
										{
											if (NoDate)
											{
												grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = DateTime.Parse(modAdminCommon.GetDateTime()).ToString("d");
											}
											else
											{
												grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = DateTime.Parse(txtLeaseExpireConfirmDate.Text.Trim()).ToString("d");
											}

										}
										else
										{
											grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
										}

										grdLeaseInfo.CurrentColumnIndex += 3;
										grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = txt_ac_lease_type[2];

										pnl_LeaseEntry.Visible = false;
										pnl_LeaseList.Visible = true;

										// RTW - 6/11/2004 - GET THE REFERENCE IDS FOR THE LESSEE AND LESSOR
										Lessee_Reference_ID = Get_Exipiring_LesseeLessor("Lessee");
										Lessor_Reference_ID = Get_Exipiring_LesseeLessor("Lessor");
										Lessor_comp_id = Convert.ToInt32(Conversion.Val($"{modCommon.DLookUp("cref_comp_id", "aircraft_reference WITH(NOLOCK)", $"cref_id = {Lessor_Reference_ID.ToString()}")}{modGlobalVars.cEmptyString}"));
										Lessee_comp_id = Convert.ToInt32(Conversion.Val($"{modCommon.DLookUp("cref_comp_id", "aircraft_reference WITH(NOLOCK)", $"cref_id = {Lessee_Reference_ID.ToString()}")}{modGlobalVars.cEmptyString}"));
										tmp_journ_note = $"{modCommon.DLookUp("journ_subject", "journal WITH(NOLOCK)", $"journ_id={Convert.ToString(snpLease["aclease_journ_id"])}")}{modGlobalVars.cEmptyString}";

										// CHECK TO SEE IF THERE ARE MULTIPLE LEASE RECORDS FOR THIS AIRCRAFT
										// IF THERE ARE MORE THAN ONE THEN CLEAR THE LEASE STATUS FLAG
										// OTHERWISE LEAVE IT SET
										if (MoreLeases())
										{ // check if saving this lease means that the ac is no longer leased
											MultipleLease = true; //
										}
										else
										{
											MultipleLease = false;
										}

										// Refill both the contact list
										Select_Aircraft_Contact();

										//

										if (!ContactRecordsetFilled)
										{ //9/29/06 mjm
											return;
										}

										//UPGRADE_TODO: (1065) Error handling statement (On Error Goto) could not be converted. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1065
										UpgradeHelpers.Helpers.NotUpgradedHelper.NotifyNotUpgradedElement("On Error Goto Label (Expire_Lease_Error)");
										modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "SaveLease");

										// SAVE THE LEASE INFORMATION FROM THE GRID
										if (!Save_Lease(Lessee_comp_id, tmp_journ_note))
										{
											goto Expire_Lease_Error;
										}

										modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Change", ref tmparray);
										if (Convert.ToString(adoAircraftRecordset["ac_forsale_flag"]) == "Y")
										{
											modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Change", ref tmparray);
										}

										//==================================================
										// clear the action date on an aircraft when a lease record changed
										//==================================================

										//adoAircraftRecordset!ac_action_date = Null

										Query = $"UPDATE Aircraft set ac_action_date = NULL where ac_journ_id = 0 and ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
										DbCommand TempCommand = null;
										TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
										UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
										TempCommand.CommandText = Query;
										//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
										//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
										TempCommand.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
										UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
										TempCommand.ExecuteNonQuery();

										//clear date so that it will re-transmit
										modCommon.ClearAircraftActionDate(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(snpLease["aclease_journ_id"]));

										if (!MultipleLease)
										{
											// adoAircraftRecordset!ac_lease_flag = "N"
											Query = $"UPDATE Aircraft set ac_lease_flag = 'N' where ac_journ_id = 0 and ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
											DbCommand TempCommand_2 = null;
											TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
											UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
											TempCommand_2.CommandText = Query;
											//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
											//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
											TempCommand_2.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
											UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
											TempCommand_2.ExecuteNonQuery();
										}
										// commented out msw
										// adoAircraftRecordset.Update

										// DELTE THE LESSEE REFERENCE
										Query = $"DELETE FROM Aircraft_Reference WHERE cref_id = {Lessee_Reference_ID.ToString()}";
										DbCommand TempCommand_3 = null;
										TempCommand_3 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
										UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_3);
										TempCommand_3.CommandText = Query;
										//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
										//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
										TempCommand_3.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
										UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_3);
										TempCommand_3.ExecuteNonQuery();

										// DELTE THE LESSOR REFERENCE
										Query = $"DELETE FROM Aircraft_Reference WHERE cref_id = {Lessor_Reference_ID.ToString()}";
										DbCommand TempCommand_4 = null;
										TempCommand_4 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
										UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_4);
										TempCommand_4.CommandText = Query;
										//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
										//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
										TempCommand_4.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
										UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_4);
										TempCommand_4.ExecuteNonQuery();

										modAdminCommon.ADO_Transaction("CommitTrans");
										FillLeaseGrid();
										modCommon.Company_Stats_Update(Lessee_comp_id); //aey 10/07/05
										modCommon.Company_Stats_Update(Lessor_comp_id); //aey 10/07/05


										// MAKE SURE THAT THERE IS A PRIMARY ASSIGNED FOR THE AIRCRAFT
										// do not reassign if aircraft is retired
										if ((modAircraft.NoPrimaryPOC(Convert.ToInt32(adoAircraftRecordset["ac_id"]))) && (Convert.ToDouble(adoAircraftRecordset["ac_lifecycle_stage"]) != 4))
										{ // make sure that a primary poc is set

											comp_id = primary_comp_id;

											modAircraft.AssignPrimaryPOC(Convert.ToInt32(adoAircraftRecordset["ac_id"]), primary_comp_id); // set a primary if none is set

											//update counts
											primary_comp_id = Convert.ToInt32(Double.Parse(modCommon.DLookUp("cref_comp_id", "aircraft_reference WITH(NOLOCK)", $"cref_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} and cref_journ_id = 0 and cref_primary_poc_flag = 'Y'")));
											// RTW - MODIFIED - 8/30/2010 - SHOULD NOT NEED TO RERUN STATS FOR PRIMARY POC CHANGE - DOESN'T IMPACT STATS
											//Call Company_Stats_Update(Comp_id)    'aey 6/15/05
											//Call Company_Stats_Update(primary_comp_id)    'aey 6/15/05

										}


										// MAKE SURE THAT THEIR IS AN EXLUSIVE ASSIGNED IF NECESSARY
										// do not assign if the aircraft is retired
										if (Convert.ToString(adoAircraftRecordset["ac_exclusive_flag"]) == "Y" && Convert.ToDouble(adoAircraftRecordset["ac_lifecycle_stage"]) != 4)
										{
											if (modAircraft.No_Exclusive(Convert.ToInt32(adoAircraftRecordset["ac_id"])))
											{ // make sure that a primary poc is set
												// RTW - SET THE EXCLUSIVE TO THE CURRENT OWNER
												Query = "UPDATE Aircraft_Reference SET ";
												Query = $"{Query}cref_primary_poc_flag = 'X' ";
												Query = $"{Query}WHERE cref_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} ";
												Query = $"{Query}and cref_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])} ";
												Query = $"{Query}and cref_contact_type = '00'";
												DbCommand TempCommand_5 = null;
												TempCommand_5 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
												UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_5);
												TempCommand_5.CommandText = Query;
												UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_5);
												TempCommand_5.ExecuteNonQuery();
											}
										}

										Select_Aircraft();

										if (NoDate && GetJournalID > 0)
										{

											frm_Journal.DefInstance.Reference_Journal_ID = GetJournalID;
											frm_Journal.DefInstance.ShowDialog();
											this.Activate();
											search_off();

										}
									}

								}
								else
								{
									errMsg = "immediate";

									// if its not expired - MSW -

									if (MessageBox.Show($"Unlike other saves, this will IMMEDIATELY make changes to the Database.{Environment.NewLine}{Environment.NewLine}Are you sure you want to save the lease information?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
									{
										bLeaseShouldTransmit = modAircraft.CanBeExpired(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(snpLease["aclease_journ_id"]));

										grdLeaseInfo.CurrentColumnIndex = 0;

										if (txt_ac_lease_expire_date.Text != modGlobalVars.cEmptyString)
										{
											grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = DateTime.Parse(txt_ac_lease_expire_date.Text.Trim()).ToString("d");
										}
										else
										{
											grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
										}

										grdLeaseInfo.CurrentColumnIndex++;
										grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = txt_ac_lease_type[0];

										grdLeaseInfo.CurrentColumnIndex++;
										grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = txt_ac_lease_type[1];

										grdLeaseInfo.CurrentColumnIndex++;
										if (chkConfirmLeaseExpired.CheckState == CheckState.Checked)
										{
											if (txtLeaseExpireConfirmDate.Text != modGlobalVars.cEmptyString)
											{
												grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = DateTime.Parse(txtLeaseExpireConfirmDate.Text.Trim()).ToString("d");
											}
											else
											{
												grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
											}
										}
										else
										{
											grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
										}

										grdLeaseInfo.CurrentColumnIndex += 3;
										grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = modCommon.CleanSpecial(txt_ac_lease_type[2].Text.Trim());

										modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "SaveLease2");

										// SAVE THE LEASE INFORMATION FROM THE GRID

										if (!Save_Lease())
										{
											goto Expire_Lease_Error;
										}

										// added IN MSW - to make new lease change event
										//added MSW - 3/3/23
										if (Convert.ToString(txt_ac_lease_expire_date.Tag).Trim() != txt_ac_lease_expire_date.Text.Trim() || Convert.ToString(txt_ac_lease_type[2].Tag).Trim() != txt_ac_lease_type[2].Text.Trim() || Convert.ToString(txt_ac_lease_type[1].Tag).Trim() != txt_ac_lease_type[1].Text.Trim())
										{

											temp_desc = "";


											if (Convert.ToString(txt_ac_lease_expire_date.Tag).Trim() != txt_ac_lease_expire_date.Text.Trim())
											{

												if (txt_ac_lease_expire_date.Text.Trim() != "")
												{
													if (Information.IsDate(txt_ac_lease_expire_date.Text.Trim()))
													{
														System.DateTime TempDate2 = DateTime.FromOADate(0);
														txt_ac_lease_expire_date.Text = (DateTime.TryParse(txt_ac_lease_expire_date.Text.Trim(), out TempDate2)) ? TempDate2.ToString("MM/dd/yyyy") : txt_ac_lease_expire_date.Text.Trim();
													}
												}

												if (Convert.ToString(txt_ac_lease_expire_date.Tag).Trim() == "")
												{
													temp_desc = $"Scheduled Expiration Date Changed From: [Blank] To: {txt_ac_lease_expire_date.Text.Trim()}";
												}
												else
												{
													temp_desc = $"Scheduled Expiration Date Changed From: {Convert.ToString(txt_ac_lease_expire_date.Tag).Trim()} To: {txt_ac_lease_expire_date.Text.Trim()}";
												}
											}

											if (Convert.ToString(txt_ac_lease_type[2].Tag).Trim() != txt_ac_lease_type[2].Text.Trim())
											{
												if (temp_desc.Trim() != "")
												{
													temp_desc = $"{temp_desc} | ";
												}

												if (Convert.ToString(txt_ac_lease_type[2].Tag).Trim() == "")
												{
													temp_desc = $"Notes Changed From: [Blank] To: {txt_ac_lease_type[2].Text.Trim()}";
												}
												else
												{
													temp_desc = $"{temp_desc}Notes Changed From: {Convert.ToString(txt_ac_lease_type[2].Tag).Trim()} To: {txt_ac_lease_type[2].Text.Trim()}";
												}
											}

											if (Convert.ToString(txt_ac_lease_type[1].Tag).Trim() != txt_ac_lease_type[1].Text.Trim())
											{
												if (temp_desc.Trim() != "")
												{
													temp_desc = $"{temp_desc} | ";
												}

												if (Convert.ToString(txt_ac_lease_type[1].Tag).Trim() == "")
												{
													temp_desc = $"Lease Term Changed From: [Blank] To: {txt_ac_lease_type[1].Text.Trim()}";
												}
												else
												{
													temp_desc = $"{temp_desc}Lease Term Changed From: {Convert.ToString(txt_ac_lease_type[1].Tag).Trim()} To: {txt_ac_lease_type[1].Text.Trim()}";
												}
											}


											modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Now;
											modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
											modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
											modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
											modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
											modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
											modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
											modAdminCommon.Rec_Journal_Info.journ_status = "A";
											modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
											modAdminCommon.Rec_Journal_Info.journ_subject = "Lease Details Changed";
											modAdminCommon.Rec_Journal_Info.journ_description = temp_desc;

											GetJournalID = frm_Journal.DefInstance.Commit_Journal_Entry();

											modCommon.InsertPriorityEvent("LC", Convert.ToInt32(adoAircraftRecordset["ac_id"]), GetJournalID, temp_desc, 0);
										}


										modAdminCommon.ADO_Transaction("CommitTrans");

										//clear date so that it will re-transmit
										modCommon.ClearAircraftActionDate(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(snpLease["aclease_journ_id"]));

										cmdCancelLease_Click();
										FillLeaseGrid();
									}

								}

								AbortLeaseSave:;
							}


						}  // end if for the if passes test 

						 
						break;
					case 1 : 
						cmdCancelLease_Click(); 
						break;
				}

				search_off();
				return;

				Expire_Lease_Error:
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Expire_Lease_Error: {errMsg} {Information.Err().Number.ToString()} {Information.Err().Description}");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmdSaveLease_Error: {Index.ToString()} {errMsg} {Information.Err().Number.ToString()}  {excep.Message}");
				search_off();
				return;
			}
		}

		private bool Delete_Lease(int inAircraft_ID, int inJournal_ID)
		{
			//
			// Purpose: the purpose of this procedure is to delete a single lease record
			//          as well as change the lease status of the aircraft and lessee/lessor
			//          if necessary.
			// By: Rick Wanner
			// Last Modified: 3/19/2002
			//
			//==========================================================================================
			bool result = false;
			string Query = "";
			ADORecordSetHelper rsReferences = new ADORecordSetHelper();
			ADORecordSetHelper rsFirstReference = new ADORecordSetHelper();
			string errMsg = "";

			try
			{
				result = false;

				errMsg = "del lease =0";
				Query = $"select * from Aircraft_Lease WITH(NOLOCK) where aclease_ac_id = {inAircraft_ID.ToString()}" +
				        $" and aclease_journ_id = {inJournal_ID.ToString()} and aclease_expired <> 'Y'";
				if (!modAdminCommon.Exist(Query))
				{ // if we do not have an active lease- just exit, nothing to delete
					return result;
				}

				errMsg = "del lease<>0";
				Query = $"select * from Aircraft_Lease WITH(NOLOCK) where aclease_ac_id = {inAircraft_ID.ToString()}" +
				        $" and aclease_journ_id <> {inJournal_ID.ToString()} and aclease_expired <> 'Y'";
				if (modAdminCommon.Exist(Query))
				{ // IF WE HAVE OTHER ACTIVE LEASES

					// select the company and contact from the reference file for the lease to be deleted
					Query = $"select * from Aircraft_Reference where cref_ac_id = {inAircraft_ID.ToString()}";
					Query = $"{Query} and cref_journ_id = {inJournal_ID.ToString()}";
					Query = $"{Query} and cref_contact_type in ('13','12','39','57')";

					rsReferences.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockOptimistic);

					if (!(rsReferences.BOF && rsReferences.EOF))
					{


						while(!rsReferences.EOF)
						{

							// for each reference get the first lessor/lessee for the company the delete it
							Query = $"DELETE FROM Aircraft_Reference where cref_ac_id = {inAircraft_ID.ToString()}";
							Query = $"{Query} and cref_journ_id = 0";
							Query = $"{Query} and cref_contact_type = '{Convert.ToString(rsReferences["cref_contact_type"]).Trim()}'";
							Query = $"{Query} and cref_comp_id = {Convert.ToString(rsReferences["cref_comp_id"])}";

							DbCommand TempCommand = null;
							TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
							TempCommand.CommandText = Query;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
							TempCommand.ExecuteNonQuery();

							rsReferences.MoveNext();
						};
					} // select of lease references

					rsReferences.Close();
					rsReferences = null;

				}
				else
				{
					// only one active lease, take the aircraft off lease and remove all lessees and lessors
					errMsg = "off lease";
					if (!Take_Aircraft_Off_Lease(inAircraft_ID))
					{
						result = false;
					} // if taking the aircraft off lease failed
				} // there was more than one active lease

				// DELETE THE LEASE RECORD
				errMsg = "lease record";
				Query = $"DELETE FROM Aircraft_Lease WHERE aclease_ac_id = {inAircraft_ID.ToString()}";
				Query = $"{Query} AND aclease_journ_id = {inJournal_ID.ToString()}";

				DbCommand TempCommand_2 = null;
				TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
				TempCommand_2.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
				TempCommand_2.ExecuteNonQuery();

				return true;
			}
			catch (System.Exception excep)
			{
				//=====================================================================================
				result = false;
				modAdminCommon.ADO_Transaction("RollbackTrans");
				modAdminCommon.Report_Error($"Delete Lease Error: {excep.Message} {errMsg}", "Common");
				search_off();
			}
			return result;
		}

		private bool MoreLeases()
		{
			//
			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO DETERMINE IF THERE ARE MULTIPLE LEASES ON THE
			// CURRENT AIRCRAFT.
			//
			// RTW - 6/14/2004 - MODIFIED TO USE ADO
			//

			bool result = false;
			ADORecordSetHelper snpNone = new ADORecordSetHelper();


			string Query = "SELECT count(*) as tcount FROM Aircraft_Lease ";
			Query = $"{Query}WHERE aclease_ac_id = {txt_ac_id.Text.Trim()}";
			Query = $"{Query} AND aclease_expired = 'N'";

			snpNone.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpNone.BOF && snpNone.EOF))
			{
				snpNone.MoveFirst();
				if (Convert.ToDouble(snpNone["tcount"]) > 1)
				{
					result = true;
				}
			}

			snpNone.Close();

			return result;
		}

		private void cmdViewDocumentInSeparateWindow_Click(Object eventSender, EventArgs eventArgs)
		{

			string Scanned_File_Name = "";
			string RootPath = "";

			switch(($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim().ToLower())
			{
				case "nts" : 
					RootPath = ($"{modCommon.DLookUp("aconfig_ntsb_maindir", "application_configuration")}{modGlobalVars.cEmptyString}").Trim(); 
					modAdminCommon.gbl_Documents = RootPath; 
					 
					// 02/27/2020 - By David D. Cruger; 337 PDF Documents are stored just like other documents 
					//Case "337" 
					//    RootPath = Trim(DLookUp("aconfig_337_maindir", "application_configuration") & cEmptyString) 
					//    gbl_Documents = RootPath 
					break;
				default:
					RootPath = ($"{modCommon.DLookUp("aconfig_faapdf_maindir", "application_configuration")}{modGlobalVars.cEmptyString}").Trim(); 
					modAdminCommon.gbl_Documents = RootPath; 
					break;
			}

			frm_OpenDocument fForm = null;
			if (($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim().ToLower() == "nts")
			{

				Scanned_File_Name = $"{RootPath}\\PROCESSING\\{Convert.ToString(ado_DocLog["faalog_id"])}.html";

				//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//VB.Global.Load(frm_WebReport.DefInstance);
				frm_WebReport.DefInstance.PassedFileName = Scanned_File_Name;
				frm_WebReport.DefInstance.WhichReport = "View NTSB in Process";
				frm_WebReport.DefInstance.Show();

			}
			else
			{

				Scanned_File_Name = $"{RootPath}\\PROCESSING\\";
				Scanned_File_Name = $"{Scanned_File_Name}{StringsHelper.Format(($"{Convert.ToString(ado_DocLog["faalog_tape_no"])} ").Trim(), "00000")}";
				Scanned_File_Name = $"{Scanned_File_Name}{modGlobalVars.cHyphen}{StringsHelper.Format(($"{Convert.ToString(ado_DocLog["faalog_tape_of"])} ").Trim(), "0")}";
				Scanned_File_Name = $"{Scanned_File_Name}of{StringsHelper.Format(($"{Convert.ToString(ado_DocLog["faalog_tape_to"])} ").Trim(), "0")}";
				Scanned_File_Name = $"{Scanned_File_Name}{modGlobalVars.cHyphen}{StringsHelper.Format(($"{Convert.ToString(ado_DocLog["faalog_starting_frame_no"])} ").Trim(), "00000")}";
				Scanned_File_Name = $"{Scanned_File_Name}{modGlobalVars.cHyphen}{StringsHelper.Format(($"{Convert.ToString(ado_DocLog["faalog_ending_frame_no"])} ").Trim(), "00000")}";
				Scanned_File_Name = $"{Scanned_File_Name}{modGlobalVars.cHyphen}{($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim().ToLower()}";
				Scanned_File_Name = $"{Scanned_File_Name}{modGlobalVars.cHyphen}{StringsHelper.Format(($"{Convert.ToString(ado_DocLog["faalog_ac_id"])} ").Trim(), "000000")}";
				Scanned_File_Name = $"{Scanned_File_Name}.pdf";

				// 08/23/2007 - By David D. Cruger - Force to HTTP
				if (!Scanned_File_Name.StartsWith("http:", StringComparison.Ordinal))
				{
					Scanned_File_Name = $"http:{StringsHelper.Replace(Scanned_File_Name, "\\", "/", 1, -1, CompareMethod.Binary)}";
				}

				if (!gbOpenDocInBrowser)
				{

					fForm = frm_OpenDocument.CreateInstance();
					//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//VB.Global.Load(fForm);

					fForm.SetDocURL(Scanned_File_Name);
					fForm.SetFAALogId(Convert.ToInt32(ado_DocLog["faalog_id"]));

					modCommon.CenterFormOnHomebaseMainForm(fForm);

					fForm.Show();

				}
				else
				{
					modCommon.ShellOpenURLInBrowser(modAdminCommon.gbl_User_Browser, Scanned_File_Name);
				} // If gbOpenDocInBrowser = False Then

				gbOpenDocInBrowser = false;

			} // If LCase(Trim(ado_DocLog!faalog_doc_type & " ")) = "nts" Then

		} // cmdViewDocumentInSeparateWindow_Click

		//UPGRADE_NOTE: (7001) The following declaration (Combo1_Change) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void Combo1_Change()
		//{
			//
		//}

		//UPGRADE_NOTE: (7001) The following declaration (Combo1_DblClick) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void Combo1_DblClick()
		//{
			//
			//frm_WebCrawl.DefInstance.WhichAcctRep = modAdminCommon.gbl_Account_ID;
			//
			//setup_doc_request();
			//
			//frm_WebCrawl.DefInstance.Show();
			//
		//}


		public void Form_Activated(Object eventSender, EventArgs eventArgs)
		{
			if (ActivateHelper.myActiveForm != eventSender)
			{
				ActivateHelper.myActiveForm = (Form) eventSender;
				object frm_Company = null;
				string Query = "";

				try
				{

					string Current_Transaction_Type = "";
					string New_Transaction_Type = "";
					string GotTransType = "";
					bool bIsAllReadyOpen = false;
					Form Obj = null;

					//chkArray(6).Enabled = False
					//chkArray(6).Enabled = True


					string temp_string = "";
					if (!bFormLoad && !bFormInitalize && !bFormActivate && (Convert.ToString(frm_aircraft.DefInstance.txt_ac_sale_price.Tag) == ""))
					{

						bFormActivate = true;
						cmdAircraftSearch.Enabled = false; // added MSW - 9/6/23
						mnuTools.Enabled = false; // added MSW - 9/6/23

						bControlProductCodeMsg = false;

						modGlobalVars.bTraceCall = false;

						// ADDED MSW - 2/6/17
						re_load_history = false;
						re_load_history2 = false;
						dont_do_events_journal = false;

						bInFillBase = false;
						bBaseControlLostFocus = false;
						nBaseControlThatLostFocus = -1;

						if (modGlobalVars.bTraceCall)
						{
							mlNextTraceID = modCommon.GetNextTraceCallCount();
						}

						if (modAdminCommon.gbl_bHomeClicked || modAdminCommon.gbl_Aircraft_ID == 0)
						{
							this.Close();
							return;
						}

						this.Text = $"Aircraft ID:{modAdminCommon.gbl_Aircraft_ID.ToString()}{((modAdminCommon.gbl_Aircraft_Journal_ID > 0) ? $" Journal ID:{modAdminCommon.gbl_Aircraft_Journal_ID.ToString()} - Historical Aircraft" : " - Current Aircraft")}";
						// ****************************************************************
						// IF THE SHARE RELATIONSHIP FORM IS STILL ACTIVE THEN BRING IT
						// TO THE FRONT AND EXIT THIS PROCEDURE
						bIsAllReadyOpen = false;

						foreach (Form ObjIterator in Application.OpenForms)
						{
							Obj = ObjIterator;
							if (String.Compare(Obj.Name, "frm_ShareRelationships", true) == 0)
							{
								bIsAllReadyOpen = true;
								break;
							}
							//Obj
							Obj = default(Form);
						}

						if (bIsAllReadyOpen)
						{
							if (new_frm_ShareRelationships.inACID == modAdminCommon.gbl_Aircraft_ID)
							{
								//UPGRADE_WARNING: (2065) Form method new_frm_ShareRelationships.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
								Support.ZOrder(new_frm_ShareRelationships, 0); // if the form is around then bring it to front
								return;
							}
							else
							{
								new_frm_ShareRelationships = null;
							}
						}

						Found_Aircraft_Company_ID = 0;
						Found_Aircraft_Company_JID = 0;
						Found_Aircraft_Company_Type = modGlobalVars.cEmptyString;
						Found_Aircraft_Contact_ID = 0;

						Found_Historical_Contact_Type = modGlobalVars.cEmptyString;
						Found_Historical_Contact_ID = 0;
						Found_Historical_Contact_JID = 0;
						Found_Historical_Company_ID = 0;
						Found_New_Company_Name = modGlobalVars.cEmptyString;

						MenuEnable("Off");

						owner_is_awaiting_DOC = false;
						Release_Lock = true;

						NeedToSaveContactTransmits = false;
						if (AssociateCompanyFlag)
						{
							NeedToSaveContactTransmits = true;
						}

						tbr_ToolBar.Visible = false;
						bVerifyDateChange = false;
						ContactRecordsetFilled = false;
						tab_ACMain.Enabled = false;

						strJournalOrderBy = " ORDER BY journ_entry_date DESC, journ_id DESC ";

						mnueditchangeFractional.Enabled = false;
						mnueditchangeShare.Enabled = false;
						mnueditchangeSieze.Enabled = false;
						mnueditchangeForeclosure.Enabled = false;
						mnueditchangeDelivery.Enabled = false;
						mnueditchangeLease.Enabled = false;

						search_on("Initializing Form");

						this.WindowState = FormWindowState.Maximized;

						if (modAdminCommon.gbl_Aircraft_ID > 0)
						{
							ErrorMsgInfo = $"AcID: {modAdminCommon.gbl_Aircraft_ID.ToString()} JournID: {modAdminCommon.gbl_Aircraft_Journal_ID.ToString()}";

							//UPGRADE_TODO: (1067) Member EntryPoint is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
							//UPGRADE_WARNING: (6021) Casting 'Variant' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							tCompFind_EntryPoints = (modGlobalVars.e_find_form_entry_points) Convert.ToInt32(modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].EntryPoint);

							if (modCommon.pubf_EncodeEntryPoints(tCompFind_EntryPoints) == modGlobalVars.gFIND_EXBK)
							{

								//UPGRADE_TODO: (1067) Member GetFormExitValues is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
								Found_Aircraft_Company_ID = Convert.ToInt32(modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].GetFormExitValues(modGlobalVars.gcFOUNDAIRCRAFTCOMPID));
								//UPGRADE_TODO: (1067) Member GetFormExitValues is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
								Found_Aircraft_Company_JID = Convert.ToInt32(modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].GetFormExitValues(modGlobalVars.gcFOUNDAIRCRAFTJID));
								//UPGRADE_TODO: (1067) Member GetFormExitValues is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
								Found_Aircraft_Company_Type = Convert.ToString(modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].GetFormExitValues(modGlobalVars.gcFOUNDCOMPANYTYPE));
								//UPGRADE_TODO: (1067) Member GetFormExitValues is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
								Found_Aircraft_Contact_ID = Convert.ToInt32(modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].GetFormExitValues(modGlobalVars.gcFOUNDCONTACTID));

							}
							else if (modCommon.pubf_EncodeEntryPoints(tCompFind_EntryPoints) == modGlobalVars.gFIND_CHCT)
							{ 

								//UPGRADE_TODO: (1067) Member GetFormExitValues is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
								Found_Historical_Contact_Type = Convert.ToString(modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].GetFormExitValues(modGlobalVars.gcFOUNDCONTACTTYPE));
								//UPGRADE_TODO: (1067) Member GetFormExitValues is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
								Found_Historical_Contact_ID = Convert.ToInt32(modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].GetFormExitValues(modGlobalVars.gcFOUNDCONTACTID));
								//UPGRADE_TODO: (1067) Member GetFormExitValues is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
								Found_Historical_Contact_JID = Convert.ToInt32(modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].GetFormExitValues(modGlobalVars.gcFOUNDCONTACTJID));
								//UPGRADE_TODO: (1067) Member GetFormExitValues is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
								Found_Historical_Company_ID = Convert.ToInt32(modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].GetFormExitValues(modGlobalVars.gcFOUNDAIRCRAFTCOMPID));
								//UPGRADE_TODO: (1067) Member GetFormExitValues is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
								Found_New_Company_Name = Convert.ToString(modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].GetFormExitValues(modGlobalVars.gcFOUNDNEWCOMPANYNAME));

							}

							// commented out .. and created by MSW 4/6/2012 - this was for an association
							//If modCommon.pubf_EncodeEntryPoints(tCompFind_EntryPoints) = gFIND_ACCA Then ' And
							//Call modAircraft.delete_and_insert_hotbox(0, gbl_Aircraft_ID)
							//End If
							//Check to see if we're coming back from choosing an Exclusive Broker or Representative
							if (modCommon.pubf_EncodeEntryPoints(tCompFind_EntryPoints) == modGlobalVars.gFIND_EXBK && Found_Aircraft_Company_ID != 0)
							{

								search_on("Adding Exclusive Broker or Representative....");

								HandleExclusiveRep(Found_Aircraft_Company_ID, Found_Aircraft_Company_JID, Found_Aircraft_Company_Type, Found_Aircraft_Contact_ID);

								//UPGRADE_TODO: (1067) Member Clear_Search_Criteria is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
								modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Clear_Search_Criteria(true, true, true);

								search_off();

							}
							else
							{

								//Check to see if we're coming back from choosing a historical contact change
								if (modCommon.pubf_EncodeEntryPoints(tCompFind_EntryPoints) == modGlobalVars.gFIND_CHCT && Found_Historical_Company_ID != 0)
								{

									search_on("Changing Historical Contact Type....");

									HistoricalContactsChanged = modAircraft.ChangeHistoricalContactType(Found_Historical_Company_ID, Found_Historical_Contact_ID, Found_Historical_Contact_JID, ref Found_Historical_Contact_Type, Found_New_Company_Name, ref modGlobalVars.snp_Company, ref modGlobalVars.snp_Contacts, ref modGlobalVars.snp_Company_Phones, ref modGlobalVars.snp_Company_Btypes, ref RememberOldCompType, ref RememberOldCompName, ref sOwnerWillChange, ref tmpContactChangeJournID, ref tmpOwnerChangeJournID, ref owner_is_awaiting_DOC);


									if (Found_Historical_Contact_Type == "12" || Found_Historical_Contact_Type == "13")
									{
										RememberOldCompType = RememberOldCompType;

										// added MSW - 10/27/21 ------------------
										modAdminCommon.ADO_Transaction("BeginTrans");

										if (Found_Historical_Contact_Type == "12")
										{
											modCommon.InsertPriorityEvent("LS", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, $"New Lessee: {Found_New_Company_Name}", Found_Historical_Company_ID, 0, "Y");
										}
										else if (Found_Historical_Contact_Type == "13")
										{ 
											modCommon.InsertPriorityEvent("LS", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, $"New Lessor: {Found_New_Company_Name}", Found_Historical_Company_ID, 0, "Y");
										}

										modAdminCommon.ADO_Transaction("CommitTrans");
										//-----------------------------------------
									}


									//UPGRADE_TODO: (1067) Member Clear_Search_Criteria is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
									modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Clear_Search_Criteria(true, true, true);

									search_off();


									// MOVED FROM OUTSIDE THE END IF - MSW - 7/24/17 - TO HOPEFULLY FIX FND COMPANY FORM SHOWING UP
									//UPGRADE_TODO: (1067) Member EntryPoint is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
									modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].EntryPoint = (modGlobalVars.e_find_form_entry_points)modGlobalVars.e_find_form_entry_points.geAssociateToAircraft;
									//UPGRADE_TODO: (1067) Member SetFormCaptionAndKey is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
									modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].SetFormCaptionAndKey(modGlobalVars.e_find_form_entry_points.geAssociateToAircraft);

								}

								search_on("Getting Aircraft Record....");
								txt_ac_id.Text = modAdminCommon.gbl_Aircraft_ID.ToString();
								tmp_ac_journ_id = modAdminCommon.gbl_Aircraft_Journal_ID;

								Select_Aircraft();
								tab_aircraft_details.Visible = true;

								// *************************************************************
								// IF THE FORM IS BEING ACTIVATED AS A RESULT OF A TRANSACTION
								// THEN BRING UP THE JOURNAL FORM FOR THE USER
								if (JournalIDToShow > 0)
								{ // This is set whenever a Transaction occurs
									search_off();

									frm_Journal.DefInstance.Reference_Journal_ID = JournalIDToShow;
									frm_Journal.DefInstance.ShowDialog();

									// set the row to the row that matches the JournalIDToShow
									int tempForEndVar = grd_Aircraft_Journal.RowsCount - 1;
									for (int I = 1; I <= tempForEndVar; I++)
									{
										if (JournalIDToShow == grd_Aircraft_Journal.get_RowData(I))
										{
											grd_Aircraft_Journal.CurrentRowIndex = I;
											break;
										}
									}

									grd_Aircraft_Journal.Redraw = true;

									if (!modGlobalVars.bKeepTransactionFocus)
									{
										this.Activate();
									}
									else
									{
										frm_Transaction_Documents.DefInstance.Activate();
									}
									// update VS
									if (frm_Journal.DefInstance.Reference_Comp_Id != 0 && VS_journ_id_ForSale != 0)
									{
										modAdminCommon.ADO_Transaction("BeginTrans");
										Query = "";
										Query = $"UPDATE Journal SET journ_comp_id = {frm_Journal.DefInstance.Reference_Comp_Id.ToString()}";
										Query = $"{Query} WHERE journ_id = {VS_journ_id_ForSale.ToString()}";

										DbCommand TempCommand = null;
										TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
										UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
										TempCommand.CommandText = Query;
										//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
										//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
										TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
										UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
										TempCommand.ExecuteNonQuery();

										modAdminCommon.ADO_Transaction("CommitTrans");
										VS_journ_id_ForSale = 0;
									}


									search_off();

									// ****************************************************
									// IF THERE ARE WANTEDS FOR THE PRIMARY CONTACT ON THE
									// AIRCRAFT - LET THE USER KNOW
									if (modAdminCommon.HasWanteds)
									{
										RemindUserAboutWanteds();
									}

									// On return from a transaction, if the transaction type is WS, SZ, or FC then we need to expire all leases
									GotTransType = GetTransType(JournalIDToShow);

									if (GotTransType.StartsWith("WS", StringComparison.Ordinal) || GotTransType.StartsWith("SZ", StringComparison.Ordinal) || GotTransType.StartsWith("FC", StringComparison.Ordinal))
									{
									}

									JournalIDToShow = 0;

									// We know a transaction happened, so we need to check the important contacts
									NeedToSaveContactTransmits = true;

								}

								if (HistoricalContactsChanged)
								{
									HistoricalContactsChanged = false;

									NeedToSaveContactTransmits = true;

									// check if transaction type changed and update transaction/journal code if it did.
									//1. current_transaction_type = trim(snp_History!journ_subcategory_code & " ")
									//2. new_transaction_type = Transaction_Type(left(current_transaction_type,2),snp_History!journ_id)
									//3. if new_transaction_type <> current_transaction_type then it changed.

									Fill_Aircraft_History_Grid();
									DontWantToSave = true;
									AllowDBLClick = true;

									snp_History.MoveFirst();
									int tempForEndVar2 = grd_AircraftHistory.RowsCount - 1;
									for (int I = 1; I <= tempForEndVar2; I++)
									{
										if (Convert.ToDouble(snp_History["journ_id"]) == modAdminCommon.gbl_Aircraft_Journal_ID)
										{
											grd_AircraftHistory.CurrentRowIndex = I;
											break;
										}
										snp_History.MoveNext();
									}

									grd_AircraftHistory_DoubleClick(grd_AircraftHistory, new EventArgs());

									Current_Transaction_Type = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_History["journ_subcategory_code"])}").Trim();
									New_Transaction_Type = modCommon.Transaction_Code(Current_Transaction_Type.Substring(0, Math.Min(2, Current_Transaction_Type.Length)), modAdminCommon.gbl_Aircraft_Journal_ID);

									//If we don't have a value to the right of the star then
									//The transaction_type did not exists in the journal_category table
									if (New_Transaction_Type.Substring(Math.Max(New_Transaction_Type.Length - 1, 0)) != "*")
									{

										New_Transaction_Type = New_Transaction_Type.Substring(0, Math.Min(New_Transaction_Type.IndexOf('*'), New_Transaction_Type.Length));

										search_off();

										frm_Journal.DefInstance.Reference_Journal_ID = tmpContactChangeJournID;
										frm_Journal.DefInstance.ShowDialog();

										tmpContactChangeJournID = 0;

										this.Activate();
										search_off();

										if (tmpOwnerChangeJournID > 0)
										{
											frm_Journal.DefInstance.Reference_Journal_ID = tmpOwnerChangeJournID;
											frm_Journal.DefInstance.ShowDialog();
											tmpOwnerChangeJournID = 0;
										}

									} // right(New_Transaction_Type, 1) <> "*"

									Select_Aircraft();

								} // HistoricalContactsChanged

							} // JournalIDToShow > 0

						} // If gbl_Aircraft_ID > 0 Then

						tbr_ToolBar.Visible = true;
						tbr_ToolBar.Enabled = true;

						if (owner_is_awaiting_DOC)
						{
							owner_is_awaiting_DOC = false;
							// comment out based on request from patty/crystal - MSW - 9/22/22
							// If MsgBox("Do you want to clear the information from your FAA Documents tab of the current aircraft?", vbYesNo) = vbYes Then
							ClearFAADataScreen();
							//  End If
						}

						//Keith Humpf 1/21/2004
						// After coming back to the aircraft form, the
						// share sale menu option was disabled because
						// the only routine that checks to see if it should
						// be turned on is the owner_type click
						cbo_ac_owner_type_SelectedIndexChanged(cbo_ac_owner_type, new EventArgs());

						search_off();

						if (ComingBackFromTransaction)
						{
							ComingBackFromTransaction = false;
							MessageBox.Show("Don't Forget to Update the Purchasing Company's Profile", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
						}

						tab_ACMain.Enabled = true;

						frm_Company = null;

						MenuEnable("On");

						// ADDED MSW - 1/21/20210-----------------
						temp_string = check_for_View_Aircraft_Intelligence(modAdminCommon.gbl_Aircraft_ID);
						if (temp_string != "")
						{
							MessageBox.Show(temp_string, "RESEARCH ASSISTANT", MessageBoxButtons.OK);
						}
						// ADDED MSW - 1/21/20210-----------------

						mnuTools.Enabled = true; // added MSW - 9/6/23
						cmdAircraftSearch.Enabled = true; // added MSW - 9/6/23
						bFormActivate = false;

					} // If bFormLoad = False And bFormInitalize = False And bFormActivate = False Then

					return;
				}
				catch (System.Exception excep)
				{

					this.Cursor = CursorHelper.CursorDefault;
					//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
					modAdminCommon.Report_Error($"Aircraft_Form_Activate_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{Reference_Company_ID.ToString()}] JID:[{Reference_Aircraft_ID.ToString()}]", "Company (frm_Aircraft)");
					modAdminCommon.ADO_Transaction("RollbackTrans");
					return;
				}
			}
		} // Form_Activate

		private void Form_Enter(Object eventSender, EventArgs eventArgs)
		{

			if (txt_ac_id.Text.Trim() != modAdminCommon.gbl_Aircraft_ID.ToString().Trim() && Double.Parse($"0{modAdminCommon.gbl_Aircraft_ID.ToString().Trim()}") > 0)
			{
				txt_ac_id.Text = modAdminCommon.gbl_Aircraft_ID.ToString();
				Setup_Form();
			}

		}

		public void Form_Initialize()
		{

			if (!bFormLoad && !bFormInitalize && !bFormActivate)
			{

				bFormInitalize = true;

				bWasExpiredAlready = false;

				// 11/07/2002 - By David D. Cruger
				// This control is always disabled until
				// the user double clicks on the Make/Model label

				gbTimer1DoubleClick = false;
				gbTimer1SingleClick = false;

				// RTW - 7/23/2007
				// ADDED BLOCK FOR WHEN REENTERING OPEN FORM WITH ANOTHER AIRCRAFT ID - PROBLEMS WERE OCCURING FROM THE WEB CRAWLER FORM
				if (txt_ac_id.Text.Trim() != modAdminCommon.gbl_Aircraft_ID.ToString().Trim() && Double.Parse($"0{modAdminCommon.gbl_Aircraft_ID.ToString().Trim()}") > 0)
				{
					txt_ac_id.Text = modAdminCommon.gbl_Aircraft_ID.ToString();
					//Call Form_Activate ' TEmp Hold 05/16/2016
				}

				bFormInitalize = false;

			} // If bFormLoad = False And bFormInitalize = False And bFormActivate = False Then

		} // Form_Initialize

		// ====================================================================================
		// Written By : Keith Humpf
		// Created    : 10/08/2002
		// Modified   : 10/08/2002
		// Function   : Form_KeyDown
		// Parameters : KeyCode As Integer   ; Keypressed
		//              Shift As Integer     ; Shift State
		//
		// Returns    : none
		//
		// Notes      : Checks the Shift State for Zero Then checks the Keycode for function
		// key F1-F12 Which relates to a Tab. The last tab is Shift-F1 (it would be number 13)
		//
		// ====================================================================================
		private void Form_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				//MsgBox "keydown" & CStr(KeyCode) & " Shift:(" & CStr(Shift) & ")", vbOKOnly, "Keydown"

				if (KeyCode == 83 && Shift == 4)
				{
					cmd_Save_Click(cmd_Save, new EventArgs());
				}
				//----------------------------------------------------------------------------------
				// Checks the Shift State for Zero Then checks the Keycode for function key F1-F6
				// Which relates to a main menu option.  But only if that menu option is visible
				// If visible the user is logged in.
				//----------------------------------------------------------------------------------
				if (tab_aircraft_details.Enabled)
				{

					if (Shift == 0)
					{

						switch(KeyCode)
						{
							case 112 :  // F1 
								 
								SSTabHelper.SetSelectedIndex(tab_aircraft_details, 0); 
								 
								break;
							case 113 :  // F2 
								 
								SSTabHelper.SetSelectedIndex(tab_aircraft_details, 1); 
								 
								break;
							case 114 :  // F3 
								 
								SSTabHelper.SetSelectedIndex(tab_aircraft_details, 2); 
								 
								break;
							case 115 :  // F4 
								 
								SSTabHelper.SetSelectedIndex(tab_aircraft_details, 3); 
								 
								break;
							case 116 :  // F5 
								 
								SSTabHelper.SetSelectedIndex(tab_aircraft_details, 4); 
								 
								break;
							case 117 :  // F6 
								 
								SSTabHelper.SetSelectedIndex(tab_aircraft_details, 5); 
								 
								break;
							case 118 : 
								 
								SSTabHelper.SetSelectedIndex(tab_aircraft_details, 6); 
								 
								break;
							case 119 : 
								 
								SSTabHelper.SetSelectedIndex(tab_aircraft_details, 7); 
								 
								break;
							case 120 : 
								 
								SSTabHelper.SetSelectedIndex(tab_aircraft_details, 8); 
								 
								break;
							case 121 : 
								 
								SSTabHelper.SetSelectedIndex(tab_aircraft_details, 9); 
								 
								break;
							case 122 : 
								 
								SSTabHelper.SetSelectedIndex(tab_aircraft_details, 10); 
								 
								break;
							case 123 : 
								 
								SSTabHelper.SetSelectedIndex(tab_aircraft_details, 11); 

								 
								break;
						}

					}
					else
					{
						// If Shift = 0 Then

						if (KeyCode == 123)
						{
							SSTabHelper.SetSelectedIndex(tab_aircraft_details, 12);
						}

					} // If Shift = 0 Then

				} // If tab_Aircraft_Details.Enabled = true Then
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		} // Form_KeyDown

		private void Form_KeyPress(Object eventSender, KeyPressEventArgs eventArgs)
		{
			int KeyAscii = Convert.ToInt32(eventArgs.KeyChar);
			try
			{

				if (KeyAscii == 19)
				{ // Ctrl + S
					cmd_Save_Click(cmd_Save, new EventArgs());
				}
			}
			finally
			{
				if (KeyAscii == 0)
				{
					eventArgs.Handled = true;
				}
				eventArgs.KeyChar = Convert.ToChar(KeyAscii);
			}

		}

		//UPGRADE_WARNING: (2080) Form_Load event was upgraded to Form_Load method and has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2080
		private void Form_Load()
		{


			bFormLoad = true;
			bFormInitalize = false;
			bFormActivate = false;
			bDisplayAircraft = false;

			modAdminCommon.ClickMe = true;
			this.Cursor = Cursors.WaitCursor;

			gbOpenDocInBrowser = false;
			bInFillBase = false;
			bBaseControlLostFocus = false;
			nBaseControlThatLostFocus = -1;

			cbo_amod_make_name.Enabled = false;
			acTimer1.Enabled = false;

			if ((txt_ac_id.Text.Trim() != modAdminCommon.gbl_Aircraft_ID.ToString().Trim()) && (Double.Parse($"0{modAdminCommon.gbl_Aircraft_ID.ToString().Trim()}") > 0))
			{
				txt_ac_id.Text = modAdminCommon.gbl_Aircraft_ID.ToString();
			}

			if (mdi_ResearchAssistant.DefInstance.lbl_test_omg.Visible)
			{
				lbl_gen[51].Visible = true; // label on bottom of page
				lbl_gen[56].Visible = true; // label on top left
			}

			//      ' added MSW - 3/9/23
			//      If Trim(gbl_User_ID) = "mvit" Or Trim(gbl_User_ID) = "pls" Or Trim(gbl_User_ID) = "jas" Or Trim(gbl_User_ID) = "kkf" Then
			//      Else
			//       cmdSaveDocNotes(5).Visible = False
			//      End If

			SetupSerialNumbers();

			Setup_Form();

			this.Cursor = CursorHelper.CursorDefault;

			int iClickSpeed = modCommon.GetDoubleClickSpeed();

			acTimer1.Enabled = false;
			if (iClickSpeed == 0)
			{
				acTimer1.Enabled = false;
			}
			else
			{
				acTimer1.Interval = iClickSpeed;
				acTimer1.Enabled = true;
			}

			// keep focus on the form
			modGlobalVars.bKeepAircraftFocus = true;
			tCompFind_EntryPoints = modGlobalVars.e_find_form_entry_points.geNoEntryPoint;

			sOwnerWillChange = modGlobalVars.cEmptyString;

			// 06/10/2008 - By David D. Cruger
			// Per Lucia Fronteria Disable the Company Confirm button
			cmd_Confirm_Company.Visible = false;
			cmd_Confirm_Company.Enabled = false;

			// 08/23/2007 - By David D. Cruger; Set to Blank
			web_OpCosts.Navigate(new Uri("about:blank"));
			web_Specs.Navigate(new Uri("about:blank"));
			web_Browser.Navigate(new Uri("about:blank"));

			txtACJournalSearch.Text = "";

			// ADDED MSW 8/5/16
			mnuSalePrices.Available = modAdminCommon.gbl_User_Admin.Trim() == "Y";


			mnuAircraftShowUserHistory.Text = frm_Main_Menu.DefInstance.mnuShowUserHistory.Text;


			bFormLoad = false;

		}

		private void SetupSerialNumbers()
		{


			lbl_gen[58].Visible = false;
			if (cbo_amod_make_name.SelectedIndex > -1)
			{
				Airframe_Type_Code = modCommon.DLookUp("amod_airframe_type_code", "Aircraft_Model WITH(NOLOCK)", $"amod_id = {cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex).ToString()}");

				if (Airframe_Type_Code == "R")
				{

					txt_ac_alt_ser_no[0].MaxLength = 7;
					txt_ac_alt_ser_no[1].MaxLength = 20;
					txt_ac_alt_ser_no[2].MaxLength = 7;
					txt_ac_ser_no[0].MaxLength = 7;
					txt_ac_ser_no[1].MaxLength = 20;
					txt_ac_ser_no[2].MaxLength = 7;

					GrdHelicopter.Visible = true;
					cmdHelicopter[0].Visible = true;
					cmdHelicopter[1].Visible = true;
					cmdHelicopter[1].Enabled = false;
					lbl_gen[58].Text = "HELICOPTER ROTOR INFORMATION";
					lbl_gen[58].Visible = true;

				}
				else
				{
					HelicopterChanged = false;
					txt_ac_alt_ser_no[0].MaxLength = 7;
					txt_ac_alt_ser_no[1].MaxLength = 8;
					txt_ac_alt_ser_no[2].MaxLength = 7;
					txt_ac_ser_no[0].MaxLength = 7;
					txt_ac_ser_no[1].MaxLength = 8;
					txt_ac_ser_no[2].MaxLength = 7;
					GrdHelicopter.Visible = false;
					cmdHelicopter[0].Visible = false;

					cmdHelicopter[1].Visible = false;

				}
			}

		}

		private void Aircraft_Form_Close_Destory_All_Form_Recordsets()
		{


			// Close and Destory ADODB Recordset Objects
			if (adoAircraftRecordset != null)
			{
				if (adoAircraftRecordset.State == ConnectionState.Open)
				{
					ErrorHandlingHelper.ResumeNext(
						() => {adoAircraftRecordset.CancelUpdate();},  //aey 5/24/04 eliminates error 3219 - operation not allowed in this context
						() => {adoAircraftRecordset.Close();});
				}
				adoAircraftRecordset = null;
			}

			if (snp_Damage_Journal != null)
			{
				if (snp_Damage_Journal.State == ConnectionState.Open)
				{
					snp_Damage_Journal.Close();
				}
				snp_Damage_Journal = null;
			}

			if (snp_Inspect_Journal != null)
			{
				if (snp_Inspect_Journal.State == ConnectionState.Open)
				{
					snp_Inspect_Journal.Close();
				}
				snp_Inspect_Journal = null;
			}

			if (ado_DocLog != null)
			{
				if (ado_DocLog.State == ConnectionState.Open)
				{
					ado_DocLog.Close();
				}
				ado_DocLog = null;
			}

			if (ContactRecordsetFilled)
			{
				if (snp_AircraftContacts.State == ConnectionState.Open)
				{
					snp_AircraftContacts.Close();
				}
				snp_AircraftContacts = null;
				ContactRecordsetFilled = false;
			}

			if (snp_Journal != null)
			{
				if (snp_Journal.State == ConnectionState.Open)
				{
					snp_Journal.Close();
				}
				snp_Journal = null;
			}

			if (snp_AircraftAvionics != null)
			{
				if (snp_AircraftAvionics.State == ConnectionState.Open)
				{
					snp_AircraftAvionics.Close();
				}
				snp_AircraftAvionics = null;
			}

			if (snp_Aircraft_Certified != null)
			{
				if (snp_Aircraft_Certified.State == ConnectionState.Open)
				{
					snp_Aircraft_Certified.Close();
				}
				snp_Aircraft_Certified = null;
			}

			if (snp_Aircraft_FAA != null)
			{
				if (snp_Aircraft_FAA.State == ConnectionState.Open)
				{
					snp_Aircraft_FAA.Close();
				}
				snp_Aircraft_FAA = null;
			}

			if (snp_Aircraft_Model != null)
			{
				if (snp_Aircraft_Model.State == ConnectionState.Open)
				{
					snp_Aircraft_Model.Close();
				}
				snp_Aircraft_Model = null;
			}

			if (snp_History != null)
			{
				if (snp_History.State == ConnectionState.Open)
				{
					snp_History.Close();
				}
				snp_History = null;
			}

		} // End Aircraft_Form_Close_Destory_All_Form_Recordsets

		private void Form_Closed(Object eventSender, EventArgs eventArgs)
		{
			//--------------------
			//LSF 02-14-01 - ALPHA
			//see who has this company record locked - if anyone


			if (ErrorHandlingHelper.ResumeNextExpr<bool>(() => Strings.Len(($"{txt_ac_id.Text}{modGlobalVars.cEmptyString}").Trim()) > 0))
			{
				try
				{ //aey 7/16/04 bypass if blank field
					strOwner = modCommon.AircraftLocked(Convert.ToInt32(Double.Parse(txt_ac_id.Text)), tmp_ac_journ_id);

					//If it's 'me' who has this locked
				}
				catch
				{
				}
				if (ErrorHandlingHelper.ResumeNextExpr<bool>(() => (strOwner == Convert.ToString(modAdminCommon.snp_User["user_id"])) && Release_Lock))
				{
					ErrorHandlingHelper.ResumeNext(
							//UnLock the record
						() => {modCommon.UnLockAircraft(Convert.ToInt32(Double.Parse(txt_ac_id.Text)), tmp_ac_journ_id, Convert.ToString(modAdminCommon.snp_User["user_id"]));}, 
						() => {modCommon.UnLockAircraft(Convert.ToInt32(Double.Parse(txt_ac_id.Text)), 0, Convert.ToString(modAdminCommon.snp_User["user_id"]));});
				}

			}

			Release_Lock = true;
			//LSF 02-14-01 - OMEGA
			//--------------------

			// 10/16/2002 - By David D. Cruger; Added This Clean Up Routine
			Aircraft_Form_Close_Destory_All_Form_Recordsets();


			modAdminCommon.CLIENT_ADO_DB = null;
			snp_Aircraft_FAA = null;
			adoAircraftRecordset = null;

			snp_Damage_Journal = null;
			snp_Inspect_Journal = null;
			ado_DocLog = null;
			snp_AircraftContacts = null;
			snp_Journal = null;
			snp_AircraftAvionics = null;
			snp_Aircraft_Certified = null;
			snp_Aircraft_FAA = null;
			snp_Aircraft_Model = null;
			snp_History = null;
			snpLease = null;

			// Per Cristina this is to remain open so they can go to a company record
			//  If (frm_OpenDocument Is Nothing) = False Then Unload frm_OpenDocument

		}

		private void grd_Aircraft_Certified_Click(Object eventSender, EventArgs eventArgs)
		{

			if (grd_Aircraft_Certified.CurrentRowIndex > 0)
			{

				cmd_Add_Cert[0].Enabled = false;
				cmd_Add_Cert[2].Enabled = true;

			}

		}

		public void grd_Aircraft_Journal_singleClickBodyCode()
		{

			if (grd_Aircraft_Journal.MouseRow == 0)
			{


				switch(grd_Aircraft_Journal.MouseCol)
				{
					case 0 : 
						strJournalOrderBy = " ORDER BY journ_entry_date DESC, journ_id DESC "; 
						 
						break;
					case 1 : 
						strJournalOrderBy = " ORDER BY journ_date DESC, journ_id DESC "; 
						 
						break;
					case 2 : 
						strJournalOrderBy = " ORDER BY journ_user_id "; 
						 
						break;
					case 3 : 
						strJournalOrderBy = " ORDER BY journ_subject "; 
						 
						break;
					case 4 : case 5 : case 6 : case 7 : 
						return; 

					case 8 : 
						strJournalOrderBy = " ORDER BY journ_subcategory_code "; 
						 
						break;
					case 9 : 
						strJournalOrderBy = " ORDER BY journ_id DESC, journ_date DESC"; 
						 
						break;
				}

				Fill_Aircraft_Journal_Grid();

			}
			else if (grd_Aircraft_Journal.MouseRow > 0 && grd_Aircraft_Journal.CurrentRowIndex > 0)
			{ 

				grd_Aircraft_Journal.RowSel = grd_Aircraft_Journal.CurrentRowIndex;

			}

		}

		private void grd_Aircraft_Journal_Click(Object eventSender, EventArgs eventArgs) => grd_Aircraft_Journal_singleClickBodyCode();


		private void grd_Aircraft_Journal_DoubleClick(Object eventSender, EventArgs eventArgs)
		{
			int RememberRow = 0;
			int nRememberGridRowCount = 0;

			try
			{

				grd_Aircraft_Journal.Enabled = false;
				tbr_ToolBar.Enabled = false;

				if (grd_Aircraft_Journal.CurrentRowIndex > 0)
				{

					RememberRow = grd_Aircraft_Journal.CurrentRowIndex;
					nRememberGridRowCount = grd_Aircraft_Journal.RowsCount;

					frm_Journal.DefInstance.Reference_Journal_ID = grd_Aircraft_Journal.get_RowData(grd_Aircraft_Journal.CurrentRowIndex);
					frm_Journal.DefInstance.Historical_Journal_ID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);
					frm_Journal.DefInstance.Reference_Comp_Id = 0;
					frm_Journal.DefInstance.Reference_Contact_Id = 0;

					modGlobalVars.RefreshACFromJournal = false;
					frm_Journal.DefInstance.ShowDialog();

					if (modGlobalVars.RefreshACFromJournal)
					{

						// commented out MSw 1/10/18
						//Call Select_Aircraft

						Fill_Aircraft_Journal_Grid(); //aey 6/18/04

						// if the journal grid changed then
						if (grd_Aircraft_Journal.RowsCount < nRememberGridRowCount)
						{
							if (grd_Aircraft_Journal.CurrentRowIndex > 0)
							{
								RememberRow = 1;
							}
						}

						grd_Aircraft_Journal.CurrentRowIndex = RememberRow;
						grd_Aircraft_Journal.RowSel = grd_Aircraft_Journal.CurrentRowIndex;
						grd_Aircraft_Journal.ColSel = 0;

					}

				}

				grd_Aircraft_Journal.Enabled = true;
				tbr_ToolBar.Enabled = true;
				grd_Aircraft_Journal.Redraw = true;

				if (!modGlobalVars.bKeepTransactionFocus)
				{
					this.Activate();
				}
				else
				{
					frm_Transaction_Documents.DefInstance.Activate();
				}
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Report_Error($"grdAircraftJournal_DblClick_Error: {excep.Message} ac_id: {txt_ac_id.Text}{modGlobalVars.cEmptyString}");
			}

		}

		private void grd_AircraftAvionics_Click(Object eventSender, EventArgs eventArgs)
		{

			if (grd_AircraftAvionics.CurrentRowIndex > 0)
			{

				RecordStat = "Update";

				Lock_Avionics = false;

				Check_Aircraft_Model_Avionics(Convert.ToInt32(snp_Aircraft_Model["amod_id"]), grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim());

				Select_Aircraft_Avionics();
			}

		}

		private void grd_aircraftdamage_DoubleClick(Object eventSender, EventArgs eventArgs)
		{


			grd_aircraftdamage.Enabled = false;
			tbr_ToolBar.Enabled = false;

			// Can get here without snp_Damage_Journal being open!  This is not good.  This should be fixed.
			// Added check for BOF and EOF as instructed - but this won't do the trick - we need to 1)fix the select,
			//  2) stop doing any of this stuff if the select failed.  (or maybe never even got called!)

			if (grd_aircraftdamage.CurrentRowIndex > 0)
			{

				if (!(snp_Damage_Journal.BOF && snp_Damage_Journal.EOF))
				{
					snp_Damage_Journal.MoveFirst();
					int tempForEndVar = grd_aircraftdamage.CurrentRowIndex - 1;
					for (int I = 1; I <= tempForEndVar; I++)
					{
						snp_Damage_Journal.MoveNext();
					}
				}

				frm_Journal.DefInstance.Reference_Journal_ID = Convert.ToInt32(snp_Damage_Journal["journ_id"]);
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = Convert.ToString(snp_Damage_Journal["journ_subcategory_code"]);
				frm_Journal.DefInstance.ShowDialog();

				Fill_Aircraft_Journal_Grid();
				Fill_Aircraft_DamageInspection_Grid();

			}

			grd_aircraftdamage.Enabled = true;
			tbr_ToolBar.Enabled = true;

			if (!modGlobalVars.bKeepTransactionFocus)
			{
				this.Activate();
			}
			else
			{
				frm_Transaction_Documents.DefInstance.Activate();
			}

			search_off();

		}

		//UPGRADE_NOTE: (7001) The following declaration (grd_AircraftInspection_DblClick) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void grd_AircraftInspection_DblClick()
		//{
			////    Dim i As Integer
			////
			////    grd_AircraftInspection.Enabled = False
			////    tbr_ToolBar.Enabled = False
			////
			////    If grd_AircraftInspection.Row > 0 Then
			////        If Not (snp_Inspect_Journal.BOF And snp_Inspect_Journal.EOF) Then
			////            snp_Inspect_Journal.MoveFirst
			////            For i = 1 To grd_AircraftInspection.Row - 1
			////                snp_Inspect_Journal.MoveNext
			////            Next i
			////        End If
			////
			////        frm_Journal.Reference_Journal_ID = snp_Inspect_Journal!journ_id
			////        Rec_Journal_Info.journ_subcategory_code = snp_Inspect_Journal!journ_subcategory_code
			////        frm_Journal.Show vbModal
			////
			////        Call Fill_Aircraft_Journal_Grid
			////        Call Fill_Aircraft_DamageInspection_Grid
			////
			////    End If
			////
			////    grd_AircraftInspection.Enabled = True
			////    tbr_ToolBar.Enabled = True
			////
			////    If Not bKeepTransactionFocus Then
			////        Me.SetFocus
			////    Else
			////        frm_Transaction_Documents.SetFocus
			////    End If
			////
			////    Call search_off
			//
		//}

		private void grd_AircraftKeyFeatures_Click(Object eventSender, EventArgs eventArgs)
		{
			//
			// DISPLAY THE KEY FEATURE FOR EDITING OR
			// INFORM THE USER THAT THE KEY FEATURE CAN NOT BE EDITED
			// IF IT IS CONSIDERED AS STANDARD OR AUTO GENERATED.
			//
			// RTW - LAST MODIFIED - 4/15/2004
			//
			// **************************************************

			if (grd_AircraftKeyFeatures.CurrentRowIndex > 0)
			{
				if (grd_AircraftKeyFeatures.CurrentColumnIndex == 2)
				{
					cbo_Feature_Options.Visible = false;
					txt_Kfeat_Update_Code.Visible = false;
					Display_Keyfeature_Help();
				}
				else
				{
					grd_AircraftKeyFeatures.CurrentColumnIndex = 2;
					// CHECK TO SEE IF THE FEATURE CODE IS SET FOR AUTOMATED ENTRY
					// THE CELL COLOR SET DURING THE LOAD PROCESS WILL INDICATE THAT
					// THE FEATURE CODE IS AUTO GENERATE
					if (grd_AircraftKeyFeatures.CellBackColor == SystemColors.Control)
					{
						cbo_Feature_Options.Visible = false;
						txt_Kfeat_Update_Code.Visible = false;
						MessageBox.Show("This feature code is either automatically maintained by Homebase or considered standard equipment and therefore can not be selected for editing.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					}
					else
					{
						cbo_Feature_Options.Visible = true;
						txt_Kfeat_Update_Code.Visible = true;
						Display_Key_Feature();
					}

				}
			}

		}

		private void acTimer1_Tick(Object eventSender, EventArgs eventArgs)
		{

			acTimer1.Enabled = false; // Turn OFF The Timer

			if (!gbTimer1DoubleClick)
			{

				gbTimer1SingleClick = true;

				if (adoAircraftRecordset.State == ConnectionState.Closed)
				{ //7/7/04 aey
					return;
				}

				if (grd_AircraftContacts.CurrentRowIndex > 0)
				{

					grd_AircraftContacts_singleClickBodyCode();

				} // grd_AircraftContacts.Row > 0

				gbTimer1SingleClick = false;

			} // If gbTimer1DoubleClick = False Then

		} // End Sub acTimer1()

		private void grd_AircraftContacts_doubleClickBodyCode()
		{
			string errMsg = "";
			Form Frm = null;
			Form f = null;
			frm_Company o_Local_Show_Company = null;
			int t_comp_id = 0;
			int t_comp_journ_id = 0;
			int t_ac_id = 0;
			int t_journ_id = 0;


			try
			{

				Select_Aircraft_Contact();

				if (!ContactRecordsetFilled)
				{ //9/29/06 mjm
					return;
				}

				if (grd_AircraftContacts.CurrentRowIndex > 0)
				{

					if (grd_AircraftContacts.MouseCol == 0)
					{
						// added in MSW - 1st (0) column selection launches the "view company" homebase.com page - 2/11/21

						t_comp_id = Convert.ToInt32(snp_AircraftContacts["Comp_id"]);

						//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//VB.Global.Load(frm_WebReport.DefInstance);
						frm_WebReport.DefInstance.PassedCompID = t_comp_id;
						frm_WebReport.DefInstance.WhichReport = "Company Details HB";
						frm_WebReport.DefInstance.Show();
					}
					else
					{

						if (grd_AircraftContacts.MouseCol == 5)
						{ //was col=6 aey 7/8/04

							search_off();

							RememberGridRow = grd_AircraftContacts.MouseRow;
							RememberGridCol = grd_AircraftContacts.MouseCol;

							modGridEditCommon.InPlace_Grid_Edit(grd_AircraftContacts, cbo_ac_purchase_question, false, true, null, grd_AircraftContacts.Left * 15, grd_AircraftContacts.Top * 15);

							bEdit_PurchQuest_Outstanding = true;

							return;

						} //grd_AircraftContacts.MouseCol = 5

						search_on("Loading Company/Contact...");
						Display_Company_Contact();

						if (grd_AircraftContacts.MouseCol == 6 && ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "97")
						{

							frm_PopUp.DefInstance.ComingFrom = "Fractional Expire Date";
							frm_PopUp.DefInstance.Text = "Fractional Expire Date";
							frm_PopUp.DefInstance.FractionalExpireDate = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_fraction_expires_date"])}").Trim();

							frm_PopUp.DefInstance.ShowDialog();

							if (frm_PopUp.DefInstance.FractionalExpireDate != modGlobalVars.cEmptyString && Information.IsDate(frm_PopUp.DefInstance.FractionalExpireDate))
							{
								UpdateFractionalExpireDate(frm_PopUp.DefInstance.FractionalExpireDate);
							}

							Fill_Aircraft_Contact_Grid();

						}
						else
						{

							//unload any extaneous contact forms that may exist
							modCommon.Unload_Form("frm_Company");

							t_comp_id = Convert.ToInt32(snp_AircraftContacts["Comp_id"]);
							t_comp_journ_id = Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]);
							t_ac_id = Convert.ToInt32(Conversion.Val(txt_ac_id.Text.Trim()));
							t_journ_id = Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]);

							Unload_Aircraft_Form();
							Application.DoEvents();


							o_Local_Show_Company = frm_Company.CreateInstance();
							//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//VB.Global.Load(o_Local_Show_Company);
							o_Local_Show_Company.Form_Initialize();
							o_Local_Show_Company.StartForm = tStart_Form;
							o_Local_Show_Company.Reference_CompanyID = t_comp_id;
							o_Local_Show_Company.Reference_CompanyJID = t_comp_journ_id;
							o_Local_Show_Company.Reference_AircraftID = t_ac_id;
							o_Local_Show_Company.Reference_AircraftJID = t_journ_id;
							o_Local_Show_Company.Show();
							//UPGRADE_WARNING: (2065) Form method o_Local_Show_Company.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
							o_Local_Show_Company.BringToFront();
							//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
							o_Local_Show_Company.Form_Activated(null, new EventArgs());

							this.Cursor = CursorHelper.CursorDefault;
							Application.DoEvents();
							//Unload_Aircraft_Form
							// DoEvents
							this.Close();
							Application.DoEvents();
						} // grd_AircraftContacts.Col = 6 And Trim(cEmptyString & snp_AircraftContacts!cref_contact_type) = "97"
					}
				} // grd_AircraftContacts.Row > 0
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"grd_AircraftContacts_dblclick_Error ({Information.Err().Number.ToString()}) {excep.Message} : grdrow[{grd_AircraftContacts.CurrentRowIndex.ToString()}] compid[{Convert.ToString(snp_AircraftContacts["Comp_id"])}]", "frm_Aircraft(DBLCLICK)");
				search_off();
				return;
			}

		}

		private void grd_AircraftContacts_singleClickBodyCode()
		{

			string strLock = "";
			string errMsg = "";
			string temp_type = "";
			bool found_type = false;

			try
			{

				pnl_gen[1].Enabled = false;

				tbr_ToolBar.Enabled = false;

				Display_Company_Contact();


				if (grd_AircraftContacts.CurrentRowIndex > 0)
				{

					if (bEdit_PurchQuest_Outstanding)
					{

						modGridEditCommon.InPlace_Grid_Reset(grd_AircraftContacts, cbo_ac_purchase_question, RememberGridRow, RememberGridCol);

						bEdit_PurchQuest_Outstanding = false;

					}

					cmd_Primary.Enabled = true; //aey 4/21/2006
					cmd_Primary.Text = "Set Company/Contact as Primary";

					strLock = modCommon.CompanyLocked(grd_AircraftContacts.get_RowData(grd_AircraftContacts.CurrentRowIndex), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"])).ToLower();

					if (!((strLock == "false") || (strLock == Convert.ToString(modAdminCommon.snp_User["user_id"]).ToLower())))
					{
						cmd_Primary.Enabled = false;
						cmd_Primary.Text = "Set Company as Primary/Locked";
					}

					if (grd_AircraftContacts.get_RowData(grd_AircraftContacts.CurrentRowIndex) != primary_comp_id)
					{

						strLock = modCommon.CompanyLocked(primary_comp_id, Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]));

						if (!((strLock == "False") || (strLock == Convert.ToString(modAdminCommon.snp_User["user_id"]))))
						{
							cmd_Primary.Enabled = false;
							cmd_Primary.Text = "Set Company as Primary/Locked";
						}

					}

					if (Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]) > 0)
					{
						SetupCompanyChangeHistoryOptions();
					}
					else
					{
						SetupCompanyTransmitOptions();
					}

					grd_AircraftContacts.RowSel = grd_AircraftContacts.CurrentRowIndex;
					grd_AircraftContacts.FirstDisplayedScrollingRowIndex = grd_AircraftContacts.CurrentRowIndex;

					pnl_gen[1].Enabled = true;
					tbr_ToolBar.Enabled = true;
				} // grd_AircraftContacts.Row > 0



				// Added in MSW - 10/19/2020-------------------
				grd_AircraftContacts.CurrentColumnIndex = 7;
				if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim() != "")
				{
					if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim() == "Y")
					{ // then its verified
						chk_verified.CheckState = CheckState.Unchecked;
						chk_verified.Tag = "0";
					}
					else
					{
						chk_verified.CheckState = CheckState.Checked;
						chk_verified.Tag = "1";
					}
				}



				// ADDED MSW  -10/31/16
				grd_AircraftContacts.CurrentColumnIndex = 1;
				if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim() != "")
				{
					cbo_change_rel.Visible = true;
					cmdAddACDetail[7].Visible = true;
					temp_type = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim().Substring(Math.Max(grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim().Length - (Strings.Len(grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim()) - (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().Trim().IndexOf('[') + 1)), 0));
					temp_type = StringsHelper.Replace(temp_type.Trim(), "]", "", 1, -1, CompareMethod.Binary);


					int tempForEndVar = cbo_change_rel.Items.Count - 1;
					for (int I = 0; I <= tempForEndVar; I++)
					{
						cbo_change_rel.SelectedIndex = I;
						if (cbo_change_rel.Text.Trim() == temp_type.Trim())
						{
							cbo_change_rel.Tag = temp_type.Trim();
							found_type = true;
							break;
						}
					}

					if (!found_type)
					{
						cbo_change_rel.Visible = false;
						// cmdAddACDetail(7).Visible = False
					}

					found_type = false;
					cbo_company_research_contact.Visible = true;

					cbo_company_research_contact.Tag = "";
					grd_AircraftContacts.CurrentColumnIndex = 4;
					int tempForEndVar2 = cbo_company_research_contact.Items.Count - 1;
					for (int I = 0; I <= tempForEndVar2; I++)
					{
						cbo_company_research_contact.SelectedIndex = I;
						if (cbo_company_research_contact.Text.Trim() != "")
						{
							if (StringsHelper.Replace(StringsHelper.Replace(StringsHelper.Replace(grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString(), "]", "", 1, -1, CompareMethod.Binary), "[", "", 1, -1, CompareMethod.Binary), "  ", " ", 1, -1, CompareMethod.Binary).IndexOf(StringsHelper.Replace(StringsHelper.Replace(StringsHelper.Replace(StringsHelper.Replace(cbo_company_research_contact.Text, "/ ", "", 1, -1, CompareMethod.Binary), "No Contact Title", "", 1, -1, CompareMethod.Binary), "]", "", 1, -1, CompareMethod.Binary), "[", "", 1, -1, CompareMethod.Binary)) >= 0)
							{
								cbo_company_research_contact.Tag = cbo_company_research_contact.Text.Trim();
								found_type = true;
								break;
							}
						}
					}

					if (!found_type)
					{
						cbo_company_research_contact.SelectedIndex = 0;
					}
					else
					{
						cmdAddACDetail[7].Visible = true;
					}


				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				errMsg = $"{Information.Err().Number.ToString()} {errMsg} {excep.Message}";
				modAdminCommon.Report_Error($"grd_AircraftContacts_Click_Error: {errMsg}");
				search_off();
				return;
			}


		}

		private void grd_AircraftContacts_Click(Object eventSender, EventArgs eventArgs)
		{

			acTimer1.Enabled = true; // Turn On Timer

			grd_AircraftContacts.CurrentColumnIndex = 1;
			cmdAddACDetail[10].Visible = false;
			cmdAddACDetail[8].Visible = false;

			string temp_text = "";
			if ((ColorTranslator.ToOle(grd_AircraftContacts.CellBackColor).ToString() == modAdminCommon.ExclusiveColor) || (ColorTranslator.ToOle(grd_AircraftContacts.CellBackColor).ToString() == modAdminCommon.PrimaryColor))
			{
				cmdAddACDetail[8].Visible = true;
			}
			else if ((grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString() == "Charter Company" || grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString() == "Aircraft Management Company"))
			{ 

				if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString() == "Charter Company")
				{
					cmdAddACDetail[10].Tag = "C";
				}
				else if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString() == "Aircraft Management Company")
				{ 
					cmdAddACDetail[10].Tag = "M";
				}

				cmdAddACDetail[10].Visible = true;

			}
			else
			{
				grd_AircraftContacts.CurrentColumnIndex = 1;
				temp_text = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();

				cmdAddACDetail[8].Visible = temp_text.Trim() == "Non-Exclusive Sales Contact" || temp_text.Trim() == "Sales Company/Contact";



			}

		}

		private void grd_AircraftContacts_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			acTimer1.Enabled = false; // Turn Off Timer So The Single Click Is Never Called

			gbTimer1DoubleClick = true;

			if (!gbTimer1SingleClick)
			{
				grd_AircraftContacts_doubleClickBodyCode();

			} // If gbTimer1SingleClick = False Then

			gbTimer1DoubleClick = false;

			return;

		}

		private void grd_AircraftContacts_MouseDown(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (grd_AircraftContacts.CurrentRowIndex > 0)
			{

				if (Button == UpgradeHelpers.Utils.WinForms.MouseButtonsHelper.GetVB6ShortValue(MouseButtons.Right))
				{

					grd_AircraftContacts.CurrentColumnIndex = grd_AircraftContacts.MouseCol;

					if (grd_AircraftContacts.CurrentRowIndex != grd_AircraftContacts.MouseRow)
					{

						grd_AircraftContacts.CurrentRowIndex = grd_AircraftContacts.MouseRow;
						grd_AircraftContacts_singleClickBodyCode();


					}

					if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0 && HistoricalContactTypeSupported)
					{
						//UPGRADE_WARNING: (6024) Default menues are not supported for Context Menues (Popup) More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6024
						Ctx_mnuHistoricalTransaction.Show(this, PointToClient(Cursor.Position).X, PointToClient(Cursor.Position).Y);
					}
					else
					{
						//UPGRADE_WARNING: (6024) Default menues are not supported for Context Menues (Popup) More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6024
						Ctx_mnuCompTransmits.Show(this, PointToClient(Cursor.Position).X, PointToClient(Cursor.Position).Y);
					}

					grd_AircraftContacts.Redraw = true;

				}

			}

			if (!modGlobalVars.bKeepAircraftFocus)
			{
				Unload_Aircraft_Form();
				this.Close();
			}

		}

		private void fill_research_contact_list(int comp_id, int journ_id)
		{

			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO FILL A LIST/COMBO OF CONTACTS FOR THE SELECTED COMPANY.
			// RTW - MODIFIED ON 9/22/2010 - INCLUDED THE INDEX HINT IN QUERY

			try
			{
				string Query = "";
				Query = "";
				string TempName = "";
				TempName = "";
				string TempTitle = "";
				TempTitle = "";
				ADORecordSetHelper ado_ResearchContact = new ADORecordSetHelper();

				search_on("Getting Research Contacts ...");

				cbo_company_research_contact.Enabled = false;
				cbo_company_research_contact.Items.Clear();
				cbo_company_research_contact.AddItem("", 0);
				cbo_company_research_contact.SetItemData(cbo_company_research_contact.Items.Count - 1, 0);
				cbo_company_research_contact.SelectedIndex = -1;

				//extract fields from contact table
				Query = "SELECT contact_id, contact_sirname, contact_first_name, contact_middle_initial, contact_last_name, contact_suffix, contact_title ";
				// 07/18/2019 - By David D. Cruger; Removed INDEX HINT
				//Query = Query & "FROM Contact WITH(NOLOCK, index(ix_contact_comp_journal_contact_id_key)) "
				Query = $"{Query}FROM Contact WITH (NOLOCK) ";
				Query = $"{Query}WHERE contact_comp_id = {comp_id.ToString()}";
				Query = $"{Query} AND contact_journ_id = {journ_id.ToString()}";
				Query = $"{Query} AND contact_active_flag = 'Y'";
				Query = $"{Query} ORDER BY contact_first_name, contact_last_name";

				ado_ResearchContact = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(ado_ResearchContact.Fields) && !(ado_ResearchContact.BOF && ado_ResearchContact.EOF))
				{

					while(!ado_ResearchContact.EOF)
					{
						TempName = "";
						TempTitle = "";

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchContact["contact_first_name"]) && !Convert.IsDBNull(ado_ResearchContact["contact_last_name"]))
						{


							//        If Not IsNull(ado_ResearchContact("contact_sirname")) Then
							//          If Trim$(ado_ResearchContact("contact_sirname").Value) <> cEmptyString Then
							//            TempName = Trim$(ado_ResearchContact("contact_sirname").Value) & cSingleSpace
							//          End If
							//        End If
							//
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_ResearchContact["contact_first_name"]))
							{
								if (Convert.ToString(ado_ResearchContact["contact_first_name"]).Trim() != modGlobalVars.cEmptyString)
								{
									TempName = $"{TempName}{Convert.ToString(ado_ResearchContact["contact_first_name"]).Trim()}{modGlobalVars.cSingleSpace}";
								}
							}

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_ResearchContact["contact_middle_initial"]))
							{
								if (Convert.ToString(ado_ResearchContact["contact_middle_initial"]).Trim() != modGlobalVars.cEmptyString)
								{
									TempName = $"{TempName}{Convert.ToString(ado_ResearchContact["contact_middle_initial"]).Trim()}.{modGlobalVars.cSingleSpace}";
								}
							}

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_ResearchContact["contact_last_name"]))
							{
								if (Convert.ToString(ado_ResearchContact["contact_last_name"]).Trim() != modGlobalVars.cEmptyString)
								{
									TempName = $"{TempName}{Convert.ToString(ado_ResearchContact["contact_last_name"]).Trim()}{modGlobalVars.cSingleSpace}";
								}
							}

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_ResearchContact["contact_suffix"]))
							{
								if (Convert.ToString(ado_ResearchContact["contact_suffix"]).Trim() != modGlobalVars.cEmptyString)
								{
									TempName = $"{TempName}{Convert.ToString(ado_ResearchContact["contact_suffix"]).Trim()}";
								}
							}
						}
						else
						{
							TempName = modGlobalVars.cEmptyString;
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchContact["Contact_Title"]))
						{
							TempTitle = Convert.ToString(ado_ResearchContact["Contact_Title"]).Trim();
						}
						else
						{
							TempTitle = modGlobalVars.cEmptyString;
						}

						if (TempName.Trim() != modGlobalVars.cEmptyString && TempTitle.Trim() != modGlobalVars.cEmptyString)
						{
							TempName = $"{TempName.Trim()} / {TempTitle.Trim()}";
						}
						else if (TempName.Trim() == modGlobalVars.cEmptyString && TempTitle.Trim() != modGlobalVars.cEmptyString)
						{ 
							TempName = $"[No Contact Name] / {TempTitle.Trim()}";
						}
						else if (TempName.Trim() != modGlobalVars.cEmptyString && TempTitle.Trim() == modGlobalVars.cEmptyString)
						{ 
							TempName = $"{TempName.Trim()} / [No Contact Title]";
						}

						if (TempName.Trim() != "")
						{

							cbo_company_research_contact.AddItem(TempName);
							cbo_company_research_contact.SetItemData(cbo_company_research_contact.Items.Count - 1, Convert.ToInt32(ado_ResearchContact["Contact_ID"]));

						}

						ado_ResearchContact.MoveNext();
					};

					cbo_company_research_contact.Enabled = true;
					ado_ResearchContact.Close();

					search_off();
				}

				ado_ResearchContact = null;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_research_contact_list_Error ({Information.Err().Number.ToString()}) {excep.Message} LSTCT:[{cbo_company_research_contact.Items.Count.ToString()}] CMPID:[{comp_id.ToString()}] JID:[{journ_id.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}
		private bool LeaseRelatedHistory()
		{


			bool result = false;

			string Query = $"SELECT journ_subcategory_code FROM Journal WITH(NOLOCK) WHERE journ_id = {tmp_ac_journ_id.ToString()}";
			Query = $"{Query} AND journ_subcategory_code LIKE 'L%'";

			if (modAdminCommon.Exist(Query))
			{
				result = true;
			}

			return result;
		}

		private void FillLeaseGrid()
		{


			grdLeaseInfo.Clear();
			grdLeaseInfo.RowsCount = 1;
			grdLeaseInfo.ColumnsCount = 7;

			grdLeaseInfo.CurrentColumnIndex = 0;
			grdLeaseInfo.CurrentRowIndex = 0;

			bLeaseChanged = false;

			if (Conversion.Val(tmp_ac_journ_id.ToString()) > 0)
			{
				if (!LeaseRelatedHistory())
				{
					pnl_LeaseList.Visible = false;
					return;
				}
				else
				{
					if (chkConfirmedOnly.CheckState == CheckState.Unchecked)
					{
						pnl_LeaseList.Visible = true;
						chkConfirmedOnly.CheckState = CheckState.Checked;
						return;
					}
				}
			}
			else
			{
				pnl_LeaseList.Visible = true;
			}

			// Leased Flag
			//If chkArray(chkLeasedFlag_INDEX ).Value = vbChecked Or chkConfirmedOnly = vbChecked Then

			string Query = $"SELECT * FROM Aircraft_Lease WITH(NOLOCK) WHERE aclease_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";

			if (chkConfirmedOnly.CheckState == CheckState.Unchecked)
			{
				Query = $"{Query} AND (aclease_expired = 'N' or aclease_expired IS NULL)";
			}

			Query = $"{Query} ORDER BY aclease_journ_id";

			snpLease = new ADORecordSetHelper();
			//set the cursor location to the client
			snpLease.CursorLocation = CursorLocationEnum.adUseClient;

			snpLease.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpLease.BOF && snpLease.EOF))
			{
				// disconnect the recordset
				snpLease.ActiveConnection = null;

				// mnueditchangeLease.Enabled = True

				cmdSaveLease[0].Enabled = true;

				grdLeaseInfo.Visible = true;


				while(!snpLease.EOF)
				{
					//   MSW/RTW 3/12/12 - NOT SURE WHAT THIS IS IN FOR
					if (Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(snpLease["aclease_journ_id"])}").Trim()) == 0)
					{
						//  mnueditchangeLease.Enabled = False
						cmdSaveLease[0].Enabled = false;
					}

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(snpLease["aclease_expiration_date"]))
					{
						if (Information.IsDate(snpLease["aclease_expiration_date"]))
						{
							grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = DateTime.Parse(Convert.ToString(snpLease["aclease_expiration_date"]).Trim()).ToString("d");
						}
						else
						{
							grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						}
					}
					else
					{
						grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
					}

					grdLeaseInfo.CurrentColumnIndex++;

					grdLeaseInfo.SetColumnWidth(grdLeaseInfo.CurrentColumnIndex, 80);
					grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpLease["aclease_type"])}").Trim();
					grdLeaseInfo.CurrentColumnIndex++;

					grdLeaseInfo.SetColumnWidth(grdLeaseInfo.CurrentColumnIndex, 80);
					grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpLease["aclease_term"])}").Trim();
					grdLeaseInfo.CurrentColumnIndex++;

					grdLeaseInfo.SetColumnWidth(grdLeaseInfo.CurrentColumnIndex, 67);
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(snpLease["aclease_exp_confirm_date"]))
					{
						if (Information.IsDate(snpLease["aclease_exp_confirm_date"]))
						{
							grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = DateTime.Parse(Convert.ToString(snpLease["aclease_exp_confirm_date"]).Trim()).ToString("d");
						}
						else
						{
							grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						}
					}
					else
					{
						grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
					}
					grdLeaseInfo.CurrentColumnIndex++;

					grdLeaseInfo.SetColumnWidth(grdLeaseInfo.CurrentColumnIndex, 200);
					grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = GetLessor(Convert.ToInt32(Conversion.Val(Convert.ToString(snpLease["aclease_ac_id"]))), Convert.ToInt32(Conversion.Val(Convert.ToString(snpLease["aclease_journ_id"]))));
					grdLeaseInfo.CurrentColumnIndex++;

					grdLeaseInfo.SetColumnWidth(grdLeaseInfo.CurrentColumnIndex, 200);
					grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = GetLessee(Convert.ToInt32(Conversion.Val(Convert.ToString(snpLease["aclease_ac_id"]))), Convert.ToInt32(Conversion.Val(Convert.ToString(snpLease["aclease_journ_id"]))));
					grdLeaseInfo.CurrentColumnIndex++;

					grdLeaseInfo.SetColumnWidth(grdLeaseInfo.CurrentColumnIndex, 300);
					grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpLease["aclease_note"])}").Trim();

					if (grdLeaseInfo.CurrentRowIndex == grdLeaseInfo.RowsCount - 1)
					{
						grdLeaseInfo.RowsCount++;
					}

					grdLeaseInfo.set_RowData(grdLeaseInfo.CurrentRowIndex,Convert.ToInt32( snpLease.GetField("aclease_journ_id"))); //aey 6/15/05

					grdLeaseInfo.CurrentRowIndex++;
					grdLeaseInfo.CurrentColumnIndex = 0;

					snpLease.MoveNext();
				};

				grdLeaseInfo.RowsCount--;

			}
			else
			{
				grdLeaseInfo.Visible = false;

				// mnueditchangeLease.Enabled = True

				cmdSaveLease[0].Enabled = true;
			}

			//Else    ' NO LEASE DATA TO DISPLAY
			//    grdLeaseInfo.Visible = False

			//End If    ' if lease checkbox is checked.

			// added 3/1/12 MSW - to make it only load once
			tab_lease_loaded = true;
			grdLeaseInfo.Redraw = true;

			search_off();

		}

		private string GetLessor(int PassedACID, int PassedJournID)
		{

			string result = "";
			ADORecordSetHelper snpLessor = new ADORecordSetHelper(); //aey 6/18/04

			string Query = "SELECT Company.comp_name FROM Company, Aircraft_Reference ";
			Query = $"{Query}WHERE (comp_id = cref_comp_id ";
			Query = $"{Query}AND cref_journ_id = comp_journ_id) ";

			Query = $"{Query}AND cref_ac_id = {PassedACID.ToString()}";
			Query = $"{Query} AND cref_journ_id = {PassedJournID.ToString()}";
			//13 - Lessor, 55 - Owner-Lessor, 57 - Lessee-Sub-Lessor, 58 - Sub-Lessee - Sub-Lessor, 64 - Lessee-Operator
			Query = $"{Query} AND cref_contact_type in ('13','57')";

			snpLessor.CursorLocation = CursorLocationEnum.adUseClient;

			snpLessor.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpLessor.BOF && snpLessor.EOF))
			{

				if (snpLessor.RecordCount > 1)
				{
					MessageBox.Show($"More than one Lessor!{Environment.NewLine}{snpLessor.RecordCount.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
				}
				result = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpLessor["comp_name"])}").Trim();
			}
			else
			{
				result = "<Unknown>";
			}

			snpLessor.Close();

			return result;
		}

		private string GetLessee(int PassedACID, int PassedJournID)
		{

			string result = "";
			ADORecordSetHelper snpLessee = new ADORecordSetHelper(); //aey 6/18/04

			string Query = "SELECT Company.comp_name FROM Company, Aircraft_Reference ";
			Query = $"{Query}WHERE (comp_id = cref_comp_id ";
			Query = $"{Query}AND cref_journ_id = comp_journ_id) ";

			Query = $"{Query}AND cref_ac_id = {PassedACID.ToString()}";
			Query = $"{Query} AND cref_journ_id = {PassedJournID.ToString()}";
			// 12 - Standard Lessee, 39 - Sub-Lessee, 43 - Co-Lessee, 58 - Sub-Lessee - Sub-Lessor, 64 - Lessee-Operator, 65 - Sublessee - Operator
			Query = $"{Query} AND cref_contact_type in ('12','39')";

			snpLessee.CursorLocation = CursorLocationEnum.adUseClient;

			snpLessee.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpLessee.BOF && snpLessee.EOF))
			{
				if (snpLessee.RecordCount > 1)
				{
					MessageBox.Show($"More than one Lessee!{Environment.NewLine}{snpLessee.RecordCount.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
				}
				result = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpLessee["comp_name"])}").Trim();
			}
			else
			{
				result = "<Unknown>";
			}

			snpLessee.Close();

			return result;
		}

		public void Setup_Form()
		{

			//******************************************************************************************
			// LOAD ALL OF THE CONTROLS ON THE FORM.

			// RTW - TEMP HOLD
			// CONSIDER CHANGING THE FOLLOWING SELECTS TO ARRAYS
			// - JOURNAL SUBCATGORY CBO
			// - ENGINE MANAGEMENT
			// - ENGINE MAINTENANCE
			// - AIRFRAME MAINTENANCE PROGRAM
			// - AIRFRAME MAINTEANCE TRACKING PROGRAM
			// - CURRENCY
			// - OPERATING CERTIFICATIONS
			// - BASE COMBINE FOR COUNTRY OF REGISTRATION

			modFillAircraftControls.Fill_Aircraft_Owner_Type_CBO(cbo_ac_owner_type);
			modFillAircraftControls.Fill_Aircraft_Stage_CBO(cbo_ac_stage);

			//Call modFillAircraftControls.Fill_Engine_Management_CBO(cbo_ac_engine_management_prog_EMGP)
			modFillAircraftControls.Fill_Engine_Management_CBO_From_Array(cbo_ac_engine_management_prog_EMGP);

			// Call modFillAircraftControls.Fill_Airframe_Maintenance_Program_CBO(cbo_ac_airframe_maintenance_prog_AMP)
			//Call modFillAircraftControls.Fill_Airframe_Tracking_CBO(cbo_ac_airframe_maint_tracking_prog_AMTP)

			// MSW 3/18/12 -

			// 06/29/2019 - By David D. Cruger
			// If a History Record Fill AMP with Inactive Providers else only Active Providers

			if (Reference_Journal_ID == 0)
			{
				modFillAircraftControls.Fill_Airframe_Maintenance_Program_CBO_From_Array(cbo_ac_airframe_maintenance_prog_AMP);
			}
			else
			{
				modFillAircraftControls.Fill_Airframe_Maintenance_Program_CBO_From_Array_History(cbo_ac_airframe_maintenance_prog_AMP);
			}

			modFillAircraftControls.Fill_Airframe_Tracking_CBO_From_Array(cbo_ac_airframe_maint_tracking_prog_AMTP);

			//Call modFillAircraftControls.Fill_Currency_Type(cbo_ac_foreign_currency_name) ' commented out, MSW loaded already - should use array now
			modFillAircraftControls.Fill_Currency_Type_From_Array(cbo_ac_foreign_currency_name);

			modFillAircraftControls.Fill_Operating_Certification_CBO(cbo_ac_warranty_notes, Reference_Journal_ID);
			modFillAircraftControls.Fill_Certifications_CBO(cbo_accert_name);
			modFillAircraftControls.Fill_Aircraft_Config_Name(cbo_ac_interior_config_name);

			modFillCompConControls.fill_state_FromArray(cboBaseState, true, false, false);
			modFillCompConControls.Fill_baseAndRegCountryCbos(cboBaseCountry, cbo_ac_country_of_registration);

			modFillCompConControls.fill_questionlist_FromArray(cbo_ac_purchase_question);

			modFillAircraftControls.Fill_Journal_Cat_List(cbo_jcat_category_code);
			// RTW - MODIFIED - 3/13/2012 - REMOVED THE LOADING OF THE JOURNAL SUBCATEGORY COMBO
			// RARELY USED AND WAS FILLING WITH 1,500 ENTRIES.
			cbo_jcat_subcategory_code.Visible = false;
			cbo_jcat_subcategory_code.Items.Clear();
			cbo_jcat_subcategory_code.AddItem("All");
			cbo_jcat_subcategory_code.Enabled = true;
			//Call modFillAircraftControls.Fill_Journal_SubCat_List(cbo_jcat_subcategory_code)

			modFillCompConControls.Fill_AccountRep_FromArray(cbo_jcat_account_rep, false, true);

			modFillAircraftControls.Fill_Aircraft_Asking_List(cbo_ac_asking);

			modFillCompConControls.Fill_AccountRep_FromArray(cboAcctRep[0], false, true);
			modFillCompConControls.Fill_AccountRep_FromArray(cboAcctRep[1], false, true);

			modFillAircraftControls.Fill_Avionics_Master_List(lst_Avionics);

			SSTabHelper.SetSelectedIndex(tab_aircraft_details, 0);

			// SET TAB DEFAULTS
			// RTW - MODIFIED - 3/8/2012
			tab_faa_loaded = false;
			tab_avionics_loaded = false;
			tab_certifications_loaded = false;
			tab_damage_loaded = false;
			tab_lease_loaded = false;

			//Initialize the ToolBar
			ToolbarSetup();
			ToolbarButtonsSetup();

		}

		public void Fill_Aircraft_Make_List(string AirframeType = "")
		{
			ADORecordSetHelper snpAircraftMakeList = new ADORecordSetHelper(); //aey 6/10/04

			string strQuery = "SELECT * FROM Aircraft_Model WITH(NOLOCK)";

			if (AirframeType.Trim() != "")
			{ //aey 7/26/05
				strQuery = $"{strQuery} WHERE amod_airframe_type_code = '{AirframeType.Trim()}'";
			}

			strQuery = $"{strQuery} ORDER BY amod_make_name, amod_model_name";

			snpAircraftMakeList.Open(strQuery, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpAircraftMakeList.BOF && snpAircraftMakeList.EOF))
			{


				while(!snpAircraftMakeList.EOF)
				{
					cbo_amod_make_name.AddItem(($"{Convert.ToString(snpAircraftMakeList["amod_make_name"]).Trim()} / {Convert.ToString(snpAircraftMakeList["amod_model_name"]).Trim()}").Trim());
					cbo_amod_make_name.SetItemData(cbo_amod_make_name.Items.Count - 1, Convert.ToInt32(snpAircraftMakeList["amod_id"]));
					snpAircraftMakeList.MoveNext();
				};

			}

			snpAircraftMakeList.Close();

		}

		private bool Save_Lease(int inComp_ID = 0, string inNote = "")
		{
			bool result = false;
			bool Save_Lease_Error = false;
			bool ReDimError = false;
			//
			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO SAVE LEASE INFORMATION FOR THE CURRENT RECORD.
			// RTW - MODIFIED DUE TO ERRORS WHEN INTRODUCING ADO
			string Query = "";
			string Expired_Lessee = "";
			string Expired_Lessor = "";

			string strError = "Init";
			try
			{
				if (bLeaseShouldTransmit)
				{
					ReDimError = true;
					Save_Lease_Error = false;

					strError = "redim";

					arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});
					arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "ac_lease_flag";

					arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});
					arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "aclease_expiration_date";

					arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});
					arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "aclease_note2";

					arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});
					arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "aclease_note3";

					arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});
					arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "aclease_note5";

					arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});
					arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "aclease_type";

					arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});
					arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "aclease_note1";

					arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});
					arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "aclease_note4";

					arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});
					arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "aclease_term";

				}

				Save_Lease_Error = true;
				ReDimError = false;
				strError = "Update";

				Query = $"UPDATE Aircraft_Lease SET aclease_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
				Query = $"{Query}, aclease_journ_id = {Convert.ToString(snpLease["aclease_journ_id"])}, ";

				strError = "actual date expire";
				grdLeaseInfo.CurrentColumnIndex = 3; //actual date expires

				if ((grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString) && isExpired && (!bWasExpiredAlready))
				{
					// GET THE LESSOR NAME FROM THE GRID
					strError = "Lessor";
					grdLeaseInfo.CurrentColumnIndex = 4;
					Expired_Lessor = grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString().Trim();

					// GET THE LESSEE NAME FROM THE GRID
					grdLeaseInfo.CurrentColumnIndex = 5;
					Expired_Lessee = grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString().Trim();

					strError = "Journ";
					grdLeaseInfo.CurrentColumnIndex = 2;

					modAdminCommon.Rec_Journal_Info.journ_subject = $"Lease Expired from {Expired_Lessor} to {Expired_Lessee}";
					modAdminCommon.Rec_Journal_Info.journ_description = ($"{inNote}{modGlobalVars.cEmptyString}").Substring(0, Math.Min(4000, ($"{inNote}{modGlobalVars.cEmptyString}").Length));
					modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]); // snpLease!aclease_ac_id 'aey 6/18/04
					modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "LX";

					grdLeaseInfo.CurrentColumnIndex = 3;
					modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString()); // Trim(txtLeaseExpireConfirmDate)
					modAdminCommon.Rec_Journal_Info.journ_comp_id = Convert.ToInt32(Conversion.Val(inComp_ID.ToString()));
					modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
					modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
					modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
					modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
					modAdminCommon.Rec_Journal_Info.journ_status = "A";
					modAdminCommon.Rec_Journal_Info.journ_category_code = "AH";

					GetJournalID = frm_Journal.DefInstance.Commit_Journal_Entry();

					if (GetJournalID > 0)
					{
						strError = "ip event";
						grdLeaseInfo.CurrentColumnIndex = 5;
						modCommon.InsertPriorityEvent("LX", Convert.ToInt32(adoAircraftRecordset["ac_id"]), GetJournalID, $"Was Leased By {grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString()}", GetCompID(grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString()));

						GetJournalID = Convert.ToInt32(snpLease["aclease_journ_id"]);

					}
					else
					{
						modAdminCommon.ADO_Transaction("RollbackTrans");
						MessageBox.Show($"Error saving lease Rollback J:{GetJournalID.ToString()} {Information.Err().Description} {Information.Err().Source}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
						return result;
					}

				}
				else
				{
					GetJournalID = 0;
				}

				strError = "fill grid";

				grdLeaseInfo.CurrentColumnIndex = 1;
				if (($"{modGlobalVars.cEmptyString}{grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString()}").Trim() != modGlobalVars.cEmptyString)
				{
					Query = $"{Query}aclease_type = '{modAdminCommon.Fix_Quote(grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString())}', ";
				}
				else
				{
					Query = $"{Query}aclease_type = NULL, ";
				}
				grdLeaseInfo.CurrentColumnIndex = 2;
				if (($"{modGlobalVars.cEmptyString}{grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString()}").Trim() != modGlobalVars.cEmptyString)
				{
					Query = $"{Query}aclease_term = '{modAdminCommon.Fix_Quote(grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString())}', ";
				}
				else
				{
					Query = $"{Query}aclease_term = NULL, ";
				}
				grdLeaseInfo.CurrentColumnIndex = 0;
				if (($"{modGlobalVars.cEmptyString}{grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString()}").Trim() != modGlobalVars.cEmptyString)
				{
					Query = $"{Query}aclease_expiration_date = '{grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString()}', ";
				}
				else
				{
					Query = $"{Query}aclease_expiration_date = NULL, ";
				}
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snpLease["aclease_percentage"])}").Trim() != modGlobalVars.cEmptyString)
				{
					Query = $"{Query}aclease_percentage = {Convert.ToString(snpLease["aclease_percentage"])}, ";
				}
				else
				{
					Query = $"{Query}aclease_percentage = NULL, ";
				}
				grdLeaseInfo.CurrentColumnIndex = 6;
				if (($"{modGlobalVars.cEmptyString}{grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString()}").Trim() != modGlobalVars.cEmptyString)
				{
					Query = $"{Query}aclease_note = '{modAdminCommon.Fix_Quote(grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString())}', ";
				}
				else
				{
					Query = $"{Query}aclease_note = NULL, ";
				}
				grdLeaseInfo.CurrentColumnIndex = 3;
				if (Information.IsDate(grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString()))
				{ //aey 9/1/04
					Query = $"{Query}aclease_exp_confirm_date = '{DateTime.Parse(grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString()).ToString("d")}', ";
					Query = $"{Query}aclease_expired = 'Y' ";
				}
				else
				{
					Query = $"{Query}aclease_exp_confirm_date = NULL, ";
					if (chkConfirmLeaseExpired.CheckState == CheckState.Checked)
					{
						Query = $"{Query}aclease_expired = 'Y' ";
					}
					else
					{
						Query = $"{Query}aclease_expired = 'N' ";
					}
				}

				Query = $"{Query}WHERE aclease_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}"; //snpLease!aclease_ac_id 'aey 6/18/04
				Query = $"{Query} AND aclease_journ_id = {Convert.ToString(snpLease["aclease_journ_id"])}";
				strError = "query";
				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();

				return true;
			}
			catch (Exception excep)
			{
				if (!Save_Lease_Error && !ReDimError)
				{
					throw excep;
				}

				if (ReDimError)
				{

					arr_Transmit_Fields = new string[]{""};
					//UPGRADE_TODO: (1065) Error handling statement (Resume Next) could not be converted. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1065
					UpgradeHelpers.Helpers.NotUpgradedHelper.NotifyNotUpgradedElement("Resume Next Statement");

				}
				if (Save_Lease_Error || ReDimError)
				{

					result = false;
					//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
					modAdminCommon.Record_Error("Lease", $"Save_Lease_Error: {strError} col: {grdLeaseInfo.CurrentColumnIndex.ToString()} {grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString()} {Information.Err().Number.ToString()} {excep.Message}");

				}
			}
			return result;
		}
		private int GetCompID(string inCompName)
		{

			int result = 0;
			ADORecordSetHelper snpCompID = new ADORecordSetHelper(); //6/10/04 aey

			string Query = $"SELECT comp_id FROM company WHERE comp_name = '{modAdminCommon.Fix_Quote(inCompName.Trim())}' and comp_journ_id = 0";

			snpCompID.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockOptimistic);

			if (!(snpCompID.BOF && snpCompID.EOF))
			{
				result = Convert.ToInt32(Double.Parse(($"{modGlobalVars.cEmptyString}{Convert.ToString(snpCompID["comp_id"])}").Trim()));
			}
			else
			{
				result = 0;
			}

			snpCompID.Close();

			return result;
		}

		public void Update_Aircraft_FAA_Document()
		{

			try
			{

				string Query = "";

				Query = "SELECT * FROM Aircraft_FAA_Document ";
				Query = $"{Query}WHERE acfaa_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} ";
				Query = $"{Query}AND acfaa_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";

				if (modAdminCommon.Exist(Query))
				{

					if (FAAScreenIsBlank())
					{

						Query = "DELETE FROM Aircraft_FAA_Document ";
						Query = $"{Query}WHERE acfaa_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} ";
						Query = $"{Query}AND acfaa_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";

					}
					else
					{
						//If FAAScreenIsBlank Then

						Query = "UPDATE Aircraft_FAA_Document set ";
						Query = $"{Query}acfaa_party_comp_name1='{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[0]).Trim()} ', ";
						Query = $"{Query}acfaa_party_comp_name2='{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[1]).Trim()} ', ";
						Query = $"{Query}acfaa_party_comp_name3='{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[2]).Trim()} ', ";
						Query = $"{Query}acfaa_party_comp_name4='{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[3]).Trim()} ', ";
						Query = $"{Query}acfaa_party_comp_name5='{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[4]).Trim()} ', ";
						Query = $"{Query}acfaa_party_comp_name6='{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[5]).Trim()} ', ";
						Query = $"{Query}acfaa_party_comp_name7='{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[6]).Trim()} ', ";
						Query = $"{Query}acfaa_party_comp_name8='{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[7]).Trim()} ', ";
						Query = $"{Query}acfaa_party_comp_name9='{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[8]).Trim()} ', ";
						Query = $"{Query}acfaa_party_comp_name10='{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[9]).Trim()} ', ";
						Query = $"{Query}acfaa_reg_no1='{modAdminCommon.Fix_Quote(txt_acfaa_reg_no[0]).Trim()} ', ";
						Query = $"{Query}acfaa_reg_no2='{modAdminCommon.Fix_Quote(txt_acfaa_reg_no[1]).Trim()} ', ";
						Query = $"{Query}acfaa_reg_no3='{modAdminCommon.Fix_Quote(txt_acfaa_reg_no[2]).Trim()} ', ";
						Query = $"{Query}acfaa_reg_no4='{modAdminCommon.Fix_Quote(txt_acfaa_reg_no[3]).Trim()} ', ";
						Query = $"{Query}acfaa_reg_status1='{modAdminCommon.Fix_Quote(txt_acfaa_reg_status[0]).Trim()} ', ";
						Query = $"{Query}acfaa_reg_status2='{modAdminCommon.Fix_Quote(txt_acfaa_reg_status[1]).Trim()} ', ";
						Query = $"{Query}acfaa_reg_status3='{modAdminCommon.Fix_Quote(txt_acfaa_reg_status[2]).Trim()} ', ";
						Query = $"{Query}acfaa_reg_status4='{modAdminCommon.Fix_Quote(txt_acfaa_reg_status[3]).Trim()} ', ";
						Query = $"{Query}acfaa_notes='{modAdminCommon.Fix_Quote(txt_acfaa_notes).Trim()} ' ";
						Query = $"{Query}WHERE acfaa_ac_id={txt_ac_id.Text} ";
						Query = $"{Query}AND acfaa_journ_id = {tmp_ac_journ_id.ToString()}";

					} //If FAAScreenIsBlank Then

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = Query;
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();

				}
				else
				{
					//If Exist(Query) Then

					if (!FAAScreenIsBlank())
					{

						//INSERT FAA DOCUMENTS TAB
						Query = "INSERT INTO Aircraft_FAA_Document (acfaa_ac_id,";
						Query = $"{Query}acfaa_party_comp_name1,";
						Query = $"{Query}acfaa_party_comp_name2,";
						Query = $"{Query}acfaa_party_comp_name3,";
						Query = $"{Query}acfaa_party_comp_name4,";
						Query = $"{Query}acfaa_party_comp_name5,";
						Query = $"{Query}acfaa_party_comp_name6,";
						Query = $"{Query}acfaa_party_comp_name7,";
						Query = $"{Query}acfaa_party_comp_name8,";
						Query = $"{Query}acfaa_party_comp_name9,";
						Query = $"{Query}acfaa_party_comp_name10,";
						Query = $"{Query}acfaa_reg_no1,";
						Query = $"{Query}acfaa_reg_no2,";
						Query = $"{Query}acfaa_reg_no3,";
						Query = $"{Query}acfaa_reg_no4,";
						Query = $"{Query}acfaa_reg_status1,";
						Query = $"{Query}acfaa_reg_status2,";
						Query = $"{Query}acfaa_reg_status3,";
						Query = $"{Query}acfaa_reg_status4,";
						Query = $"{Query}acfaa_journ_id,";
						Query = $"{Query}acfaa_notes";
						Query = $"{Query})";
						Query = $"{Query} VALUES ({txt_ac_id.Text},";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[0]).Trim()} ',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[1]).Trim()} ',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[2]).Trim()} ',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[3]).Trim()} ',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[4]).Trim()}',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[5]).Trim()} ',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[6]).Trim()} ',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[7]).Trim()}',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[8]).Trim()} ',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_party_comp_name[9]).Trim()} ',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_reg_no[0]).Trim()}',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_reg_no[1]).Trim()}',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_reg_no[2]).Trim()}',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_reg_no[3]).Trim()}',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_reg_status[0]).Trim()}',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_reg_status[1]).Trim()}',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_reg_status[2]).Trim()}',";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_reg_status[3]).Trim()}',";
						Query = $"{Query}{Convert.ToString(adoAircraftRecordset["ac_journ_id"])},";
						Query = $"{Query}'{modAdminCommon.Fix_Quote(txt_acfaa_notes).Trim()} ')";

						DbCommand TempCommand_2 = null;
						TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
						TempCommand_2.CommandText = Query;
						TempCommand_2.CommandType = CommandType.Text;
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
						TempCommand_2.ExecuteNonQuery(); // Insert Aircraft Statue into new table
					} //If Not FAAScreenIsBlank Then

				} //If Exist(Query) Then
			}
			catch
			{

				//RollbackTrans
				modAdminCommon.ADO_Transaction("RollbackTrans");
				MessageBox.Show("Update_Aircraft_FAA_Document_Error:", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
			}

		}

		public void Display_Aircraft()
		{
			string Country_Tick_Fix = "";
			// ****************************************************************************
			//
			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO DISPLAY AIRCRAFT INFORMATION
			//          TO THE SCREEN
			// MODIFIED: 10/13/02 - MOSTLY ERROR MESSAGING
			//           10/5/2010 - RTW - INTEGRATION OF REGISTRATION EXPIRATION DATE
			// BY: RICK WANNER
			// ****************************************************************************

			string Error_Message = "";
			string strStage = "";
			string strQuery = "";
			string strDQuery = "";
			ADORecordSetHelper snpType = new ADORecordSetHelper(); //aey 6/10/04
			System.DateTime tmpRegDate = DateTime.FromOADate(0);
			System.DateTime tmpBaseDate = DateTime.FromOADate(0);
			string strRegNbr = "";
			int lEstAFTT = 0;

			// adding these- MSW in order to turn on or off items on load based on what we already have
			bool has_aport_country = false;
			bool has_aport_state = false;
			bool has_aport_code = false;


			ASK_TO_CLEAR_NOTES = false;
			ASK_TO_CLEAR_MAINT = false;

			string original_asking = "";

			try
			{

				if (!bDisplayAircraft)
				{

					bDisplayAircraft = true;

					// RTW - ADDED TO IDENTIFY TABS NOT YET LOADED
					tab_avionics_loaded = false;
					tab_certifications_loaded = false;
					tab_damage_loaded = false;

					tab_aircraft_details.Enabled = false;
					tbr_ToolBar.Enabled = false;
					tab_ACMain.Enabled = false;

					tmpBaseCodeChanged = false;
					tmpOldBaseName = modGlobalVars.cEmptyString;
					tmpAFTTChanged = false;
					tmpOldAFTT = modGlobalVars.cEmptyString;
					tmpRegNbrChanged = false;
					tmpOldRegNbr = modGlobalVars.cEmptyString;

					search_on("Getting Aircraft Info ...");

					Error_Message = "Clearing Aircraft";
					Clear_Aircraft(); // Clear all aircraft fields

					// 06/29/2019 - By David D. Cruger
					// If a History Record Fill AMP with Inactive Providers else only Active Providers

					if (tmp_ac_journ_id == 0)
					{
						modFillAircraftControls.Fill_Airframe_Maintenance_Program_CBO_From_Array(cbo_ac_airframe_maintenance_prog_AMP);
					}
					else
					{
						modFillAircraftControls.Fill_Airframe_Maintenance_Program_CBO_From_Array_History(cbo_ac_airframe_maintenance_prog_AMP);
					}

					//Fill Supporting Lists and Data  ---
					Error_Message = "Selecting Aircraft FAA";
					// RTW - NOTE THAT THIS NEEDS TO BE CALLED ON LOAD SINCE IF THERE IS DATA ON
					// THIS FORM THEN THE PAGE WILL DEFAULT TO THAT TAB
					Select_Aircraft_FAA(); //tmp jid

					Error_Message = "Selecting Aircraft Model ";

					if (tmp_ac_journ_id == 0)
					{
						Error_Message = "Filling Action Grid ";
						Fill_Aircraft_Research_Action(); //n/a
					}
					else
					{
						Error_Message = "Get Transaction Documents Grid ";
						GetJournalNotes(); //tmp_jid
						FillTransDocsGrid(); //a/c jid
					}

					Error_Message = "Filling Aircraft Feature Grid ";
					Fill_Aircraft_Feature_Grid(); //SpecsJournID


					Error_Message = "Filling Aircraft FAA Doc Grid ";
					// RTW TEMP HOLD REMOVE

					// Call Fill_FAA_Doc_Grid    'jid=0

					Error_Message = "Checking Permissions ";
					Check_Permission(); //n/a

					// FILL IN THE LIFE CYCLE STAGE
					mnueditchangeDelivery.Enabled = false;
					if (Convert.ToString(adoAircraftRecordset["ac_lifecycle_stage"]).Trim() != modGlobalVars.cEmptyString)
					{
						strStage = Convert.ToString(adoAircraftRecordset["ac_lifecycle_stage"]);
						int tempForEndVar = cbo_ac_stage.Items.Count;
						for (int intIndex = 0; intIndex <= tempForEndVar; intIndex++)
						{
							if (cbo_ac_stage.GetListItem(intIndex).StartsWith(strStage, StringComparison.Ordinal))
							{
								cbo_ac_stage.SelectedIndex = intIndex;
								break;
							}
						}
						if (strStage == "1")
						{
							mnueditchangeDelivery.Enabled = true;
						}
					}

					// show the hidden price
					txt_ac_hidden_asking_price.Tag = "";
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_hidden_asking_price"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_hidden_asking_price"]).Trim() != "")
						{
							txt_ac_hidden_asking_price.Text = $"${Strings.FormatNumber(adoAircraftRecordset["ac_hidden_asking_price"], 0, TriState.False, TriState.False, TriState.True)}";
							txt_ac_hidden_asking_price.Tag = txt_ac_hidden_asking_price.Text;
							lbl_gen[117].BackColor = Color.Lime;
							lbl_gen[117].Refresh();
						}
						else
						{
							txt_ac_hidden_asking_price.Text = "";
						}
					}
					else
					{
						txt_ac_hidden_asking_price.Text = "";
					}
					Error_Message = "Filling Aircraft Contact Grid";

					modAircraft.SetOperatorFlag(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]));

					// RTW - TBD - HOLD - 9/27/2010 - COMMENTED OUT SINCE CALLED EVERY TIME THEY GO TO TAB ANYWAYS AND NEVER DEFAULTS TO THAT TAB

					// MSW - MOVED   Call FillLeaseGrid out of the Fill_Aircraft_Contact_Grid function.
					// this was done so that we can seperate the two on load for speed purposes
					// FillLeaseGrid then commented out and moved to load on click, if not already loaded
					//3/1/12
					// Call FillLeaseGrid

					Fill_Aircraft_Contact_Grid(); //ac_Journ ID

					Error_Message = "Filling Aircraft Avionics Grid";


					// MSW - SHUT OFF TO LOAD WHEN NEEDED

					// Call Fill_Aircraft_Avionics_Grid    'SpecsJournID

					// Error_Message = "Filling Aircraft certified Grid"

					// RTW - SHUT OFF TO LOAD WHEN NEEDED
					//
					//Call Fill_Aircraft_Certified_Grid    'ac_journ_id
					// Error_Message = "Filling Aircraft damage"

					// MSW - SHUT OFF TO LOAD WHEN NEEDED
					// Call Fill_Aircraft_DamageInspection_Grid    'n/a


					// FILL ALL DETAILS GRID - REPLACE ALL OTHER SEPARATE FILLS
					// RTW - MODIFIED - 9/27/2010

					Fill_Aircraft_Details();
					Fill_Aircraft_Maintenance_Grid();

					Error_Message = "Filling Aircraft Usage List";

					modFillAircraftControls.Fill_Aircraft_Usage_List(cbo_ac_use_code);

					Error_Message = "Filling Basic AC Fields, Step 1.1 - Serial# Format";
					// **************************************************************
					// DISPLAY DATA TO TOP OF FORM
					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_Aircraft_Model["amod_serno_hyphen_flag"])}").Trim().ToUpper() == "Y")
					{
						Hyphen = modGlobalVars.cHyphen;
						lbl_gen[97].Text = modGlobalVars.cHyphen;
					}
					else
					{
						Hyphen = modGlobalVars.cEmptyString;
						lbl_gen[97].Text = " ";
					}

					Error_Message = "Filling Basic AC Fields, Step 1.2 - Enable Specs Button";
					if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0)
					{
						// cmdRetrieveSpecs.Enabled = True  '6/11/04 aey
					}
					else
					{
						cmdRetrieveSpecs.Enabled = false;
					}

					Error_Message = "Filling Basic AC Fields, Step 1.3 - Display serial #";
					txt_ac_ser_no[0].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_ser_no_prefix"])} ").Trim();
					txt_ac_ser_no[1].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_ser_no"])} ").Trim();
					if (Strings.Len(txt_ac_ser_no[1].Text) > 10)
					{
						txt_ac_ser_no[1].BackColor = Color.Yellow; //aey 3/29/04
					}
					txt_ac_ser_no[2].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_ser_no_suffix"])} ").Trim();
					ToolTipMain.SetToolTip(txt_ac_ser_no[0], txt_ac_ser_no[0].Text); //display wide serno - aey 2/17/05
					ToolTipMain.SetToolTip(txt_ac_ser_no[1], txt_ac_ser_no[1].Text);
					ToolTipMain.SetToolTip(txt_ac_ser_no[2], txt_ac_ser_no[2].Text);


					Error_Message = "Filling Basic AC Fields, Step 1.4 - Display alt serial #";
					txt_ac_alt_ser_no[0].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_alt_ser_no_prefix"])} ").Trim();
					txt_ac_alt_ser_no[1].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_alt_ser_no"])} ").Trim();
					txt_ac_alt_ser_no[2].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_alt_ser_no_suffix"])} ").Trim();
					ToolTipMain.SetToolTip(txt_ac_alt_ser_no[0], txt_ac_alt_ser_no[0].Text); //display wide serno - aey 2/17/05
					ToolTipMain.SetToolTip(txt_ac_alt_ser_no[1], txt_ac_alt_ser_no[1].Text);
					ToolTipMain.SetToolTip(txt_ac_alt_ser_no[2], txt_ac_alt_ser_no[2].Text);

					Error_Message = "Filling Basic AC Fields, Step 1.5 - Display regno";
					ToolTipMain.SetToolTip(lbl_gen[240], "");
					txt_ac_reg_no[0].Text = modGlobalVars.cEmptyString;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_reg_no"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_reg_no"]).Trim() != "")
						{
							txt_ac_reg_no[0].Text = Convert.ToString(adoAircraftRecordset["ac_reg_no"]).Trim();
							strRegNbr = modCommon.DLookUp("faablk_reg_no", "FAA_Blocked_Registration_Numbers", $"(faablk_reg_no = '{txt_ac_reg_no[0].Text}')");
							if (strRegNbr == txt_ac_reg_no[0].Text)
							{
								ToolTipMain.SetToolTip(lbl_gen[240], "Registration Number Is On FAA Block List");
							}
						}
					}

					// new - rtw - 10/5/2010 - registration number expiration field - hold tbd
					Error_Message = "Filling acregno expiration - Display regno expiration";
					lbl_gen[240].ForeColor = Color.Black;
					txt_ac_year[2].Text = modGlobalVars.cEmptyString;
					txt_ac_year[2].Tag = "";
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_reg_no_expiration_date"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_reg_no_expiration_date"]).Trim() != "")
						{
							txt_ac_year[2].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_reg_no_expiration_date"])} ").Trim();
							txt_ac_year[2].Tag = txt_ac_year[2].Text;
						}
					}

					//4/10/2006 aey added commercial fields
					Error_Message = "Filling Basic AC Fields, Step 1.5b ";

					txt_ac_model_config.Text = modGlobalVars.cEmptyString;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_model_config"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_model_config"]).Trim() != modGlobalVars.cEmptyString)
						{
							txt_ac_model_config.Text = Convert.ToString(adoAircraftRecordset["ac_model_config"]).Trim();
						}
					}

					txt_ac_engine_noise_rating.Text = modGlobalVars.cEmptyString;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_engine_noise_rating"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_engine_noise_rating"]).Trim() != modGlobalVars.cEmptyString)
						{
							txt_ac_engine_noise_rating.Text = Convert.ToString(adoAircraftRecordset["ac_engine_noise_rating"]).Trim();
						}
					}

					//aey 7/8/04 moved code block from after color confirm to before color confirm
					cbo_amod_make_name.AddItem(($"{Convert.ToString(snp_Aircraft_Model["amod_make_name"]).Trim()} / {Convert.ToString(snp_Aircraft_Model["amod_model_name"]).Trim()}").Trim());
					cbo_amod_make_name.SetItemData(cbo_amod_make_name.Items.Count - 1, Convert.ToInt32(snp_Aircraft_Model["amod_id"]));
					ToolTipMain.SetToolTip(cbo_amod_make_name, cbo_amod_make_name.Text);
					ToolTipMain.SetToolTip(lbl_gen[102], cbo_amod_make_name.Text);
					SetupSerialNumbers();

					if (Convert.ToString(snp_Aircraft_Model["amod_airframe_type_code"]).Trim().ToUpper() == "R")
					{
						Fill_Helicopter_Grid();
					}

					cbo_amod_make_name.AddItem("Show All Makes and Models");
					cbo_amod_make_name.AddItem("Show Fixed Wing Makes and Models");
					cbo_amod_make_name.AddItem("Show Rotary Makes and Models");
					cbo_amod_make_name.SelectedIndex = 0;

					tmpRememberMakeModel = cbo_amod_make_name.Text;

					Error_Message = $"{Error_Message} ({tmpRememberMakeModel})";

					//aey 6/27/05
					strQuery = "Select * FROM Airframe_Make_Type WITH(NOLOCK)";
					strQuery = $"{strQuery} WHERE afmt_code = '{Convert.ToString(snp_Aircraft_Model["amod_type_code"]).Trim()}'";
					strQuery = $"{strQuery} AND afmt_airframetype = '{Convert.ToString(snp_Aircraft_Model["amod_airframe_type_code"]).Trim()}'";

					if (snpType.State == ConnectionState.Open)
					{
						snpType.Close();
					}

					snpType = null;

					snpType.Open(strQuery, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

					if (!(snpType.BOF && snpType.EOF))
					{
						txt_amod_type_code.Text = $"{($"{Convert.ToString(snpType["afmt_code"])} ").Trim()}{((Conversion.Val($"{Convert.ToString(snp_Aircraft_Model["amod_number_of_engines"])}{modGlobalVars.cEmptyString}") == 0) ? modGlobalVars.cEmptyString : $"({Convert.ToString(snp_Aircraft_Model["amod_number_of_engines"])})")} - {($"{Convert.ToString(snpType["afmt_description"])}{modGlobalVars.cEmptyString}").Trim()} - {Convert.ToString(snp_Aircraft_Model["amod_airframe_type_code"]).Trim()} - {Convert.ToString(snp_Aircraft_Model["amod_class_code"])}";
						ToolTipMain.SetToolTip(lbl_gen[0], txt_amod_type_code.Text);
					}

					Error_Message = "Filling Basic AC Fields, Step 1.61 - reg no verification date";
					//color confirm

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_lifecycle_stage"]))
					{
						if (Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]) == 0)
						{ // CLng(adoAircraftRecordset("ac_lifecycle_stage").Value) <> 4 And
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(adoAircraftRecordset["ac_reg_no_verify_date"]))
							{
								if (Information.IsDate(adoAircraftRecordset["ac_reg_no_verify_date"]))
								{
									if (modAircraft.RegNeedsConfirm(Convert.ToString(adoAircraftRecordset["ac_reg_no_verify_date"])))
									{
										txt_ac_reg_no[0].BackColor = Color.FromArgb(255, 192, 192);
										lbl_gen[240].ForeColor = Color.Red;
									}
									else
									{
										txt_ac_reg_no[0].BackColor = Color.White;
										lbl_gen[240].ForeColor = Color.Black;
									} // RegNeedsConfirm(adoAircraftRecordset("ac_reg_no_verify_date").Value)
								}
								else
								{
									txt_ac_reg_no[0].BackColor = Color.FromArgb(255, 192, 192);
									lbl_gen[240].ForeColor = Color.Red;
								} //IsDate(adoAircraftRecordset("ac_reg_no_verify_date").Value)
							}
							else
							{
								txt_ac_reg_no[0].BackColor = Color.FromArgb(255, 192, 192);
								lbl_gen[240].ForeColor = Color.Red;
							} // Not IsNull(adoAircraftRecordset("ac_reg_no_verify_date"))
						}
						else
						{
							txt_ac_reg_no[0].BackColor = Color.FromArgb(255, 192, 192);
							lbl_gen[240].ForeColor = Color.Red;
						} // CStr(Trim(adoAircraftRecordset("ac_lifecycle_stage").Value)) <> "4" And CLng(adoAircraftRecordset("AC_Journ_id").Value) = 0
					}
					else
					{
						txt_ac_reg_no[0].BackColor = Color.FromArgb(255, 192, 192);
						lbl_gen[240].ForeColor = Color.Red;
					} // Not IsNull(adoAircraftRecordset("ac_lifecycle_stage"))

					Error_Message = "Filling Basic AC Fields, Step 1.62 - emp,amp verification date";

					//new table for color confirms - aey
					strDQuery = $"SELECT * FROM Aircraft_General_Dates WHERE agd_ac_id = {txt_ac_id.Text.Trim()}";
					strDQuery = $"{strDQuery} AND agd_journ_id = 0"; //always zero aey 6/28/04

					adoAircraftDatesRecordset = new ADORecordSetHelper(); //aey 6/28/04 confirm dates
					adoAircraftDatesRecordset.Open(strDQuery, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockOptimistic);

					Error_Message = "Filling Basic AC Fields, Step 1.63 - emp,amp verification date";

					if (adoAircraftDatesRecordset.EOF && adoAircraftDatesRecordset.BOF)
					{
						adoAircraftDatesRecordset.AddNew();
						adoAircraftDatesRecordset["agd_ac_id"] = Conversion.Val(txt_ac_id.Text.Trim());
						adoAircraftDatesRecordset["agd_journ_id"] = 0;
						adoAircraftDatesRecordset["agd_cc_emp_date"] = "1/1/1900";
						adoAircraftDatesRecordset["agd_cc_emgp_date"] = "1/1/1900";
						adoAircraftDatesRecordset["agd_cc_amp_date"] = "1/1/1900";
						adoAircraftDatesRecordset["agd_cc_amtp_date"] = "1/1/1900";
						adoAircraftDatesRecordset["agd_cc_asking_price_date"] = "1/1/1900";
						adoAircraftDatesRecordset.Update();
					}

					//new color confirms 6/28/04 aey

					Error_Message = "Filling Basic AC Fields, Step 1.64 - confirm days";

					//set color on journal=0 and active a/c stage
					if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0 && !cbo_ac_stage.Text.StartsWith("4", StringComparison.Ordinal) && !(adoAircraftDatesRecordset.EOF && adoAircraftDatesRecordset.BOF))
					{

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftDatesRecordset["agd_cc_emp_date"]))
						{
							tmpRegDate = Convert.ToDateTime(adoAircraftDatesRecordset["agd_cc_emp_date"]);
						}
						if (DateTimeHelper.ToString(tmpRegDate).Trim() == modGlobalVars.cEmptyString)
						{
							tmpRegDate = DateTime.Parse("1/1/1900");
						}

						tmpRegDate = DateTime.Parse(DateTimeHelper.ToString(tmpRegDate)).AddDays(modAdminCommon.gbl_ConfirmDays);
						SetColorConfirm(20, "cbo_ac_engine_maint_prog", tmpRegDate);

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftDatesRecordset["agd_cc_emgp_date"]))
						{
							tmpRegDate = Convert.ToDateTime(adoAircraftDatesRecordset["agd_cc_emgp_date"]);
						}
						if (DateTimeHelper.ToString(tmpRegDate).Trim() == modGlobalVars.cEmptyString)
						{
							tmpRegDate = DateTime.Parse("1/1/1900");
						}

						tmpRegDate = DateTime.Parse(DateTimeHelper.ToString(tmpRegDate)).AddDays(modAdminCommon.gbl_ConfirmDays);
						SetColorConfirm(92, "cbo_ac_engine_management_prog_EMGP", tmpRegDate);

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftDatesRecordset["agd_cc_amp_date"]))
						{
							tmpRegDate = Convert.ToDateTime(adoAircraftDatesRecordset["agd_cc_amp_date"]);
						}
						if (DateTimeHelper.ToString(tmpRegDate).Trim() == modGlobalVars.cEmptyString)
						{
							tmpRegDate = DateTime.Parse("1/1/1900");
						}

						tmpRegDate = DateTime.Parse(DateTimeHelper.ToString(tmpRegDate)).AddDays(modAdminCommon.gbl_ConfirmDays);
						SetColorConfirm(114, "cbo_ac_airframe_maintenance_prog_AMP", tmpRegDate);

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftDatesRecordset["agd_cc_amtp_date"]))
						{
							tmpRegDate = Convert.ToDateTime(adoAircraftDatesRecordset["agd_cc_amtp_date"]);
						}
						if (DateTimeHelper.ToString(tmpRegDate).Trim() == modGlobalVars.cEmptyString)
						{
							tmpRegDate = DateTime.Parse("1/1/1900");
						}

						tmpRegDate = DateTime.Parse(DateTimeHelper.ToString(tmpRegDate)).AddDays(modAdminCommon.gbl_ConfirmDays);
						SetColorConfirm(118, "cbo_ac_airframe_maint_tracking_prog_AMTP", tmpRegDate);

						// ADDED MSW - 7/15/20
						tmpRegDate = DateTime.Parse("1/1/1900");
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftDatesRecordset["agd_cc_asking_price_date"]))
						{
							tmpRegDate = Convert.ToDateTime(adoAircraftDatesRecordset["agd_cc_asking_price_date"]);
						}
						if (DateTimeHelper.ToString(tmpRegDate).Trim() == modGlobalVars.cEmptyString)
						{
							tmpRegDate = DateTime.Parse("1/1/1900");
						}

						tmpRegDate = DateTime.Parse(DateTimeHelper.ToString(tmpRegDate)).AddDays(30);
						SetColorConfirm(9, "cbo_ac_asking", tmpRegDate);


						adoAircraftDatesRecordset.Close();

					}
					else
					{
						//set color for historical & inactive records
						lbl_gen[20].ForeColor = Color.Black;
						lbl_gen[92].ForeColor = Color.Black;
						lbl_gen[114].ForeColor = Color.Black;
						lbl_gen[118].ForeColor = Color.Black;
						cbo_ac_engine_maint_prog.BackColor = Color.White;
						cbo_ac_engine_management_prog_EMGP.BackColor = Color.White;
						cbo_ac_airframe_maintenance_prog_AMP.BackColor = Color.White;
						cbo_ac_airframe_maint_tracking_prog_AMTP.BackColor = Color.White;
					}

					adoAircraftDatesRecordset = null;

					Error_Message = "Filling Basic AC Fields, Step 1.5 - Display alt regno";
					txt_ac_reg_no[1].Text = modGlobalVars.cEmptyString;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_prev_reg_no"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_prev_reg_no"]).Trim() != "")
						{
							txt_ac_reg_no[1].Text = Convert.ToString(adoAircraftRecordset["ac_prev_reg_no"]).Trim();
						}
					}

					Error_Message = "Filling Basic Aircraft Fields - Step 2 - Base Information";

					chk_ac_aport_private[0].CheckState = CheckState.Unchecked;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_aport_private"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_aport_private"]).Trim().ToUpper() == "Y")
						{
							chk_ac_aport_private[0].CheckState = CheckState.Checked;
						}
					}







					txtIATACode.Tag = "0";
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_aport_id"]))
					{
						txtIATACode.Tag = Convert.ToString(adoAircraftRecordset["ac_aport_id"]);
					}
					txtIATACode.Text = ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_iata_code"])}").Trim();
					txtICAOCode.Text = ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_icao_code"])}").Trim();

					txtFAAIDCode.Text = ($"{Convert.ToString(adoAircraftRecordset["ac_aport_faaid_code"])} ").Trim();

					Application.DoEvents();
					if (txtIATACode.Text == "" && txtICAOCode.Text == "" && txtFAAIDCode.Text == "")
					{
						has_aport_code = false;
					}
					else
					{
						has_aport_code = true;
						enable_or_unenable_aport(false);
					}
					Application.DoEvents();

					txtBaseCity.Text = ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_city"])}").Trim();
					txtBaseAirportName.Text = ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_name"])}").Trim();

					//added MSW - 7/10/23
					if (txtBaseAirportName.Text == "Transient")
					{
						chk_ac_aport_private[2].CheckState = CheckState.Checked;
						chk_ac_aport_private[2].Enabled = true;
						chk_ac_aport_private[0].Enabled = false;
					}
					else if (txtBaseAirportName.Text == "Private")
					{ 
						chk_ac_aport_private[0].CheckState = CheckState.Checked;
						chk_ac_aport_private[0].Enabled = true;
						chk_ac_aport_private[2].Enabled = false;
					}
					else
					{
						// chk_ac_aport_private(0).Value = 0
						//  chk_ac_aport_private(2).Value = 0
						chk_ac_aport_private[0].Enabled = true;
						chk_ac_aport_private[2].Enabled = true;
					}


					// added MSW - 10/29/18 ----------
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (Convert.IsDBNull(adoAircraftRecordset["ac_aport_name"]))
					{
						txtBaseAirportName.Tag = "";
					}
					else
					{
						txtBaseAirportName.Tag = ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_name"])}").Trim();
					}


					// MSW 11/7/13 - moed the country above the state, and then re-run the state drop down based on the current country
					// it was not re-running the state drop down until after
					has_aport_country = false;
					cboBaseCountry.SelectedIndex = -1;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_aport_country"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_aport_country"]) != modGlobalVars.cEmptyString)
						{
							int tempForEndVar2 = cboBaseCountry.Items.Count - 1;
							for (int I = 0; I <= tempForEndVar2; I++)
							{
								if (cboBaseCountry.GetListItem(I).ToLower() == StringsHelper.Replace(Convert.ToString(adoAircraftRecordset["ac_aport_country"]), "''", "'", 1, -1, CompareMethod.Binary).Trim().ToLower())
								{
									// If LCase(cboBaseCountry.List(I)) = LCase(Trim(adoAircraftRecordset("ac_aport_country").Value)) Then
									cboBaseCountry.SelectedIndex = I;
									has_aport_country = true;
									break;
								}
							}
						}
					}
					Application.DoEvents();
					Application.DoEvents();
					modFillCompConControls.fill_state_FromArray(cboBaseState, true, false, false, cboBaseCountry.Text);
					Application.DoEvents();
					has_aport_state = false;
					cboBaseState.SelectedIndex = -1;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_aport_state"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_aport_state"]) != modGlobalVars.cEmptyString)
						{
							int tempForEndVar3 = cboBaseState.Items.Count - 1;
							for (int I = 0; I <= tempForEndVar3; I++)
							{
								if (cboBaseState.GetListItem(I).ToLower() == Convert.ToString(adoAircraftRecordset["ac_aport_state"]).Trim().ToLower())
								{
									cboBaseState.SelectedIndex = I;
									has_aport_state = true;
									break;
								}
							}
						}
					}
					Application.DoEvents();


					// added in MSW - 6/17/21
					if (Convert.ToString(txtIATACode.Tag).Trim() != "0" && Convert.ToString(txtIATACode.Tag).Trim() != "")
					{
						enable_or_unenable_aport(false);
					}



					// adding in extra code to lock other areas in certain circumstances
					// MSW - 7/10/23
					if (has_aport_code)
					{
						// then we are already locking correctly hopefully
					}
					else if (!has_aport_code && !has_aport_state && cboBaseState.Items.Count <= 1 && has_aport_country)
					{ 
						txtBaseCity.Enabled = true; //if there is no airport, no state picked but no states there, and there is a country picked
					}
					else if (!has_aport_code && has_aport_state && has_aport_country)
					{ 
						txtBaseCity.Enabled = true; // then allow for city to be editable
					}
					else if (!has_aport_code && !has_aport_state && has_aport_country && cboBaseState.Items.Count > 1)
					{  // and country has states
						txtBaseCity.Enabled = false; // then allow for city to be editable
					}
					else if (!has_aport_code && !has_aport_state && has_aport_country && cboBaseState.Items.Count > 1)
					{  // and country has states
						txtBaseCity.Enabled = false; // then allow for city to be editable
					}
					else if (!has_aport_code && !has_aport_state && !has_aport_country)
					{ 
						cboBaseState.Enabled = false; // then allow for state to not be editable
						txtBaseCity.Enabled = false; // then allow for city to not be editable
					}


					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_country_of_registration"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_country_of_registration"]) != modGlobalVars.cEmptyString)
						{
							Country_Tick_Fix = "";
							int tempForEndVar4 = cbo_ac_country_of_registration.Items.Count - 1;
							for (int I = 0; I <= tempForEndVar4; I++)
							{
								Country_Tick_Fix = Convert.ToString(adoAircraftRecordset["ac_country_of_registration"]).Trim().ToLower();
								Country_Tick_Fix = StringsHelper.Replace(Country_Tick_Fix, "''", "'", 1, -1, CompareMethod.Binary);
								if (cbo_ac_country_of_registration.GetListItem(I).ToLower() == Country_Tick_Fix)
								{
									//If LCase(cbo_ac_country_of_registration.List(I)) = LCase(Trim(adoAircraftRecordset("ac_country_of_registration").Value)) Then
									cbo_ac_country_of_registration.SelectedIndex = I;
									break;
								}
							}
						}
						else
						{
							cbo_ac_country_of_registration.SelectedIndex = -1;
						}
					}
					else
					{
						cbo_ac_country_of_registration.SelectedIndex = -1;
					}

					Error_Message = "Filling Basic Aircraft Fields - Step 3 - Status Information";
					lbl_gen[75].Text = "DOM: ";
					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_forsale_flag"])}").Trim().ToUpper() == "Y")
					{

						if (Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]) == 0)
						{
							if (Information.IsDate(adoAircraftRecordset["ac_list_date"]))
							{
								lbl_gen[75].Text = $"{lbl_gen[75].Text}{((int) DateAndTime.DateDiff("d", DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_list_date"])), DateTime.Parse(modAdminCommon.DateToday), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1)).ToString()}";
							}
						}
						else
						{
							if (Information.IsDate(adoAircraftRecordset["ac_list_date"]))
							{
								lbl_gen[75].Text = $"{lbl_gen[75].Text}{((int) DateAndTime.DateDiff("d", DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_list_date"])), DateTime.Parse(txtHistoryDate.Text.Trim()), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1)).ToString()}";
							}
						}

						lbl_gen[75].Visible = true;
					}
					else
					{
						lbl_gen[75].Visible = Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]) != 0;
					}

					if (Information.IsDate(adoAircraftRecordset["ac_airport_code_verify_date"]))
					{
						tmpBaseDate = DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_airport_code_verify_date"])).AddDays(modAdminCommon.gbl_ConfirmDays);

						Application.DoEvents();
						// ONLY SHOW THE COLOR CONFIRMS IF A CURRENT AIRCRAFT AND NOT RETIRED
						if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0 && !cbo_ac_stage.Text.StartsWith("4", StringComparison.Ordinal))
						{
							if (DateTime.Parse(DateTimeHelper.ToString(tmpBaseDate)) <= DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)))
							{
								lbl_gen[66].ForeColor = Color.Red;
								lbl_gen[67].ForeColor = Color.Red;
								lbl_gen[121].ForeColor = Color.Red;
								lbl_gen[41].ForeColor = Color.Red;
								lbl_gen[68].ForeColor = Color.Red;
								lbl_gen[69].ForeColor = Color.Red;
								lbl_gen[74].ForeColor = Color.Red;
								txtIATACode.BackColor = Color.FromArgb(255, 192, 192);
								txtICAOCode.BackColor = Color.FromArgb(255, 192, 192);
								txtFAAIDCode.BackColor = Color.FromArgb(255, 192, 192);
								txtBaseCity.BackColor = Color.FromArgb(255, 192, 192);
								txtBaseAirportName.BackColor = Color.FromArgb(255, 192, 192);
								cboBaseState.BackColor = Color.FromArgb(255, 192, 192);
								cboBaseCountry.BackColor = Color.FromArgb(255, 192, 192);
								Application.DoEvents();
							}
							else
							{
								lbl_gen[66].ForeColor = Color.Black;
								lbl_gen[67].ForeColor = Color.Black;
								lbl_gen[121].ForeColor = Color.Black;
								lbl_gen[41].ForeColor = Color.Black;
								lbl_gen[68].ForeColor = Color.Black;
								lbl_gen[69].ForeColor = Color.Black;
								lbl_gen[74].ForeColor = Color.Black;
								txtIATACode.BackColor = Color.White;
								txtICAOCode.BackColor = Color.White;
								txtFAAIDCode.BackColor = Color.White;
								txtBaseCity.BackColor = Color.White;
								txtBaseAirportName.BackColor = Color.White;
								cboBaseState.BackColor = Color.White;
								cboBaseCountry.BackColor = Color.White;
								Application.DoEvents();
							}
						}
						else
						{
							lbl_gen[66].ForeColor = Color.Black;
							lbl_gen[67].ForeColor = Color.Black;
							lbl_gen[121].ForeColor = Color.Black;
							lbl_gen[41].ForeColor = Color.Black;
							lbl_gen[68].ForeColor = Color.Black;
							lbl_gen[69].ForeColor = Color.Black;
							lbl_gen[74].ForeColor = Color.Black;
							txtIATACode.BackColor = Color.White;
							txtICAOCode.BackColor = Color.White;
							txtFAAIDCode.BackColor = Color.White;
							txtBaseCity.BackColor = Color.White;
							txtBaseAirportName.BackColor = Color.White;
							cboBaseState.BackColor = Color.White;
							cboBaseCountry.BackColor = Color.White;
							Application.DoEvents();
						}
					}
					else
					{
						if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0 && !cbo_ac_stage.Text.StartsWith("4", StringComparison.Ordinal))
						{
							lbl_gen[66].ForeColor = Color.Red;
							lbl_gen[67].ForeColor = Color.Red;
							lbl_gen[121].ForeColor = Color.Red;
							lbl_gen[41].ForeColor = Color.Red;
							lbl_gen[68].ForeColor = Color.Red;
							lbl_gen[69].ForeColor = Color.Red;
							lbl_gen[74].ForeColor = Color.Red;
							txtIATACode.BackColor = Color.FromArgb(255, 192, 192);
							txtICAOCode.BackColor = Color.FromArgb(255, 192, 192);
							txtFAAIDCode.BackColor = Color.FromArgb(255, 192, 192);
							txtBaseCity.BackColor = Color.FromArgb(255, 192, 192);
							txtBaseAirportName.BackColor = Color.FromArgb(255, 192, 192);
							cboBaseState.BackColor = Color.FromArgb(255, 192, 192);
							cboBaseCountry.BackColor = Color.FromArgb(255, 192, 192);
						}
						else
						{
							lbl_gen[66].ForeColor = Color.Black;
							lbl_gen[67].ForeColor = Color.Black;
							lbl_gen[121].ForeColor = Color.Black;
							lbl_gen[41].ForeColor = Color.Black;
							lbl_gen[68].ForeColor = Color.Black;
							lbl_gen[69].ForeColor = Color.Black;
							lbl_gen[74].ForeColor = Color.Black;
							txtIATACode.BackColor = Color.White;
							txtICAOCode.BackColor = Color.White;
							txtFAAIDCode.BackColor = Color.White;
							txtBaseCity.BackColor = Color.White;
							txtBaseAirportName.BackColor = Color.White;
							cboBaseState.BackColor = Color.White;
							cboBaseCountry.BackColor = Color.White;
							Application.DoEvents();
						}
					}

					txt_ac_year[1].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_year"])} ").Trim();
					txt_ac_year[1].Tag = ($"{Convert.ToString(adoAircraftRecordset["ac_year"])} ").Trim(); // set as tag so we can see if it changes - msw - 9/11/17

					if (StringsHelper.ToDoubleSafe(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_lifecycle_stage"])}").Trim()) == 3 && txt_ac_year[1].Text.Trim() == modGlobalVars.cEmptyString)
					{
						txt_ac_year[1].BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.ConfirmColor)));
					}
					else
					{
						txt_ac_year[1].BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
					}

					txt_ac_year[0].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_mfr_year"])} ").Trim();
					txt_ac_year[0].Tag = ($"{Convert.ToString(adoAircraftRecordset["ac_mfr_year"])} ").Trim(); // set as tag so we can see if it changes - msw - 9/11/17

					cbo_ac_engine_management_prog_EMGP.SelectedIndex = -1;
					int tempForEndVar5 = cbo_ac_engine_management_prog_EMGP.Items.Count - 1;
					for (int I = 0; I <= tempForEndVar5; I++)
					{
						if (cbo_ac_engine_management_prog_EMGP.GetItemData(I) == Double.Parse($"0{($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_management_prog_EMGP"])}").Trim()}"))
						{
							cbo_ac_engine_management_prog_EMGP.SelectedIndex = I;
							break;
						}
					}

					//''''''
					// Changed field name from ac_warranty_notes to ac_maintained - 6/17/2002 kth
					cbo_ac_warranty_notes.Tag = "";
					cbo_ac_warranty_notes.SelectedIndex = -1;
					int tempForEndVar6 = cbo_ac_warranty_notes.Items.Count - 1;
					for (int I = 0; I <= tempForEndVar6; I++)
					{
						if (cbo_ac_warranty_notes.GetListItem(I) == ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_maintained"])}").Trim())
						{
							cbo_ac_warranty_notes.SelectedIndex = I;
							cbo_ac_warranty_notes.Tag = cbo_ac_warranty_notes.GetListItem(I);
							break;
						}
					}




					//------------------------- MOVED INTO ITS OWN FUNCTION IN ORDER TO BR RE-USED WITH THE RECORVER-------
					// if we are re-running thro the second time, then do not
					if (re_load_history2)
					{
					}
					else
					{
						load_status_block(ref Error_Message, ref original_asking);
					}
					//------------------------- MOVED INTO ITS OWN FUNCTION IN ORDER TO BR RE-USED WITH THE RECORVER-------


					lbl_gen[22].Text = $"Journal ID:  {Convert.ToString(adoAircraftRecordset["AC_Journ_id"]).Trim()}";

					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_previously_owned_flag"])}").Trim().ToUpper() == "Y")
					{
						chk_ac_aport_private[1].CheckState = CheckState.Checked;
						// chk_ac_aport_private(2).Enabled = False ' believe this was incorrectly entered here
					}
					else
					{
						chk_ac_aport_private[1].CheckState = CheckState.Unchecked;
					}

					// **************************************************************
					// DISPLAY DATA TO AIRCRAFT MAIN TAB

					Display_Aircraft_Model_Engine_List();
					modFillAircraftControls.Display_Aircraft_Model_Engine_APU_List(cbo_ac_apu_model_name);

					modFillAircraftControls.Display_Aircraft_Model_Engine_EMP_List(cbo_ac_engine_maint_prog);

					Error_Message = "Display Engine Maint Prog EMP";
					int tempForEndVar7 = cbo_ac_engine_maint_prog.Items.Count - 1;
					for (int J = 0; J <= tempForEndVar7; J++)
					{
						if (cbo_ac_engine_maint_prog.GetItemData(J) == Double.Parse($"0{($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_maintenance_prog_EMP"])}").Trim()}"))
						{
							cbo_ac_engine_maint_prog.SelectedIndex = J;
							cbo_ac_engine_maint_prog.Tag = cbo_ac_engine_maint_prog.Text; // added to see if it has changed - 4/7/20
							break;
						}
					}

					cbo_ac_engine_management_prog_EMGP.SelectedIndex = 0;
					int tempForEndVar8 = cbo_ac_engine_management_prog_EMGP.Items.Count - 1;
					for (int J = 0; J <= tempForEndVar8; J++)
					{
						if (cbo_ac_engine_management_prog_EMGP.GetItemData(J) == Double.Parse($"0{($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_management_prog_EMGP"])}").Trim()}"))
						{
							cbo_ac_engine_management_prog_EMGP.SelectedIndex = J;
							cbo_ac_engine_management_prog_EMGP.Tag = cbo_ac_engine_management_prog_EMGP.Text; // added to see if it has changed - 4/7/20
							break;
						}
					}

					Error_Message = "Display Engine Name Combo";
					cbo_ac_engine_name.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
					int tempForEndVar9 = cbo_ac_engine_name.Items.Count - 1;
					for (int J = 0; J <= tempForEndVar9; J++)
					{
						if (cbo_ac_engine_name.GetListItem(J) == ($"{Convert.ToString(adoAircraftRecordset["ac_engine_name"])} ").Trim())
						{
							cbo_ac_engine_name.SelectedIndex = J;
							break;
						}
					}
					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_name"])}").Trim() != cbo_ac_engine_name.Text)
					{
						cbo_ac_engine_name.SelectedIndex = 0;
						int tempForEndVar10 = cbo_ac_engine_name.Items.Count - 1;
						for (int J = 0; J <= tempForEndVar10; J++)
						{
							if (cbo_ac_engine_name.GetListItem(J) == ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_name"])}").Trim())
							{
								cbo_ac_engine_name.SelectedIndex = J;
								break;
							}
						}

						cbo_ac_engine_name.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.ConfirmColor)));
					}

					cbo_ac_engine_name.Text = ($"{Convert.ToString(adoAircraftRecordset["ac_engine_name"])} ").Trim();

					Error_Message = "Display Maintenance Program Combo";
					int tempForEndVar11 = cbo_ac_engine_maint_prog.Items.Count - 1;
					for (int J = 0; J <= tempForEndVar11; J++)
					{
						if (Double.Parse($"0{cbo_ac_engine_maint_prog.GetItemData(J).ToString()}") == Double.Parse($"0{($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_maintenance_prog_EMP"])}").Trim()}"))
						{
							cbo_ac_engine_maint_prog.SelectedIndex = J;
							break;
						}
					}

					Error_Message = "Display Ser No Fields";
					txt_ac_ser_no[1].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_ser_no"])} ").Trim();
					txt_ac_ser_no[2].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_ser_no_suffix"])} ").Trim();
					txt_ac_alt_ser_no[0].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_alt_ser_no_prefix"])} ").Trim();
					txt_ac_alt_ser_no[1].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_alt_ser_no"])} ").Trim();
					txt_ac_alt_ser_no[2].Text = ($"{Convert.ToString(adoAircraftRecordset["ac_alt_ser_no_suffix"])} ").Trim();

					//Engine Serial Number
					for (int xLoop = 0; xLoop <= 3; xLoop++)
					{

						txt_ac_engine_ser_no[xLoop].Text = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_ser_no"]))
						{
							if (Convert.ToString(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_ser_no"]).Trim() != modGlobalVars.cEmptyString)
							{
								txt_ac_engine_ser_no[xLoop].Text = Convert.ToString(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_ser_no"]).Trim();
								txt_ac_engine_ser_no[xLoop].Tag = txt_ac_engine_ser_no[xLoop].Text;
							}
						}

					}

					Error_Message = "Display Engine Hrs";

					//Total Time Since New
					for (int xLoop = 0; xLoop <= 3; xLoop++)
					{

						txt_ac_engine_tot_hrs[xLoop].Text = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_tot_hrs"]))
						{
							if (Information.IsNumeric(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_tot_hrs"]))
							{
								if (Convert.ToDouble(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_tot_hrs"]) > 0)
								{
									txt_ac_engine_tot_hrs[xLoop].Text = StringsHelper.Format(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_tot_hrs"], "###,###,##0");
								}
								else
								{
									txt_ac_engine_tot_hrs[xLoop].Text = "0";
								}
							}
						}

					}

					//Total Time Since Overhaul
					for (int xLoop = 0; xLoop <= 3; xLoop++)
					{

						txt_ac_engine_soh_hrs[xLoop].Text = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_soh_hrs"]))
						{
							if (Information.IsNumeric(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_soh_hrs"]))
							{
								if (Convert.ToDouble(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_soh_hrs"]) > 0)
								{
									txt_ac_engine_soh_hrs[xLoop].Text = StringsHelper.Format(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_soh_hrs"], "###,###,##0");
								}
								else
								{
									txt_ac_engine_soh_hrs[xLoop].Text = "0";
								}
							}
						}

					}

					//Total Time Since Hot Inspection
					for (int xLoop = 0; xLoop <= 3; xLoop++)
					{

						txt_ac_engine_shi_hrs[xLoop].Text = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_shi_hrs"]))
						{
							if (Information.IsNumeric(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_shi_hrs"]))
							{
								if (Convert.ToDouble(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_shi_hrs"]) > 0)
								{
									txt_ac_engine_shi_hrs[xLoop].Text = StringsHelper.Format(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_shi_hrs"], "###,###,##0");
								}
								else
								{
									txt_ac_engine_shi_hrs[xLoop].Text = "0";
								}
							}
						}

					}

					//Total Time Time Between Overhaul
					for (int xLoop = 0; xLoop <= 3; xLoop++)
					{

						txt_ac_engine_tbo_hrs[xLoop].Text = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_tbo_hrs"]))
						{
							if (Information.IsNumeric(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_tbo_hrs"]))
							{
								if (Convert.ToDouble(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_tbo_hrs"]) >= 0)
								{
									txt_ac_engine_tbo_hrs[xLoop].Text = StringsHelper.Format(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_tbo_hrs"], "###,###,##0");
								}
							}
						}

					}

					//Total Cycles Since New
					for (int xLoop = 0; xLoop <= 3; xLoop++)
					{

						txt_ac_engine_snew_cycles[xLoop].Text = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_snew_cycles"]))
						{
							if (Information.IsNumeric(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_snew_cycles"]))
							{
								if (Convert.ToDouble(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_snew_cycles"]) >= 0)
								{
									txt_ac_engine_snew_cycles[xLoop].Text = StringsHelper.Format(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_snew_cycles"], "###,###,##0");
								}
							}
						}

					}

					//Total Cycles Since Overhaul
					for (int xLoop = 0; xLoop <= 3; xLoop++)
					{

						txt_ac_engine_soh_cycles[xLoop].Text = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_soh_cycles"]))
						{
							if (Information.IsNumeric(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_soh_cycles"]))
							{
								if (Convert.ToDouble(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_soh_cycles"]) >= 0)
								{
									txt_ac_engine_soh_cycles[xLoop].Text = StringsHelper.Format(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_soh_cycles"], "###,###,##0");
								}
							}
						}

					}

					//Total Cycles Since Hot Inspection
					for (int xLoop = 0; xLoop <= 3; xLoop++)
					{

						txt_ac_engine_shs_cycles[xLoop].Text = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_shs_cycles"]))
						{
							if (Information.IsNumeric(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_shs_cycles"]))
							{
								if (Convert.ToDouble(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_shs_cycles"]) >= 0)
								{
									txt_ac_engine_shs_cycles[xLoop].Text = StringsHelper.Format(adoAircraftRecordset[$"ac_engine_{(xLoop + 1).ToString()}_shs_cycles"], "###,###,##0");
								}
							}
						}

					}

					txt_ac_times_as_of_date.Text = modGlobalVars.cEmptyString;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_times_as_of_date"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_times_as_of_date"]).Trim() != modGlobalVars.cEmptyString)
						{
							if (Information.IsDate(adoAircraftRecordset["ac_times_as_of_date"]))
							{
								txt_ac_times_as_of_date.Text = DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_times_as_of_date"]).Trim()).ToString("d");
							}
						}
					}

					txt_ac_airframe_tot_hrs.Text = modGlobalVars.cEmptyString;
					ToolTipMain.SetToolTip(txt_ac_airframe_tot_hrs, "");
					ToolTipMain.SetToolTip(lbl_gen[70], "");
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_airframe_tot_hrs"]))
					{
						if (Information.IsNumeric(adoAircraftRecordset["ac_airframe_tot_hrs"]))
						{
							if (Convert.ToDouble(adoAircraftRecordset["ac_airframe_tot_hrs"]) >= 0)
							{
								txt_ac_airframe_tot_hrs.Text = StringsHelper.Format(adoAircraftRecordset["ac_airframe_tot_hrs"], "###,###,##0");
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(adoAircraftRecordset["ac_times_as_of_date"]) && !Convert.IsDBNull(adoAircraftRecordset["ac_purchase_date"]))
								{
									lEstAFTT = modCommon.Return_Aircraft_Estimated_Airframe_Total_Time(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToDateTime(adoAircraftRecordset["ac_times_as_of_date"]), Convert.ToDateTime(adoAircraftRecordset["ac_purchase_date"]));
									if (lEstAFTT >= Convert.ToDouble(adoAircraftRecordset["ac_airframe_tot_hrs"]))
									{
										ToolTipMain.SetToolTip(txt_ac_airframe_tot_hrs, $"Estimated AFTT: {StringsHelper.Format(lEstAFTT, "#,##0")}");
										ToolTipMain.SetToolTip(lbl_gen[70], ToolTipMain.GetToolTip(txt_ac_airframe_tot_hrs));
									}
								}
							}
						}
					}

					txt_ac_airframe_tot_landings.Text = modGlobalVars.cEmptyString;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_airframe_tot_landings"]))
					{
						if (Information.IsNumeric(adoAircraftRecordset["ac_airframe_tot_landings"]))
						{
							if (Convert.ToDouble(adoAircraftRecordset["ac_airframe_tot_landings"]) >= 0)
							{
								txt_ac_airframe_tot_landings.Text = StringsHelper.Format(adoAircraftRecordset["ac_airframe_tot_landings"], "###,###,##0");
							}
						}
					}

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_engine_tbo_oc_flag"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_engine_tbo_oc_flag"]).Trim().ToUpper() == "Y")
						{
							chk_oncondtbo.CheckState = CheckState.Checked;
						}
						else
						{
							chk_oncondtbo.CheckState = CheckState.Unchecked;
						}
					}
					else
					{
						chk_oncondtbo.CheckState = CheckState.Unchecked;
					}

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_lease_flag"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_lease_flag"]).Trim().ToUpper() == "Y")
						{
							// Leased Flag
							chkArray[chkLeasedFlag_INDEX].CheckState = CheckState.Checked;
							pnl_LeaseEntry.Visible = false;
						}
						else
						{
							// Leased Flag
							chkArray[chkLeasedFlag_INDEX].CheckState = CheckState.Unchecked;
						}
					}
					else
					{
						// Leased Flag
						chkArray[chkLeasedFlag_INDEX].CheckState = CheckState.Unchecked;
					}

					//msw - 9/24/18 - added replace for comma to ser no
					//Prop Serial Number
					for (int xLoop = 0; xLoop <= 3; xLoop++)
					{

						txt_ac_prop_ser_no[xLoop].Text = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset[$"ac_prop_{(xLoop + 1).ToString()}_ser_no"]))
						{
							if (Convert.ToString(adoAircraftRecordset[$"ac_prop_{(xLoop + 1).ToString()}_ser_no"]).Trim() != modGlobalVars.cEmptyString)
							{
								txt_ac_prop_ser_no[xLoop].Text = StringsHelper.Replace(Convert.ToString(adoAircraftRecordset[$"ac_prop_{(xLoop + 1).ToString()}_ser_no"]), ",", "", 1, -1, CompareMethod.Binary).Trim();
								txt_ac_prop_ser_no[xLoop].Tag = txt_ac_prop_ser_no[xLoop].Text; // added MSW 4/4/19
							}
						}

					}

					//Total Time Since Prop New
					for (int xLoop = 0; xLoop <= 3; xLoop++)
					{

						txt_ac_prop_snew_hrs[xLoop].Text = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset[$"ac_prop_{(xLoop + 1).ToString()}_snew_hrs"]))
						{
							if (Information.IsNumeric(adoAircraftRecordset[$"ac_prop_{(xLoop + 1).ToString()}_snew_hrs"]))
							{
								if (Convert.ToDouble(adoAircraftRecordset[$"ac_prop_{(xLoop + 1).ToString()}_snew_hrs"]) >= 0)
								{
									txt_ac_prop_snew_hrs[xLoop].Text = StringsHelper.Format(adoAircraftRecordset[$"ac_prop_{(xLoop + 1).ToString()}_snew_hrs"], "###,###,##0");
								}
							}
						}

					}

					//Total Time Since Prop Overhaul
					for (int xLoop = 0; xLoop <= 3; xLoop++)
					{

						txt_ac_prop_soh_hrs[xLoop].Text = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset[$"ac_prop_{(xLoop + 1).ToString()}_soh_hrs"]))
						{
							if (Information.IsNumeric(adoAircraftRecordset[$"ac_prop_{(xLoop + 1).ToString()}_soh_hrs"]))
							{
								if (Convert.ToDouble(adoAircraftRecordset[$"ac_prop_{(xLoop + 1).ToString()}_soh_hrs"]) >= 0)
								{
									txt_ac_prop_soh_hrs[xLoop].Text = StringsHelper.Format(adoAircraftRecordset[$"ac_prop_{(xLoop + 1).ToString()}_soh_hrs"], "###,###,##0");
								}
							}
						}

					}

					if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_1_soh_moyear"])}").Trim()) > 0)
					{
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_1_soh_moyear"])}").Trim()) > 4 || Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_1_soh_moyear"])}").Trim()) <= 2)
						{
							txt_ac_prop_soh_mo[0].Text = Convert.ToString(adoAircraftRecordset["ac_prop_1_soh_moyear"]).Substring(0, Math.Min(2, Convert.ToString(adoAircraftRecordset["ac_prop_1_soh_moyear"]).Length)).Trim();
						}
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_1_soh_moyear"])}").Trim()) >= 4)
						{
							txt_ac_prop_soh_year[0].Text = Convert.ToString(adoAircraftRecordset["ac_prop_1_soh_moyear"]).Substring(Math.Max(Convert.ToString(adoAircraftRecordset["ac_prop_1_soh_moyear"]).Length - 4, 0)).Trim();
						}
					}

					if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_2_soh_moyear"])}").Trim()) > 0)
					{
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_2_soh_moyear"])}").Trim()) > 4 || Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_2_soh_moyear"])}").Trim()) <= 2)
						{
							txt_ac_prop_soh_mo[1].Text = Convert.ToString(adoAircraftRecordset["ac_prop_2_soh_moyear"]).Substring(0, Math.Min(2, Convert.ToString(adoAircraftRecordset["ac_prop_2_soh_moyear"]).Length)).Trim();
						}
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_2_soh_moyear"])}").Trim()) >= 4)
						{
							txt_ac_prop_soh_year[1].Text = Convert.ToString(adoAircraftRecordset["ac_prop_2_soh_moyear"]).Substring(Math.Max(Convert.ToString(adoAircraftRecordset["ac_prop_2_soh_moyear"]).Length - 4, 0)).Trim();
						}
					}

					if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_3_soh_moyear"])}").Trim()) > 0)
					{
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_3_soh_moyear"])}").Trim()) > 4 || Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_3_soh_moyear"])}").Trim()) <= 2)
						{
							txt_ac_prop_soh_mo[2].Text = Convert.ToString(adoAircraftRecordset["ac_prop_3_soh_moyear"]).Substring(0, Math.Min(2, Convert.ToString(adoAircraftRecordset["ac_prop_3_soh_moyear"]).Length)).Trim();
						}
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_3_soh_moyear"])}").Trim()) >= 4)
						{
							txt_ac_prop_soh_year[2].Text = Convert.ToString(adoAircraftRecordset["ac_prop_3_soh_moyear"]).Substring(Math.Max(Convert.ToString(adoAircraftRecordset["ac_prop_3_soh_moyear"]).Length - 4, 0)).Trim();
						}
					}

					if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_4_soh_moyear"])}").Trim()) > 0)
					{
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_4_soh_moyear"])}").Trim()) > 4 || Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_4_soh_moyear"])}").Trim()) <= 2)
						{
							txt_ac_prop_soh_mo[3].Text = Convert.ToString(adoAircraftRecordset["ac_prop_4_soh_moyear"]).Substring(0, Math.Min(2, Convert.ToString(adoAircraftRecordset["ac_prop_4_soh_moyear"]).Length)).Trim();
						}
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_4_soh_moyear"])}").Trim()) >= 4)
						{
							txt_ac_prop_soh_year[3].Text = Convert.ToString(adoAircraftRecordset["ac_prop_4_soh_moyear"]).Substring(Math.Max(Convert.ToString(adoAircraftRecordset["ac_prop_4_soh_moyear"]).Length - 4, 0)).Trim();
						}
					}

					Error_Message = "Display SOH Stuff";
					if (Airframe_Type_Code == "R")
					{
						//hide propeller information for rotary aircraft
						txt_ac_prop_soh_mo[0].Visible = false;
						txt_ac_prop_soh_mo[1].Visible = false;
						txt_ac_prop_soh_mo[2].Visible = false;
						txt_ac_prop_soh_mo[3].Visible = false;
						txt_ac_prop_soh_year[0].Visible = false;
						txt_ac_prop_soh_year[1].Visible = false;
						txt_ac_prop_soh_year[2].Visible = false;
						txt_ac_prop_soh_year[3].Visible = false;
						txt_ac_prop_soh_hrs[0].Visible = false;
						txt_ac_prop_soh_hrs[1].Visible = false;
						txt_ac_prop_soh_hrs[2].Visible = false;
						txt_ac_prop_soh_hrs[3].Visible = false;
						txt_ac_prop_snew_hrs[0].Visible = false;
						txt_ac_prop_snew_hrs[1].Visible = false;
						txt_ac_prop_snew_hrs[2].Visible = false;
						txt_ac_prop_snew_hrs[3].Visible = false;
						txt_ac_prop_ser_no[0].Visible = false;
						txt_ac_prop_ser_no[1].Visible = false;
						txt_ac_prop_ser_no[2].Visible = false;
						txt_ac_prop_ser_no[3].Visible = false;
						// lbl_gen(58).Visible = False
						lbl_gen[72].Visible = false;
						lbl_gen[40].Visible = false;
						lbl_gen[73].Visible = false;
						lbl_gen[105].Visible = false;
						lbl_gen[103].Visible = false;
						lbl_gen[104].Visible = false;
						lbl_gen[107].Visible = false;
						lbl_gen[106].Visible = false;
						lbl_gen[59].Visible = false;
						lbl_gen[60].Visible = false;
						lbl_gen[61].Visible = false;
						lbl_gen[62].Visible = false;
					}
					else
					{
						//turn back on
						//          txt_ac_prop_soh_mo(0).Visible = True
						//          txt_ac_prop_soh_mo(1).Visible = True
						//          txt_ac_prop_soh_mo(2).Visible = True
						//          txt_ac_prop_soh_mo(3).Visible = True
						//          txt_ac_prop_soh_year(0).Visible = True
						//          txt_ac_prop_soh_year(1).Visible = True
						//          txt_ac_prop_soh_year(2).Visible = True
						//          txt_ac_prop_soh_year(3).Visible = True
						//          txt_ac_prop_soh_hrs(0).Visible = True
						//          txt_ac_prop_soh_hrs(1).Visible = True
						//          txt_ac_prop_soh_hrs(2).Visible = True
						//          txt_ac_prop_soh_hrs(3).Visible = True
						//          txt_ac_prop_snew_hrs(0).Visible = True
						//          txt_ac_prop_snew_hrs(1).Visible = True
						//          txt_ac_prop_snew_hrs(2).Visible = True
						//          txt_ac_prop_snew_hrs(3).Visible = True
						//          txt_ac_prop_ser_no(0).Visible = True
						//          txt_ac_prop_ser_no(1).Visible = True
						//          txt_ac_prop_ser_no(2).Visible = True
						//          txt_ac_prop_ser_no(3).Visible = True
						//          lbl_gen(58).Visible = True
						//          lbl_gen(72).Visible = True
						//          lbl_gen(40).Visible = True
						//          lbl_gen(73).Visible = True
						//          lbl_gen(105).Visible = True
						//          lbl_gen(103).Visible = True
						//          lbl_gen(104).Visible = True
						//          lbl_gen(107).Visible = True
						//          lbl_gen(106).Visible = True
						//          lbl_gen(59).Visible = True
						//          lbl_gen(60).Visible = True
						//          lbl_gen(61).Visible = True
						//          lbl_gen(62).Visible = True
					}



					Error_Message = "Display APU Model Name";
					int tempForEndVar23 = cbo_ac_apu_model_name.Items.Count - 1;
					for (int I = 0; I <= tempForEndVar23; I++)
					{
						if (cbo_ac_apu_model_name.GetListItem(I).Trim().ToLower() == ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_apu_model_name"])}").Trim().ToLower())
						{
							cbo_ac_apu_model_name.SelectedIndex = I;
							break;
						}
					}

					//------------------------------------------------------------------------------------------------------------------------------
					// 06/26/2007 - By David D. Cruger; Must Set Something if APU from the recordset does NOT match anything in the pull down.
					// Also had to change style from 2-Dropdown List to 0-Dropdown Combo
					//------------------------------------------------------------------------------------------------------------------------------
					if (cbo_ac_apu_model_name.Text == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset["ac_apu_model_name"]))
						{
							if (Convert.ToString(adoAircraftRecordset["ac_apu_model_name"]) != modGlobalVars.cEmptyString)
							{
								cbo_ac_apu_model_name.Text = Convert.ToString(adoAircraftRecordset["ac_apu_model_name"]).Trim();
							}
							else
							{
								cbo_ac_apu_model_name.Text = modGlobalVars.cEmptyString;
							}
						}
						else
						{
							cbo_ac_apu_model_name.Text = modGlobalVars.cEmptyString;
						}
					}

					Error_Message = "Display APU Hrs";
					txt_ac_apu[0].Text = modGlobalVars.cEmptyString;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_apu_ser_no"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_apu_ser_no"]).Trim() != modGlobalVars.cEmptyString)
						{
							txt_ac_apu[0].Text = Convert.ToString(adoAircraftRecordset["ac_apu_ser_no"]).Trim();
							txt_ac_apu[0].Tag = txt_ac_apu[0].Text;
						}
					}

					txt_ac_apu[1].Text = modGlobalVars.cEmptyString;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_apu_tot_hrs"]))
					{
						if (Information.IsNumeric(adoAircraftRecordset["ac_apu_tot_hrs"]))
						{
							if (Convert.ToDouble(adoAircraftRecordset["ac_apu_tot_hrs"]) > 0)
							{
								txt_ac_apu[1].Text = StringsHelper.Format(adoAircraftRecordset["ac_apu_tot_hrs"], "###,###,##0");
							}
							else
							{
								txt_ac_apu[1].Text = "0";
							}
						}
						else
						{
							txt_ac_apu[1].Text = "0";
						}
					}

					txt_ac_apu[2].Text = modGlobalVars.cEmptyString;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_apu_soh_hrs"]))
					{
						if (Information.IsNumeric(adoAircraftRecordset["ac_apu_soh_hrs"]))
						{
							if (Convert.ToDouble(adoAircraftRecordset["ac_apu_soh_hrs"]) > 0)
							{
								txt_ac_apu[2].Text = StringsHelper.Format(adoAircraftRecordset["ac_apu_soh_hrs"], "###,###,##0");
							}
							else
							{
								txt_ac_apu[2].Text = "0";
							}
						}
						else
						{
							txt_ac_apu[2].Text = "0";
						}
					}

					//      txt_ac_apu(3).Text = cEmptyString
					//      If Not IsNull(adoAircraftRecordset("ac_apu_shi_hrs")) Then
					//          If IsNumeric(adoAircraftRecordset("ac_apu_shi_hrs").Value) Then
					//              If CDbl(adoAircraftRecordset("ac_apu_shi_hrs").Value) > 0 Then
					//                  txt_ac_apu(3).Text = Format(adoAircraftRecordset("ac_apu_shi_hrs").Value, "###,###,##0")
					//              Else
					//                  txt_ac_apu(3).Text = "0"
					//              End If
					//          Else
					//              txt_ac_apu(3).Text = "0"
					//          End If
					//      End If

					Display_APU_Maint_Plan_List();

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_apu_maint_prog"]))
					{
						int tempForEndVar24 = cbo_ac_apu_maint_prog.Items.Count - 1;
						for (int I = 0; I <= tempForEndVar24; I++)
						{
							if (cbo_ac_apu_maint_prog.GetListItem(I).Substring(Math.Min(0, cbo_ac_apu_maint_prog.GetListItem(I).Length), Math.Min(1, Math.Max(0, cbo_ac_apu_maint_prog.GetListItem(I).Length))).ToUpper() == Convert.ToString(adoAircraftRecordset["ac_apu_maint_prog"]).Trim().Substring(Math.Min(0, Convert.ToString(adoAircraftRecordset["ac_apu_maint_prog"]).Trim().Length), Math.Min(1, Math.Max(0, Convert.ToString(adoAircraftRecordset["ac_apu_maint_prog"]).Trim().Length))).ToUpper())
							{
								cbo_ac_apu_maint_prog.SelectedIndex = I;
								break;
							}
						}
					}

					//------------------------------------------------------------------------------------------------------------------------------
					// 01/01/2008 - By MJM; Must Set Something if APU from the recordset does NOT match anything in the pull down.
					//------------------------------------------------------------------------------------------------------------------------------
					if (cbo_ac_apu_maint_prog.Text == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset["ac_apu_maint_prog"]))
						{
							if (Convert.ToString(adoAircraftRecordset["ac_apu_maint_prog"]) != modGlobalVars.cEmptyString)
							{
								cbo_ac_apu_maint_prog.Text = Convert.ToString(adoAircraftRecordset["ac_apu_maint_prog"]).Trim();
							}
							else
							{
								cbo_ac_apu_maint_prog.Text = modGlobalVars.cEmptyString;
							}
						}
						else
						{
							cbo_ac_apu_maint_prog.Text = modGlobalVars.cEmptyString;
						}
					}

					txt_ac_confidential_notes.Tag = "";
					txt_ac_confidential_notes.Text = ($"{Convert.ToString(adoAircraftRecordset["ac_confidential_notes"])} ").Trim();
					txt_ac_confidential_notes.Tag = txt_ac_confidential_notes.Text;

					// **************************************************************
					// DISPLAY DATA TO MAINTENANCE TAB

					Error_Message = "Display Airframe Maintenance PRog";
					cbo_ac_airframe_maintenance_prog_AMP.SelectedIndex = -1;
					int tempForEndVar25 = cbo_ac_airframe_maintenance_prog_AMP.Items.Count - 1;
					for (int I = 0; I <= tempForEndVar25; I++)
					{
						if (Double.Parse($"0{($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_airframe_maintenance_prog_AMP"])}").Trim()}") == cbo_ac_airframe_maintenance_prog_AMP.GetItemData(I))
						{
							cbo_ac_airframe_maintenance_prog_AMP.SelectedIndex = I;
							cbo_ac_airframe_maintenance_prog_AMP.Tag = cbo_ac_airframe_maintenance_prog_AMP.Text; // added to see if it has changed - 4/7/20
							break;
						}
					}

					Error_Message = "Display Airframe Maint Tracking Prog";
					cbo_ac_airframe_maint_tracking_prog_AMTP.SelectedIndex = -1;
					int tempForEndVar26 = cbo_ac_airframe_maint_tracking_prog_AMTP.Items.Count - 1;
					for (int I = 0; I <= tempForEndVar26; I++)
					{
						if (Double.Parse($"0{($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_airframe_maint_tracking_prog_AMTP"])}").Trim()}") == cbo_ac_airframe_maint_tracking_prog_AMTP.GetItemData(I))
						{
							cbo_ac_airframe_maint_tracking_prog_AMTP.SelectedIndex = I;
							cbo_ac_airframe_maint_tracking_prog_AMTP.Tag = cbo_ac_airframe_maint_tracking_prog_AMTP.Text; // ' added to see if it has changed - 4/7/20
							break;
						}
					}

					txt_ac_maint_eoh_by_name.Text = ($"{Convert.ToString(adoAircraftRecordset["ac_maint_eoh_by_name"])} ").Trim();
					txt_ac_maint_hots_by_name.Text = ($"{Convert.ToString(adoAircraftRecordset["ac_maint_hots_by_name"])} ").Trim();

					Error_Message = "Display Foreign Currency";
					int tempForEndVar27 = cbo_ac_foreign_currency_name.Items.Count - 1;
					for (int I = 0; I <= tempForEndVar27; I++)
					{
						if (Convert.ToString(adoAircraftRecordset["ac_foreign_currency_name"]).Trim().ToLower() == cbo_ac_foreign_currency_name.GetListItem(I).ToLower())
						{
							cbo_ac_foreign_currency_name.SelectedIndex = I;
							break;
						}
					}

					txt_ac_foreign_currency_price.Text = modGlobalVars.cEmptyString;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_foreign_currency_price"]))
					{
						if (Convert.ToDouble(adoAircraftRecordset["ac_foreign_currency_price"]) > 0)
						{ //
							txt_ac_foreign_currency_price.Text = Strings.FormatNumber(adoAircraftRecordset["ac_foreign_currency_price"], 0, TriState.False, TriState.False, TriState.True);
						}
					}

					txt_ac_sale_price.Text = modGlobalVars.cEmptyString;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_sale_price"]))
					{
						if (Convert.ToDouble(adoAircraftRecordset["ac_sale_price"]) > 0)
						{ //
							txt_ac_sale_price.Text = $"${Strings.FormatNumber(adoAircraftRecordset["ac_sale_price"], 0, TriState.False, TriState.False, TriState.True)}";
						}
					}

					// RTW - ADDED ON 4/21/2016 FOR SALE PRICE DISPLAY CHECK BOX
					lbl_gen[98].Font = lbl_gen[98].Font.Change(underline:false);
					ToolTipMain.SetToolTip(lbl_gen[98], "");

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_sale_price_acval_id"]))
					{
						// GET THE INFORMATION FROM THE AIRCRAFT VALUE RECORD INCLUDING WHO ENTERED SALE PRICE.

						// if user is MVINTECH, DAVID, JACKIE, or MICHELLE H, show'
						// ADDED MSW - 5/5/16
						if (modAdminCommon.gbl_User_ID == "mvit" || modAdminCommon.gbl_User_ID == "dcr" || modAdminCommon.gbl_User_ID == "jkc" || modAdminCommon.gbl_User_ID == "pls" || modAdminCommon.gbl_User_ID == "mah" || modAdminCommon.gbl_User_ID == "pls")
						{
							lbl_gen[98].Font = lbl_gen[98].Font.Change(underline:true);
							ToolTipMain.SetToolTip(lbl_gen[98], Get_Sale_Price_Source(Convert.ToInt32(adoAircraftRecordset["ac_sale_price_acval_id"])));
						}
						else
						{
							lbl_gen[98].Font = lbl_gen[98].Font.Change(underline:true);
							ToolTipMain.SetToolTip(lbl_gen[98], "Reported Sale Price Displayed with Permission from Source");
						}


					}
					else
					{
						ToolTipMain.SetToolTip(lbl_gen[98], "No Value Source Found");
					}

					mnuremoveprice.Available = false;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_sale_price_display_flag"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_sale_price_display_flag"]) == "N")
						{
							// Display Sale Price
							chkArray[chkDisplaySalePrice_INDEX].CheckState = CheckState.Unchecked;
						}
						else
						{
							// Display Sale Price
							chkArray[chkDisplaySalePrice_INDEX].CheckState = CheckState.Checked;
							mnuremoveprice.Available = true;
						}
					}
					else
					{
						chkArray[chkDisplaySalePrice_INDEX].CheckState = CheckState.Unchecked;
					}

					mnuenterprice.Available = tmp_ac_journ_id > 0;

					// Display Sale Price
					chkArray[chkDisplaySalePrice_INDEX].Enabled = false;

					//   COMMENTED OUT MSW - 6/7/16

					//   If tmp_ac_journ_id > 0 And (txt_ac_asking_price.Text <> "" Or txt_ac_sale_price.Text <> "") Then
					//     Display Sale Price
					//     chkArray(chkDisplaySalePrice_INDEX).Enabled = True ' show if its historical
					//   Else
					//     Display Sale Price
					//      '   If chkArray(chkDisplaySalePrice_INDEX).Value = vbUnchecked And lbl_gen(98).ToolTipText = "No Value Source Found" Then
					//     Display Sale Price
					//     chkArray(chkDisplaySalePrice_INDEX).Enabled = False
					//'   End If
					//   End If

					Error_Message = "Display EOH Stuff";
					if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_main_eoh_moyear"])}").Trim()) > 0)
					{
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_main_eoh_moyear"])}").Trim()) > 4 || Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_main_eoh_moyear"])}").Trim()) <= 2)
						{
							txt_ac_maint_eoh_mo.Text = Convert.ToString(adoAircraftRecordset["ac_main_eoh_moyear"]).Substring(0, Math.Min(2, Convert.ToString(adoAircraftRecordset["ac_main_eoh_moyear"]).Length)).Trim();
						}
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_main_eoh_moyear"])}").Trim()) >= 4)
						{
							txt_ac_maint_eoh_year.Text = Convert.ToString(adoAircraftRecordset["ac_main_eoh_moyear"]).Substring(Math.Max(Convert.ToString(adoAircraftRecordset["ac_main_eoh_moyear"]).Length - 4, 0)).Trim();
						}
					}

					txt_ac_maint_eoh_mo.Text = txt_ac_maint_eoh_mo.Text.Trim();
					txt_ac_maint_eoh_year.Text = txt_ac_maint_eoh_year.Text.Trim();

					Error_Message = "Display Hots Stuff";
					if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_maint_hots_moyear"])}").Trim()) > 0)
					{
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_maint_hots_moyear"])}").Trim()) > 4 || Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_maint_hots_moyear"])}").Trim()) <= 2)
						{
							txt_ac_maint_hots_mo.Text = Convert.ToString(adoAircraftRecordset["ac_maint_hots_moyear"]).Substring(0, Math.Min(2, Convert.ToString(adoAircraftRecordset["ac_maint_hots_moyear"]).Length)).Trim();
						}
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_maint_hots_moyear"])}").Trim()) >= 4)
						{
							txt_ac_maint_hots_year.Text = Convert.ToString(adoAircraftRecordset["ac_maint_hots_moyear"]).Substring(Math.Max(Convert.ToString(adoAircraftRecordset["ac_maint_hots_moyear"]).Length - 4, 0)).Trim();
						}
					}

					txt_ac_maint_hots_mo.Text = txt_ac_maint_hots_mo.Text.Trim();
					txt_ac_maint_hots_year.Text = txt_ac_maint_hots_year.Text.Trim();

					Error_Message = "Display History Notes";
					txt_ac_damage_history_notes.Text = ($"{Convert.ToString(adoAircraftRecordset["ac_damage_history_notes"])} ").Trim();

					// **************************************************************
					// DISPLAY DATA TO INTERIOR/EXTERIOR TAB
					Error_Message = "Display Interior";
					txt_ac_interior_rating.Text = (($"{Convert.ToString(adoAircraftRecordset["ac_interior_rating"])} ").Trim());
					txt_ac_exterior_rating.Text = (($"{Convert.ToString(adoAircraftRecordset["ac_exterior_rating"])} ").Trim());

					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_interior_moyear"])}").Trim() != modGlobalVars.cEmptyString)
					{

						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_interior_moyear"])}").Trim()) > 4 || Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_interior_moyear"])}").Trim()) <= 2)
						{
							txt_ac_interior_mo.Text = ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_interior_moyear"])}").Substring(0, Math.Min(2, ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_interior_moyear"])}").Length));
						}
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_interior_moyear"])}").Trim()) >= 4)
						{
							txt_ac_interior_year.Text = ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_interior_moyear"])}").Substring(Math.Max(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_interior_moyear"])}").Length - 4, 0));
						}
					}
					else
					{
						txt_ac_interior_mo.Text = modGlobalVars.cEmptyString;
						txt_ac_interior_year.Text = modGlobalVars.cEmptyString;
					}

					Error_Message = "Display Exterior";
					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_exterior_moyear"])}").Trim() != modGlobalVars.cEmptyString)
					{
						if (Strings.Len(Convert.ToString(adoAircraftRecordset["ac_exterior_moyear"]).Trim()) > 4 || Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_exterior_moyear"])}").Trim()) <= 2)
						{
							txt_ac_exterior_mo.Text = ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_exterior_moyear"])}").Substring(0, Math.Min(2, ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_exterior_moyear"])}").Length));
						}
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_exterior_moyear"])}").Trim()) >= 4)
						{
							txt_ac_exterior_year.Text = ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_exterior_moyear"])}").Substring(Math.Max(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_exterior_moyear"])}").Length - 4, 0));
						}
					}
					else
					{
						txt_ac_exterior_mo.Text = modGlobalVars.cEmptyString;
						txt_ac_exterior_year.Text = modGlobalVars.cEmptyString;
					}

					txt_ac_interior_doneby_name.Text = (($"{Convert.ToString(adoAircraftRecordset["ac_interior_doneby_name"])} ").Trim());
					txt_ac_exterior_doneby_name.Text = (($"{Convert.ToString(adoAircraftRecordset["ac_exterior_doneby_name"])} ").Trim());
					txt_ac_passenger_count.Text = (($"{Convert.ToString(adoAircraftRecordset["ac_passenger_count"])} ").Trim());

					Error_Message = "Display Interior Config";
					cbo_ac_interior_config_name.Text = (($"{Convert.ToString(adoAircraftRecordset["ac_interior_config_name"])} ").Trim());

					// DISPLAY JOURNAL TAB
					txt_ac_common_notes.Text = ($"{Convert.ToString(adoAircraftRecordset["ac_common_notes"])} ").Trim();

					// DISPLAY COMPANY TAB INFO
					Error_Message = "Display Ownership";
					if (($" {Convert.ToString(adoAircraftRecordset["ac_ownership_type"])}").Trim() != modGlobalVars.cEmptyString)
					{
						int tempForEndVar28 = cbo_ac_owner_type.Items.Count;
						for (int intIndex = 0; intIndex <= tempForEndVar28; intIndex++)
						{
							if (cbo_ac_owner_type.GetListItem(intIndex).StartsWith(Convert.ToString(adoAircraftRecordset["ac_ownership_type"]), StringComparison.Ordinal))
							{
								cbo_ac_owner_type.SelectedIndex = intIndex;
								break;
							}
						}
					}

					cbo_ac_owner_type.Enabled = tmp_ac_journ_id != 0;

					Error_Message = "Display Exclusive Stuff";

					mnuAddExclusiveBroker.Enabled = chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked;

					if (Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]) == 0)
					{ //aey 9/1/04 only use red on current a/c
						if (ValidateAskingPrice(true, true))
						{
							txt_ac_asking_price.ForeColor = Color.Black;
						}
						else
						{
							txt_ac_asking_price.ForeColor = Color.Red;
						}
					}
					else
					{
						txt_ac_asking_price.ForeColor = Color.Black;
					}

					if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0)
					{

						DisableButtonsForHistorical();
						//UPGRADE_WARNING: (2065) TabDlg.SSTab property tab_aircraft_details.TabCaption has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
						SSTabHelper.SetTabCaption(tab_aircraft_details, 10, "Transaction Notes");
						pnl_TransactionNotes.Visible = true;
						grd_DocumentLog.Visible = false;

					}
					else
					{

						//UPGRADE_WARNING: (2065) TabDlg.SSTab property tab_aircraft_details.TabCaption has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
						SSTabHelper.SetTabCaption(tab_aircraft_details, 10, "Documents in Process");

						strQuery = "SELECT faalog_id FROM FAA_Document_Log WITH (NOLOCK) ";
						strQuery = $"{strQuery}WHERE (faalog_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}) ";
						strQuery = $"{strQuery}AND (faalog_journ_id = 0) ";

						if (modAdminCommon.Exist(strQuery))
						{
							//UPGRADE_WARNING: (2065) TabDlg.SSTab property tab_aircraft_details.TabCaption has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
							SSTabHelper.SetTabCaption(tab_aircraft_details, 10, "Docs in Process");
							tab_aircraft_details.ImageList.Images[10] = mdi_ResearchAssistant.DefInstance.imgNormal.Images["Delete"];
						}

						pnl_TransactionNotes.Visible = false;

					} // If adoAircraftRecordset!AC_Journ_id > 0 Then

					snpType.Close();
					snpType = null;

					Error_Message = "check Commercial Mapping";

					if (modGlobalVars.b_InCommercialDB)
					{
						if (lbl_gen[66].ForeColor != Color.Black && SSTabHelper.GetSelectedIndex(tab_ACMain) != 3)
						{
							SSTabHelper.SetSelectedIndex(tab_ACMain, 4);
						}
						else if (SSTabHelper.GetSelectedIndex(tab_ACMain) != 3)
						{ 
							SSTabHelper.SetSelectedIndex(tab_ACMain, 5);
						}
					}
					else
					{
						if (lbl_gen[66].ForeColor != Color.Black && SSTabHelper.GetSelectedIndex(tab_ACMain) != 3)
						{
							SSTabHelper.SetSelectedIndex(tab_ACMain, 0); // changed this from 4 - per request - MSW - 9/18/18
						}
						else if (SSTabHelper.GetSelectedIndex(tab_ACMain) != 3)
						{ 
							SSTabHelper.SetSelectedIndex(tab_ACMain, 0);
						}
					}

					Error_Message = "Highlight fields if too long";

					if (SSTabHelper.GetSelectedIndex(tab_aircraft_details) == 6)
					{ // refill journal if on journal tab
						Error_Message = "Fill Aircraft Journal Grid";
						Fill_Aircraft_Journal_Grid();
					}

					// *****************************************
					// IF THE USER DESIRED TO CLEAR SPECS THEN
					// CLEAR THEM, UPDATE THE AIRCRAFT, AND REPAINT THE
					// SCREEN WITHOUT THE SPECS ENSURING THAT THE
					// CLEAR SPECS FLAG IS SET TO FALSE SO THAT THIS
					// PROCEDURE IS NOT RECURSIVE
					if (NeedToClearSpecs)
					{
						Error_Message = "Clearing Specs";
						ClearSpecsFromRecord();
						NeedToClearSpecs = false;
						Display_Aircraft();
					}

					search_off();

					//tab_Aircraft_Details.Tab = 0

					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;

					display_aircraft_product_Codes(adoAircraftRecordset);

					// RTW - TURN ON ENGINE FIELDS AS APPROPRIATE BASED ON THE NUMBER OF ENGINES
					Turn_On_Engines();
					Turn_On_Props();

					bDisplayAircraft = false;

				} // If bDisplayAircraft = False Then

				// OPERATOR HISTORY FIX *****************************************************************
				// RTW - TEMP HOLD - TRY TO DETECT ISSUES WITH OPERATOR HISTORY
				// GET THE CURRENT OPERATOR COMPANY ID
				// CHECK TO SEE IF THE LAST OPERATOR HISTORY RECORD INDICATES THE SAME CURRENT OPERATOR
				// IF NOT- DISPLAY A MESSAGE SAYING THAT AND POTENTIALLY AUTOMATICALLY ADJUST

				modAircraft.FixCurrentOperator(Convert.ToInt32(Double.Parse(txt_ac_id.Text)));
				//     If InStr(LOCAL_ADO_DB, "jetnet_ra_test") > 0 Then

				//            Dim snpOpCheck As New ADODB.Recordset
				//
				//              ' GET THE CURRENT OPERATOR(COMPANY ID) FOR THE AIRCRAFT
				//              strQuery = "Select top 1 cref_comp_id from Aircraft_Reference with (NOLOCK) "
				//              strQuery = strQuery & " WHERE cref_journ_id = 0 and cref_operator_flag in ('Y','O') "
				//              strQuery = strQuery & " AND cref_ac_id = " & CStr(txt_ac_id) & ""
				//
				//              Call snpOpCheck.Open(strQuery, LOCAL_ADO_DB, adOpenStatic, adLockReadOnly, adCmdText)
				//
				//              If Not (snpOpCheck.BOF And snpOpCheck.EOF) Then
				//
				//               Dim snpHistCheck As New ADODB.Recordset
				//
				//                  ' CHECK TO SEE IF THE CURRENT OPERATOR IS ALSO THE LAST RECORD IN THE HISTORY TABLE
				//                  strQuery = "SELECT acomprole_comp_id from Aircraft_Company_Role WITH (NOLOCK) "
				//                  strQuery = strQuery & "WHERE (acomprole_ac_id = " & CStr(txt_ac_id) & ") "
				//                  strQuery = strQuery & "and acomprole_end_date is NULL "
				//                  strQuery = strQuery & "and (acomprole_comp_id = " & CStr(snpOpCheck!cref_comp_id) & ") "
				//
				//                  Call snpHistCheck.Open(strQuery, LOCAL_ADO_DB, adOpenStatic, adLockReadOnly, adCmdText)
				//
				//                  If Not (snpHistCheck.BOF And snpHistCheck.EOF) Then
				//
				//                  Else
				//
				//                    ' MsgBox ("Current Operator Does not Match History for Aircraft.")
				//
				//                    ' IN THIS SCENARIO,
				//                    '   UPDATE THE LAST HISTORY RECORD WITH END DATE OF TODAY MINUS ONE DAY
				//                    '   THEN INSERT A NEW HISTORY REOCRD WITH START DATE AND OPERATOR COMPANY ID FOR TODAY
				//
				//                    ' IF THE LAST HISTORY RECORD THAT DOES NOT MATCH THE OPERATOR HAS A START DATE OF TODAY THEN JUST REMOVE IT
				//                    strQuery = "DELETE FROM  Aircraft_Company_Role "
				//                    strQuery = strQuery & "WHERE (acomprole_ac_id = " & CStr(txt_ac_id) & ") "
				//                    strQuery = strQuery & "and acomprole_end_date is NULL "
				//                    strQuery = strQuery & "and acomprole_START_date = '" & CStr(Now()) & "'"
				//
				//                    Call LOCAL_ADO_DB.Execute(strQuery, , adCmdText)
				//
				//
				//                    strQuery = "Update Aircraft_Company_Role set acomprole_end_date = '" & CStr(Now() - 1) & "' "
				//                    strQuery = strQuery & "WHERE (acomprole_ac_id = " & CStr(txt_ac_id) & ") "
				//                    strQuery = strQuery & "and acomprole_end_date is NULL "
				//                    'strQuery = strQuery & "and (acomprole_comp_id = " & CStr(snpOpCheck!cref_comp_id) & ") "
				//
				//                    Call LOCAL_ADO_DB.Execute(strQuery, , adCmdText)
				//
				//                    strQuery = "Insert into Aircraft_Company_Role (acomprole_ac_id, acomprole_journ_id, acomprole_comp_id, acomprole_type,acomprole_start_date, acomprole_end_date, acomprole_notes,acomprole_user_id) "
				//                    strQuery = strQuery & "Values ("
				//                    strQuery = strQuery & CStr(txt_ac_id) & ", "  ' ACID
				//                    strQuery = strQuery & "0," ' JOURN ID
				//                    strQuery = strQuery & CStr(snpOpCheck!cref_comp_id) & "," ' COMPANY ID
				//                    strQuery = strQuery & "1," ' TYPE
				//                    strQuery = strQuery & "'" & CStr(Now()) & "'," ' START DATE
				//                    strQuery = strQuery & "NULL," ' END DATE
				//                    strQuery = strQuery & "'HOMEBASE',"  ' NOTES
				//                    strQuery = strQuery & "'mvit')" ' USER ID
				//
				//                    Call LOCAL_ADO_DB.Execute(strQuery, , adCmdText)
				//
				//
				//                  End If ' CHECK ON HISTORY RECORD
				//
				//                  Set snpHistCheck = Nothing
				//
				//              End If ' END IF CURRENT OPERATOR CHECK
				//
				//              Set snpOpCheck = Nothing
				//        End If ' IF ON TEST THEN DO EXTRA OPERATOR HISTORY FIXES
			}
			catch (System.Exception excep)
			{

				adoAircraftDatesRecordset = null;
				tab_aircraft_details.Enabled = false;
				tbr_ToolBar.Enabled = false;
				tab_ACMain.Enabled = false;
				search_off();
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Display_Aircraft_Error ({Information.Err().Number.ToString()}) {excep.Message} acid[{Convert.ToString(adoAircraftRecordset["ac_id"])}] jid[{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}]", "frm_aircraft(DISPLAY)");
			}
		}

		private void display_aircraft_product_Codes(ADORecordSetHelper in_AircraftRS)
		{

			bool bIsBusiness = false;
			bool bIsHelicopter = false;
			bool bIsCommercial = false;
			bool bIsRegional = false;
			bool bIsAirBP = false;
			bool bIsABI = false;
			bool modelProductB = false;
			bool modelProductH = false;
			bool modelProductC = false;
			bool modelProductP = false;

			// first turn off all check boxes
			int tempForEndVar = chk_ac_product.GetUpperBound(0);
			for (int X = 0; X <= tempForEndVar; X++)
			{
				chk_ac_product[X].Visible = false;
				chk_ac_product[X].Enabled = false;
				chk_ac_product[X].CheckState = CheckState.Unchecked;
			}

			modelProductB = modCommon.DLookUp("amod_product_business_flag", "Aircraft_Model WITH(NOLOCK)", $"amod_id = {Convert.ToString(in_AircraftRS["ac_amod_id"])}") == "Y";
			modelProductH = modCommon.DLookUp("amod_product_helicopter_flag", "Aircraft_Model WITH(NOLOCK)", $"amod_id = {Convert.ToString(in_AircraftRS["ac_amod_id"])}") == "Y";
			modelProductC = modCommon.DLookUp("amod_product_commercial_flag", "Aircraft_Model WITH(NOLOCK)", $"amod_id = {Convert.ToString(in_AircraftRS["ac_amod_id"])}") == "Y";
			modelProductP = modCommon.DLookUp("amod_product_airbp_flag", "Aircraft_Model WITH(NOLOCK)", $"amod_id = {Convert.ToString(in_AircraftRS["ac_amod_id"])}") == "Y";

			if (in_AircraftRS != null)
			{

				if (in_AircraftRS.State == ConnectionState.Open)
				{

					if (!(in_AircraftRS.EOF && in_AircraftRS.BOF))
					{

						if (Convert.ToString(in_AircraftRS["ac_product_business_flag"]).ToUpper() == "Y" || modelProductB)
						{
							bIsBusiness = true;
						}

						if (Convert.ToString(in_AircraftRS["ac_product_helicopter_flag"]).ToUpper() == "Y" || modelProductH)
						{
							bIsHelicopter = true;
						}

						if (Convert.ToString(in_AircraftRS["ac_product_commercial_flag"]).ToUpper() == "Y" || modelProductC)
						{
							bIsCommercial = true;
						}

						if (Convert.ToString(in_AircraftRS["ac_product_airbp_flag"]).ToUpper() == "Y" || modelProductP)
						{
							bIsAirBP = true;
						}

						// special case if there is no product codes selected warn the user that
						// until a product code is selected the aircraft will not be transmitted

						if (!bIsBusiness && !bIsHelicopter && !bIsCommercial && !bIsAirBP && !bControlProductCodeMsg)
						{

							bControlProductCodeMsg = true; // make sure this only pops up once per form load.
							MessageBox.Show($"** NO PRODUCT CODE SELECTED **{Environment.NewLine}Plese Select a PRODUCT CODE before SAVING Aircraft", "NO PRODUCT CODE", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

						}

						int tempForEndVar2 = chk_ac_product.GetUpperBound(0);
						for (int X = 0; X <= tempForEndVar2; X++)
						{


							switch((X))
							{
								case modGlobalVars.CHK_BUSINESS_IDX : 
									chk_ac_product[X].Visible = true; 
									if (bIsBusiness)
									{
										chk_ac_product[X].Enabled = true;
										if (Convert.ToString(in_AircraftRS["ac_product_business_flag"]).ToUpper() == "Y")
										{
											chk_ac_product[X].CheckState = CheckState.Checked;
										}
									} 
									 
									break;
								case modGlobalVars.CHK_HELICOPTER_IDX : 
									chk_ac_product[X].Visible = true; 
									if (bIsHelicopter)
									{
										chk_ac_product[X].Enabled = true;
										if (Convert.ToString(in_AircraftRS["ac_product_helicopter_flag"]).ToUpper() == "Y")
										{
											chk_ac_product[X].CheckState = CheckState.Checked;
										}
									} 
									 
									break;
								case modGlobalVars.CHK_COMMERCIAL_IDX : 
									chk_ac_product[X].Visible = true; 
									if (bIsCommercial)
									{
										chk_ac_product[X].Enabled = true;
										if (Convert.ToString(in_AircraftRS["ac_product_commercial_flag"]).ToUpper() == "Y")
										{
											chk_ac_product[X].CheckState = CheckState.Checked;
										}
									} 
									 
									break;
								case modGlobalVars.CHK_ABI_IDX : 
									chk_ac_product[X].Visible = true; 
									if (bIsABI)
									{
										//If UCase(in_AircraftRS("ac_product_abi_flag").Value) = "Y" Then
										//  chk_ac_product(X).Value = vbChecked
										//End If
									} 
									 
									break;
								case modGlobalVars.CHK_AIRBP_IDX : 
									chk_ac_product[X].Visible = true; 
									if (bIsAirBP)
									{
										chk_ac_product[X].Enabled = true;
										if (Convert.ToString(in_AircraftRS["ac_product_airbp_flag"]).ToUpper() == "Y")
										{
											chk_ac_product[X].CheckState = CheckState.Checked;
										}
									} 
									 
									break;
								case modGlobalVars.CHK_REGIONAL_IDX : 
									chk_ac_product[X].Visible = true; 
									if (bIsRegional)
									{
										//If UCase(in_AircraftRS("ac_product_regional_flag").Value) = "Y" Then
										//  chk_ac_product(X).Value = vbChecked
										//End If
									} 
									 
									break;
								default:
									goto exit_for;
							}

						}
						exit_for:;

					}

				}

			}

		}

		private string set_homebase_Reference(int inACID)
		{

			string result = "";
			ADORecordSetHelper adoRs = null;
			string Query = "";
			bool bValidAcID = false;


			result = modGlobalVars.cEmptyString;

			if (inACID == 0 || ac_mapping_id.Text.Trim() == modGlobalVars.cEmptyString)
			{
				lbl_gen[110].Text = modGlobalVars.cEmptyString;
				return "No aircraft ID to map!";
			}

			string sSelectedItem = ac_mapping_list.GetListItem(ListBoxHelper.GetSelectedIndex(ac_mapping_list)).Substring(0, Math.Min(1, ac_mapping_list.GetListItem(ListBoxHelper.GetSelectedIndex(ac_mapping_list)).Length)).ToUpper();


			switch(sSelectedItem)
			{
				case "L" :  // load aircraft to homebase 
					 
					Query = $"UPDATE Map_Aircraft SET mapac_homebase_ac_id = 0 , mapac_load_flag = 'L' WHERE mapac_com_ac_id = {inACID.ToString()}"; 
					result = $"{lbl_gen[110].Text}{Environment.NewLine} Aircraft Will be loaded to Hombase!"; 
					bValidAcID = true; 
					 
					break;
				case "D" :  // update aircraft info to homebase 
					 
					// verify valid ac record exists in homebase 
					Query = "SELECT DISTINCT ac_id FROM Aircraft WITH(NOLOCK), Aircraft_Model WITH(NOLOCK), Aircraft_Model_Useage WITH(NOLOCK)"; 
					Query = $"{Query} WHERE ac_amod_id = amod_id AND acmoduse_amod_id = amod_id"; 
					Query = $"{Query} AND ac_use_code = acmoduse_use_code AND ac_journ_id = 0 and ac_id = {ac_mapping_id.Text.Trim()}"; 
					 
					adoRs = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, ""); 
					 
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049 
					if ((!Convert.IsDBNull(adoRs.Fields)) && !(adoRs.EOF && adoRs.BOF))
					{

						Query = modGlobalVars.cEmptyString;
						Query = $"UPDATE Map_Aircraft SET mapac_homebase_ac_id = {ac_mapping_id.Text.Trim()} , mapac_load_flag = 'D' WHERE mapac_com_ac_id = {inACID.ToString()}";
						bValidAcID = true;
						adoRs.Close();
						result = $"{lbl_gen[110].Text}{Environment.NewLine} DUPLICATE Aircraft in Hombase! Will update with this AC Record!";

					}
					else
					{

						result = $"{lbl_gen[110].Text}{Environment.NewLine} ERROR ** {Environment.NewLine}" +
						         $"DUPLICATE Aircraft NOT FOUND in Hombase! Will update with this AC Record!";

					} 
					 
					adoRs = null; 
					 
					break;
				case "N" :  // Don't load aircraft to homebase 
					Query = $"UPDATE Map_Aircraft SET mapac_homebase_ac_id = 0 , mapac_load_flag = 'N' WHERE mapac_com_ac_id = {inACID.ToString()}"; 
					result = $"{lbl_gen[110].Text}{Environment.NewLine} Aircraft Will NOT be loaded to Hombase!"; 
					bValidAcID = true; 
					 
					break;
			}

			if (bValidAcID)
			{
				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();
			}

			return result;
		}

		//UPGRADE_NOTE: (7001) The following declaration (get_homebase_Reference) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private string get_homebase_Reference(int inACID)
		//{
			//
			//string result = "";
			//string sTmpStr = "", Separator = "";
			//string nMappedACid = modGlobalVars.cEmptyString;
			//string nMappedLoadFlag = modGlobalVars.cEmptyString;
			//
			//if (inACID == 0)
			//{
				//return result;
			//}
			//
			//result = modGlobalVars.cEmptyString;
			//
			//string Query = $"SELECT * FROM Map_Aircraft WITH(NOLOCK) WHERE mapac_com_ac_id = {inACID.ToString()}";
			//ADORecordSetHelper adoRs = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");
			//
			////UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
			//if (!Convert.IsDBNull(adoRs.Fields) && !(adoRs.EOF && adoRs.BOF))
			//{
				//
				////UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				//if (!(Convert.IsDBNull(adoRs["mapac_homebase_ac_id"]) && Convert.IsDBNull(adoRs["mapac_load_flag"])))
				//{
					//
					//nMappedACid = Convert.ToString(adoRs["mapac_homebase_ac_id"]);
					//nMappedLoadFlag = Convert.ToString(adoRs["mapac_load_flag"]);
					//
				//}
				//else
				//{
					//
					//nMappedACid = "0";
					//nMappedLoadFlag = "L";
					//
				//}
				//
				//adoRs.Close();
				//
			//}
			//else
			//{
				//
				//nMappedACid = "0";
				//nMappedLoadFlag = "L";
				//
			//}
			//
			//adoRs = null;
			//
			//if (Convert.ToInt32(Double.Parse(nMappedACid)) == 0)
			//{
				//result = "There is no Duplicate Aircraft in Hombase!";
			//}
			//
			//if (nMappedLoadFlag.Trim() != modGlobalVars.cEmptyString)
			//{
				//
				//int tempForEndVar = ac_mapping_list.Items.Count - 1;
				//for (int I = 0; I <= tempForEndVar; I++)
				//{
					//if (ac_mapping_list.GetListItem(I).Substring(0, Math.Min(1, ac_mapping_list.GetListItem(I).Length)).Trim().ToUpper() == nMappedLoadFlag.ToUpper())
					//{
						//ListBoxHelper.SetSelectedIndex(ac_mapping_list, I);
						//break;
					//}
				//}
				//
			//}
			//else
			//{
				//ListBoxHelper.SetSelectedIndex(ac_mapping_list, 0);
			//}
			//
			//if (Convert.ToInt32(Double.Parse(nMappedACid)) != 0 && nMappedLoadFlag == "D")
			//{
				//
				//Query = "SELECT DISTINCT ac_id, ac_journ_id, amod_make_name, amod_id, amod_model_name, ac_aport_id, ac_aport_iata_code,";
				//Query = $"{Query}ac_aport_icao_code, ac_aport_faaid_code, ac_aport_name, ac_aport_city, ac_aport_state, ac_aport_country,";
				//Query = $"{Query}ac_ser_no_full, ac_alt_ser_no_full, ac_forsale_flag, amod_airframe_type_code, amod_type_code,";
				//Query = $"{Query}ac_year, ac_mfr_year, ac_purchase_date, ac_airframe_tot_hrs, ac_reg_no, ac_Status,";
				//Query = $"{Query}ac_delivery, ac_delivery_date, ac_list_date, ac_times_as_of_date, ac_use_code, ac_prev_reg_no,";
				//Query = $"{Query}ac_upd_date, ac_ent_date, ac_exclusive_flag, ac_lease_flag";
				//Query = $"{Query} FROM Aircraft WITH(NOLOCK), Aircraft_Model WITH(NOLOCK), Aircraft_Model_Useage WITH(NOLOCK)";
				//Query = $"{Query} WHERE ac_amod_id = amod_id AND acmoduse_amod_id = amod_id";
				//Query = $"{Query} AND ac_use_code = acmoduse_use_code AND ac_journ_id = 0 and ac_id = {nMappedACid}";
				//
				//adoRs = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");
				//
				////UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				//if ((!Convert.IsDBNull(adoRs.Fields)) && !(adoRs.EOF && adoRs.BOF))
				//{
					//
					//result = $"ACID :{Convert.ToString(adoRs["ac_id"])}";
					//
					//ac_mapping_id.Text = Convert.ToString(adoRs["ac_id"]);
					//
					//result = $"{result} MK :{Convert.ToString(adoRs["amod_make_name"]).Trim()}";
					//result = $"{result} MOD :{Convert.ToString(adoRs["amod_model_name"]).Trim()}";
					//result = $"{result} YR :{Convert.ToString(adoRs["ac_year"]).Trim()}";
					//
					//Separator = modGlobalVars.cEmptyString;
					//
					//if (Convert.ToString(adoRs["ac_aport_iata_code"]).Trim() != modGlobalVars.cEmptyString)
					//{
						//sTmpStr = Convert.ToString(adoRs["ac_aport_iata_code"]).Trim();
						//Separator = " - ";
					//}
					//
					//if (Convert.ToString(adoRs["ac_aport_icao_code"]).Trim() != modGlobalVars.cEmptyString)
					//{
						//sTmpStr = $"{sTmpStr}{Separator}{Convert.ToString(adoRs["ac_aport_icao_code"]).Trim()}";
						//Separator = " - ";
					//}
					//
					//if (Convert.ToString(adoRs["ac_aport_faaid_code"]).Trim() != modGlobalVars.cEmptyString)
					//{
						//sTmpStr = $"{sTmpStr}{Separator}{Convert.ToString(adoRs["ac_aport_faaid_code"]).Trim()}";
						//Separator = " - ";
					//}
					//
					//if (Convert.ToString(adoRs["ac_aport_name"]).Trim() != modGlobalVars.cEmptyString)
					//{
						//sTmpStr = $"{sTmpStr}{Separator}{Convert.ToString(adoRs["ac_aport_name"]).Trim()}";
					//}
					//
					//if (Convert.ToString(adoRs["ac_aport_city"]).Trim() != modGlobalVars.cEmptyString)
					//{
						//sTmpStr = $"{sTmpStr}{Separator}{Convert.ToString(adoRs["ac_aport_city"]).Trim()}";
						//Separator = " - ";
					//}
					//
					//if (Convert.ToString(adoRs["ac_aport_state"]).Trim() != modGlobalVars.cEmptyString)
					//{
						//sTmpStr = $"{sTmpStr}{Separator}{Convert.ToString(adoRs["ac_aport_state"]).Trim()}";
						//Separator = " - ";
					//}
					//
					//if (Convert.ToString(adoRs["ac_aport_country"]).Trim() != modGlobalVars.cEmptyString)
					//{
						//sTmpStr = $"{sTmpStr}{Separator}{Convert.ToString(adoRs["ac_aport_country"]).Trim()}";
					//}
					//
					//result = $"{result} {sTmpStr}{Environment.NewLine}";
					//
					//result = $"{result} MFRYR :{Convert.ToString(adoRs["ac_mfr_year"]).Trim()}";
					//result = $"{result} SER :{Convert.ToString(adoRs["ac_ser_no_full"]).Trim()}";
					//result = $"{result} ALTSER :{Convert.ToString(adoRs["ac_alt_ser_no_full"]).Trim()}";
					//result = $"{result} REG :{Convert.ToString(adoRs["ac_reg_no"]).Trim()}";
					//result = $"{result} PRVREG :{Convert.ToString(adoRs["ac_prev_reg_no"]).Trim()}";
					//
					//adoRs.Close();
					//
				//}
				//
				//adoRs = null;
				//
			//}
			//
			//return result;
		//}

		private bool checkForAnyChanges2(ref string WhatChanged, ref bool bResults)
		{
			try
			{

				bFAAChanged = false;
				if (($"{temp_acfaa_reg_no0}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_reg_no[0].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_reg_no1}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_reg_no[1].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_reg_no2}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_reg_no[2].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_reg_no3}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_reg_no[3].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_reg_status0}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_reg_status[0].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_reg_status1}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_reg_status[1].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_reg_status2}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_reg_status[2].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_reg_status3}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_reg_status[3].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_party_comp_name0}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_party_comp_name[0].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_party_comp_name1}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_party_comp_name[1].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_party_comp_name2}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_party_comp_name[2].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_party_comp_name3}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_party_comp_name[3].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_party_comp_name4}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_party_comp_name[4].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_party_comp_name5}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_party_comp_name[5].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_party_comp_name6}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_party_comp_name[6].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_party_comp_name7}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_party_comp_name[7].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_party_comp_name8}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_party_comp_name[8].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_party_comp_name9}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_party_comp_name[9].Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (($"{temp_acfaa_notes}{modGlobalVars.cEmptyString}").Trim() != ($"{txt_acfaa_notes.Text}{modGlobalVars.cEmptyString}").Trim())
				{
					bFAAChanged = true;
				}

				if (bAvionicsChanged)
				{
					bResults = true;
					RememberWhatChanged = "Avionics";
					WhatChanged = $"{WhatChanged},Avionics";
				}
				if (bKeyFeaturesChanged)
				{
					bResults = true;
					RememberWhatChanged = "Key Features";
					WhatChanged = $"{WhatChanged},Key Feat";
				}
				if (bKeyFeature1)
				{
					bResults = true;
					RememberWhatChanged = "Key Feature 1";
					WhatChanged = $"{WhatChanged},Key Feat1";
					Add_To_Transmit_List("afeat_feature_status1");
				}
				if (bKeyFeature2)
				{
					bResults = true;
					RememberWhatChanged = "Key Feature 2";
					WhatChanged = $"{WhatChanged},Key Feat2";
					Add_To_Transmit_List("afeat_feature_status2");
				}
				if (bKeyFeature3)
				{
					bResults = true;
					RememberWhatChanged = "Key Feature 3";
					WhatChanged = $"{WhatChanged},Key Feat3";
					Add_To_Transmit_List("afeat_feature_status3");
				}
				if (bKeyFeature4)
				{
					bResults = true;
					RememberWhatChanged = "Key Feature 4";
					WhatChanged = $"{WhatChanged},Key Feat4";
					Add_To_Transmit_List("afeat_feature_status4");
				}
				if (bKeyFeature5)
				{
					bResults = true;
					RememberWhatChanged = "Key Feature 5";
					WhatChanged = $"{WhatChanged},Key Feat5";
					Add_To_Transmit_List("afeat_feature_status5");
				}
				if (bKeyFeature6)
				{
					bResults = true;
					RememberWhatChanged = "Key Feature 6";
					WhatChanged = $"{WhatChanged},Key Feat6";
					Add_To_Transmit_List("afeat_feature_status6");
				}
				if (bKeyFeatureDamage)
				{
					bResults = true;
					RememberWhatChanged = "Key Feature Damage";
					WhatChanged = $"{WhatChanged},Key Feat Damage";
					Add_To_Transmit_List("ac_damage_hist_flag");
				}
				if (bModificationsChanged)
				{
					RememberWhatChanged = "Modifications";
					WhatChanged = $"{WhatChanged},Mods";
					bResults = true;
				}
				if (bCertificationsChanged)
				{
					RememberWhatChanged = "Certifications";
					WhatChanged = $"{WhatChanged},Certs";
					bResults = true;
				}
				if (bFAAChanged)
				{
					RememberWhatChanged = "FAA";
					WhatChanged = $"{WhatChanged},FAA";
					bResults = true;
				}
				if (bLeaseChanged)
				{
					RememberWhatChanged = "Leases";
					WhatChanged = $"{WhatChanged},Leases";
					bResults = true;
				}
				if (bSpecificationsChanged)
				{
					RememberWhatChanged = "Specs";
					WhatChanged = $"{WhatChanged},Specs";
					bResults = true;
				}
				if (MaintenanceGridChanged)
				{
					if (MaintenanceInspectionChanged)
					{
						Add_To_Transmit_List("ac_inspection_notes1");
						Add_To_Transmit_List("ac_inspection_notes2");
						Add_To_Transmit_List("ac_inspection_notes3");
						MaintenanceInspectionChanged = false;
					}
					RememberWhatChanged = "Maintenance Grid";
					WhatChanged = $"{WhatChanged},Maint Grid";
					bResults = true;
				}
				if (InteriorGridChanged)
				{
					if (InteriorGeneralChanged)
					{
						Add_To_Transmit_List("ac_interior_description1");
						Add_To_Transmit_List("ac_interior_description2");
						Add_To_Transmit_List("ac_interior_description3");
						InteriorGeneralChanged = false;
					}
					if (InteriorLavatoryChanged)
					{
						Add_To_Transmit_List("ac_lavatory");
						InteriorLavatoryChanged = false;
					}
					if (InteriorAirConditioningChanged)
					{
						Add_To_Transmit_List("ac_air_conditioning");
						InteriorAirConditioningChanged = false;
					}
					RememberWhatChanged = "Interior Grid";
					WhatChanged = $"{WhatChanged},Int Grid";
					bResults = true;
				}
				if (ExteriorGridChanged)
				{
					if (ExteriorColorsChanged)
					{
						Add_To_Transmit_List("ac_exterior_description");
						ExteriorColorsChanged = false;
					}
					RememberWhatChanged = "Exterior Grid";
					bResults = true;
					WhatChanged = $"{WhatChanged},Ext Grid";
				}
				if (EquipmentGridChanged)
				{
					if (EquipmentGeneralChanged)
					{
						Add_To_Transmit_List("ac_equip_add_description");
						Add_To_Transmit_List("ac_equip_add_description2");
						Add_To_Transmit_List("ac_equip_add_description3");
						Add_To_Transmit_List("ac_equip_add_description4");
						EquipmentGeneralChanged = false;
					}
					RememberWhatChanged = "Equipment Grid";
					bResults = true;
					WhatChanged = $"{WhatChanged},Equ Grid";
				}
				if (CockpitGridChanged)
				{
					if (CockpitGeneralChanged)
					{
						Add_To_Transmit_List("ac_addl_cockpit_equip_description1");
						Add_To_Transmit_List("ac_addl_cockpit_equip_description2");
						Add_To_Transmit_List("ac_addl_cockpit_equip_description3");
						CockpitGeneralChanged = false;
					}
					RememberWhatChanged = "Cockpit Grid";
					bResults = true;
					WhatChanged = $"{WhatChanged},Cockpit Grid";
				}
			}
			catch (System.Exception excep)
			{

				bResults = false;
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"CheckForAnyChanges2_Error: {WhatChanged} ({Information.Err().Number.ToString()}) {excep.Message}");
			}

			return false;
		}

		private bool CheckForAnyChanges(ref string reg_no_issue, ref string old_reg_no, ref string WhatChanged_return, ref bool sold_Was_blank, ref int old_sold_price, ref string original_usage, ref bool insert_8week)
		{
			// **************************************************************************
			//
			// PURPOSE: THE PURPOSE OF THIS FUNCTION IS TO IDENTIFY CHANGES THAT OCCURED
			//          WHILE EDITING AN AIRCRAFT RECORD AND DETERMINE IF THE CHANGES
			//          REQUIRE TRANSMITS FOR THE WINDOWS BASED PRODUCT.
			// MODIFIED: RICK WANNER - 11/5/02 - ADDED DOCUMENTATION
			// **************************************************************************

			bool result = false;
			string strError = "";
			string WhatChanged = "";
			try
			{

				string strStripDate = "";
				string Query = "";
				ADORecordSetHelper snpMakeName = null;
				string tmpMakeName = "";
				object lAltSerNbrValue = null; //3/31/05 aey   ' 04/08/2004 - By David D. Cruger
				bool bResults = false; // 04/08/2004 - By David D. Cruger //5/24/04 aey message used to narrow down error location
				string use_code = "";
				string tmp = "";
				int amod_id = 0;
				string strTempAltSerialNum = "";
				string strTemp = "";
				string prev_use_code = "";

				arr_Transmit_Fields = new string[]{""};

				arr_Transmit_Fields[0] = modGlobalVars.cEmptyString;
				WhatChanged = modGlobalVars.cEmptyString;

				AskingPriceChanged = false;
				MakeOfferPriceChanged = false;
				bResults = false;
				Transmit_Change_Flag = false;
				RememberWhatChanged = modGlobalVars.cEmptyString;
				strError = "is it open";

				if (adoAircraftRecordset.State == ConnectionState.Closed)
				{ //aey 5/27/04
					return false;
				}

				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} Ser state:{Conversion.Str(adoAircraftRecordset.State)}";

				// CLEAR THE ACTION DATE

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				adoAircraftRecordset["ac_action_date"] = DBNull.Value;

				// HAS AIRCRAFT ID CHANGED
				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} change";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_id"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},ac_id";
					adoAircraftRecordset["ac_id"] = Conversion.Val(txt_ac_id.Text);
				} // IF AIRCRAFT ID CHANGED

				// HAS AIRCRAFT MODEL CHANGED
				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} Model-a";
				if (cbo_amod_make_name.SelectedIndex < 0)
				{ //aey 6/4/04
					strError = $"cbo_amod_make_name.ListIndex <0 AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} jid:{Convert.ToString(adoAircraftRecordset["ac_journ_id"])} mk:{cbo_amod_make_name.Text}";
					throw new Exception(); //aey 6/21/04
				}

				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} Model-b";

				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_amod_id"])}").Trim() != ($"{modGlobalVars.cEmptyString}{cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex).ToString()}").Trim())
				{
					strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} Model -";

					// MAKE SURE THAT THE SERIAL NUMBER IS UNIQUE FOR THE NEW MODEL
					Query = $"SELECT ac_id FROM Aircraft WHERE ac_ser_no_full = '{txt_ac_ser_no[0].Text.Trim()}{Hyphen}{txt_ac_ser_no[1].Text.Trim()}{txt_ac_ser_no[2].Text.Trim()}'";
					Query = $"{Query} AND ac_amod_id = {($"{modGlobalVars.cEmptyString}{cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex).ToString()}").Trim()}";
					Query = $"{Query} AND ac_journ_id = {($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}").Trim()}";
					Query = $"{Query} and ac_id <> {txt_ac_id.Text}  "; //aey 3/25/05
					if (modAdminCommon.Exist(Query))
					{
						MessageBox.Show("Serial Number Already Exists For This Model on a different Aircraft", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
						txt_ac_ser_no[1].Focus();
						result = false;
						AnsweredCancel = true;
						return result;
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},amod_id";
					ModelChanged = true;

					MakeChanged = false;

					Query = $"SELECT amod_make_name FROM Aircraft_Model WHERE amod_id = {Convert.ToString(adoAircraftRecordset["ac_amod_id"])}";

					snpMakeName = new ADORecordSetHelper();
					snpMakeName.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockOptimistic);

					if (!(snpMakeName.BOF && snpMakeName.EOF))
					{
						snpMakeName.MoveFirst();
						tmpMakeName = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snpMakeName["amod_make_name"])}").Trim();
					}

					snpMakeName.Close();

					strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} Make Name:{tmpMakeName}";

					Query = "SELECT amod_make_name ";
					Query = $"{Query}FROM Aircraft_Model ";
					Query = $"{Query}WHERE amod_id = {cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex).ToString()}";
					snpMakeName.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockOptimistic);

					if (!(snpMakeName.BOF && snpMakeName.EOF))
					{
						snpMakeName.MoveFirst();
						if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snpMakeName["amod_make_name"])}").Trim().ToLower() != ($"{modGlobalVars.cEmptyString}{tmpMakeName}").Trim().ToLower())
						{
							MakeChanged = true;
						}
					}

					snpMakeName.Close();
					snpMakeName = null;
					adoAircraftRecordset["ac_amod_id"] = cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex);
				}
				else
				{
					strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} Mod/Mdl NC";
					ModelChanged = false;
					MakeChanged = false;
				} // IF MODEL CHANGED

				// HAS THE LIST DATE CHANGED
				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} List Date";

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_list_date"]) && Information.IsDate(txt_ac_list_date.Text))
				{
					if (DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_list_date"]).Trim()) != DateTime.Parse(txt_ac_list_date.Text.Trim()))
					{

						if (Information.IsDate(txt_ac_list_date.Text))
						{
							adoAircraftRecordset["ac_list_date"] = DateTime.Parse(txt_ac_list_date.Text.Trim()).ToString("d");
						}
						else
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							adoAircraftRecordset["ac_list_date"] = DBNull.Value;
						}
						bResults = true;
						WhatChanged = $"{WhatChanged},List Date";
						Add_To_Transmit_List("ac_list_date");
					} // IF LIST DATE CHANGED

				}
				else
				{
					if (Information.IsDate(txt_ac_list_date.Text))
					{
						adoAircraftRecordset["ac_list_date"] = DateTime.Parse(txt_ac_list_date.Text.Trim()).ToString("d");
						bResults = true;
						WhatChanged = $"{WhatChanged},List Date";
						Add_To_Transmit_List("ac_list_date");
					}
					else
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_list_date"] = DBNull.Value;
					}
				} // IF LIST DATE CHANGED

				// HAS THE JOURNAL ID CHANGED - SHOULD NOT HAVE
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}").Trim() != ($"{modGlobalVars.cEmptyString}{tmp_ac_journ_id.ToString()}").Trim())
				{
					strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} JournID";
					bResults = true;
					WhatChanged = $"{WhatChanged},journ_id";
					adoAircraftRecordset["ac_journ_id"] = tmp_ac_journ_id;
				} // IF JOURNAL ID CHANGED

				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()}eng Name";

				// HAS THE ENGINE NAME CHANGED
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_engine_name"]))
				{ // check for null value if null update field with value from control
					if (Convert.ToString(adoAircraftRecordset["ac_engine_name"]).Trim().ToUpper() != cbo_ac_engine_name.Text.Trim().ToUpper())
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},Eng Name";

						Add_To_Transmit_List("ac_engine_name");
						//post engine change to event log
						modAdminCommon.Record_Event("CENGN", $"Aircraft Engine Changed from {Convert.ToString(adoAircraftRecordset["ac_engine_name"])} to {cbo_ac_engine_name.Text}", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0);

						adoAircraftRecordset["ac_engine_name"] = cbo_ac_engine_name.Text.Trim();
						adoAircraftRecordset["ac_engine_name_search"] = StringsHelper.Replace(cbo_ac_engine_name.Text.Trim(), modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);

					}
				}
				else
				{
					// we had a null value to check for changes against so update the field with the data from the control
					if (cbo_ac_engine_name.Text.Trim() != modGlobalVars.cEmptyString)
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},Eng Name";

						Add_To_Transmit_List("ac_engine_name");
						//post engine change to event log
						modAdminCommon.Record_Event("CENGN", $"Aircraft Engine Changed from {Convert.ToString(adoAircraftRecordset["ac_engine_name"])} to {cbo_ac_engine_name.Text}", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0);

						adoAircraftRecordset["ac_engine_name"] = cbo_ac_engine_name.Text.Trim();
						adoAircraftRecordset["ac_engine_name_search"] = StringsHelper.Replace(cbo_ac_engine_name.Text.Trim(), modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);

					}
				}

				// IF THE CURRENT AIRCRAFT RECORD IS HISTORICAL
				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} Hist";

				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0)
				{
					//-----------------------------------------
					// 06/27/2008 - By David D. Cruger - Changed pf_ValidateDate to True -Date Can Equal Today
					//-----------------------------------------
					if (modCommon.pf_ValidateDate(txtHistoryDate.Text, true))
					{
						if (((int) DateAndTime.DateDiff("d", DateTime.Parse(modAdminCommon.DateToday), DateTime.Parse(txtHistoryDate.Text), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1)) > 0)
						{ //future dates not allowed - aey 12/9/04
							MessageBox.Show("Invalid as-of Date entered. Restoring original date", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
							txtHistoryDate.Text = RememberHistoryDate;
						}
						else
						{
							if (((int) DateAndTime.DateDiff("d", DateTime.Parse(txtHistoryDate.Text), DateTime.Parse(RememberHistoryDate), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1)) != 0)
							{

								if (modCommon.pf_ValidateDate(txt_ac_list_date.Text, true))
								{
									if (((int) DateAndTime.DateDiff("d", DateTime.Parse(txt_ac_list_date.Text), DateTime.Parse(txtHistoryDate.Text), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1)) >= 0)
									{
										if (MessageBox.Show("Are you sure you want to change the transaction date?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
										{
											ChangeTransactionDate();
										}
									}
									else
									{
										MessageBox.Show($"The Transaction Date is less than the Date Listed for Sale{Environment.NewLine}The Transacton Cannot be Saved{Environment.NewLine}It is recommend that you Delete this Transaction and Insert a new Historical Transaction", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));

									}
								}
								else
								{
									if (MessageBox.Show("Are you sure you want to change the transaction date?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
									{
										ChangeTransactionDate();
									}
								}
							} // IF TRANSACTION DATE HAS CHANGED
						}
					}
					else
					{
						MessageBox.Show($"Historical Transaction Date Invalid{Environment.NewLine}Transaction Date Will Not Be Changed", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					} // IF SCREEN HAS A VALID TRANSACTION DATE
				} // IF HISTORICAL AIRCRAFT RECORD

				// HAS THE ENGINE MAINTENANCE PROGRAM CHANGED
				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} EM";

				if (cbo_ac_engine_maint_prog.SelectedIndex >= 0)
				{
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_engine_maintenance_prog_EMP"]))
					{ // check for null value if null update field with value from control
						if (Convert.ToDouble(adoAircraftRecordset["ac_engine_maintenance_prog_EMP"]) != Convert.ToDouble(cbo_ac_engine_maint_prog.GetItemData(cbo_ac_engine_maint_prog.SelectedIndex)))
						{
							bResults = true;
							WhatChanged = $"{WhatChanged},E Maint";
							Add_To_Transmit_List("ac_engine_maint_prog");
							adoAircraftRecordset["ac_engine_maintenance_prog_EMP"] = cbo_ac_engine_maint_prog.GetItemData(cbo_ac_engine_maint_prog.SelectedIndex);
							adoAircraftRecordset["ac_engine_maint_prog"] = cbo_ac_engine_maint_prog.Text.Trim().Substring(Math.Min(0, cbo_ac_engine_maint_prog.Text.Trim().Length), Math.Min(1, Math.Max(0, cbo_ac_engine_maint_prog.Text.Trim().Length))).ToUpper();
						}
					}
					else
					{
						// we had a null value to check for changes against so update the field with the data from the control
						if (cbo_ac_engine_maint_prog.Text != modGlobalVars.cEmptyString)
						{
							bResults = true;
							WhatChanged = $"{WhatChanged},E Maint";
							Add_To_Transmit_List("ac_engine_maint_prog");
							adoAircraftRecordset["ac_engine_maintenance_prog_EMP"] = cbo_ac_engine_maint_prog.GetItemData(cbo_ac_engine_maint_prog.SelectedIndex);
							adoAircraftRecordset["ac_engine_maint_prog"] = cbo_ac_engine_maint_prog.Text.Trim().Substring(Math.Min(0, cbo_ac_engine_maint_prog.Text.Trim().Length), Math.Min(1, Math.Max(0, cbo_ac_engine_maint_prog.Text.Trim().Length))).ToUpper();
						}
					}
				}

				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} Used";

				if ((chk_ac_aport_private[1].CheckState == CheckState.Checked && ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_previously_owned_flag"])}").Trim().ToUpper() != "Y") || (chk_ac_aport_private[1].CheckState == CheckState.Unchecked && ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_previously_owned_flag"])}").Trim().ToUpper() == "Y"))
				{

					strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} Used -";
					bResults = true;
					WhatChanged = $"{WhatChanged},Previous Own Flag";
					if (chk_ac_aport_private[1].CheckState == CheckState.Checked)
					{
						adoAircraftRecordset["ac_previously_owned_flag"] = "Y";
					}
					else
					{
						adoAircraftRecordset["ac_previously_owned_flag"] = "N";
					}

				}


				// added msw 2/27/17
				// if we are currently retired, but the status hasnt changed,
				// if the state was previously stage 3 - in operation
				if (cbo_ac_stage.Text == "4 - Retired" && cbo_ac_status.Text == Convert.ToString(adoAircraftRecordset["ac_status"]).Trim())
				{
					if (Convert.ToString(adoAircraftRecordset["ac_lifecycle_stage"]).Trim() == "3")
					{
						insert_8week = true;
					}
				}



				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} SN"; // HAS THE ENGINE SERIAL NUMBER 1 CHANGED
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_1_ser_no"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_engine_ser_no[0].Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},eng1 ser no";
					Add_To_Transmit_List("ac_engine_1_ser_no");
					adoAircraftRecordset["ac_engine_1_ser_no"] = StringsHelper.Replace(StringsHelper.Replace(txt_ac_engine_ser_no[0].Text.Trim(), modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary), " ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);
				} // IF ENGINE SERIAL NUMBER 1 CHANGED

				// HAS THE ENGINE SERIAL NUMBER 2 CHANGED
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_2_ser_no"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_engine_ser_no[1].Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},eng2 ser no";
					Add_To_Transmit_List("ac_engine_2_ser_no");
					adoAircraftRecordset["ac_engine_2_ser_no"] = StringsHelper.Replace(StringsHelper.Replace(txt_ac_engine_ser_no[1].Text.Trim(), modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary), " ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);
				} // IF ENGINE SERIAL NUMBER 2 CHANGED

				// HAS THE ENGINE SERIAL NUMBER 3 CHANGED
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_3_ser_no"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_engine_ser_no[2].Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},eng3 ser no";
					Add_To_Transmit_List("ac_engine_3_ser_no");
					adoAircraftRecordset["ac_engine_3_ser_no"] = StringsHelper.Replace(StringsHelper.Replace(($"{txt_ac_engine_ser_no[2].Text}{modGlobalVars.cEmptyString}").Trim(), modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary), " ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);
				} // IF ENGINE SERIAL NUMBER 3 CHANGED

				// HAS THE ENGINE SERIAL NUMBER 4
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_4_ser_no"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_engine_ser_no[3].Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},eng4 ser no";
					Add_To_Transmit_List("ac_engine_4_ser_no");
					adoAircraftRecordset["ac_engine_4_ser_no"] = StringsHelper.Replace(StringsHelper.Replace(($"{txt_ac_engine_ser_no[3].Text}{modGlobalVars.cEmptyString}").Trim(), modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary), " ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);
				} // IF ENGINE SERIAL NUMBER 4 CHANGED


				//Main Tab - From textbox labeled "Times/Values Current As of:DD/MM/YYYY"
				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} TimesOf";

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_times_as_of_date"]) && Information.IsDate(txt_ac_times_as_of_date.Text.Trim()))
				{

					if (DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_times_as_of_date"]).Trim()) != DateTime.Parse(txt_ac_times_as_of_date.Text.Trim()))
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},times as of";
						Add_To_Transmit_List("ac_times_as_of_date");
						if (Information.IsDate(txt_ac_times_as_of_date.Text.Trim()))
						{
							adoAircraftRecordset["ac_times_as_of_date"] = DateTime.Parse(txt_ac_times_as_of_date.Text.Trim()).ToString("d");
						}
						else
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							adoAircraftRecordset["ac_times_as_of_date"] = DBNull.Value;
						}
					}

				}
				else
				{
					if (Information.IsDate(txt_ac_times_as_of_date.Text.Trim()))
					{
						adoAircraftRecordset["ac_times_as_of_date"] = DateTime.Parse(txt_ac_times_as_of_date.Text.Trim()).ToString("d");
						bResults = true;
						WhatChanged = $"{WhatChanged},times as of";
						Add_To_Transmit_List("ac_times_as_of_date");
					}
					else
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_times_as_of_date"] = DBNull.Value;
					}
				} // IF TIMES AS OF DATE CHANGED

				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} eng mgmt prog {cbo_ac_engine_management_prog_EMGP.SelectedIndex.ToString()}";
				if (cbo_ac_engine_management_prog_EMGP.SelectedIndex >= 0)
				{
					if ((Double.Parse($"0{($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_management_prog_EMGP"])}").Trim()}")) != cbo_ac_engine_management_prog_EMGP.GetItemData(cbo_ac_engine_management_prog_EMGP.SelectedIndex))
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},emgp";
						adoAircraftRecordset["ac_engine_management_prog_EMGP"] = cbo_ac_engine_management_prog_EMGP.GetItemData(cbo_ac_engine_management_prog_EMGP.SelectedIndex);
					}
				}

				// HAS THE AC MAINTAINED FIELD BEEN CHANGED
				strError = $"AC#{txt_ac_id.Text.Trim()} warranty {cbo_ac_warranty_notes.Text}";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_maintained"])}").Trim() != cbo_ac_warranty_notes.Text.Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},maintained";
					//      Call Add_To_Transmit_List("ac_warranty_notes")
					adoAircraftRecordset["ac_maintained"] = cbo_ac_warranty_notes.Text.Trim();
				} // IF AC MAINTAINED

				// HAS ENGINE 1 TOTAL HOURS CHANGED
				strError = $"AC#{txt_ac_id.Text.Trim()}engine 1 t hrs";
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_1_tot_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_tot_hrs[0].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_tot_hrs[0].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_1_tot_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_1_tot_hrs"] = StringsHelper.Format(txt_ac_engine_tot_hrs[0].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng1 tot hrs";
					Add_To_Transmit_List("ac_engine_1_tot_hrs");
				} // IF ENGINE 1 TOTAL HOURS CHANGED

				// HAS ENGINE 2 TOTAL HOURS CHANGED
				strError = $"AC#{txt_ac_id.Text.Trim()}engine 2 t hrs";
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_2_tot_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_tot_hrs[1].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_tot_hrs[1].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_2_tot_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_2_tot_hrs"] = StringsHelper.Format(txt_ac_engine_tot_hrs[1].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng2 tot hrs";
					Add_To_Transmit_List("ac_engine_2_tot_hrs");
				} // IF ENGINE 2 TOTAL HOURS CHANGED

				// HAS ENGINE 3 TOTAL HOURS CHANGED
				strError = $"AC#{txt_ac_id.Text.Trim()}engine 3 t hrs";
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_3_tot_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_tot_hrs[2].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_tot_hrs[2].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_3_tot_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_3_tot_hrs"] = StringsHelper.Format(txt_ac_engine_tot_hrs[2].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng3 tot hrs";
					Add_To_Transmit_List("ac_engine_3_tot_hrs");
				} // IF ENGINE 3 TOTAL HOURS

				strError = $"AC#{txt_ac_id.Text.Trim()}engine 4 t hrs"; // HAS ENGINE 4 TOTAL HOURS CHANGED
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_4_tot_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_tot_hrs[3].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_tot_hrs[3].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_4_tot_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_4_tot_hrs"] = StringsHelper.Format(txt_ac_engine_tot_hrs[3].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng4 tot hrs";
					Add_To_Transmit_List("ac_engine_4_tot_hrs");
				} // IF ENGINE 4 TOTAL HOURS HAS CHANGED

				strError = $"AC#{txt_ac_id.Text.Trim()} SOH"; // HAS ENGINE 1 SOH HOURS
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_1_soh_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_soh_hrs[0].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_soh_hrs[0].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_1_soh_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_1_soh_hrs"] = StringsHelper.Format(txt_ac_engine_soh_hrs[0].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng1 soh hrs";
					Add_To_Transmit_List("ac_engine_1_soh_hrs");
				} // IF ENGINE 1 SOH HOURS HAS CHANGED

				// HAS ENGINE 2 SOH HOURS
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_2_soh_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_soh_hrs[1].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_soh_hrs[1].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_2_soh_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_2_soh_hrs"] = StringsHelper.Format(txt_ac_engine_soh_hrs[1].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng2 soh hrs";
					Add_To_Transmit_List("ac_engine_2_soh_hrs");
				} // IF ENGINE 2 SOH HOURS HAS CHANGED

				// HAS ENGINE 3 SOH HOURS
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_3_soh_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_soh_hrs[2].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_soh_hrs[2].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_3_soh_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_3_soh_hrs"] = StringsHelper.Format(txt_ac_engine_soh_hrs[2].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng3 soh hrs";
					Add_To_Transmit_List("ac_engine_3_soh_hrs");
				} // IF ENGINE 3 SOH HOURS HAS CHANGED

				// HAS ENGINE 4 SOH HOURS
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_4_soh_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_soh_hrs[3].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_soh_hrs[3].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_4_soh_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_4_soh_hrs"] = StringsHelper.Format(txt_ac_engine_soh_hrs[3].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng4 soh hrs";
					Add_To_Transmit_List("ac_engine_4_soh_hrs");
				} // IF ENGINE 4 SOH HOURS HAS CHANGED

				//Main Tab - From textbox column 4 labeled "Since Hot Inspection (SHI/SMPI) Hours" Row 1 labeled "Engine 1"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_1_shi_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_shi_hrs[0].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_shi_hrs[0].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_1_shi_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_1_shi_hrs"] = StringsHelper.Format(txt_ac_engine_shi_hrs[0].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng1 shi hrs";
					Add_To_Transmit_List("ac_engine_1_shi_hrs");
				}

				//Main Tab - From textbox column 4 labeled "Since Hot Inspection (SHI/SMPI) Hours" Row 2 labeled "Engine 2"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_2_shi_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_shi_hrs[1].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_shi_hrs[1].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_2_shi_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_2_shi_hrs"] = StringsHelper.Format(txt_ac_engine_shi_hrs[1].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng2 shi hrs";
					Add_To_Transmit_List("ac_engine_2_shi_hrs");
				}

				//Main Tab - From textbox column 4 labeled "Since Hot Inspection (SHI/SMPI) Hours" Row 3 labeled "Engine 3"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_3_shi_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_shi_hrs[2].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_shi_hrs[2].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_3_shi_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_3_shi_hrs"] = StringsHelper.Format(txt_ac_engine_shi_hrs[2].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng3 shi hrs";
					Add_To_Transmit_List("ac_engine_3_shi_hrs");
				}

				//Main Tab - From textbox column 4 labeled "Since Hot Inspection (SHI/SMPI) Hours" Row 4 labeled "Engine 4"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_4_shi_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_shi_hrs[3].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_shi_hrs[3].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_4_shi_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_4_shi_hrs"] = StringsHelper.Format(txt_ac_engine_shi_hrs[3].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng4 shi hrs";
					Add_To_Transmit_List("ac_engine_4_shi_hrs");
				}

				//Main Tab - From textbox column 5 labeled "Time Between Overhaul (TBO/TBCI) Hours" Row 1 labeled "Engine 1"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_1_tbo_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_tbo_hrs[0].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_tbo_hrs[0].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_1_tbo_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_1_tbo_hrs"] = StringsHelper.Format(txt_ac_engine_tbo_hrs[0].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng1 tbo hrs";
					Add_To_Transmit_List("ac_engine_1_tbo_hrs");
				}

				//Main Tab - From textbox column 5 labeled "Time Between Overhaul (TBO/TBCI) Hours" Row 2 labeled "Engine 2"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_2_tbo_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_tbo_hrs[1].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_tbo_hrs[1].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_2_tbo_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_2_tbo_hrs"] = StringsHelper.Format(txt_ac_engine_tbo_hrs[1].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng2 tbo hrs";
					Add_To_Transmit_List("ac_engine_2_tbo_hrs");
				}

				//Main Tab - From textbox column 5 labeled "Time Between Overhaul (TBO/TBCI) Hours" Row 3 labeled "Engine 3"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_3_tbo_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_tbo_hrs[2].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_tbo_hrs[2].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_3_tbo_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_3_tbo_hrs"] = StringsHelper.Format(txt_ac_engine_tbo_hrs[2].Text.Trim(), "###,###,##0");
					}
					WhatChanged = $"{WhatChanged},eng3 tbo hrs";
					bResults = true;
					Add_To_Transmit_List("ac_engine_3_tbo_hrs");
				}

				//Main Tab - From textbox column 5 labeled "Time Between Overhaul (TBO/TBCI) Hours" Row 4 labeled "Engine 4"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_4_tbo_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_tbo_hrs[3].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_tbo_hrs[3].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_4_tbo_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_4_tbo_hrs"] = StringsHelper.Format(txt_ac_engine_tbo_hrs[3].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng4 tbo hrs";
					Add_To_Transmit_List("ac_engine_4_tbo_hrs");
				}

				//Main Tab - From textbox column 6 labeled "Total Cycles Since New" Row 1 labeled "Engine 1"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_1_snew_cycles"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_snew_cycles[0].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_snew_cycles[0].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_1_snew_cycles"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_1_snew_cycles"] = txt_ac_engine_snew_cycles[0].Text.Trim();
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng1 snew hrs";
				}

				//Main Tab - From textbox column 6 labeled "Total Cycles Since New" Row 2 labeled "Engine 2"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_2_snew_cycles"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_snew_cycles[1].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_snew_cycles[1].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_2_snew_cycles"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_2_snew_cycles"] = txt_ac_engine_snew_cycles[1].Text.Trim();
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng2 snew hrs";
				}

				//Main Tab - From textbox column 6 labeled "Total Cycles Since New" Row 3 labeled "Engine 3"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_3_snew_cycles"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_snew_cycles[2].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_snew_cycles[2].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_3_snew_cycles"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_3_snew_cycles"] = txt_ac_engine_snew_cycles[2].Text.Trim();
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng3 snew hrs";
				}

				//Main Tab - From textbox column 6 labeled "Total Cycles Since New" Row 4 labeled "Engine 4"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_4_snew_cycles"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_snew_cycles[3].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_snew_cycles[3].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_4_snew_cycles"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_4_snew_cycles"] = txt_ac_engine_snew_cycles[3].Text.Trim();
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng4snew hrs";
				}

				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_private"])}").Trim().ToUpper() == "Y" && chk_ac_aport_private[0].CheckState == CheckState.Unchecked)
				{
					adoAircraftRecordset["ac_aport_private"] = "N";
					bResults = true;
					Add_To_Transmit_List("ac_aport_code");
					Add_To_Transmit_List("ac_aport_name");
					Add_To_Transmit_List("ac_aport_state");
				}

				if ((($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_private"])}").Trim().ToUpper() == "N" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_private"])}").Trim() == modGlobalVars.cEmptyString) && chk_ac_aport_private[0].CheckState == CheckState.Checked)
				{
					adoAircraftRecordset["ac_aport_private"] = "Y";
					bResults = true;
					WhatChanged = $"{WhatChanged},private aport";
					Add_To_Transmit_List("ac_aport_code");
					Add_To_Transmit_List("ac_aport_name");
					Add_To_Transmit_List("ac_aport_state");
				}

				// ADDED in MSW - to save if the AC_APORT_ID has changed-------------------------------------------
				// added FAA ID in
				if (txtIATACode.Text.Trim() == "" && txtICAOCode.Text.Trim() == "" && txtFAAIDCode.Text.Trim() == "")
				{
					txtIATACode.Tag = "0";
				}


				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_id"])}").Trim() != Convert.ToString(txtIATACode.Tag).Trim())
				{
					if (Convert.ToString(txtIATACode.Tag).Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_aport_id"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_aport_id"] = Convert.ToString(txtIATACode.Tag).Trim();
					}

					bResults = true;

					if (bResults)
					{
						WhatChanged = $"{WhatChanged},aport_id";
						tmpBaseCodeChanged = true;
						Add_To_Transmit_List("ac_aport_id");
					}
				}


				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_aport_iata_code"]))
				{ // check for null value if null update field with value from control
					if (Convert.ToString(adoAircraftRecordset["ac_aport_iata_code"]) != modGlobalVars.cEmptyString)
					{
						tmpOldBaseName = Convert.ToString(adoAircraftRecordset["ac_aport_iata_code"]).Trim();
					}
				}

				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_iata_code"])}").Trim() != txtIATACode.Text.Trim())
				{
					if (txtIATACode.Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_aport_iata_code"] = DBNull.Value;
						bResults = true;
					}
					else
					{

						if (modAdminCommon.Exist($"SELECT aport_id FROM Airport WITH (NOLOCK) WHERE aport_iata_code = '{txtIATACode.Text.Trim()}'"))
						{
							adoAircraftRecordset["ac_aport_iata_code"] = txtIATACode.Text.Trim();
							bResults = true;
						}

					}

					if (bResults)
					{
						WhatChanged = $"{WhatChanged},iata";
						tmpBaseCodeChanged = true;
						Add_To_Transmit_List("ac_aport_code");
					}
				}

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_aport_icao_code"]))
				{ // check for null value if null update field with value from control
					if (Convert.ToString(adoAircraftRecordset["ac_aport_icao_code"]) != modGlobalVars.cEmptyString)
					{
						tmpOldBaseName = $"{tmpOldBaseName} - {($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_icao_code"])}").Trim()}";
					}
				}

				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_icao_code"])}").Trim() != txtICAOCode.Text.Trim())
				{
					if (txtICAOCode.Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_aport_icao_code"] = DBNull.Value;
						bResults = true;
					}
					else
					{
						if (modAdminCommon.Exist($"SELECT aport_id FROM Airport WITH (NOLOCK) WHERE aport_icao_code = '{txtICAOCode.Text.Trim()}'"))
						{
							adoAircraftRecordset["ac_aport_icao_code"] = txtICAOCode.Text.Trim();
							bResults = true;
						}
					}

					if (bResults)
					{
						WhatChanged = $"{WhatChanged},icao";
						tmpBaseCodeChanged = true;
						Add_To_Transmit_List("ac_aport_code");
					}
				}

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_aport_faaid_code"]))
				{ // check for null value if null update field with value from control
					if (Convert.ToString(adoAircraftRecordset["ac_aport_faaid_code"]) != modGlobalVars.cEmptyString)
					{
						tmpOldBaseName = $"{tmpOldBaseName} - {($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_faaid_code"])}").Trim()}";
					}
				}

				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_faaid_code"])}").Trim() != txtFAAIDCode.Text.Trim())
				{
					if (txtFAAIDCode.Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_aport_faaid_code"] = DBNull.Value;
						bResults = true;
					}
					else
					{
						if (modAdminCommon.Exist($"SELECT aport_id FROM Airport WITH (NOLOCK) WHERE aport_faaid_code = '{txtFAAIDCode.Text.Trim()}'"))
						{
							adoAircraftRecordset["ac_aport_faaid_code"] = txtFAAIDCode.Text.Trim();
							bResults = true;
						}
					}

					if (bResults)
					{
						WhatChanged = $"{WhatChanged},faaid";
						tmpBaseCodeChanged = true;
						// NO THE FAAID Does NOT Get Added To Transmit
						// Add_To_Transmit_List "ac_aport_code"
					}
				}

				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_city"])}").Trim() != txtBaseCity.Text.Trim())
				{
					if (txtBaseCity.Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_aport_city"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_aport_city"] = txtBaseCity.Text.Trim();
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},aport city";

					Add_To_Transmit_List("ac_aport_state");
				}

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_aport_name"]))
				{ // check for null value if null update field with value from control
					if (Convert.ToString(adoAircraftRecordset["ac_aport_name"]) != modGlobalVars.cEmptyString)
					{
						tmpOldBaseName = $"{tmpOldBaseName} - {($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_name"])}").Trim()}";
					}
				}

				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_name"])}").Trim() != txtBaseAirportName.Text.Trim())
				{
					if (txtBaseAirportName.Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_aport_name"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_aport_name"] = txtBaseAirportName.Text.Trim();
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},aport name";

					Add_To_Transmit_List("ac_aport_name");
				}

				// changed all to be 4, msw - 9/27/23
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_state"])}").Trim().ToUpper() != cboBaseState.Text.Trim().Substring(0, Math.Min(4, cboBaseState.Text.Trim().Length)).ToUpper())
				{
					if (cboBaseState.Text.Trim().StartsWith(modGlobalVars.cEmptyString, StringComparison.Ordinal))
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_aport_state"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_aport_state"] = cboBaseState.Text.Trim().Substring(0, Math.Min(4, cboBaseState.Text.Trim().Length)); // changed 3 to 4 - MSW - 9/27/23
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},aport state";

					Add_To_Transmit_List("ac_aport_state");
				}

				if (modAdminCommon.Fix_Quote(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_country"])}").Trim()).ToLower() != modAdminCommon.Fix_Quote(cboBaseCountry.Text).Trim().ToLower())
				{
					if (cboBaseCountry.Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_aport_country"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_aport_country"] = cboBaseCountry.Text.Trim();
						//adoAircraftRecordset!ac_aport_country = Trim$(Fix_Quote(cboBaseCountry.Text)) ' changed to remove tick replace, 4/6/23
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},aport country";

					Add_To_Transmit_List("ac_aport_state");
				}

				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_country_of_registration"])}").Trim().ToLower() != cbo_ac_country_of_registration.Text.Trim().ToLower())
				{
					//  If Not (LCase$(Trim$(cEmptyString & adoAircraftRecordset!ac_country_of_registration)) = LCase$(Trim$(Fix_Quote(cbo_ac_country_of_registration.Text)))) Then

					//12/09/05 aey
					if (cbo_ac_country_of_registration.Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_country_of_registration"] = DBNull.Value;
					}
					else
					{
						// adoAircraftRecordset!ac_country_of_registration = Trim$(Fix_Quote(cbo_ac_country_of_registration.Text))
						adoAircraftRecordset["ac_country_of_registration"] = cbo_ac_country_of_registration.Text.Trim(); // changed MSW to not put in double ticks
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},cntry of reg";

				}

				//Main Tab - From textbox column 7 labeled "Total Cycles Since Overhaul" Row 1 labeled "Engine 1"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_1_soh_cycles"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_soh_cycles[0].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_soh_cycles[0].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_1_soh_cycles"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_1_soh_cycles"] = StringsHelper.Format(txt_ac_engine_soh_cycles[0].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng1 soh cycles";
				}

				//Main Tab - From textbox column 7 labeled "Total Cycles Since Overhaul" Row 2 labeled "Engine 2"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_2_soh_cycles"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_soh_cycles[1].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_soh_cycles[1].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_2_soh_cycles"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_2_soh_cycles"] = StringsHelper.Format(txt_ac_engine_soh_cycles[1].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng2 soh cycles";
				}

				//Main Tab - From textbox column 7 labeled "Total Cycles Since Overhaul" Row 3 labeled "Engine 3"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_3_soh_cycles"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_soh_cycles[2].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_soh_cycles[2].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_3_soh_cycles"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_3_soh_cycles"] = StringsHelper.Format(txt_ac_engine_soh_cycles[2].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng3 soh cycles";
				}

				//Main Tab - From textbox column 7 labeled "Total Cycles Since Overhaul" Row 4 labeled "Engine 4"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_4_soh_cycles"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_soh_cycles[3].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_soh_cycles[3].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_4_soh_cycles"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_4_soh_cycles"] = StringsHelper.Format(txt_ac_engine_soh_cycles[3].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng4 soh cycles";
				}

				//Main Tab - From textbox column 8 labeled "Total Cycles Since Hot" Row 1 labeled "Engine 1"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_1_shs_cycles"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_shs_cycles[0].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_shs_cycles[0].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_1_shs_cycles"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_1_shs_cycles"] = StringsHelper.Format(txt_ac_engine_shs_cycles[0].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng1 shs cycles";
				}

				//Main Tab - From textbox column 8 labeled "Total Cycles Since Hot" Row 2 labeled "Engine 2"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_2_shs_cycles"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_shs_cycles[1].Text.Trim(), "###,###,##0"))
				{
					if (($"{modGlobalVars.cEmptyString}{txt_ac_engine_shs_cycles[1].Text}").Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_2_shs_cycles"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_2_shs_cycles"] = StringsHelper.Format(txt_ac_engine_shs_cycles[1].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng2 shs cycles";
				}

				//Main Tab - From textbox column 8 labeled "Total Cycles Since Hot" Row 3 labeled "Engine 3"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_3_shs_cycles"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_shs_cycles[2].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_shs_cycles[2].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_3_shs_cycles"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_3_shs_cycles"] = StringsHelper.Format(txt_ac_engine_shs_cycles[2].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng3 shs cycles";
				}

				//Main Tab - From textbox column 8 labeled "Total Cycles Since Hot" Row 4 labeled "Engine 4"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_4_shs_cycles"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_engine_shs_cycles[3].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_engine_shs_cycles[3].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_engine_4_shs_cycles"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_engine_4_shs_cycles"] = StringsHelper.Format(txt_ac_engine_shs_cycles[3].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},eng4 shs cycles";
				}

				//Main Tab - From textbox labeled "Airframe Total Time (AFTT):"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_airframe_tot_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_airframe_tot_hrs.Text.Trim(), "###,###,##0"))
				{

					// MSW - 1/6/17 - TMEP HOLD - IF I PUT IN BREAKPOINT HERE, ISSUE WORKS, IF I DELETE, IT DOES NOT
					Application.DoEvents();
					tmpOldAFTT = ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_airframe_tot_hrs"])}").Trim();
					Application.DoEvents();
					txt_ac_airframe_tot_hrs.Text = txt_ac_airframe_tot_hrs.Text;
					if (txt_ac_airframe_tot_hrs.Text.Trim() == modGlobalVars.cEmptyString || Convert.ToInt32(Conversion.Val(txt_ac_airframe_tot_hrs.Text)) == 0)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_airframe_tot_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_airframe_tot_hrs"] = StringsHelper.Format(txt_ac_airframe_tot_hrs.Text.Trim(), "###,###,##0");
					}
					Application.DoEvents();
					bResults = true;
					WhatChanged = $"{WhatChanged},aft hrs";
					Application.DoEvents();
					tmpAFTTChanged = true;
					Application.DoEvents();

					Add_To_Transmit_List("ac_airframe_tot_hrs");
				}

				//Main Tab - From textbox labeled "Landings/Cycles:"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_airframe_tot_landings"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_airframe_tot_landings.Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_airframe_tot_landings.Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_airframe_tot_landings"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_airframe_tot_landings"] = StringsHelper.Format(txt_ac_airframe_tot_landings.Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},tot landings";

					Add_To_Transmit_List("ac_airframe_tot_landings");
				}

				//Main Tab - From textbox column 1 labeled "Serial Number" Row 1 labeled "Prop 1:"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_1_ser_no"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_prop_ser_no[0].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_prop_ser_no[0].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_prop_1_ser_no"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_prop_1_ser_no"] = txt_ac_prop_ser_no[0].Text.Trim();
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},prop1 ser no";
					Add_To_Transmit_List("ac_prop_1_ser_no");
				}

				//Main Tab - From textbox column 1 labeled "Serial Number" Row 2 labeled "Prop 2:"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_2_ser_no"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_prop_ser_no[1].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_prop_ser_no[1].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_prop_2_ser_no"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_prop_2_ser_no"] = txt_ac_prop_ser_no[1].Text.Trim();
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},prop2 ser no";
					Add_To_Transmit_List("ac_prop_2_ser_no");
				}

				//Main Tab - From textbox column 1 labeled "Serial Number" Row 3 labeled "Prop 3:"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_3_ser_no"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_prop_ser_no[2].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_prop_ser_no[2].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_prop_3_ser_no"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_prop_3_ser_no"] = txt_ac_prop_ser_no[2].Text.Trim();
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},prop3 ser no";
					//
				}

				//Main Tab - From textbox column 1 labeled "Serial Number" Row 4 labeled "Prop 4:"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_4_ser_no"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_prop_ser_no[3].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_prop_ser_no[3].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_prop_4_ser_no"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_prop_4_ser_no"] = txt_ac_prop_ser_no[3].Text.Trim();
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},prop4ser no";

				}

				//Main Tab - From textbox column 2 labeled "Total Time Since Prop New" Row 1 labeled "Prop 1:"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_1_snew_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_prop_snew_hrs[0].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_prop_snew_hrs[0].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_prop_1_snew_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_prop_1_snew_hrs"] = StringsHelper.Format(txt_ac_prop_snew_hrs[0].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},prop1 snew hrs";
				}

				//Main Tab - From textbox column 2 labeled "Total Time Since Prop New" Row 2 labeled "Prop 2:"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_2_snew_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_prop_snew_hrs[1].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_prop_snew_hrs[1].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_prop_2_snew_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_prop_2_snew_hrs"] = StringsHelper.Format(txt_ac_prop_snew_hrs[1].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},prop2 snew hrs";
				}

				//Main Tab - From textbox column 2 labeled "Total Time Since Prop New" Row 3 labeled "Prop 3:"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_3_snew_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_prop_snew_hrs[2].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_prop_snew_hrs[2].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_prop_3_snew_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_prop_3_snew_hrs"] = StringsHelper.Format(txt_ac_prop_snew_hrs[2].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},prop3 snew hrs";
				}

				//Main Tab - From textbox column 2 labeled "Total Time Since Prop New" Row 4 labeled "Prop 4:"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_4_snew_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_prop_snew_hrs[3].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_prop_snew_hrs[3].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_prop_4_snew_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_prop_4_snew_hrs"] = StringsHelper.Format(txt_ac_prop_snew_hrs[3].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},prop4 snew hrs";
				}

				//Main Tab - From textbox column 3 labeled "Since Prop Overhaul (SPOH) Hours" Row 1 labeled "Prop 1:"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_1_soh_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_prop_soh_hrs[0].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_prop_soh_hrs[0].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_prop_1_soh_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_prop_1_soh_hrs"] = StringsHelper.Format(txt_ac_prop_soh_hrs[0].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},prop1 soh hrs";
					Add_To_Transmit_List("ac_prop_1_soh_hrs");
				}

				//Main Tab - From textbox column 3 labeled "Since Prop Overhaul (SPOH) Hours" Row 2 labeled "Prop 2:"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_2_soh_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_prop_soh_hrs[1].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_prop_soh_hrs[1].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_prop_2_soh_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_prop_2_soh_hrs"] = StringsHelper.Format(txt_ac_prop_soh_hrs[1].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},prop2 soh hrs";
					Add_To_Transmit_List("ac_prop_2_soh_hrs");
				}

				//Main Tab - From textbox column 3 labeled "Since Prop Overhaul (SPOH) Hours" Row 3 labeled "Prop 3:"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_3_soh_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_prop_soh_hrs[2].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_prop_soh_hrs[2].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_prop_3_soh_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_prop_3_soh_hrs"] = StringsHelper.Format(txt_ac_prop_soh_hrs[2].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},prop3 soh hrs";
				}

				//Main Tab - From textbox column 3 labeled "Since Prop Overhaul (SPOH) Hours" Row 4 labeled "Prop 4:"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_4_soh_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_prop_soh_hrs[3].Text.Trim(), "###,###,##0"))
				{
					if (txt_ac_prop_soh_hrs[3].Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_prop_4_soh_hrs"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_prop_4_soh_hrs"] = StringsHelper.Format(txt_ac_prop_soh_hrs[3].Text.Trim(), "###,###,##0");
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},prop4 soh hrs";
				}

				txt_ac_prop_soh_mo[0].Text = modAdminCommon.gbl_LeftAdjust($"{txt_ac_prop_soh_mo[0].Text}{modGlobalVars.cEmptyString}", "@@");
				txt_ac_prop_soh_mo[1].Text = modAdminCommon.gbl_LeftAdjust($"{txt_ac_prop_soh_mo[1].Text}{modGlobalVars.cEmptyString}", "@@");
				txt_ac_prop_soh_mo[2].Text = modAdminCommon.gbl_LeftAdjust($"{txt_ac_prop_soh_mo[2].Text}{modGlobalVars.cEmptyString}", "@@");
				txt_ac_prop_soh_mo[3].Text = modAdminCommon.gbl_LeftAdjust($"{txt_ac_prop_soh_mo[3].Text}{modGlobalVars.cEmptyString}", "@@");

				//Main Tab - From textbox column 4 labeled "Month and Year of Prop Overhaul MM/YYYY" Row 1 labeled "Prop 1:"
				strStripDate = $"{txt_ac_prop_soh_mo[0].Text}{txt_ac_prop_soh_year[0].Text}";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_1_soh_moyear"])}").Trim() != strStripDate.Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},prop1 soh mo";

					Add_To_Transmit_List("ac_prop_1_moyear");
					adoAircraftRecordset["ac_prop_1_soh_moyear"] = strStripDate;
				}

				//Main Tab - From textbox column 4 labeled "Month and Year of Prop Overhaul MM/YYYY" Row 2 labeled "Prop 2:"
				strStripDate = $"{txt_ac_prop_soh_mo[1].Text}{txt_ac_prop_soh_year[1].Text}";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_2_soh_moyear"])}").Trim() != strStripDate.Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},prop2 soh mo";
					Add_To_Transmit_List("ac_prop_2_moyear");
					adoAircraftRecordset["ac_prop_2_soh_moyear"] = strStripDate;
				}

				//Main Tab - From textbox column 4 labeled "Month and Year of Prop Overhaul MM/YYYY" Row 3 labeled "Prop 3:"
				strStripDate = $"{txt_ac_prop_soh_mo[2].Text}{txt_ac_prop_soh_year[2].Text}";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_3_soh_moyear"])}").Trim() != strStripDate.Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},prop3 soh mo";
					adoAircraftRecordset["ac_prop_3_soh_moyear"] = strStripDate;
				}

				//Main Tab - From textbox column 4 labeled "Month and Year of Prop Overhaul MM/YYYY" Row 4 labeled "Prop 4:"
				strStripDate = $"{txt_ac_prop_soh_mo[3].Text}{txt_ac_prop_soh_year[3].Text}";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_prop_4_soh_moyear"])}").Trim() != strStripDate.Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},prop4 soh mo";
					adoAircraftRecordset["ac_prop_4_soh_moyear"] = strStripDate;
				}

				//Main Tab - From dropdown labled "Model" Titled "Auxiliary Power Unit (APU)"
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_apu_model_name"]))
				{
					if (Convert.ToString(adoAircraftRecordset["ac_apu_model_name"]).Trim().ToUpper() != cbo_ac_apu_model_name.Text.Trim().ToUpper())
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},apu model";
						Add_To_Transmit_List("ac_apu_model_name");
						adoAircraftRecordset["ac_apu_model_name"] = cbo_ac_apu_model_name.Text.Trim();
					}
				}
				else
				{
					if (cbo_ac_apu_model_name.Text.Trim() != modGlobalVars.cEmptyString)
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},apu model";
						Add_To_Transmit_List("ac_apu_model_name");
						adoAircraftRecordset["ac_apu_model_name"] = cbo_ac_apu_model_name.Text.Trim();
					}
				}

				//Main Tab - From textbox labled "Serial#" Titled "Auxiliary Power Unit (APU)"
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_apu_ser_no"]))
				{
					if (Convert.ToString(adoAircraftRecordset["ac_apu_ser_no"]).Trim() != txt_ac_apu[0].Text.Trim())
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},apu ser no";

						Add_To_Transmit_List("ac_apu_ser_no");
						adoAircraftRecordset["ac_apu_ser_no"] = txt_ac_apu[0].Text.Trim();
					}
				}
				else
				{
					if (txt_ac_apu[0].Text.Trim() != modGlobalVars.cEmptyString)
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},apu ser no";

						Add_To_Transmit_List("ac_apu_ser_no");
						adoAircraftRecordset["ac_apu_ser_no"] = txt_ac_apu[0].Text.Trim();
					}
				}

				//Main Tab - From textbox labled "Total Time Since New Hours:" Titled "Auxiliary Power Unit (APU)"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_apu_tot_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_apu[1].Text.Trim(), "###,###,##0"))
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},apu tot hrs";

					Add_To_Transmit_List("ac_apu_tot_hrs");
					if (txt_ac_apu[1].Text.Trim() != modGlobalVars.cEmptyString)
					{
						adoAircraftRecordset["ac_apu_tot_hrs"] = StringsHelper.Format(txt_ac_apu[1].Text.Trim(), "###,###,##0");
					}
					else
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_apu_tot_hrs"] = DBNull.Value;
					}
				}

				//Main Tab - From textbox labled "Since Overhaul (SOH) Hours:" Titled "Auxiliary Power Unit (APU)"
				if (StringsHelper.Format(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_apu_soh_hrs"])}").Trim(), "###,###,##0") != StringsHelper.Format(txt_ac_apu[2].Text.Trim(), "###,###,##0"))
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},apu soh hrs";

					Add_To_Transmit_List("ac_apu_soh_hrs");
					if (txt_ac_apu[2].Text.Trim() != modGlobalVars.cEmptyString)
					{
						adoAircraftRecordset["ac_apu_soh_hrs"] = StringsHelper.Format(txt_ac_apu[2].Text.Trim(), "###,###,##0");
					}
					else
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_apu_soh_hrs"] = DBNull.Value;
					}
				}

				//    'Main Tab - From textbox labled "Since Hot Inspection (SHI) Hours:" Titled "Auxiliary Power Unit (APU)"
				//    If Not (Format(Trim$(cEmptyString & adoAircraftRecordset!ac_apu_shi_hrs), "###,###,##0") = Format(Trim$(txt_ac_apu(3).Text), "###,###,##0")) Then
				//        bResults = True
				//        WhatChanged = WhatChanged & ",apu shi hrs"
				//
				//        If Trim$(txt_ac_apu(3)) <> cEmptyString Then
				//            adoAircraftRecordset!ac_apu_shi_hrs = Format(Trim$(txt_ac_apu(3).Text), "###,###,##0")
				//        Else
				//            adoAircraftRecordset!ac_apu_shi_hrs = Null
				//        End If
				//    End If

				//Main Tab - From dropdown labled "APU Maintenance Plan:" Titled "Auxiliary Power Unit (APU)"
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_apu_maint_prog"]))
				{ // check for null value if null update field with value from control
					if (Convert.ToString(adoAircraftRecordset["ac_apu_maint_prog"]).Trim().Substring(Math.Min(0, Convert.ToString(adoAircraftRecordset["ac_apu_maint_prog"]).Trim().Length), Math.Min(1, Math.Max(0, Convert.ToString(adoAircraftRecordset["ac_apu_maint_prog"]).Trim().Length))).ToUpper() != cbo_ac_apu_maint_prog.Text.Trim().Substring(Math.Min(0, cbo_ac_apu_maint_prog.Text.Trim().Length), Math.Min(1, Math.Max(0, cbo_ac_apu_maint_prog.Text.Trim().Length))).ToUpper())
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},apu maint";

						adoAircraftRecordset["ac_apu_maint_prog"] = cbo_ac_apu_maint_prog.Text.Trim().Substring(Math.Min(0, cbo_ac_apu_maint_prog.Text.Trim().Length), Math.Min(1, Math.Max(0, cbo_ac_apu_maint_prog.Text.Trim().Length))).ToUpper();
					}
				}
				else
				{
					// we had a null value to check for changes against so update the field with the data from the control
					if (cbo_ac_apu_maint_prog.Text.Trim().Substring(Math.Min(0, cbo_ac_apu_maint_prog.Text.Trim().Length), Math.Min(1, Math.Max(0, cbo_ac_apu_maint_prog.Text.Trim().Length))).ToUpper() != modGlobalVars.cEmptyString)
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},apu maint";

						adoAircraftRecordset["ac_apu_maint_prog"] = cbo_ac_apu_maint_prog.Text.Trim().Substring(Math.Min(0, cbo_ac_apu_maint_prog.Text.Trim().Length), Math.Min(1, Math.Max(0, cbo_ac_apu_maint_prog.Text.Trim().Length))).ToUpper();
					}
				}

				if (!(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_ser_no_prefix"])}").Trim() == ($"{modGlobalVars.cEmptyString}{txt_ac_ser_no[0].Text}").Trim() && ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_ser_no"])}").Trim() == ($"{modGlobalVars.cEmptyString}{txt_ac_ser_no[1].Text}").Trim() && ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_ser_no_suffix"])}").Trim() == ($"{modGlobalVars.cEmptyString}{txt_ac_ser_no[2].Text}").Trim()))
				{

					Query = $"SELECT ac_id FROM Aircraft WHERE ac_ser_no_full = '{($"{txt_ac_ser_no[0].Text}{modGlobalVars.cEmptyString}").Trim()}{Hyphen}{($"{txt_ac_ser_no[1].Text}{modGlobalVars.cEmptyString}").Trim()}{($"{txt_ac_ser_no[2].Text}{modGlobalVars.cEmptyString}").Trim()}' AND ac_amod_id = {cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex).ToString()} AND ac_id <> {Convert.ToString(adoAircraftRecordset["ac_id"])} and ac_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";
					if (modAdminCommon.Exist(Query))
					{
						MessageBox.Show("Serial Number Already Exists For This Model on a different Aircraft", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
						txt_ac_ser_no[1].Focus();
						result = false;
						AnsweredCancel = true;
						return result;
					}
					SerialNumberChanged = true;
					bResults = true;
					WhatChanged = $"{WhatChanged},ser no";
				}
				else
				{
					SerialNumberChanged = false;
				}

				//UPDATE AIRCRAFT TOP OF FORM - TOP OF FORM - From first textbox labled "Serial # Prefix/No/Suffix:" Titled "Specific Information"
				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} tof";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_ser_no_prefix"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_ser_no[0].Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},ser prefix";
					adoAircraftRecordset["ac_ser_no_prefix"] = ($"{txt_ac_ser_no[0].Text}{modGlobalVars.cEmptyString}").Trim();
				}

				//TOP OF FORM - From second textbox labled "Serial # Prefix/No/Suffix:" Titled "Specific Information"
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_ser_no"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_ser_no[1].Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},ser 2";

					adoAircraftRecordset["ac_ser_no"] = ($"{txt_ac_ser_no[1].Text}{modGlobalVars.cEmptyString}").Trim();
				}

				//TOP OF FORM - From third textbox labled "Serial # Prefix/No/Suffix:" Titled "Specific Information"
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_ser_no_suffix"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_ser_no[2].Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},ser suffix";

					adoAircraftRecordset["ac_ser_no_suffix"] = ($"{txt_ac_ser_no[2].Text}{modGlobalVars.cEmptyString}").Trim();
				}

				//TOP OF FORM - From first textbox labled "Alt. S/N:" Titled "Specific Information"
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_alt_ser_no_prefix"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_alt_ser_no[0].Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},ser alt prefix";

					adoAircraftRecordset["ac_alt_ser_no_prefix"] = ($"{txt_ac_alt_ser_no[0].Text}{modGlobalVars.cEmptyString}").Trim();
				}

				//TOP OF FORM - From second textbox labled "Alt. S/N:" Titled "Specific Information"
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_alt_ser_no"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_alt_ser_no[1].Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},ser alt no";
					adoAircraftRecordset["ac_alt_ser_no"] = ($"{txt_ac_alt_ser_no[1].Text}{modGlobalVars.cEmptyString}").Trim();
				}

				//TOP OF FORM - From third textbox labled "Alt. S/N:" Titled "Specific Information"
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_alt_ser_no_suffix"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_alt_ser_no[2].Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},ser alt suffix";
					adoAircraftRecordset["ac_alt_ser_no_suffix"] = ($"{txt_ac_alt_ser_no[2].Text}{modGlobalVars.cEmptyString}").Trim();
				}

				//TOP OF FORM - Not displayed!
				strTempAltSerialNum = $"{txt_ac_alt_ser_no[0].Text.Trim()}{txt_ac_alt_ser_no[1].Text.Trim()}{txt_ac_alt_ser_no[2].Text.Trim()}";

				if ((($"{Convert.ToString(adoAircraftRecordset["ac_alt_ser_no_full"])} ").Trim()) != (strTempAltSerialNum.Trim()))
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},ser alt full";

					adoAircraftRecordset["ac_alt_ser_no_full"] = strTempAltSerialNum;
					// 04/02/2004 - By David D. Cruger; Added updating of ac_alt_ser_no_sort
					adoAircraftRecordset["ac_alt_ser_no_sort"] = modCommon.Format_Ser_No_Sort(txt_ac_alt_ser_no[0].Text.Trim(), txt_ac_alt_ser_no[1].Text.Trim(), txt_ac_alt_ser_no[2].Text.Trim(), Airframe_Type_Code);
				}

				adoAircraftRecordset["ac_ser_no_value"] = modCommon.GetSerNoValue(($"{txt_ac_ser_no[1].Text}{modGlobalVars.cEmptyString}").Trim());

				// 04/02/2004 - By David D. Cruger; Added updating of ac_alt_ser_no_value
				//UPGRADE_WARNING: (1068) GetSerNoValue() of type Variant is being forced to Scalar. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				lAltSerNbrValue = modCommon.GetSerNoValue(txt_ac_alt_ser_no[1].Text.Trim());
				//UPGRADE_WARNING: (1068) lAltSerNbrValue of type Variant is being forced to double. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				if (Convert.ToDouble(lAltSerNbrValue) > 0)
				{
					adoAircraftRecordset["ac_alt_ser_no_value"] = lAltSerNbrValue;
				}
				else
				{
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					adoAircraftRecordset["ac_alt_ser_no_value"] = DBNull.Value;
				}

				//TOP OF FORM - textbox labled "Registration #:" Titled "Specific Information"
				tmpRegNbrChanged = false;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_reg_no"]))
				{
					if (Convert.ToString(adoAircraftRecordset["ac_reg_no"]).Trim() != txt_ac_reg_no[0].Text.Trim())
					{
						if (RegNoDuplicate_Check(txt_ac_reg_no[0].Text.Trim(), txt_ac_id.Text))
						{
							//reg_no_issue = "Duplicate Reg#: " & txt_ac_id.Text & ", Changed From: " & Trim(txt_ac_reg_no(0).Text) & ", Record NOT Saved."
							reg_no_issue = $"This reg#({txt_ac_reg_no[0].Text.Trim()}) already exists, Do You Want to Save? ";
							old_reg_no = Convert.ToString(adoAircraftRecordset["ac_reg_no"]);
						}
						tmpRegNbrChanged = true;
						bResults = true;
						WhatChanged = $"{WhatChanged},reg no";

						//UPGRADE_WARNING: (1068) adoAircraftRecordset().OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
						tmpOldRegNbr = Convert.ToString(adoAircraftRecordset.GetField("ac_reg_no").OriginalValue).Trim();

						adoAircraftRecordset["ac_reg_no"] = txt_ac_reg_no[0].Text.Trim();
						adoAircraftRecordset["ac_reg_no_sort"] = modCommon.Format_Reg_No_Sort(txt_ac_reg_no[0].Text.Trim());
						adoAircraftRecordset["ac_reg_no_search"] = StringsHelper.Replace(txt_ac_reg_no[0].Text.Trim(), modGlobalVars.cHyphen, "", 1, -1, CompareMethod.Binary);

						Add_To_Transmit_List("ac_reg_no");
					}
				}
				else
				{
					if (txt_ac_reg_no[0].Text.Trim() != modGlobalVars.cEmptyString)
					{
						tmpRegNbrChanged = true;
						bResults = true;
						WhatChanged = $"{WhatChanged},reg no";

						tmpOldRegNbr = "(BLANK)";

						adoAircraftRecordset["ac_reg_no"] = txt_ac_reg_no[0].Text.Trim();
						adoAircraftRecordset["ac_reg_no_sort"] = modCommon.Format_Reg_No_Sort(txt_ac_reg_no[0].Text.Trim());
						adoAircraftRecordset["ac_reg_no_search"] = StringsHelper.Replace(txt_ac_reg_no[0].Text.Trim(), modGlobalVars.cHyphen, "", 1, -1, CompareMethod.Binary);

						Add_To_Transmit_List("ac_reg_no");
					}
				}

				//TOP OF FORM - textbox labled "Prev. Reg#:" Titled "Specific Information"
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_prev_reg_no"]))
				{
					if (Convert.ToString(adoAircraftRecordset["ac_prev_reg_no"]).Trim() != txt_ac_reg_no[1].Text.Trim())
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},prev reg no";
						adoAircraftRecordset["ac_prev_reg_no"] = txt_ac_reg_no[1].Text.Trim();
					}
				}
				else
				{
					if (txt_ac_reg_no[1].Text.Trim() != modGlobalVars.cEmptyString)
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},prev reg no config";
						adoAircraftRecordset["ac_prev_reg_no"] = txt_ac_reg_no[1].Text.Trim();
					}
				}

				//TOP OF FORM - first textbox labled "Year Mfg/Delivered:" Titled "Specific Information"
				if (isValidACYear(($"{modGlobalVars.cEmptyString}{txt_ac_year[0].Text}").Trim()))
				{
					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_mfr_year"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_year[0].Text}").Trim())
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},mfr year";

						adoAircraftRecordset["ac_mfr_year"] = ($"{txt_ac_year[0].Text}{modGlobalVars.cEmptyString}").Trim();
						bVerifyDateChange = true;
						Add_To_Transmit_List("ac_mfr_year");
					}
				}
				else
				{
					modAdminCommon.ADO_Transaction("RollbackTrans");
					MessageBox.Show($"Aircraft Year of Mfg is Not Valid (Range 1940 to {(DateTime.Now.Year + 15).ToString()})", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_year[0].Focus();
					return false;
				}

				//TOP OF FORM - second textbox labled "Year Mfg/Delivered:" Titled "Specific Information"
				if (isValidACYear(($"{modGlobalVars.cEmptyString}{txt_ac_year[1].Text}").Trim()))
				{
					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_year"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_year[1].Text}").Trim())
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},ac year";

						adoAircraftRecordset["ac_year"] = ($"{txt_ac_year[1].Text}{modGlobalVars.cEmptyString}").Trim();
						bVerifyDateChange = true;
						Add_To_Transmit_List("ac_year");
					}
				}
				else
				{
					modAdminCommon.ADO_Transaction("RollbackTrans");
					MessageBox.Show($"Aircraft Year of Delivery is Not Valid (Range 1940 {(DateTime.Now.Year + 15).ToString()})", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_year[1].Focus();
					return false;
				}

				//TOP OF FORM - Status Tab - dropdown box labled "Status:"
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_status"])}").Trim().ToLower() != ($"{modGlobalVars.cEmptyString}{cbo_ac_status.Text}").Trim().ToLower())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},status";

					adoAircraftRecordset["ac_status"] = ($"{cbo_ac_status.Text}{modGlobalVars.cEmptyString}").Trim();
					Add_To_Transmit_List("ac_status");
				}

				//TOP OF FORM - Status Tab - textbox labled "Date Purchased:"
				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} Date Purchased";

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_purchase_date"]) && Information.IsDate(txt_ac_purchase_date.Text))
				{
					if (DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_purchase_date"]).Trim()) != DateTime.Parse(txt_ac_purchase_date.Text.Trim()))
					{

						if (Information.IsDate(txt_ac_purchase_date.Text))
						{
							adoAircraftRecordset["ac_purchase_date"] = DateTime.Parse(txt_ac_purchase_date.Text.Trim()).ToString("d");
						}
						else
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							adoAircraftRecordset["ac_purchase_date"] = DBNull.Value;
						}

						bResults = true;
						WhatChanged = $"{WhatChanged},purch date";
						Add_To_Transmit_List("ac_purchase_date");

					}

				}
				else
				{

					if (Information.IsDate(txt_ac_purchase_date.Text))
					{
						adoAircraftRecordset["ac_purchase_date"] = DateTime.Parse(txt_ac_purchase_date.Text.Trim()).ToString("d");
						bResults = true;
						WhatChanged = $"{WhatChanged},purch date";
						Add_To_Transmit_List("ac_purchase_date");
					}
					else
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_purchase_date"] = DBNull.Value;
					}

				} // IF TIMES AS OF DATE CHANGED

				//TOP OF FORM - Status Tab - textbox labled "Delivery Date"
				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} Delivery Date";

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_delivery_date"]) && Information.IsDate(txt_ac_delivery_date.Text))
				{
					if (DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_delivery_date"]).Trim()) != DateTime.Parse(txt_ac_delivery_date.Text.Trim()))
					{

						if (Information.IsDate(txt_ac_delivery_date.Text))
						{
							adoAircraftRecordset["ac_delivery_date"] = DateTime.Parse(txt_ac_delivery_date.Text.Trim()).ToString("d");
						}
						else
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							adoAircraftRecordset["ac_delivery_date"] = DBNull.Value;
						}
						bResults = true;
						WhatChanged = $"{WhatChanged},delv date";

						Add_To_Transmit_List("ac_status");
					}

				}
				else
				{

					if (Information.IsDate(txt_ac_delivery_date.Text))
					{
						adoAircraftRecordset["ac_delivery_date"] = DateTime.Parse(txt_ac_delivery_date.Text.Trim()).ToString("d");
						bResults = true;
						WhatChanged = $"{WhatChanged},delv date";

						Add_To_Transmit_List("ac_status");
					}
					else
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_delivery_date"] = DBNull.Value;
					}

				}

				//TOP OF FORM - Status Tab - dropdown box labled "Delivery:"
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_delivery"]) && cbo_ac_delivery.Text.Trim() != modGlobalVars.cEmptyString)
				{
					if (Convert.ToString(adoAircraftRecordset["ac_delivery"]).Trim() != cbo_ac_delivery.Text.Trim())
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},delivery";

						Add_To_Transmit_List("ac_status");
						adoAircraftRecordset["ac_delivery"] = cbo_ac_delivery.Text.Trim();
					}
				}
				else
				{
					if (cbo_ac_delivery.Text.Trim() != modGlobalVars.cEmptyString)
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},delivery";

						Add_To_Transmit_List("ac_status");
						adoAircraftRecordset["ac_delivery"] = cbo_ac_delivery.Text.Trim();
					}
					else
					{
						adoAircraftRecordset["ac_delivery"] = modGlobalVars.cEmptyString;
					}
				}

				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} Next Exclusive Verify Date";
				string sExclusiveExpireFlag = "";
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_exclusive_flag"]) && (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked))
				{

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_exclusive_verify_date"]) && Information.IsDate(txt_exclusive_verify_date.Text))
					{
						if (DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_exclusive_verify_date"]).Trim()) != DateTime.Parse(txt_exclusive_verify_date.Text.Trim()))
						{

							if (Information.IsDate(txt_exclusive_verify_date.Text))
							{
								adoAircraftRecordset["ac_exclusive_verify_date"] = DateTime.Parse(txt_exclusive_verify_date.Text.Trim()).ToString("d");
							}
							else
							{
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								adoAircraftRecordset["ac_exclusive_verify_date"] = DBNull.Value;
							}

							bResults = true;
							WhatChanged = $"{WhatChanged},exclusive verify";
						}
					}
					else
					{
						if (Information.IsDate(txt_exclusive_verify_date.Text))
						{
							adoAircraftRecordset["ac_exclusive_verify_date"] = DateTime.Parse(txt_exclusive_verify_date.Text.Trim()).ToString("d");
							bResults = true;
							WhatChanged = $"{WhatChanged},exclusive verify";
						}
						else
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							adoAircraftRecordset["ac_exclusive_verify_date"] = DBNull.Value;
						}
					}

					// HAS THE exclusive expiration FLAG CHANGED
					strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} ExclusiveExpireDateFlag";

					sExclusiveExpireFlag = "N";
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_exclusive_expiration_flag"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_exclusive_expiration_flag"]) != "")
						{
							sExclusiveExpireFlag = Convert.ToString(adoAircraftRecordset["ac_exclusive_expiration_flag"]);
						}
					}

					// Exclusive Expiration
					if (((chkArray[chkExclusiveExp_INDEX].CheckState == CheckState.Checked) && (sExclusiveExpireFlag == "N")) || ((chkArray[chkExclusiveExp_INDEX].CheckState == CheckState.Unchecked) && (sExclusiveExpireFlag == "Y")))
					{
						strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} ExclusiveExpireDateFlag-";
						bResults = true;
						WhatChanged = $"{WhatChanged},exclusive expiration";
						if (chkArray[chkExclusiveExp_INDEX].CheckState == CheckState.Checked)
						{
							adoAircraftRecordset["ac_exclusive_expiration_flag"] = "Y";
						}
						else
						{
							adoAircraftRecordset["ac_exclusive_expiration_flag"] = "N";
						}
					} // IF exclusive expiration FLAG CHANGED

				}

				OldAskingPrice = modGlobalVars.cEmptyString;
				NewAskingPrice = modGlobalVars.cEmptyString;

				//TOP OF FORM - Status Tab - dropdown box labled "Asking:"
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_asking"])}").Trim() != cbo_ac_asking.Text.Trim())
				{
					if (cbo_ac_asking.Text != "HIDE PRICE")
					{ // check to see if the picked HIDE PRICE
						bResults = true;
						WhatChanged = $"{WhatChanged},asking price";

						Add_To_Transmit_List("ac_asking");
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset["ac_asking"]))
						{
							OldAskingPrice = Convert.ToString(adoAircraftRecordset["ac_asking"]).Trim();
						}

						if (OldAskingPrice.Trim() == modGlobalVars.cEmptyString)
						{
							OldAskingPrice = "0.00";
						}

						NewAskingPrice = cbo_ac_asking.Text.Trim();
						if (NewAskingPrice.Trim() == modGlobalVars.cEmptyString)
						{
							NewAskingPrice = "0.00";
						}

						adoAircraftRecordset["ac_asking"] = cbo_ac_asking.Text.Trim();
						AskingPriceChanged = true;
					}

				}

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_asking_price"]))
				{ // start check for ac_asking_price

					if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_asking_price.Text) != Double.Parse(Double.Parse(Convert.ToString(adoAircraftRecordset["ac_asking_price"]), NumberStyles.Any).ToString("N0")))
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},asking price 2";

						if ((OldAskingPrice.Trim() == modGlobalVars.cEmptyString && NewAskingPrice.Trim() == modGlobalVars.cEmptyString) || (OldAskingPrice.Trim() == "Price"))
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(adoAircraftRecordset["ac_asking_price"]))
							{
								if (Convert.ToString(adoAircraftRecordset["ac_asking_price"]).Trim() != modGlobalVars.cEmptyString)
								{
									OldAskingPrice = Convert.ToString(adoAircraftRecordset["ac_asking_price"]).Trim();
								}
							}
							else
							{
								OldAskingPrice = "0.00";
							}

							if (OldAskingPrice == modGlobalVars.cEmptyString)
							{
								OldAskingPrice = "[Blank]";
							}
							else if (OldAskingPrice != "N/A")
							{ 
								OldAskingPrice = $"${Strings.FormatNumber(OldAskingPrice, 2, TriState.False, TriState.False, TriState.True)}";
							}
						}

						if (txt_ac_asking_price.Text.Trim() != modGlobalVars.cEmptyString)
						{
							NewAskingPrice = txt_ac_asking_price.Text.Trim();
							if (NewAskingPrice == modGlobalVars.cEmptyString)
							{
								NewAskingPrice = "[Blank]";
							}
							else
							{
								NewAskingPrice = $"${Strings.FormatNumber(NewAskingPrice, 0, TriState.False, TriState.False, TriState.True)}";
							}
						}

						if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_asking_price.Text) > 0)
						{
							// tom 8/10/2010 - check to see if they picked make offer or price to see which value to set in the record set
							if (cbo_ac_asking.Text == "Price")
							{
								adoAircraftRecordset["ac_asking_price"] = modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_asking_price.Text);
								// ElseIf cbo_ac_asking = "HIDE PRICE" Then
								//  adoAircraftRecordset("ac_hidden_asking_price").Value = modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_hidden_asking_price.Text)
							}
						}
						else
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							adoAircraftRecordset["ac_asking_price"] = DBNull.Value; // adoAircraftRecordset("ac_hidden_asking_price").Value = Null
						}
						Add_To_Transmit_List("ac_asking");
						AskingPriceChanged = true;
					}
				}
				else
				{
					if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_asking_price.Text) > 0)
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},asking price 2";

						if ((OldAskingPrice.Trim() == modGlobalVars.cEmptyString && NewAskingPrice.Trim() == modGlobalVars.cEmptyString) || (OldAskingPrice.Trim() == "Price"))
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(adoAircraftRecordset["ac_asking_price"]))
							{
								if (Convert.ToString(adoAircraftRecordset["ac_asking_price"]).Trim() != modGlobalVars.cEmptyString)
								{
									OldAskingPrice = Convert.ToString(adoAircraftRecordset["ac_asking_price"]).Trim();
								}
							}
							else
							{
								OldAskingPrice = "0.00";
							}

							if (OldAskingPrice == modGlobalVars.cEmptyString)
							{
								OldAskingPrice = "[Blank]";
							}
							else if (OldAskingPrice != "N/A")
							{ 
								OldAskingPrice = $"${Strings.FormatNumber(OldAskingPrice, 2, TriState.False, TriState.False, TriState.True)}";
							}
						}

						if (txt_ac_asking_price.Text.Trim() != modGlobalVars.cEmptyString)
						{
							NewAskingPrice = txt_ac_asking_price.Text.Trim();
							if (NewAskingPrice == modGlobalVars.cEmptyString)
							{
								NewAskingPrice = "[Blank]";
							}
							else
							{
								NewAskingPrice = $"${Strings.FormatNumber(NewAskingPrice, 2, TriState.False, TriState.False, TriState.True)}";
							}
						}

						if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_asking_price.Text) > 0)
						{
							adoAircraftRecordset["ac_asking_price"] = modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_asking_price.Text);
						}
						else
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							adoAircraftRecordset["ac_asking_price"] = DBNull.Value;
						}
						Add_To_Transmit_List("ac_asking");
						AskingPriceChanged = true;
					}
				} // end ac_asking price

				// added MSW 1/14/2013 - took code block out to make function not error on vb error procedure too large - moved into function, passed by ref necesary values
				//UPGRADE_WARNING: (1068) tempRefParam of type Variant is being forced to int. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				object tempRefParam = old_sold_price;
				check_for_changes(adoAircraftRecordset, ref bResults, ref WhatChanged, ref sold_Was_blank, ref tempRefParam);
				old_sold_price = Convert.ToInt32(tempRefParam);

				// if it was on and is now off
				if (Convert.ToString(chkArray[7].Tag) == "1" && ((int) chkArray[7].CheckState).ToString() == "0")
				{
					WhatChanged = $"{WhatChanged}, restricted check";
					bResults = true;
				}
				else if (Convert.ToString(chkArray[7].Tag) == "0" && ((int) chkArray[7].CheckState).ToString() == "1")
				{  // or if it was off and now on
					WhatChanged = $"{WhatChanged}, restricted check";
					bResults = true;
				}


				//- edited to include is nulls - 5/12/23
				prev_use_code = "";
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (Convert.IsDBNull(adoAircraftRecordset["ac_use_code"]))
				{
					prev_use_code = "";
				}
				else
				{
					prev_use_code = Convert.ToString(adoAircraftRecordset["ac_use_code"]);
				}

				//ac_use_code aey 11/12/05
				if (!cbo_ac_use_code.Text.StartsWith(prev_use_code.Trim(), StringComparison.Ordinal) || (($"{modGlobalVars.cEmptyString}{cbo_ac_stage.Text.Substring(0, Math.Min(1, cbo_ac_stage.Text.Length))}").Trim() == "3" && (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_lifecycle_stage"])}").Trim() == "1" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_lifecycle_stage"])}").Trim() == "2")))
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},use code";
					//update model use_code from aircraft use_code aey 6/10/05
					// updated MSW 1/14/2013 - if ac has gone from lifecycle 1 or 2 to lifecycle 3 .. then make usage unknown

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (Convert.IsDBNull(adoAircraftRecordset["ac_use_code"]))
					{
						original_usage = "";
					}
					else
					{
						original_usage = Convert.ToString(adoAircraftRecordset["ac_use_code"]);
					}


					if (!cbo_ac_use_code.Text.StartsWith(Convert.ToString(adoAircraftRecordset["ac_use_code"]), StringComparison.Ordinal))
					{
						use_code = ($"{cbo_ac_use_code.Text}{modGlobalVars.cEmptyString}").Trim().Substring(0, Math.Min(1, ($"{cbo_ac_use_code.Text}{modGlobalVars.cEmptyString}").Trim().Length));
					}
					else if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_lifecycle_stage"])}").Trim() != ($"{modGlobalVars.cEmptyString}{cbo_ac_stage.Text.Substring(0, Math.Min(1, cbo_ac_stage.Text.Length))}").Trim() && cbo_ac_stage.Text.Trim() != modGlobalVars.cEmptyString)
					{ 
						if (($"{modGlobalVars.cEmptyString}{cbo_ac_stage.Text.Substring(0, Math.Min(1, cbo_ac_stage.Text.Length))}").Trim() == "3" && (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_lifecycle_stage"])}").Trim() == "1" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_lifecycle_stage"])}").Trim() == "2"))
						{
							use_code = "U";
							//cbo_ac_use_code.Text = "U - Usage Pending"
							cbo_ac_use_code.SelectedIndex = 18; // changed from 17 to 18
						}
						else
						{
							use_code = ($"{cbo_ac_use_code.Text}{modGlobalVars.cEmptyString}").Trim().Substring(0, Math.Min(1, ($"{cbo_ac_use_code.Text}{modGlobalVars.cEmptyString}").Trim().Length));
							//cbo_ac_use_code.Text = "U - Usage Pending"
							cbo_ac_use_code.SelectedIndex = 18; // changed from 17 to 18 - MSW -  2/12/20
						}
					}
					else
					{
						use_code = ($"{cbo_ac_use_code.Text}{modGlobalVars.cEmptyString}").Trim().Substring(0, Math.Min(1, ($"{cbo_ac_use_code.Text}{modGlobalVars.cEmptyString}").Trim().Length));
					}

					//step 1 - add a code if none exists
					if ((use_code != modGlobalVars.cEmptyString) && cbo_amod_make_name.SelectedIndex >= 0)
					{ //see if use_code is in model_usage table
						amod_id = cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex);

						tmp = modCommon.DLookUp("acmoduse_use_code", "Aircraft_Model_Useage WITH(NOLOCK)", $"acmoduse_amod_id={amod_id.ToString()} and acmoduse_use_code='{use_code}' ");
						if (tmp != use_code)
						{
							Query = "insert into Aircraft_Model_Useage (acmoduse_amod_id,acmoduse_use_code) ";
							Query = $"{Query} values({amod_id.ToString()},'{use_code}') ";
							DbCommand TempCommand = null;
							TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
							TempCommand.CommandText = Query;
							TempCommand.CommandType = CommandType.Text;
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
							TempCommand.ExecuteNonQuery();
						}
					}
				}

				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} MTab";
				if (cbo_ac_airframe_maintenance_prog_AMP.SelectedIndex >= 0)
				{
					if (Double.Parse($"0{($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_airframe_maintenance_prog_AMP"])}").Trim()}") != Double.Parse($"0{cbo_ac_airframe_maintenance_prog_AMP.GetItemData(cbo_ac_airframe_maintenance_prog_AMP.SelectedIndex).ToString()}"))
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},amp";
						Add_To_Transmit_List("ac_maint_prog_name");
						adoAircraftRecordset["ac_airframe_maintenance_prog_AMP"] = cbo_ac_airframe_maintenance_prog_AMP.GetItemData(cbo_ac_airframe_maintenance_prog_AMP.SelectedIndex);
					}
				}

				if (cbo_ac_airframe_maint_tracking_prog_AMTP.SelectedIndex >= 0)
				{
					if (Double.Parse($"0{($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_airframe_maint_tracking_prog_AMTP"])}").Trim()}") != Double.Parse($"0{cbo_ac_airframe_maint_tracking_prog_AMTP.GetItemData(cbo_ac_airframe_maint_tracking_prog_AMTP.SelectedIndex).ToString()}"))
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},amtp";
						adoAircraftRecordset["ac_airframe_maint_tracking_prog_AMTP"] = cbo_ac_airframe_maint_tracking_prog_AMTP.GetItemData(cbo_ac_airframe_maint_tracking_prog_AMTP.SelectedIndex);
					}
				}

				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_maint_eoh_by_name"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_maint_eoh_by_name.Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},eoh by name";
					Add_To_Transmit_List("ac_maint_eoh_by_name");
					adoAircraftRecordset["ac_maint_eoh_by_name"] = ($"{txt_ac_maint_eoh_by_name.Text}{modGlobalVars.cEmptyString}").Trim();
				}

				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_maint_hots_by_name"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_maint_hots_by_name.Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},hots by name";
					Add_To_Transmit_List("ac_maint_hots_by_name");
					adoAircraftRecordset["ac_maint_hots_by_name"] = ($"{txt_ac_maint_hots_by_name.Text}{modGlobalVars.cEmptyString}").Trim();
				}

				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_damage_history_notes"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_damage_history_notes.Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged}dam hist";
					Add_To_Transmit_List("ac_damage_history_notes1");
					Add_To_Transmit_List("ac_damage_history_notes2");
					Add_To_Transmit_List("ac_damage_history_notes3");
					adoAircraftRecordset["ac_damage_history_notes"] = ($"{txt_ac_damage_history_notes.Text}{modGlobalVars.cEmptyString}").Trim();
				}

				txt_ac_maint_eoh_mo.Text = modAdminCommon.gbl_LeftAdjust(txt_ac_maint_eoh_mo, "@@");

				strStripDate = modGlobalVars.cEmptyString;
				strStripDate = $"{txt_ac_maint_eoh_mo.Text}{txt_ac_maint_eoh_year.Text}";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_main_eoh_moyear"])}").Trim() != ($"{modGlobalVars.cEmptyString}{strStripDate}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},maint eoh mo";
					adoAircraftRecordset["ac_main_eoh_moyear"] = strStripDate;
				}

				txt_ac_maint_hots_mo.Text = modAdminCommon.gbl_LeftAdjust($"{txt_ac_maint_hots_mo.Text}{modGlobalVars.cEmptyString}", "@@");

				strStripDate = modGlobalVars.cEmptyString;
				strStripDate = $"{txt_ac_maint_hots_mo.Text}{txt_ac_maint_hots_year.Text}";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_maint_hots_moyear"])}").Trim() != ($"{modGlobalVars.cEmptyString}{strStripDate}").Trim())
				{
					bResults = true;
					adoAircraftRecordset["ac_maint_hots_moyear"] = strStripDate;
				}

				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} I/E";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_interior_rating"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_interior_rating.Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},int rating";
					Add_To_Transmit_List("ac_interior_rating");
					if (($"{modGlobalVars.cEmptyString}{txt_ac_interior_rating.Text}").Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_interior_rating"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_interior_rating"] = ($"{modGlobalVars.cEmptyString}{txt_ac_interior_rating.Text}").Trim();
					}
				}
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_exterior_rating"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_exterior_rating.Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},extr rating";
					Add_To_Transmit_List("ac_exterior_rating");
					if (($"{modGlobalVars.cEmptyString}{txt_ac_exterior_rating.Text}").Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_exterior_rating"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_exterior_rating"] = ($"{modGlobalVars.cEmptyString}{txt_ac_exterior_rating.Text}").Trim();
					}
				}

				//strStripDate = cEmptyString
				strStripDate = $"{txt_ac_interior_mo.Text}{txt_ac_interior_year.Text}{modGlobalVars.cEmptyString}";
				if (Strings.Len(strStripDate) == 4)
				{
					strStripDate = $"  {strStripDate}";
				}
				else if (Strings.Len(strStripDate) == 5)
				{ 
					strStripDate = $" {strStripDate}";
				}
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_interior_moyear"])}").Trim() != ($"{modGlobalVars.cEmptyString}{strStripDate}").Trim())
				{
					bResults = true;
					Add_To_Transmit_List("ac_interior_moyear");
					adoAircraftRecordset["ac_interior_moyear"] = strStripDate;
				}

				//strStripDate = cEmptyString
				strStripDate = $"{txt_ac_exterior_mo.Text}{txt_ac_exterior_year.Text}{modGlobalVars.cEmptyString}";
				if (Strings.Len(strStripDate) == 4)
				{
					strStripDate = $"  {strStripDate}";
				}
				else if (Strings.Len(strStripDate) == 5)
				{ 
					strStripDate = $" {strStripDate}";
				}
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_exterior_moyear"])}").Trim() != ($"{modGlobalVars.cEmptyString}{strStripDate}").Trim())
				{
					bResults = true;
					Add_To_Transmit_List("ac_exterior_moyear");
					adoAircraftRecordset["ac_exterior_moyear"] = strStripDate;
				}
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_interior_doneby_name"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_interior_doneby_name.Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},interior done by";
					adoAircraftRecordset["ac_interior_doneby_name"] = txt_ac_interior_doneby_name.Text.Trim();
				}
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_exterior_doneby_name"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_exterior_doneby_name.Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},ext done by";
					adoAircraftRecordset["ac_exterior_doneby_name"] = ($"{txt_ac_exterior_doneby_name.Text}{modGlobalVars.cEmptyString}").Trim();
				}
				if (Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_passenger_count"])}").Trim()) != Conversion.Val(($"{modGlobalVars.cEmptyString}{txt_ac_passenger_count.Text}").Trim()))
				{
					if (txt_ac_passenger_count.Text.Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_passenger_count"] = DBNull.Value;
					}
					else
					{
						adoAircraftRecordset["ac_passenger_count"] = ($"{txt_ac_passenger_count.Text}{modGlobalVars.cEmptyString}").Trim();
					}
					bResults = true;
					WhatChanged = $"{WhatChanged},ser alt prefix";
					Add_To_Transmit_List("ac_passenger_count");
				}
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_interior_config_name"])}").Trim() != ($"{modGlobalVars.cEmptyString}{cbo_ac_interior_config_name.Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},int config";
					adoAircraftRecordset["ac_interior_config_name"] = ($"{cbo_ac_interior_config_name.Text}{modGlobalVars.cEmptyString}").Trim();
				}

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_model_config"]))
				{
					if (Convert.ToString(adoAircraftRecordset["ac_model_config"]).Trim().ToUpper() != txt_ac_model_config.Text.Trim().ToUpper())
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},Model config";
						adoAircraftRecordset["ac_model_config"] = txt_ac_model_config.Text.Trim();
					}
				}
				else
				{
					if (txt_ac_model_config.Text.Trim() != modGlobalVars.cEmptyString)
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},Model config";
						adoAircraftRecordset["ac_model_config"] = txt_ac_model_config.Text.Trim();
					}
				}

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_engine_noise_rating"]))
				{
					if (Conversion.Val(Convert.ToString(adoAircraftRecordset["ac_engine_noise_rating"]).Trim()) != Conversion.Val(txt_ac_engine_noise_rating.Text.Trim()))
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},Engine Noise Rating ";
						adoAircraftRecordset["ac_engine_noise_rating"] = Conversion.Val(txt_ac_engine_noise_rating.Text.Trim());
					}
				}
				else
				{
					if (Conversion.Val(txt_ac_engine_noise_rating.Text.Trim()) > 0)
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},Engine Noise Rating ";
						adoAircraftRecordset["ac_engine_noise_rating"] = Conversion.Val(txt_ac_engine_noise_rating.Text.Trim());
					}
				}

				if (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked)
				{ //UPDATE FLAGS
					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_forsale_flag"])}").Trim().ToUpper() != "Y")
					{
						bResults = true;
						WhatChanged = $"{WhatChanged},for sale flag";
						Add_To_Transmit_List("ac_interior_config_name");
						adoAircraftRecordset["ac_forsale_flag"] = "Y";
					}
				}
				else
				{
					adoAircraftRecordset["ac_forsale_flag"] = "N";
				}

				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} LeaseFlag"; // HAS THE lease FLAG CHANGED
				// Leased Flag
				if ((chkArray[chkLeasedFlag_INDEX].CheckState == CheckState.Checked && ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_lease_flag"])}").Trim() == "N") || (chkArray[chkLeasedFlag_INDEX].CheckState == CheckState.Unchecked && ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_lease_flag"])}").Trim() == "Y"))
				{
					strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} LeaseFlag-";
					bResults = true;
					WhatChanged = $"{WhatChanged},lease";
					// Leased Flag
					if (chkArray[chkLeasedFlag_INDEX].CheckState == CheckState.Checked)
					{
						adoAircraftRecordset["ac_lease_flag"] = "Y";
					}
					else
					{
						adoAircraftRecordset["ac_lease_flag"] = "N";
					}
				} // IF lease FLAG CHANGED

				// HAS THE ON CONDITION TBO FLAG CHANGED
				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} TBOFlag";
				strTemp = ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_engine_tbo_oc_flag"])}").Trim();
				if ((chk_oncondtbo.CheckState == CheckState.Checked && (strTemp == "" || strTemp == "N")) || (chk_oncondtbo.CheckState == CheckState.Unchecked && strTemp == "Y"))
				{
					strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} TBOFlag-";
					bResults = true;
					WhatChanged = $"{WhatChanged},on condition";
					if (chk_oncondtbo.CheckState == CheckState.Checked)
					{
						adoAircraftRecordset["ac_engine_tbo_oc_flag"] = "Y";
					}
					else
					{
						adoAircraftRecordset["ac_engine_tbo_oc_flag"] = "N";
					}
				} // IF ON CONDITION TBO FLAG CHANGED

				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} CoTab";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_confidential_notes"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_confidential_notes.Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},conf notes";
					Add_To_Transmit_List("ac_confidential_notes1");
					Add_To_Transmit_List("ac_confidential_notes2");
					adoAircraftRecordset["ac_confidential_notes"] = ($"{txt_ac_confidential_notes.Text}{modGlobalVars.cEmptyString}").Trim();
				}

				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_lifecycle_stage"])}").Trim() != ($"{modGlobalVars.cEmptyString}{cbo_ac_stage.Text.Substring(0, Math.Min(1, cbo_ac_stage.Text.Length))}").Trim() && cbo_ac_stage.Text.Trim() != modGlobalVars.cEmptyString)
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},stage";
					adoAircraftRecordset["ac_lifecycle_stage"] = ($"{modGlobalVars.cEmptyString}{($"{cbo_ac_stage.Text}{modGlobalVars.cEmptyString}").Substring(0, Math.Min(1, ($"{cbo_ac_stage.Text}{modGlobalVars.cEmptyString}").Length))}").Trim();
				}

				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_ownership_type"])}").Trim() != ($"{modGlobalVars.cEmptyString}{cbo_ac_owner_type.Text.Substring(0, Math.Min(1, cbo_ac_owner_type.Text.Length))}").Trim() && cbo_ac_owner_type.Text.Trim() != modGlobalVars.cEmptyString)
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},ownership type";
					adoAircraftRecordset["ac_ownership_type"] = ($"{modGlobalVars.cEmptyString}{($"{cbo_ac_owner_type.Text}{modGlobalVars.cEmptyString}").Substring(0, Math.Min(1, ($"{cbo_ac_owner_type.Text}{modGlobalVars.cEmptyString}").Length))}").Trim();
				}

				strError = $"AC#{($"{modGlobalVars.cEmptyString}{txt_ac_id.Text}").Trim()} JrTab";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_common_notes"])}").Trim() != ($"{modGlobalVars.cEmptyString}{txt_ac_common_notes.Text}").Trim())
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},common notes";
					adoAircraftRecordset["ac_common_notes"] = ($"{txt_ac_common_notes.Text}{modGlobalVars.cEmptyString}").Trim();
				}

				// HANDLE CHECK ON NEW REGISTRATION EXPIRATION DATE FIELD
				// txt_ac_year(2).Text = the registration expiration date
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoAircraftRecordset["ac_reg_no_expiration_date"]) && Information.IsDate(txt_ac_year[2].Text.Trim()))
				{

					if (DateTime.Parse(Convert.ToString(adoAircraftRecordset["ac_reg_no_expiration_date"]).Trim()) != DateTime.Parse(txt_ac_year[2].Text.Trim()))
					{

						bResults = true;
						WhatChanged = $"{WhatChanged},reg exp date";
						if (Information.IsDate(txt_ac_year[2].Text.Trim()))
						{
							adoAircraftRecordset["ac_reg_no_expiration_date"] = DateTime.Parse(txt_ac_year[2].Text.Trim()).ToString("d");
						}
						else
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							adoAircraftRecordset["ac_reg_no_expiration_date"] = DBNull.Value;
						}
					}

				}
				else
				{

					if (Information.IsDate(txt_ac_year[2].Text.Trim()))
					{
						adoAircraftRecordset["ac_reg_no_expiration_date"] = DateTime.Parse(txt_ac_year[2].Text.Trim()).ToString("d");
						bResults = true;
						WhatChanged = $"{WhatChanged},reg exp date";
					}
					else
					{
						// ADDED MSW 4/24/14, if this was not null and is now blank or not a date, then ikt changed
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset["ac_reg_no_expiration_date"]))
						{
							bResults = true;
							WhatChanged = $"{WhatChanged},reg exp date";
						}
						else
						{
							// this would be if it was null and is still null
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_reg_no_expiration_date"] = DBNull.Value;
					}

				} // IF TIMES AS OF DATE CHANGED

				checkForAnyChanges2(ref WhatChanged, ref bResults);

				if (HelicopterChanged)
				{
					ValidateHeliCopterGrid();
					HelicopterChanged = true;
					RememberWhatChanged = "Helicopter Grid";
					WhatChanged = $"{WhatChanged},Heli Grid";
					bResults = true;
				}

				if (bResults)
				{
					FindChanges(adoAircraftRecordset);
				}

				if (arr_Transmit_Fields.GetUpperBound(0) > 0)
				{
					arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0)});
					Transmit_Change_Flag = true;
				}

				result = bResults;
				WhatChanged_return = WhatChanged;
				Application.DoEvents();
			}
			catch (System.Exception excep)
			{

				result = false;
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"CheckForAnyChanges_Error: {strError} {WhatChanged} {Information.Err().Number.ToString()} {excep.Message}");
			}

			return result;
		}

		private bool CheckForAnyChanges(ref string reg_no_issue, ref string old_reg_no, ref string WhatChanged_return, ref bool sold_Was_blank, ref int old_sold_price, ref string original_usage)
		{
			bool tempRefParam3 = false;
			return CheckForAnyChanges(ref reg_no_issue, ref old_reg_no, ref WhatChanged_return, ref sold_Was_blank, ref old_sold_price, ref original_usage, ref tempRefParam3);
		}

		private bool CheckForAnyChanges(ref string reg_no_issue, ref string old_reg_no, ref string WhatChanged_return, ref bool sold_Was_blank, ref int old_sold_price)
		{
			string tempRefParam4 = "";
			bool tempRefParam5 = false;
			return CheckForAnyChanges(ref reg_no_issue, ref old_reg_no, ref WhatChanged_return, ref sold_Was_blank, ref old_sold_price, ref tempRefParam4, ref tempRefParam5);
		}

		private bool CheckForAnyChanges(ref string reg_no_issue, ref string old_reg_no, ref string WhatChanged_return, ref bool sold_Was_blank)
		{
			int tempRefParam6 = 0;
			string tempRefParam7 = "";
			bool tempRefParam8 = false;
			return CheckForAnyChanges(ref reg_no_issue, ref old_reg_no, ref WhatChanged_return, ref sold_Was_blank, ref tempRefParam6, ref tempRefParam7, ref tempRefParam8);
		}

		private bool CheckForAnyChanges(ref string reg_no_issue, ref string old_reg_no, ref string WhatChanged_return)
		{
			bool tempRefParam9 = false;
			int tempRefParam10 = 0;
			string tempRefParam11 = "";
			bool tempRefParam12 = false;
			return CheckForAnyChanges(ref reg_no_issue, ref old_reg_no, ref WhatChanged_return, ref tempRefParam9, ref tempRefParam10, ref tempRefParam11, ref tempRefParam12);
		}

		private bool CheckForAnyChanges(ref string reg_no_issue, ref string old_reg_no)
		{
			string tempRefParam13 = "";
			bool tempRefParam14 = false;
			int tempRefParam15 = 0;
			string tempRefParam16 = "";
			bool tempRefParam17 = false;
			return CheckForAnyChanges(ref reg_no_issue, ref old_reg_no, ref tempRefParam13, ref tempRefParam14, ref tempRefParam15, ref tempRefParam16, ref tempRefParam17);
		}

		private bool CheckForAnyChanges(ref string reg_no_issue)
		{
			string tempRefParam18 = "";
			string tempRefParam19 = "";
			bool tempRefParam20 = false;
			int tempRefParam21 = 0;
			string tempRefParam22 = "";
			bool tempRefParam23 = false;
			return CheckForAnyChanges(ref reg_no_issue, ref tempRefParam18, ref tempRefParam19, ref tempRefParam20, ref tempRefParam21, ref tempRefParam22, ref tempRefParam23);
		}

		private bool CheckForAnyChanges()
		{
			string tempRefParam24 = "";
			string tempRefParam25 = "";
			string tempRefParam26 = "";
			bool tempRefParam27 = false;
			int tempRefParam28 = 0;
			string tempRefParam29 = "";
			bool tempRefParam30 = false;
			return CheckForAnyChanges(ref tempRefParam24, ref tempRefParam25, ref tempRefParam26, ref tempRefParam27, ref tempRefParam28, ref tempRefParam29, ref tempRefParam30);
		}

		public object check_for_changes(ADORecordSetHelper adoAircraftRecordset, ref bool bResults, ref string WhatChanged, ref bool sold_Was_blank, ref object old_sold_price)
		{

			//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
			if (!Convert.IsDBNull(adoAircraftRecordset["ac_hidden_asking_price"]))
			{ // start ac_hidden_asking_price

				if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_hidden_asking_price.Text) != Convert.ToDouble(adoAircraftRecordset["ac_hidden_asking_price"]))
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},HIDE PRICE ";

					if ((OldAskingPrice.Trim() == modGlobalVars.cEmptyString && NewAskingPrice.Trim() == modGlobalVars.cEmptyString) || (OldAskingPrice.Trim() == "Price"))
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset["ac_hidden_asking_price"]))
						{
							if (Convert.ToString(adoAircraftRecordset["ac_hidden_asking_price"]).Trim() != modGlobalVars.cEmptyString)
							{
								OldMakeOfferPrice = Convert.ToString(adoAircraftRecordset["ac_hidden_asking_price"]).Trim();
							}
						}
						else
						{
							OldMakeOfferPrice = "0.00";
						}

						if (OldMakeOfferPrice == modGlobalVars.cEmptyString)
						{
							OldMakeOfferPrice = "[Blank]";
						}
						else if (OldAskingPrice != "N/A")
						{ 
							OldMakeOfferPrice = $"${Strings.FormatNumber(OldMakeOfferPrice, 2, TriState.False, TriState.False, TriState.True)}";
						}
					}

					if (txt_ac_asking_price.Text.Trim() != modGlobalVars.cEmptyString)
					{
						NewMakeOfferPrice = txt_ac_asking_price.Text.Trim();
						if (NewMakeOfferPrice == modGlobalVars.cEmptyString)
						{
							NewMakeOfferPrice = "[Blank]";
						}
						else
						{
							NewMakeOfferPrice = $"${Strings.FormatNumber(NewMakeOfferPrice, 2, TriState.False, TriState.False, TriState.True)}";
						}
					}

					if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_hidden_asking_price.Text) > 0)
					{
						// check to see if they picked make offer or price to see which value to set in the record set - tom 8/10/2010
						//If cbo_ac_asking = "Price" Then
						//  adoAircraftRecordset("ac_asking_price").Value = modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_asking_price.Text)
						//ElseIf cbo_ac_asking = "HIDE PRICE" Then
						adoAircraftRecordset["ac_hidden_asking_price"] = modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_hidden_asking_price.Text);
						// End If
					}
					else
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_hidden_asking_price"] = DBNull.Value; //adoAircraftRecordset("ac_asking_price").Value = Null
					}
					// Call Add_To_Transmit_List("ac_asking")
					MakeOfferPriceChanged = true;
				}
			}
			else
			{
				if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_hidden_asking_price.Text) > 0)
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},HIDE PRICE ";

					if ((OldMakeOfferPrice.Trim() == modGlobalVars.cEmptyString && NewMakeOfferPrice.Trim() == modGlobalVars.cEmptyString) || (OldMakeOfferPrice.Trim() == "Price"))
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset["ac_hidden_asking_price"]))
						{
							if (Convert.ToString(adoAircraftRecordset["ac_hidden_asking_price"]).Trim() != modGlobalVars.cEmptyString)
							{
								OldMakeOfferPrice = Convert.ToString(adoAircraftRecordset["ac_hidden_asking_price"]).Trim();
							}
						}
						else
						{
							OldMakeOfferPrice = "0.00";
						}

						if (OldMakeOfferPrice == modGlobalVars.cEmptyString)
						{
							OldMakeOfferPrice = "[Blank]";
						}
						else if (OldMakeOfferPrice != "N/A")
						{ 
							OldMakeOfferPrice = $"${Strings.FormatNumber(OldMakeOfferPrice, 2, TriState.False, TriState.False, TriState.True)}";
						}
					}

					if (txt_ac_hidden_asking_price.Text.Trim() != modGlobalVars.cEmptyString)
					{
						NewMakeOfferPrice = txt_ac_hidden_asking_price.Text.Trim();
						if (NewMakeOfferPrice == modGlobalVars.cEmptyString)
						{
							NewMakeOfferPrice = "[Blank]";
						}
						else
						{
							NewMakeOfferPrice = $"${Strings.FormatNumber(NewMakeOfferPrice, 2, TriState.False, TriState.False, TriState.True)}";
						}
					}

					if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_hidden_asking_price.Text) > 0)
					{
						adoAircraftRecordset["ac_hidden_asking_price"] = modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_hidden_asking_price.Text);
					}
					else
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_hidden_asking_price"] = DBNull.Value;
					}
					// Call Add_To_Transmit_List("ac_asking")
					MakeOfferPriceChanged = true;
				}
			} // end ac_hidden_asking_price

			//TOP OF FORM - Status Tab - text box labled "Foreign Currency:    Type:"
			if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_foreign_currency_name"])}").Trim() != ($"{modGlobalVars.cEmptyString}{cbo_ac_foreign_currency_name.Text}").Trim())
			{
				bResults = true;
				WhatChanged = $"{WhatChanged},foregn curr name";
				adoAircraftRecordset["ac_foreign_currency_name"] = ($"{cbo_ac_foreign_currency_name.Text}{modGlobalVars.cEmptyString}").Trim();
			}

			//TOP OF FORM - Status Tab - text box labled "Foreign Currency:    Price:"
			//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
			if (!Convert.IsDBNull(adoAircraftRecordset["ac_foreign_currency_price"]))
			{
				if (Convert.ToDouble(adoAircraftRecordset["ac_foreign_currency_price"]) != modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_foreign_currency_price.Text))
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},forgn curr price";
					if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_foreign_currency_price.Text) > 0)
					{
						adoAircraftRecordset["ac_foreign_currency_price"] = modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_foreign_currency_price.Text);
					}
					else
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_foreign_currency_price"] = DBNull.Value;
					}
				}
			}
			else
			{
				if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_foreign_currency_price.Text) > 0)
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},forgn curr price";
					if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_foreign_currency_price.Text) > 0)
					{
						adoAircraftRecordset["ac_foreign_currency_price"] = modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_foreign_currency_price.Text);
					}
					else
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_foreign_currency_price"] = DBNull.Value;
					}
				}

			}

			//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
			if (!Convert.IsDBNull(adoAircraftRecordset["ac_sale_price"]))
			{
				if (Convert.ToDouble(adoAircraftRecordset["ac_sale_price"]) != modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_sale_price.Text))
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},sale price";

					old_sold_price = adoAircraftRecordset["ac_sale_price"];

					if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_sale_price.Text) > 0)
					{
						adoAircraftRecordset["ac_sale_price"] = modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_sale_price.Text);
					}
					else
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_sale_price"] = DBNull.Value;
					}
				}
			}
			else
			{
				if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_sale_price.Text) > 0)
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},sale price";
					if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_sale_price.Text) > 0)
					{
						adoAircraftRecordset["ac_sale_price"] = modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_sale_price.Text);
						sold_Was_blank = true;
					}
					else
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset["ac_sale_price"] = DBNull.Value;
					}
				}
			}


			// added MSW - 4/25/16
			//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
			if (!Convert.IsDBNull(adoAircraftRecordset["ac_sale_price_display_flag"]))
			{
				if ((Convert.ToString(adoAircraftRecordset["ac_sale_price_display_flag"]) == "N" && chkArray[chkDisplaySalePrice_INDEX].CheckState == CheckState.Checked) || (Convert.ToString(adoAircraftRecordset["ac_sale_price_display_flag"]) == "Y" && chkArray[chkDisplaySalePrice_INDEX].CheckState == CheckState.Unchecked))
				{
					bResults = true;
					WhatChanged = $"{WhatChanged},sale price display flag";

					// Display Sale Price
					if (chkArray[chkDisplaySalePrice_INDEX].CheckState == CheckState.Checked)
					{
						adoAircraftRecordset["ac_sale_price_display_flag"] = "Y";
					}
					else
					{
						adoAircraftRecordset["ac_sale_price_display_flag"] = "N";
					}

				}
			}


			if (ToolTipMain.GetToolTip(lbl_gen[98]).IndexOf("Source Cleared") >= 0)
			{
				bResults = true;
				WhatChanged = $"{WhatChanged},source cleared";
				adoAircraftRecordset["ac_sale_price_acval_id"] = 0;
			}




			return null;
		}

		// ===================================================================
		// Written By : David D. Cruger
		// Created    : 04/18/2003
		// Modified   : 04/18/2003
		// Procedure  : HasRegNbrChanged
		// Parameters : ByVal strOldRegNbr As String
		//              ByVal strNewRegNbr As String
		//
		// Returns    : Boolean
		//
		// Notes      : Compares the Old and New RegNbr.  If there is more
		// than a two char difference return True
		//
		// 05/05/2008 - By David D. Cruger; Question?  Why the 2chars?
		//
		// ===================================================================

		//UPGRADE_NOTE: (7001) The following declaration (HasRegNbrChanged) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private bool HasRegNbrChanged(string strOldRegNbr, string strNewRegNbr)
		//{
			//
			//string strOldRegNbrTmp = new string('\0', 12);
			//string strNewRegNbrTmp = new string('\0', 12);
			//
			//
			//int iCnt1 = 0;
			//int iTot1 = 0;
			//
			//
			//bool bResults = false;
			//
			//strOldRegNbr = ($"{strOldRegNbr} ").Trim();
			//strNewRegNbr = ($"{strNewRegNbr} ").Trim();
			//
			//strOldRegNbrTmp = StringsHelper.GetFixedLengthString(strOldRegNbr, 12);
			//strNewRegNbrTmp = StringsHelper.GetFixedLengthString(strNewRegNbr, 12);
			//
			//int iLen1 = Strings.Len(strOldRegNbr);
			//int iLen2 = Strings.Len(strNewRegNbr);
			//
			//if ((iLen1 > 0) || (iLen2 > 0))
			//{
				//
				//iCnt1 = 0;
				//iTot1 = 0;
				//
				//iLen1 = Strings.Len(strOldRegNbrTmp); // This Should Always Be 12
				//
				//int tempForEndVar = iLen1;
				//for (iCnt1 = 1; iCnt1 <= tempForEndVar; iCnt1++)
				//{
					//if (strOldRegNbrTmp.Substring(Math.Min(iCnt1 - 1, strOldRegNbrTmp.Length), Math.Min(1, Math.Max(0, strOldRegNbrTmp.Length - (iCnt1 - 1)))) != strNewRegNbrTmp.Substring(Math.Min(iCnt1 - 1, strNewRegNbrTmp.Length), Math.Min(1, Math.Max(0, strNewRegNbrTmp.Length - (iCnt1 - 1)))))
					//{
						//iTot1++;
					//}
				//}
				//
				//if (iTot1 > 2)
				//{
					//bResults = true;
				//}
				//
			//} // If (iLen1 > 0) Or (iLen2 > 0) Then
			//
			//return bResults;
			//
		//} // End HasRegNbrChanged


		private void search_on(string vmessage)
		{

			try
			{

				this.Cursor = Cursors.WaitCursor;
				pnl_Please_Wait.Visible = true;
				//UPGRADE_ISSUE: (2064) Threed.SSPanel property pnl_Please_Wait.Caption was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				pnl_Please_Wait.setCaption(vmessage.Trim());
				pnl_Please_Wait.Refresh();
				modStatusBar.Update_Status_Bar(modAdminCommon.SB, vmessage, Color.Blue);
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Record_Error("Aircraft (frm_Aircraft)", $"Search_On: {Information.Err().Number.ToString()} - {excep.Message}");
				//UPGRADE_TODO: (1065) Error handling statement (Resume Next) could not be converted. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1065
				UpgradeHelpers.Helpers.NotUpgradedHelper.NotifyNotUpgradedElement("Resume Next Statement");
			}

		}

		private void search_off()
		{

			this.Cursor = CursorHelper.CursorDefault;
			pnl_Please_Wait.Visible = false;
			//UPGRADE_ISSUE: (2064) Threed.SSPanel property pnl_Please_Wait.Caption was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			pnl_Please_Wait.setCaption(" ");
			pnl_Please_Wait.Refresh();
			modStatusBar.Clear_Status_Bar(modAdminCommon.SB);
			Application.DoEvents();

		}

		private bool FindChanges(ADORecordSetHelper adoRecordset)
		{
			bool result = false;
			string DebugStuff = "";

			int intIndex = 0;

			//-----------------------------------------------
			//Here's the part that checks if anything changed
			//-----------------------------------------------

			while((intIndex < adoRecordset.FieldsMetadata.Count))
			{
				//UPGRADE_WARNING: (1068) adoRecordset().OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoRecordset.GetField(intIndex).OriginalValue)}").Trim().ToUpper() != ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoRecordset[intIndex])}").Trim().ToUpper())
				{
					if (adoRecordset.GetField(intIndex).FieldMetadata.ColumnName != "ac_action_date")
					{
						result = true;

						//UPGRADE_WARNING: (1068) adoRecordset().OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
						DebugStuff = $"{Environment.NewLine}" +
						             $"ID: " +
						             $"{($"{modGlobalVars.cEmptyString}{Convert.ToString(adoRecordset["ac_id"])}").Trim()}" +
						             $"{Environment.NewLine}{adoRecordset.GetField(intIndex).FieldMetadata.ColumnName}" +
						             $"{Environment.NewLine}   OLD: " +
						             $"{($"{modGlobalVars.cEmptyString}{Convert.ToString(adoRecordset.GetField(intIndex).OriginalValue)}").Trim()}" +
						             $"{Environment.NewLine}   NEW: {($"{modGlobalVars.cEmptyString}{Convert.ToString(adoRecordset[intIndex])}").Trim()}";

						if (RememberWhatChanged == modGlobalVars.cEmptyString)
						{
							RememberWhatChanged = DebugStuff;
						}

						break;
					}
				}
				intIndex++;
			};


			return result;
		}

		private void grd_Cockpit_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			if (grd_Cockpit.CurrentRowIndex > 0)
			{
				this.Cursor = Cursors.WaitCursor;
				frm_AircraftDetails.DefInstance.DetailType = "Addl Cockpit Equipment";

				frm_AircraftDetails.DefInstance.DetailID = grd_Cockpit.get_RowData(grd_Cockpit.CurrentRowIndex);

				if (grd_Cockpit.get_RowData(grd_Cockpit.CurrentRowIndex) == 0)
				{
					frm_AircraftDetails.DefInstance.UpdateMode = true;
					grd_Cockpit.CurrentColumnIndex = 0;
					frm_AircraftDetails.DefInstance.cbo_adet_data_name.Text = grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].FormattedValue.ToString();
					grd_Cockpit.CurrentColumnIndex = 1;
					frm_AircraftDetails.DefInstance.txt_adet_data_description.Text = grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].FormattedValue.ToString();
				}

				frm_AircraftDetails.DefInstance.inACID = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
				frm_AircraftDetails.DefInstance.inJournID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);

				frm_AircraftDetails.DefInstance.ShowDialog();

				this.Activate();

				if (DetailDescription != modGlobalVars.cEmptyString || DetailName == "Delete")
				{


					if (DetailName.Trim() != "")
					{
						DetailDescription = Apply_Aircraft_Rules(DetailDescription, DetailType, DetailName);
					}

					grd_Cockpit.CurrentColumnIndex = 0;
					if (grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].FormattedValue.ToString().ToLower().Trim() == "general")
					{
						CockpitGeneralChanged = true;
					}

					if (DetailName == "Delete")
					{
						if (grd_Cockpit.RowsCount == 2)
						{
							grd_Cockpit.FixedRows = 0;
							grd_Cockpit[0, 0].Value = "None Found";
							grd_Cockpit[0, 1].Value = modGlobalVars.cEmptyString;
							grd_Cockpit.CurrentRowIndex = 1;
						}
						grd_Cockpit.RemoveItem(grd_Cockpit.CurrentRowIndex);

					}
					else
					{
						grd_Cockpit.CurrentColumnIndex = 1;
						grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].Value = DetailDescription;
					}

					CockpitGridChanged = true;

					DetailDescription = modGlobalVars.cEmptyString;
					DetailName = modGlobalVars.cEmptyString;
				}

				//Call Fill_Aircraft_Detail_Grids
			}

		}

		private void grd_DocumentLog_Click(Object eventSender, EventArgs eventArgs)
		{

			// 12/01/2010 - By David D. Cruger
			// Tweaks for Windows 7 Erroring on Navigate

			string Scanned_File_Name = "";
			Object fso = new Object();
			string strDocType = "";

			int lRow1 = grd_DocumentLog.CurrentRowIndex;
			bool bAttachDocVisible = false;

			cmdViewDocumentInSeparateWindow.Visible = false;
			lbl_gen[122].Visible = false; // Open In Browser
			lbl_gen[124].Visible = false; // Attach Doc To Company

			pnl_TransactionNotes.Visible = false;
			web_Browser.Visible = true;
			web_Browser.BringToFront();

			if (ado_DocLog.EOF && ado_DocLog.BOF)
			{
				return;
			}

			ado_DocLog.MoveFirst();

			this.Cursor = Cursors.WaitCursor;

			int tempForEndVar = grd_DocumentLog.CurrentRowIndex - 1;
			for (int I = 1; I <= tempForEndVar; I++)
			{
				ado_DocLog.MoveNext();
			}

			if (modCommon.CountDocumentNameByType(Convert.ToString(grd_DocumentLog[lRow1, 0].Value)) > 1)
			{
				bAttachDocVisible = true;
			}

			string FAAProcessing = modCommon.Return_FAA_Document_Root_Directory(($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim().ToLower());

			//aey 7/14/04 need to limit the length of the note between the two boxes
			txtDocNotes[0].Text = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_general_note"])}").Trim();
			txtDocNotes[3].ReadOnly = false;
			string NoteLength = Strings.Len(txtDocNotes[0].Text).ToString(); //aey 7/14/04 // get the current size of the note
			//  If (350 - NoteLength) < 109 Then txtDocNotes(3).MaxLength = 350 - NoteLength 'set limit
			if ((900 - Double.Parse(NoteLength)) >= 0 && (900 - Double.Parse(NoteLength)) < 10)
			{
				txtDocNotes[3].MaxLength = Convert.ToInt32(900 - Double.Parse(NoteLength));
			} //set limit
			if (txtDocNotes[3].MaxLength == 0)
			{
				txtDocNotes[3].ReadOnly = true;
			} //0 max len means any length

			int tempForEndVar2 = cboAcctRep[0].Items.Count - 1;
			for (int I = 0; I <= tempForEndVar2; I++)
			{
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_user_id"])}").Trim() == cboAcctRep[0].GetListItem(I))
				{
					cboAcctRep[0].SelectedIndex = I;
				}
			}

			if (($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim().ToLower() == "nts")
			{

				Scanned_File_Name = $"{FAAProcessing}{modCommon.Get_FAA_Document_In_Process_File_Name(Convert.ToInt32(ado_DocLog["faalog_id"]), Convert.ToInt32(ado_DocLog["faalog_ac_id"]))}";

				//test to see if doc exists aey 8/13/04
				if (File.Exists(Scanned_File_Name))
				{

					web_Browser.Navigate(new Uri(Scanned_File_Name));


					txtDocNotes[0].Visible = true;
					txtDocNotes[2].Visible = true; // Aircraft Id
					txtDocNotes[3].Visible = true;

					cmdSaveDocNotes[0].Visible = true; // Save Document
					cmdSaveDocNotes[2].Visible = true; // Move Document
					cmdSaveDocNotes[3].Visible = false;
					if (Convert.ToString(modAdminCommon.snp_User["user_delete_faa_documents_flag"]) == "Y")
					{
						cmdSaveDocNotes[3].Visible = true; // Delete Document
					}

					RemeberDocumentAccountRep = cboAcctRep[0].Text;

					cboAcctRep[0].Visible = true;

					//aey 7/12/04 docs in process # 257
					lbl_gen[63].Visible = true; // New Aircraft ID
					lbl_gen[93].Visible = true; // Add Response
					lbl_gen[94].Visible = true; // Current Note
					lbl_gen[122].Visible = true; // Open In Browser
					lbl_gen[124].Visible = bAttachDocVisible; // Attach Doc To Company

					txtDocNotes[0].ReadOnly = false;

					cmdViewDocumentInSeparateWindow.Visible = true;

					modStatusBar.Clear_Status_Bar(modAdminCommon.SB);

				}
				else
				{
					MessageBox.Show("Document not found", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
				} // If fso.FileExists(Scanned_File_Name) = True Then

			}
			else
			{

				RemeberDocumentAccountRep = cboAcctRep[0].Text;

				cmdSaveDocNotes[0].Visible = true; // Save
				cmdSaveDocNotes[2].Visible = true; // Move
				cmdSaveDocNotes[3].Visible = false;
				if (Convert.ToString(modAdminCommon.snp_User["user_delete_faa_documents_flag"]) == "Y")
				{
					cmdSaveDocNotes[3].Visible = true; // Delete
				}

				cboAcctRep[0].Visible = true;
				txtDocNotes[0].ReadOnly = false;
				txtDocNotes[0].Visible = true;
				txtDocNotes[2].Visible = true; // Aircraft Id
				txtDocNotes[3].Visible = true;

				// txtDocNotes(0).Locked = False
				//aey 7/12/04 docs in process # 257
				lbl_gen[63].Visible = true; // New Aircraft ID
				lbl_gen[93].Visible = true; // Add Response
				lbl_gen[94].Visible = true; // Current Note

				Scanned_File_Name = $"{FAAProcessing}{modCommon.Get_FAA_Document_In_Process_File_Name(Convert.ToInt32(ado_DocLog["faalog_id"]), Convert.ToInt32(ado_DocLog["faalog_ac_id"]))}";

				if (File.Exists(Scanned_File_Name))
				{

					modStatusBar.Update_Status_Bar(modAdminCommon.SB, "Loading Scanned Document Image .....", Color.Blue);

					if (!Scanned_File_Name.StartsWith("http:", StringComparison.Ordinal))
					{
						Scanned_File_Name = $"http:{StringsHelper.Replace(Scanned_File_Name, "/", "\\", 1, -1, CompareMethod.Binary)}";
					}

					// 08/23/2007 - By David D. Cruger; Converted to WebBrowser Control Instread of Adobe Control
					web_Browser.Navigate(new Uri(Scanned_File_Name));

					cmdViewDocumentInSeparateWindow.Visible = true;
					lbl_gen[122].Visible = true; // Open In Browser
					lbl_gen[124].Visible = bAttachDocVisible; // Attach Doc To Company

					modStatusBar.Clear_Status_Bar(modAdminCommon.SB);

				}
				else
				{
					web_Browser.Visible = false;
					MessageBox.Show("Document not found", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly())); //aey 8/13/04
				} // If fso.FileExists(Scanned_File_Name) = True Then

			} // If LCase(Trim(ado_DocLog!faalog_doc_type & " ")) = "nts" Then

			grd_DocumentLog.CurrentRowIndex = lRow1;
			modCommon.Highlight_Grid_Row(grd_DocumentLog, 1);




			// added MSW - 10/7/21 -----
			cmdSaveDocNotes[4].Tag = "0";
			int K = 0;
			bool found_spot = false;
			if (($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim().ToLower() != "")
			{
				K = 0;
				found_spot = false;

				int tempForEndVar3 = cbo_drop_array[1].Items.Count - 1;
				for (K = 0; K <= tempForEndVar3; K++)
				{
					cbo_drop_array[1].SelectedIndex = K;

					if (cbo_drop_array[1].Text.Trim().ToLower().StartsWith(($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim().ToLower(), StringComparison.Ordinal))
					{
						K = cbo_drop_array[1].Items.Count;
						found_spot = true;
					}
				}

				if (found_spot)
				{
					cmdSaveDocNotes[4].Tag = Convert.ToString(ado_DocLog["faalog_id"]);
					cmdSaveDocNotes[4].Visible = true;
					cbo_drop_array[1].Visible = true;
				}
				else
				{
					cmdSaveDocNotes[4].Tag = "0";
					cmdSaveDocNotes[4].Visible = false;
					cbo_drop_array[1].Visible = false;
				}


			}


			this.Cursor = CursorHelper.CursorDefault;

		} // grd_DocumentLog_Click

		private void grd_Equipment_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			if (grd_Equipment.CurrentRowIndex > 0)
			{
				this.Cursor = Cursors.WaitCursor;
				frm_AircraftDetails.DefInstance.DetailType = "Equipment";

				frm_AircraftDetails.DefInstance.DetailID = grd_Equipment.get_RowData(grd_Equipment.CurrentRowIndex);

				if (grd_Equipment.get_RowData(grd_Equipment.CurrentRowIndex) == 0)
				{
					frm_AircraftDetails.DefInstance.UpdateMode = true;
					grd_Equipment.CurrentColumnIndex = 0;
					frm_AircraftDetails.DefInstance.cbo_adet_data_name.Text = grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].FormattedValue.ToString();
					grd_Equipment.CurrentColumnIndex = 1;
					frm_AircraftDetails.DefInstance.txt_adet_data_description.Text = grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].FormattedValue.ToString();
				}

				frm_AircraftDetails.DefInstance.inACID = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
				frm_AircraftDetails.DefInstance.inJournID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);

				frm_AircraftDetails.DefInstance.ShowDialog();
				this.Activate();

				if (DetailDescription != modGlobalVars.cEmptyString || DetailName == "Delete")
				{

					if (DetailName.Trim() != "")
					{
						DetailDescription = Apply_Aircraft_Rules(DetailDescription, DetailType, DetailName);
					}

					grd_Equipment.CurrentColumnIndex = 0;
					if (grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].FormattedValue.ToString().Trim().ToLower() == "general")
					{
						EquipmentGeneralChanged = true;
					}

					if (DetailName == "Delete")
					{
						if (grd_Equipment.RowsCount == 2)
						{
							grd_Equipment.FixedRows = 0;
							grd_Equipment[0, 0].Value = "None Found";
							grd_Equipment[0, 1].Value = modGlobalVars.cEmptyString;
							grd_Equipment.CurrentRowIndex = 1;
						}
						grd_Equipment.RemoveItem(grd_Equipment.CurrentRowIndex);
					}
					else
					{
						grd_Equipment.CurrentColumnIndex = 1;
						grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].Value = DetailDescription;
					}

					EquipmentGridChanged = true;

					DetailDescription = modGlobalVars.cEmptyString;
					DetailName = modGlobalVars.cEmptyString;
				}

			}

		}

		private void grd_Exterior_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				if (grd_Exterior.CurrentRowIndex > 0)
				{
					this.Cursor = Cursors.WaitCursor;
					frm_AircraftDetails.DefInstance.DetailType = "Exterior";

					frm_AircraftDetails.DefInstance.DetailID = grd_Exterior.get_RowData(grd_Exterior.CurrentRowIndex);

					if (grd_Exterior.get_RowData(grd_Exterior.CurrentRowIndex) == 0)
					{
						frm_AircraftDetails.DefInstance.UpdateMode = true;
						grd_Exterior.CurrentColumnIndex = 0;
						frm_AircraftDetails.DefInstance.cbo_adet_data_name.Text = grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].FormattedValue.ToString();
						grd_Exterior.CurrentColumnIndex = 1;
						frm_AircraftDetails.DefInstance.txt_adet_data_description.Text = grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].FormattedValue.ToString();
					}

					frm_AircraftDetails.DefInstance.inACID = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
					frm_AircraftDetails.DefInstance.inJournID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);

					frm_AircraftDetails.DefInstance.ShowDialog();
					this.Activate();

					if (DetailDescription != modGlobalVars.cEmptyString || DetailName == "Delete")
					{

						if (DetailName.Trim() != "")
						{
							DetailDescription = Apply_Aircraft_Rules(DetailDescription, DetailType, DetailName);
						}

						grd_Exterior.CurrentColumnIndex = 0;
						if (grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].FormattedValue.ToString().Trim().ToLower() == "colors")
						{
							ExteriorColorsChanged = true;
						}

						if (DetailName == "Delete")
						{
							if (grd_Exterior.RowsCount == 2)
							{
								grd_Exterior.FixedRows = 0;
								grd_Exterior[0, 0].Value = "None Found";
								grd_Exterior[0, 1].Value = modGlobalVars.cEmptyString;
								grd_Exterior.CurrentRowIndex = 1;
							}
							grd_Exterior.RemoveItem(grd_Exterior.CurrentRowIndex);
						}
						else
						{
							grd_Exterior.CurrentColumnIndex = 1;
							grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].Value = DetailDescription;
						}

						ExteriorGridChanged = true;

						DetailDescription = modGlobalVars.cEmptyString;
						DetailName = modGlobalVars.cEmptyString;

					}

				}
			}
			catch (System.Exception excep)
			{
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"grd_Exterior_error:  {Information.Err().Number.ToString()}  {excep.Message}");
				this.Cursor = CursorHelper.CursorDefault;
			}

		}

		private void grd_Features_DoubleClick(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.grd_Features, eventSender);

			// If grd_Features.CellForeColor = vbRed Then
			//  If grd_Features(Index).Row(grd_Features(Index)).Text = "" Then
			//    grd_Features(Index).sel
			//  End If
			// End If

			string Query = "";
			bool pass_question = false;

			grd_Features[Index].CurrentColumnIndex = 0;
			string selected_color = ColorTranslator.ToOle(grd_Features[Index].CellForeColor).ToString();

			grd_Features[Index].CurrentColumnIndex = 3;
			string selected_text = grd_Features[Index][grd_Features[Index].CurrentRowIndex, grd_Features[Index].CurrentColumnIndex].FormattedValue.ToString();


			// ADDED MSW - so that popup doesnt show when it shouldnt - (RVSM) 9/30/18
			if (skip_question_EMP)
			{
				if (selected_text.Trim() != "EMP" && grd_Features[Index].CurrentRowIndex > 1)
				{ // if its not EMP, then move row up
					grd_Features[Index].CurrentRowIndex--;

					grd_Features[Index].CurrentColumnIndex = 0;
					selected_color = ColorTranslator.ToOle(grd_Features[Index].CellForeColor).ToString();

					grd_Features[Index].CurrentColumnIndex = 3;
					selected_text = grd_Features[Index][grd_Features[Index].CurrentRowIndex, grd_Features[Index].CurrentColumnIndex].FormattedValue.ToString();

					if (selected_text.Trim() != "EMP" && grd_Features[Index].CurrentRowIndex > 1)
					{ // if its not EMP, then move row up
						grd_Features[Index].CurrentRowIndex--;

						grd_Features[Index].CurrentColumnIndex = 0;
						selected_color = ColorTranslator.ToOle(grd_Features[Index].CellForeColor).ToString();

						grd_Features[Index].CurrentColumnIndex = 3;
						selected_text = grd_Features[Index][grd_Features[Index].CurrentRowIndex, grd_Features[Index].CurrentColumnIndex].FormattedValue.ToString();
					}
				}
			}

			if (selected_color == ColorTranslator.ToOle(Color.Red).ToString())
			{
				grd_Features[Index].CellForeColor = Color.Red;

				grd_Features[Index].CurrentColumnIndex = 0;
				selected_text = grd_Features[Index][grd_Features[Index].CurrentRowIndex, grd_Features[Index].CurrentColumnIndex].FormattedValue.ToString();

				if (skip_question_EMP)
				{
					pass_question = true;
				}
				else if (MessageBox.Show($"Would you like to identify this aircraft as Not Equipped with {selected_text} ?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
				{ 
					pass_question = true;
				}

				if (pass_question)
				{
					// UPDATE STATEMENT TO CHANGE FEATURE CODE TO BE NO

					grd_Features[Index].CurrentColumnIndex = 3;
					selected_text = grd_Features[Index][grd_Features[Index].CurrentRowIndex, grd_Features[Index].CurrentColumnIndex].FormattedValue.ToString();

					Query = " UPDATE Aircraft_Key_Feature SET  afeat_status_flag = 'N' ";
					Query = $"{Query} WHERE afeat_ac_id = {txt_ac_id.Text}";
					Query = $"{Query} AND afeat_journ_id = 0";
					Query = $"{Query} AND afeat_feature_code = '{selected_text.Trim()}' ";

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) | ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();

					Fill_Feature_Grid(Index.ToString());
					if (Index == 0)
					{
						Fill_Feature_Grid("4");
					}
					else if (Index == 4)
					{ 
						Fill_Feature_Grid("0");

						if (selected_text.Trim() == "EMP" && cbo_ac_engine_maint_prog.Text.Trim() == "U - Unknown - Unknown")
						{
							cbo_ac_engine_maint_prog.Text = "N - None - Confirmed not on a maintenance program";
						}

					}

					string tempRefParam = "Key Feature Updated";
					System.DateTime tempRefParam2 = DateTime.Today;
					System.DateTime tempRefParam3 = DateTime.Today;
					modCommon.Start_Activity_Monitor_Message("Aircraft Key Feature Updated", ref tempRefParam, ref tempRefParam2, ref tempRefParam3);
					string tempRefParam4 = "Key Feature Updated";
					System.DateTime tempRefParam5 = DateTime.Today;
					modCommon.End_Activity_Monitor_Message("Aircraft Key Feature Updated", ref tempRefParam4, DateTime.Today, ref tempRefParam5, Convert.ToInt32(Double.Parse(txt_ac_id.Text)), 0, 0, 0, 0);
				}

			}
			else
			{
				grd_Features[Index].CurrentColumnIndex = 1;
				selected_text = grd_Features[Index][grd_Features[Index].CurrentRowIndex, grd_Features[Index].CurrentColumnIndex].FormattedValue.ToString();
				if (selected_text.Trim() == "NOT EQUIPPED WITH")
				{

					grd_Features[Index].CurrentColumnIndex = 0;
					selected_text = grd_Features[Index][grd_Features[Index].CurrentRowIndex, grd_Features[Index].CurrentColumnIndex].FormattedValue.ToString();

					pass_question = false;
					if (skip_question_EMP)
					{
						pass_question = true;
					}
					else if (MessageBox.Show($"Would you like to identify the status of {selected_text} on this aircraft as Unknown?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
					{ 
						pass_question = true;
					}

					if (pass_question)
					{
						// UPDATE STATEMENT TO CHANGE FEATURE CODE TO BE NO

						grd_Features[Index].CurrentColumnIndex = 3;
						selected_text = grd_Features[Index][grd_Features[Index].CurrentRowIndex, grd_Features[Index].CurrentColumnIndex].FormattedValue.ToString();

						Query = " UPDATE Aircraft_Key_Feature SET  afeat_status_flag = 'U' ";
						Query = $"{Query} WHERE afeat_ac_id = {txt_ac_id.Text}";
						Query = $"{Query} AND afeat_journ_id = 0";
						Query = $"{Query} AND afeat_feature_code = '{selected_text.Trim()}' ";

						DbCommand TempCommand_2 = null;
						TempCommand_2 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
						TempCommand_2.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) | ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
						TempCommand_2.ExecuteNonQuery();

						Fill_Feature_Grid(Index.ToString());

						if (Index == 0)
						{
							Fill_Feature_Grid("4");
						}
						else if (Index == 4)
						{ 
							Fill_Feature_Grid("0");

							if (selected_text.Trim() == "EMP" && cbo_ac_engine_maint_prog.Text.Trim() == "N - None - Confirmed not on a maintenance program")
							{
								cbo_ac_engine_maint_prog.Text = "U - Unknown - Unknown";
							}
						}

						string tempRefParam6 = "Key Feature Updated";
						System.DateTime tempRefParam7 = DateTime.Today;
						System.DateTime tempRefParam8 = DateTime.Today;
						modCommon.Start_Activity_Monitor_Message("Aircraft Key Feature Updated", ref tempRefParam6, ref tempRefParam7, ref tempRefParam8);
						string tempRefParam9 = "Key Feature Updated";
						System.DateTime tempRefParam10 = DateTime.Today;
						modCommon.End_Activity_Monitor_Message("Aircraft Key Feature Updated", ref tempRefParam9, DateTime.Today, ref tempRefParam10, Convert.ToInt32(Double.Parse(txt_ac_id.Text)), 0, 0, 0, 0);

					}
				}
				else if (selected_text.Trim() == "EQUIPPED WITH")
				{ 


					//kfeat_auto_generate_flag is in column 2
					grd_Features[Index].CurrentColumnIndex = 2;
					selected_text = grd_Features[Index][grd_Features[Index].CurrentRowIndex, grd_Features[Index].CurrentColumnIndex].FormattedValue.ToString();
					if (skip_question_EMP)
					{ // added MSW

					}
					else if (selected_text.Trim() == "Y")
					{ 
						grd_Features[Index].CurrentColumnIndex = 0;
						selected_text = grd_Features[Index][grd_Features[Index].CurrentRowIndex, grd_Features[Index].CurrentColumnIndex].FormattedValue.ToString();
						MessageBox.Show($"{selected_text} is an automated feature.  Therefore you must modify details to reflect any changes.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
					}
					else
					{
						grd_Features[Index].CurrentColumnIndex = 0;
						selected_text = grd_Features[Index][grd_Features[Index].CurrentRowIndex, grd_Features[Index].CurrentColumnIndex].FormattedValue.ToString();
						MessageBox.Show($"{selected_text} is an automated feature.  Therefore you must modify details to reflect any changes.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
					}





				}




			}




		}


		private void grd_Interior_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				string testtextbefore = "";

				if (grd_Interior.CurrentRowIndex > 0)
				{
					this.Cursor = Cursors.WaitCursor;
					frm_AircraftDetails.DefInstance.DetailType = "Interior";

					frm_AircraftDetails.DefInstance.DetailID = grd_Interior.get_RowData(grd_Interior.CurrentRowIndex);

					if (grd_Interior.get_RowData(grd_Interior.CurrentRowIndex) == 0)
					{
						frm_AircraftDetails.DefInstance.UpdateMode = true;
						grd_Interior.CurrentColumnIndex = 0;
						frm_AircraftDetails.DefInstance.cbo_adet_data_name.Text = grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].FormattedValue.ToString();
						grd_Interior.CurrentColumnIndex = 1;
						frm_AircraftDetails.DefInstance.txt_adet_data_description.Text = grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].FormattedValue.ToString();
					}

					frm_AircraftDetails.DefInstance.inACID = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
					frm_AircraftDetails.DefInstance.inJournID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);

					frm_AircraftDetails.DefInstance.ShowDialog();

					this.Activate();

					if (DetailDescription != modGlobalVars.cEmptyString || DetailName == "Delete")
					{

						if (DetailName.Trim() != "")
						{
							testtextbefore = DetailDescription;

							DetailDescription = Apply_Aircraft_Rules(DetailDescription, DetailType, DetailName);
							//  MsgBox ("BEFORE: " & testtextbefore & " --- testtextafter: " & DetailDescription)
						}


						grd_Interior.CurrentColumnIndex = 0;
						if (grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].FormattedValue.ToString().Trim().ToLower() == "general")
						{
							InteriorGeneralChanged = true;
						}
						if (grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].FormattedValue.ToString().Trim().ToLower() == "lavatory")
						{
							InteriorLavatoryChanged = true;
						}
						if (grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].FormattedValue.ToString().Trim().ToLower() == "air conditioning")
						{
							InteriorAirConditioningChanged = true;
						}

						if (DetailName == "Delete")
						{
							if (grd_Interior.RowsCount == 2)
							{
								grd_Interior.FixedRows = 0;
								grd_Interior[0, 0].Value = "None Found";
								grd_Interior[0, 1].Value = modGlobalVars.cEmptyString;
								grd_Interior.CurrentRowIndex = 1;
							}
							grd_Interior.RemoveItem(grd_Interior.CurrentRowIndex);
						}
						else
						{
							grd_Interior.CurrentColumnIndex = 1;
							grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].Value = DetailDescription;
						}

						InteriorGridChanged = true;

						DetailDescription = modGlobalVars.cEmptyString;
						DetailName = modGlobalVars.cEmptyString;


					}

				}
			}
			catch (System.Exception excep)
			{
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"grd_Interior_error:  {Information.Err().Number.ToString()}  {excep.Message}");
				this.Cursor = CursorHelper.CursorDefault;
			}

		}

		private void grd_maint_DoubleClick(Object eventSender, EventArgs eventArgs)
		{


			string tempRefParam = "";
			string tempRefParam2 = "";
			string tempRefParam3 = "";
			bool tempRefParam4 = false;
			int tempRefParam5 = 0;
			string tempRefParam6 = "";
			bool tempRefParam7 = false;
			if (CheckForAnyChanges(ref tempRefParam, ref tempRefParam2, ref tempRefParam3, ref tempRefParam4, ref tempRefParam5, ref tempRefParam6, ref tempRefParam7))
			{
				MessageBox.Show("This Aircraft has changes that need to be Saved before a new window is launched. It will ask to save your current record", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
				Save_Aircraft_Click();
			}

			frm_Web_Page.DefInstance.AC_ID = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
			frm_Web_Page.DefInstance.Ac_Maint_ID = (grd_maint.CurrentRowIndex - 1);
			//frm_Web_Page.WhichReport = "View Maintenance Details"
			//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//VB.Global.Load(frm_Web_Page.DefInstance);
			frm_Web_Page.DefInstance.Show();


			//        Load frm_WebReport
			//        frm_WebReport.AC_ID = adoAircraftRecordset!AC_ID
			//        frm_WebReport.Ac_Maint_ID = (grd_maint.Row - 1)
			//        frm_WebReport.WhichReport = "View Maintenance Details"
			//        frm_WebReport.Show
			//


		}


		private void grd_Maintenance_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				if (grd_Maintenance.CurrentRowIndex > 0)
				{

					frm_AircraftDetails.DefInstance.DetailType = "Maintenance";

					frm_AircraftDetails.DefInstance.DetailID = grd_Maintenance.get_RowData(grd_Maintenance.CurrentRowIndex);

					if (grd_Maintenance.get_RowData(grd_Maintenance.CurrentRowIndex) == 0)
					{
						frm_AircraftDetails.DefInstance.UpdateMode = true;
						grd_Maintenance.CurrentColumnIndex = 0;
						frm_AircraftDetails.DefInstance.cbo_adet_data_name.Text = grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].FormattedValue.ToString();
						grd_Maintenance.CurrentColumnIndex = 1;
						frm_AircraftDetails.DefInstance.txt_adet_data_description.Text = grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].FormattedValue.ToString();
					}

					frm_AircraftDetails.DefInstance.inACID = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
					frm_AircraftDetails.DefInstance.inJournID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);

					frm_AircraftDetails.DefInstance.ShowDialog();

					this.Activate();

					if (DetailDescription != modGlobalVars.cEmptyString || DetailName == "Delete")
					{

						if (DetailName.Trim() != "")
						{
							DetailDescription = Apply_Aircraft_Rules(DetailDescription, DetailType, DetailName);
						}

						grd_Maintenance.CurrentColumnIndex = 0;
						if (grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].FormattedValue.ToString().Trim().ToLower() == "inspection")
						{
							MaintenanceInspectionChanged = true;
						}

						if (DetailName == "Delete")
						{
							if (grd_Maintenance.RowsCount == 2)
							{
								grd_Maintenance.FixedRows = 0;
								grd_Maintenance[0, 0].Value = "None Found";
								grd_Maintenance[0, 1].Value = modGlobalVars.cEmptyString;
								grd_Maintenance.CurrentRowIndex = 1;
							}
							grd_Maintenance.RemoveItem(grd_Maintenance.CurrentRowIndex);
						}
						else
						{
							grd_Maintenance.CurrentColumnIndex = 1;
							grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].Value = DetailDescription;
						}

						MaintenanceGridChanged = true;

						DetailDescription = modGlobalVars.cEmptyString;
						DetailName = modGlobalVars.cEmptyString;
					}

				}
			}
			catch (System.Exception excep)
			{
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"grd_Maintenance_error:  {Information.Err().Number.ToString()}  {excep.Message}");
				this.Cursor = CursorHelper.CursorDefault;
			}

		}



		private void grd_pubs_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.grd_pubs, eventSender);

			string Query = "";
			string bgcolor = "";

			int lRow1 = grd_pubs[Index].MouseRow;
			int lCol1 = grd_pubs[Index].MouseCol;

			if (Index == 0)
			{
				if (lRow1 == 0)
				{
					frm_WebCrawl.DefInstance.WhichAcctRep = modAdminCommon.gbl_Account_ID;

					//Call setup_doc_request
					setup_memo_request();

					//frm_WebCrawl.Show vbModal  ' removed modal MSW - 5/17/21
					frm_WebCrawl.DefInstance.Show();

					fill_ac_pub_details(0);
				}
				else if (lCol1 == 1)
				{ 

					grd_pubs[Index].CurrentColumnIndex = 4;
					grd_pubs[Index].CurrentRowIndex = lRow1;
					bgcolor = ColorTranslator.ToOle(grd_pubs[Index].CellBackColor).ToString();

					if (grd_pubs[Index][grd_pubs[Index].CurrentRowIndex, grd_pubs[Index].CurrentColumnIndex].FormattedValue.ToString().Trim() != "")
					{
						//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//VB.Global.Load(frm_WebReport.DefInstance);

						frm_WebReport.DefInstance.PassedPubLink = grd_pubs[Index][grd_pubs[Index].CurrentRowIndex, grd_pubs[Index].CurrentColumnIndex].FormattedValue.ToString();

						frm_WebReport.DefInstance.WhichReport = "Yacht_Pub";

						frm_WebReport.DefInstance.Show();
					}
				}
			}
			else if (Index == 1)
			{ 
				if (lRow1 == 0)
				{
					frm_WebCrawl.DefInstance.WhichAcctRep = modAdminCommon.gbl_Account_ID;

					setup_doc_request();

					// frm_WebCrawl.Show vbModal   ' removed modal MSW - 5/17/21
					frm_WebCrawl.DefInstance.Show();

					//Call fill_ac_pub_details(0)
				}
				else
				{

					//            grd_pubs(Index).Col = 4
					//            grd_pubs(Index).Row = lRow1
					//            bgcolor = grd_pubs(Index).CellBackColor
					//
					//            If Trim(grd_pubs(Index).Text) <> "" Then
					//                Load frm_WebReport
					//
					//                frm_WebReport.PassedPubLink = grd_pubs(Index).Text
					//
					//                frm_WebReport.WhichReport = "Yacht_Pub"
					//
					//                frm_WebReport.Show
					//            End If
				}
			}





		}


		private void grd_pubs_DoubleClick(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.grd_pubs, eventSender);



			if (grd_pubs[Index].CurrentRowIndex == 1)
			{

			}
			else
			{
				if (Index == 0)
				{
					grd_pubs[Index].CurrentColumnIndex = 6;
					frm_WebCrawl.DefInstance.pub_single_click_code(Convert.ToInt32(grd_pubs[Index][grd_pubs[Index].CurrentRowIndex, grd_pubs[Index].CurrentColumnIndex].FormattedValue), 0); 
					frm_WebCrawl.DefInstance.from_spot = "AC";
					//frm_WebCrawl.Show vbModal  ' ' removed modal MSW - 5/17/21
					frm_WebCrawl.DefInstance.Show();

					fill_ac_pub_details(0);
				}
				else if (Index == 1)
				{  // company side
					if (grd_pubs[Index][grd_pubs[Index].CurrentRowIndex, grd_pubs[Index].CurrentColumnIndex].FormattedValue.ToString().Trim() == "")
					{
					}
					else
					{
						grd_pubs[Index].CurrentColumnIndex = 6;
						frm_WebCrawl.DefInstance.pub_single_click_code(Convert.ToInt32(grd_pubs[Index][grd_pubs[Index].CurrentRowIndex, grd_pubs[Index].CurrentColumnIndex].FormattedValue.ToString()), 0, "");
						frm_WebCrawl.DefInstance.from_spot = "AC";
						// frm_WebCrawl.Show vbModal  ' removed modal MSW - 5/17/21
						frm_WebCrawl.DefInstance.Show();

						fill_ac_pub_details(1);
					}
				}
			}




		}


		private void grdAircraftDocuments_Click(Object eventSender, EventArgs eventArgs)
		{


			int lRow1 = grdAircraftDocuments.CurrentRowIndex;
			int lCol1 = grdAircraftDocuments.CurrentColumnIndex;

			if (lRow1 > 0)
			{
				//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grdAircraftDocuments.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				GetDocLogNote(grdAircraftDocuments.BandData(lRow1));
				grdAircraftDocuments.CurrentRowIndex = lRow1;
				modCommon.Highlight_Grid_Row(grdAircraftDocuments);
			}

		}

		private void grdAircraftDocuments_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			string SortBy = "";
			int lRow1 = 0;
			int lCol1 = 0;

			try
			{

				lRow1 = grdAircraftDocuments.MouseRow;
				lCol1 = grdAircraftDocuments.MouseCol;

				grdAircraftDocuments.Enabled = false;
				tbr_ToolBar.Enabled = false;

				if (lRow1 == 0)
				{


					switch(lCol1)
					{
						case 0 :  // Document Date 
							SortBy = "ORDER BY adoc_doc_date DESC, faalog_tape_date DESC, journ_id "; 
							 
							break;
						case 1 :  // Doc Type 
							SortBy = "ORDER BY adoc_doc_type, adoc_doc_date DESC, faalog_tape_date DESC, journ_id "; 
							 
							break;
						case 2 :  // Doc Subject 
							SortBy = "ORDER BY journ_subject, adoc_doc_type, adoc_doc_date DESC, faalog_tape_date DESC, journ_id "; 
							 
							break;
						case 3 :  // Document Exists 
							// Do Nothing 
							 
							break;
						case 4 :  // Tape Date 
							SortBy = "ORDER BY faalog_tape_date DESC, adoc_doc_date DESC, journ_id "; 
							 
							break;
						default:
							SortBy = modGlobalVars.cEmptyString; 
							 
							break;
					} // Case lCol1

					if (lCol1 != 3)
					{
						FillAircraftDocumentsGrid(SortBy);
					}

				}
				else
				{
					if (lRow1 > 0)
					{
						frm_Journal.DefInstance.Reference_Journal_ID = grdAircraftDocuments.get_RowData(grdAircraftDocuments.CurrentRowIndex);
						frm_Journal.DefInstance.Reference_Comp_Id = 0;
						frm_Journal.DefInstance.Reference_Contact_Id = 0;
						frm_Journal.DefInstance.ShowDialog();
					}

				} // If lRow1 = 0 Then

				grdAircraftDocuments.Enabled = true;
				tbr_ToolBar.Enabled = true;

				if (!modGlobalVars.bKeepTransactionFocus)
				{
					this.Activate();
				}
				else
				{
					frm_Transaction_Documents.DefInstance.Activate();
				}

				search_off();
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Report_Error($"grdAircraftDocuments_DblClick_Error: {excep.Message} ac_id: {txt_ac_id.Text}{modGlobalVars.cEmptyString}");
			}

		}

		private void GrdHelicopter_Click(Object eventSender, EventArgs eventArgs)
		{

			if (GrdHelicopter.CurrentRowIndex > 0)
			{
				cmdHelicopter[1].Enabled = true;
				cmdHelicopter[1].Visible = true;

				if (RememberGridCol < 2)
				{
					if (bEdit_HelicopterGrid_Outstanding)
					{
						modGridEditCommon.InPlace_Grid_Reset(GrdHelicopter, cbo_edit_heli, RememberGridRow, RememberGridCol);
						bEdit_HelicopterGrid_Outstanding = false;
					}
				}
				else if (RememberGridCol > 1)
				{ 
					if (bEdit_HelicopterGrid_Outstanding)
					{
						modGridEditCommon.InPlace_Grid_Reset(GrdHelicopter, txt_edit_heli, RememberGridRow, RememberGridCol);
						bEdit_HelicopterGrid_Outstanding = false;
					}

				}

				GrdHelicopter.RowSel = GrdHelicopter.CurrentRowIndex;

			}

		}

		private void GrdHelicopter_DoubleClick(Object eventSender, EventArgs eventArgs)
		{
			//Provide cell-editing for grid
			//8/10/05 aey
			string Category_Type = "";
			string SubCat = "";

			HelicopterChanged = true;

			if (GrdHelicopter.CurrentRowIndex > 0)
			{

				if (GrdHelicopter.MouseRow > 0)
				{ //do not edit title column

					search_off();

					RememberGridRow = GrdHelicopter.MouseRow;
					RememberGridCol = GrdHelicopter.MouseCol;

					GrdHelicopter.CurrentColumnIndex = 0;
					Category_Type = GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Trim();
					GrdHelicopter.CurrentColumnIndex = RememberGridCol;

					if (RememberGridCol == 0)
					{

						modFillAircraftControls.Fill_Helicopter_Categories(cbo_edit_heli);
						modGridEditCommon.InPlace_Grid_Edit(GrdHelicopter, cbo_edit_heli, false, true, null, GrdHelicopter.Left * 15, GrdHelicopter.Top * 15);
						bEdit_HelicopterGrid_Outstanding = true;

					}
					else if (RememberGridCol == 1)
					{ 

						GrdHelicopter.CurrentColumnIndex = RememberGridCol;
						SubCat = GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Trim();

						if (SubCat != "N/A")
						{
							if (Category_Type.Trim() == modGlobalVars.cEmptyString)
							{
								MessageBox.Show("Please select a Category", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
								GrdHelicopter.CurrentColumnIndex = RememberGridCol;
								return;
							}

							modFillAircraftControls.Fill_Helicopter_SubCategories(cbo_edit_heli, Category_Type);
							modGridEditCommon.InPlace_Grid_Edit(GrdHelicopter, cbo_edit_heli, false, true, null, GrdHelicopter.Left * 15, GrdHelicopter.Top * 15);

							bEdit_HelicopterGrid_Outstanding = true;
						}

					}
					else if (RememberGridCol > 1)
					{ 

						if (Category_Type.Trim() == modGlobalVars.cEmptyString)
						{
							MessageBox.Show("Please select a Category", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
							GrdHelicopter.CurrentColumnIndex = RememberGridCol;
							return;
						}

						GrdHelicopter.CurrentColumnIndex = 1;
						SubCat = GrdHelicopter[GrdHelicopter.CurrentRowIndex, GrdHelicopter.CurrentColumnIndex].FormattedValue.ToString().Trim();
						GrdHelicopter.CurrentColumnIndex = RememberGridCol;

						if (SubCat != "N/A")
						{
							if (SubCat.Trim() == modGlobalVars.cEmptyString)
							{
								MessageBox.Show("Please select a Sub-Category", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
								GrdHelicopter.CurrentColumnIndex = RememberGridCol;
								return;
							}
						}

						modGridEditCommon.InPlace_Grid_Edit(GrdHelicopter, txt_edit_heli, false, true, null, GrdHelicopter.Left * 15, GrdHelicopter.Top * 15);

						bEdit_HelicopterGrid_Outstanding = true;

					}

				} //GrdHelicopter.MouseRow > 0

			} // GrdHelicopter.Row > 0

		}

		private void grdLeaseInfo_DoubleClick(Object eventSender, EventArgs eventArgs)
		{


			grdLeaseInfo.CurrentColumnIndex = 0;

			if (grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
			{
				txt_ac_lease_expire_date.Text = DateTime.Parse(grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString().Trim()).ToString("d");
			}
			txt_ac_lease_expire_date.Tag = txt_ac_lease_expire_date.Text;

			grdLeaseInfo.CurrentColumnIndex++;
			txt_ac_lease_type[0].Text = grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString();
			txt_ac_lease_type[0].Tag = txt_ac_lease_type[0].Text;

			grdLeaseInfo.CurrentColumnIndex++;
			txt_ac_lease_type[1].Text = grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString();
			txt_ac_lease_type[1].Tag = txt_ac_lease_type[1].Text;

			if (!(snpLease.EOF && snpLease.BOF))
			{

				snpLease.MoveFirst();
				int tempForEndVar = grdLeaseInfo.CurrentRowIndex - 1;
				for (int I = 0; I <= tempForEndVar; I++)
				{
					snpLease.MoveNext();
				}

			}

			grdLeaseInfo.CurrentColumnIndex++;
			if (Convert.ToString(snpLease["aclease_expired"]).Trim().ToUpper() == "Y")
			{

				bWasExpiredAlready = true;

				if (grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
				{
					txtLeaseExpireConfirmDate.Text = DateTime.Parse(grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString().Trim()).ToString("d");
				}
				else
				{
					txtLeaseExpireConfirmDate.Text = modGlobalVars.cEmptyString;
				}
				chkConfirmLeaseExpired.CheckState = CheckState.Checked;

				WasVerified = true;
				chkConfirmLeaseExpired.Enabled = false;
			}
			else
			{
				bWasExpiredAlready = false;
				// RTW - 3/16/2004 - CHANGED TO NOT DEFAULT TO TODAYS DATE
				txtLeaseExpireConfirmDate.Text = modGlobalVars.cEmptyString;
				chkConfirmLeaseExpired.CheckState = CheckState.Unchecked;
				WasVerified = false;
				chkConfirmLeaseExpired.Enabled = true;
				txtLeaseExpireConfirmDate.Enabled = true;
			}



			grdLeaseInfo.CurrentColumnIndex += 3;
			txt_ac_lease_type[2].Text = grdLeaseInfo[grdLeaseInfo.CurrentRowIndex, grdLeaseInfo.CurrentColumnIndex].FormattedValue.ToString();
			txt_ac_lease_type[2].Tag = txt_ac_lease_type[2].Text;

			if (Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(snpLease["aclease_journ_id"])}").Trim()) == 0)
			{
				cmdSaveLease[0].Text = "Delete";
			}
			else
			{
				cmdSaveLease[0].Text = "Save";
			}

			if (modAircraft.CanBeExpired(Convert.ToInt32(snpLease["aclease_ac_id"]), Convert.ToInt32(snpLease["aclease_journ_id"])))
			{
				chkConfirmLeaseExpired.Enabled = chkConfirmLeaseExpired.CheckState == CheckState.Unchecked;
			}
			else
			{
				chkConfirmLeaseExpired.Enabled = false;
				txtLeaseExpireConfirmDate.Text = modGlobalVars.cEmptyString;
			}

			txtLeaseExpireConfirmDate.Tag = txtLeaseExpireConfirmDate.Text;


			pnl_LeaseList.Visible = false;
			pnl_LeaseEntry.Visible = true;

		}

		private void grdTransactionDocuments_DoubleClick(Object eventSender, EventArgs eventArgs)
		{
			//----------------------------------------------------
			//aey 8/12/04 --- put in directory prefix logic
			//----------------------------------------------------


			string nAircraftID = Conversion.Str(adoAircraftRecordset["ac_id"]).Trim();
			StringBuilder sDirName = new StringBuilder();
			sDirName.Append(modGlobalVars.cEmptyString);
			// IDENTIFY THE SUBDIRECTORY WHERE THE DOCUMENT IS BASE ON THE ACID

			switch(Strings.Len(nAircraftID.Trim()))
			{
				case 1 : case 2 : case 3 :  // THE AIRCRAFT ID MUST BE LESS THAN 1000 SO JUST SET THE DIRECTORY 
					sDirName = new StringBuilder("0-999"); 
					break;
				case 4 :  // AIRCRAFT ID MUST BE IN THE THOUSANDS 
					sDirName = new StringBuilder(nAircraftID.Trim().Substring(0, Math.Min(1, nAircraftID.Trim().Length))); 
					int tempForEndVar = Strings.Len(nAircraftID.Trim()) - 1; 
					for (int I = 1; I <= tempForEndVar; I++)
					{
						sDirName.Append("0");
					} 
					sDirName.Append($"{modGlobalVars.cHyphen}{nAircraftID.Substring(0, Math.Min(1, nAircraftID.Length))}999"); 
					break;
				case 5 :  // AIRCRAFT ID MUST BE IN THE TENS OF THOUSANDS 
					sDirName = new StringBuilder(nAircraftID.Trim().Substring(0, Math.Min(2, nAircraftID.Trim().Length))); 
					int tempForEndVar2 = Strings.Len(nAircraftID.Trim()) - 2; 
					for (int I = 1; I <= tempForEndVar2; I++)
					{
						sDirName.Append("0");
					} 
					sDirName.Append($"{modGlobalVars.cHyphen}{nAircraftID.Trim().Substring(0, Math.Min(2, nAircraftID.Trim().Length))}999"); 
					break;
				case 6 :  // AIRCRAFT ID MUST BE IN THE HUNDREDS OF THOUSANDS 
					sDirName = new StringBuilder(nAircraftID.Trim().Substring(0, Math.Min(3, nAircraftID.Trim().Length))); 
					int tempForEndVar3 = Strings.Len(nAircraftID.Trim()) - 3; 
					for (int I = 1; I <= tempForEndVar3; I++)
					{
						sDirName.Append("0");
					} 
					sDirName.Append($"-{nAircraftID.Trim().Substring(0, Math.Min(3, nAircraftID.Trim().Length))}999"); 
					break;
				default: // RETURN A DIRECTORY NAME OF "0" IF THE NUMBER IS BIGGER THAN 6 
					sDirName = new StringBuilder("0"); 
					break;
			}


			if (grdTransactionDocuments.get_RowData(grdTransactionDocuments.CurrentRowIndex) > 0)
			{

				modCommon.ViewFile($"{modAdminCommon.gbl_Documents}\\LIBRARY\\{sDirName.ToString()}\\{Convert.ToString(adoAircraftRecordset["ac_id"])}{modGlobalVars.cHyphen}{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}{modGlobalVars.cHyphen}{grdTransactionDocuments.get_RowData(grdTransactionDocuments.CurrentRowIndex).ToString()}.pdf");

			}

		}

		private void Fill_Aircraft_Base_Information(int lAPortId)
		{

			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			string strQuery1 = "";

			try
			{

				if (lAPortId > 0)
				{

					strQuery1 = $"SELECT * FROM Airport WITH (NOLOCK) WHERE (aport_id = {lAPortId.ToString()}) ";

					rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

					if (!rstRec1.BOF && !rstRec1.EOF)
					{

						txtIATACode.Tag = "0";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset["ac_aport_id"]))
						{
							txtIATACode.Tag = lAPortId.ToString();
						}

						txtIATACode.Text = Convert.ToString(rstRec1["aport_iata_code"]).Trim();
						txtICAOCode.Text = Convert.ToString(rstRec1["aport_icao_code"]).Trim();
						txtFAAIDCode.Text = ($"{Convert.ToString(rstRec1["aport_faaid_code"])} ").Trim();
						txtBaseCity.Text = Convert.ToString(rstRec1["Aport_city"]).Trim();
						txtBaseAirportName.Text = Convert.ToString(rstRec1["aport_name"]).Trim();

						modCommon.SetComboBoxValue(cboBaseCountry, ($"{Convert.ToString(rstRec1["aport_country"])} ").Trim());
						modFillCompConControls.fill_state_FromArray(cboBaseState, true, false, false, cboBaseCountry.Text);
						modCommon.SetComboBoxValue(cboBaseState, ($"{Convert.ToString(rstRec1["aport_state"])} ").Trim());

						bFormActivate = true;

					} // If rstRec1.BOF = False And rstRec1.EOF = False Then

					rstRec1.Close();

				} // If lAPortId > 0 Then

				rstRec1 = null;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Fill_Aircraft_Base_Information_Error:  {Information.Err().Number.ToString()}  {excep.Message}");
			}

		} // Fill_Aircraft_Base_Information

		private void lbl_gen_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.lbl_gen, eventSender);

			int lAPortId = 0;
			string strFAADocDir = "";
			string strFullFileName = "";
			int lCompId = 0;
			int lRow1 = 0;


			switch(Index)
			{
				case 9 : 
					 
					// ADDED IN MSW - 7/14/2020------------------------ 
					 
					VERIFY_ASKING_AND_ADD_NOTE(Convert.ToInt32(adoAircraftRecordset["ac_id"]), false); 
					 
					break;
				case 122 :  // Open Document In Browser 
					 
					gbOpenDocInBrowser = true; 
					 
					cmdViewDocumentInSeparateWindow_Click(cmdViewDocumentInSeparateWindow, new EventArgs()); 
					 
					break;
				case 123 :  // Show Flight Data Summary 
					 
					//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
					//VB.Global.Load(frm_FAAFlightData.DefInstance); 
					frm_FAAFlightData.DefInstance.SetACId(Convert.ToInt32(adoAircraftRecordset["ac_id"])); 
					frm_FAAFlightData.DefInstance.SetGridType(2);  // Summary By Origin 
					frm_FAAFlightData.DefInstance.Refresh_FAA_Flight_Data_Grid(); 
					modCommon.CenterFormOnHomebaseMainForm(frm_FAAFlightData.DefInstance); 
					frm_FAAFlightData.DefInstance.ShowDialog(); 
					 
					lAPortId = frm_FAAFlightData.DefInstance.GetAPortId(); 
					 
					if (lAPortId > 0)
					{
						Fill_Aircraft_Base_Information(lAPortId);
						modAdminCommon.Record_Event("Aircraft", $"Add Aircraft Base From Flight Data [{lAPortId.ToString()}]-{txtBaseAirportName.Text}", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0);
					} 
					 
					break;
				case 124 :  // Attach FAA Document To A Company Record 
					 
					acTimer1.Enabled = false; 
					 
					lRow1 = grd_DocumentLog.CurrentRowIndex; 
					strFAADocDir = modCommon.Return_FAA_Document_Root_Directory(Convert.ToString(grd_DocumentLog[lRow1, 0].Value).Trim().ToLower()); 
					strFullFileName = $"{strFAADocDir}{modCommon.Get_FAA_Document_In_Process_File_Name(Convert.ToInt32(Double.Parse(Convert.ToString(grd_DocumentLog[lRow1, 8].Value))), Convert.ToInt32(adoAircraftRecordset["ac_id"]))}"; 
					 
					if (File.Exists(strFullFileName))
					{

						lCompId = 0;
						if (!snp_AircraftContacts.BOF && !snp_AircraftContacts.EOF)
						{
							lCompId = Convert.ToInt32(snp_AircraftContacts["comp_id"]);
						} // If snp_AircraftContacts.BOF = False And snp_AircraftContacts.EOF = False Then

						//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//VB.Global.Load(frm_AttachFAADocToCompany.DefInstance);
						frm_AttachFAADocToCompany.DefInstance.SetCompId(lCompId);
						frm_AttachFAADocToCompany.DefInstance.SetDocumentFileName(strFullFileName);
						modCommon.CenterFormOnHomebaseMainForm(frm_AttachFAADocToCompany.DefInstance);
						frm_AttachFAADocToCompany.DefInstance.ShowDialog();
						frm_AttachFAADocToCompany.DefInstance.Close();

					}  // If gfso.FileExists(strFullFileName) = True Then 
					 
					acTimer1.Enabled = true; 
					break;
			} // Case Index

		} // lbl_gen_Click

		public void VERIFY_ASKING_AND_ADD_NOTE(int ac_id, bool force_not_before_due)
		{



			string Query = $"UPDATE Aircraft_General_Dates SET agd_cc_asking_price_date = '{modAdminCommon.DateToday}' ";
			Query = $"{Query}WHERE agd_ac_id = {ac_id.ToString()}";
			Query = $"{Query} AND agd_journ_id = 0 ";

			DbCommand TempCommand = null;
			TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
			TempCommand.CommandText = Query;
			//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
			TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) | ((int) CommandType.Text));
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
			TempCommand.ExecuteNonQuery();

			if (force_not_before_due)
			{ // this is used for when asking price is added or changed
				if (txt_ac_asking_price.Text.Trim() != "")
				{
					modAdminCommon.Rec_Journal_Info.journ_subject = $"Verified Aircraft Asking Price: ${txt_ac_asking_price.Text.Trim()}";
				}
				else
				{
					modAdminCommon.Rec_Journal_Info.journ_subject = "Verified Aircraft Asking Price";
				}
			}
			else if (txt_ac_asking_price.Text.Trim() != "")
			{ 
				modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject($"Verified Aircraft Asking Price: ${txt_ac_asking_price.Text.Trim()}", "VAAP", ac_id, 0);
			}
			else
			{
				modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject("Verified Aircraft Asking Price", "VAAP", ac_id, 0);
			}

			modAdminCommon.Rec_Journal_Info.journ_description = " ";
			modAdminCommon.Rec_Journal_Info.journ_ac_id = ac_id;
			modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "VAAP";
			modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
			modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
			modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
			modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
			modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
			modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
			modAdminCommon.Rec_Journal_Info.journ_status = "A";
			modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

			GetJournalID = frm_Journal.DefInstance.Commit_Journal_Entry();

			lbl_gen[9].ForeColor = Color.Black;
			cbo_ac_asking.BackColor = Color.White;


		}

		private void lbl_gen_DoubleClick(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.lbl_gen, eventSender);

			// RTW - 4/29/2004 - MODIFIED TO RECORD JOURNAL NOTES WHEN REGISTRATION OR BASE
			// ARE CONFIRMED.
			string Query = "";
			string strURL = "";

			tab_aircraft_details.Enabled = false;
			tbr_ToolBar.Enabled = false;
			tab_ACMain.Enabled = false;

			switch(Index)
			{
				case 119 :  // REGISTRATION EXIPRATION DATE 
					 
					// GET THE REGISTRATION NUMBER AND LAUNCH TO THE FAA SITE 
					// http://registry.faa.gov/aircraftinquiry/NNum_Results.aspx?NNumbertxt=244AL 
					 
					//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
					//VB.Global.Load(frm_WebReport.DefInstance); 
					//frm_WebReport.PassedFileName = "http://registry.faa.gov/aircraftinquiry/NNum_Results.aspx?NNumbertxt=" & txt_ac_reg_no(0).Text 
					frm_WebReport.DefInstance.PassedFileName = $"https://registry.faa.gov/AircraftInquiry/Search/NNumberResult?NNumbertxt={txt_ac_reg_no[0].Text}"; 

					 
					frm_WebReport.DefInstance.WhichReport = "View External Document"; 
					frm_WebReport.DefInstance.Show(); 
					 
					break;
				case 58 : 
					if (Airframe_Type_Code == "R")
					{
						GrdHelicopter.Visible = true;
					} 
					break;
				case 63 : 
					frm_AircraftList.DefInstance.is_from_company = true; 
					SSTabHelper.SetSelectedIndex(frm_AircraftList.DefInstance.Tabs1, 0); 
					frm_AircraftList.DefInstance.Show(); 
					break;
				case 102 : 
					ToolTipMain.SetToolTip(lbl_gen[102], cbo_amod_make_name.Text); 
					 
					break;
				case 109 :  // Show Airport List 
					GetBaseCodeInformation(modGlobalVars.chkShowAirportList_INDEX, "", "Show Airport List"); 
					 
					break;
				case 112 :  // Clear Base 
					 
					bInFillBase = true; 
					 
					txtIATACode.Text = modGlobalVars.cEmptyString; 
					txtIATACode.Tag = "0";  // Hold Airport ID 
					txtICAOCode.Text = modGlobalVars.cEmptyString; 
					txtFAAIDCode.Text = modGlobalVars.cEmptyString; 
					txtBaseCity.Text = modGlobalVars.cEmptyString; 
					txtBaseAirportName.Text = modGlobalVars.cEmptyString; 
					cboBaseCountry.SelectedIndex = -1; 
					cboBaseState.SelectedIndex = -1; 
					nBaseControlThatLostFocus = -1; 
					chk_ac_aport_private[0].Enabled = true; 
					chk_ac_aport_private[0].CheckState = CheckState.Unchecked; 
					chk_ac_aport_private[2].Enabled = true; 
					chk_ac_aport_private[2].CheckState = CheckState.Unchecked; 
					modFillCompConControls.fill_state_FromArray(cboBaseState, true, false, false, cboBaseCountry.Text); 
					bInFillBase = false; 

					 
					cboBaseCountry.Enabled = true; 

					 
					//cboBaseState.Enabled = True 
					//txtBaseCity.Enabled = True 
					cboBaseState.Enabled = false; 
					txtBaseCity.Enabled = false; 

					 
					break;
				case 240 : 
					if (!bVerifiedRegNo)
					{
						bVerifiedRegNo = true;
						// USER DOUBLE CLICKED ON THE REGISTRATION NUMBER - UPDATE THE AC REG
						// VERIFIED DATE AND RECORD A JOURNAL NOTE
						search_on("Updating Reg No Confirmation Date...");

						Query = $"UPDATE Aircraft SET ac_reg_no_verify_date = '{modAdminCommon.DateToday}' ";
						Query = $"{Query}WHERE ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
						Query = $"{Query} AND ac_journ_id = 0";

						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) | ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery(); //6/10/04 aey

						// CHANGE FORM COLORS
						txt_ac_reg_no[0].BackColor = Color.White;
						lbl_gen[240].ForeColor = Color.Black;

						// INSERT THE JOURNAL ENTRY
						modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject($"Verified Reg# {txt_ac_reg_no[0].Text}", "VAR", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0);
						modAdminCommon.Rec_Journal_Info.journ_description = " ";
						modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
						modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "VAR";
						modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
						modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
						modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
						modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
						modAdminCommon.Rec_Journal_Info.journ_status = "A";
						modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

						GetJournalID = frm_Journal.DefInstance.Commit_Journal_Entry();

						Fill_Aircraft_Journal_Grid();
						this.Activate();
						search_off();

					} 
					 
					break;
				case 66 : case 67 : case 41 : case 68 : case 69 : case 74 : 
					if (!bVerifiedBase)
					{
						bVerifiedBase = true;
						// USER DOUBLE CLICKED ON THE BASE LABELS - UPDATE THE BASE
						// VERIFIED DATE AND RECORD A JOURNAL NOTE
						search_on("Updating Base Code Confirmation Date...");

						Query = $"UPDATE Aircraft SET ac_airport_code_verify_date = '{modAdminCommon.DateToday}' ";
						Query = $"{Query}WHERE ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
						Query = $"{Query} AND ac_journ_id = 0";

						DbCommand TempCommand_2 = null;
						TempCommand_2 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
						TempCommand_2.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) | ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
						TempCommand_2.ExecuteNonQuery(); //6/10/04 aey


						// CHANGE FORM COLORS
						lbl_gen[66].ForeColor = Color.Black;
						lbl_gen[67].ForeColor = Color.Black;
						lbl_gen[121].ForeColor = Color.Black;
						lbl_gen[41].ForeColor = Color.Black;
						lbl_gen[68].ForeColor = Color.Black;
						lbl_gen[69].ForeColor = Color.Black;
						lbl_gen[74].ForeColor = Color.Black;
						txtIATACode.BackColor = Color.White;
						txtICAOCode.BackColor = Color.White;
						txtFAAIDCode.BackColor = Color.White;
						txtBaseCity.BackColor = Color.White;
						txtBaseAirportName.BackColor = Color.White;
						cboBaseState.BackColor = Color.White;
						cboBaseCountry.BackColor = Color.White;

						// INSERT THE JOURNAL ENTRY
						modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject($"Verified Base - {txtBaseAirportName.Text}", "VAB", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0);
						modAdminCommon.Rec_Journal_Info.journ_description = " ";
						modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
						modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "VAB";
						modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
						modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
						modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
						modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
						modAdminCommon.Rec_Journal_Info.journ_status = "A";
						modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

						GetJournalID = frm_Journal.DefInstance.Commit_Journal_Entry();

						Fill_Aircraft_Journal_Grid();
						this.Activate();
						search_off();

					} 
					 
					break;
				case 20 :  //aey 6/28/04  Engine Maintenance Program 
					 
					if (cbo_ac_engine_maint_prog.Text == "U - Unknown - Unknown")
					{
						bVerifiedEMP = true;
					}  //7/1/04 aey disable updates to unknown 
					 
					if (!bVerifiedEMP)
					{
						bVerifiedEMP = true;


						// USER DOUBLE CLICKED ON THE Engine Maintenance Program LABELS - UPDATE THE BASE
						// VERIFIED DATE AND RECORD A JOURNAL NOTE
						search_on("Updating EMP Confirmation Date...");

						Query = $"UPDATE Aircraft_General_Dates SET agd_cc_emp_date = '{modAdminCommon.DateToday}' ";
						Query = $"{Query}WHERE agd_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
						Query = $"{Query} AND agd_journ_id = 0 ";

						//Call LOCAL_ADO_DB.Execute(Query)
						DbCommand TempCommand_3 = null;
						TempCommand_3 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_3);
						TempCommand_3.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_3.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) | ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_3);
						TempCommand_3.ExecuteNonQuery(); //6/10/04 aey


						// CHANGE FORM COLORS
						lbl_gen[20].ForeColor = Color.Black;
						cbo_ac_engine_maint_prog.BackColor = Color.White;

						// INSERT THE JOURNAL ENTRY  - added in MSW - Create_Confirm_Verify_Subject 5/28/20
						modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject("Verified Engine Maintenance Program Info ", "VAEMP", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0);
						modAdminCommon.Rec_Journal_Info.journ_description = " ";
						modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
						modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "VAEMP";
						modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
						modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
						modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
						modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
						modAdminCommon.Rec_Journal_Info.journ_status = "A";
						modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

						GetJournalID = frm_Journal.DefInstance.Commit_Journal_Entry();

						Fill_Aircraft_Journal_Grid();
						this.Activate();
						search_off();

					} 
					 
					break;
				case 92 :  //aey 6/29/04  Engine Management Program 
					 
					if (cbo_ac_engine_management_prog_EMGP.Text == "Unknown - Unknown")
					{
						bVerifiedEMGP = true;
					}  //7/1/04 aey disable updates to unknown 
					 
					if (!bVerifiedEMGP)
					{
						bVerifiedEMGP = true;

						// USER DOUBLE CLICKED ON THE Engine Management Program LABELS - UPDATE THE BASE
						// VERIFIED DATE AND RECORD A JOURNAL NOTE
						search_on("Updating EMGP Confirmation Date...");

						Query = $"UPDATE Aircraft_General_Dates SET agd_cc_emgp_date = '{modAdminCommon.DateToday}' ";
						Query = $"{Query}WHERE agd_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
						Query = $"{Query} AND agd_journ_id = 0 ";

						//Call LOCAL_ADO_DB.Execute(Query)
						DbCommand TempCommand_4 = null;
						TempCommand_4 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_4);
						TempCommand_4.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_4.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) | ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_4);
						TempCommand_4.ExecuteNonQuery(); //6/10/04 aey


						// CHANGE FORM COLORS
						lbl_gen[92].ForeColor = Color.Black;
						cbo_ac_engine_management_prog_EMGP.BackColor = Color.White;

						// INSERT THE JOURNAL ENTRY
						modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject("Verified Engine Management Program Info", "VAEMGP", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0);
						modAdminCommon.Rec_Journal_Info.journ_description = " ";
						modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
						modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "VAEMGP";
						modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
						modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
						modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
						modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
						modAdminCommon.Rec_Journal_Info.journ_status = "A";
						modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

						GetJournalID = frm_Journal.DefInstance.Commit_Journal_Entry();

						Fill_Aircraft_Journal_Grid();
						this.Activate();
						search_off();

					} 
					 
					break;
				case 98 : 
					 
					// addedd MSW - 4/25/16 
					if (ToolTipMain.GetToolTip(lbl_gen[98]) != "No Value Source Found")
					{
						// Display Sale Price
						if (chkArray[chkDisplaySalePrice_INDEX].CheckState == CheckState.Unchecked)
						{
							if (MessageBox.Show("Do You want to Clear the Source from this Sale Price Record?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
							{
								ToolTipMain.SetToolTip(lbl_gen[98], $"Source Cleared - Previous Source: {ToolTipMain.GetToolTip(lbl_gen[98])}");
							}
						}
					} 

					 
					break;
				case 114 :  //aey 6/29/04 Airframe Maintenance 
					 
					if (cbo_ac_airframe_maintenance_prog_AMP.Text == "Unknown - Unknown")
					{
						bVerifiedAMP = true;
					}  //7/1/04 disable updates to unknown 
					 
					if (!bVerifiedAMP)
					{
						bVerifiedAMP = true;
						// USER DOUBLE CLICKED ON THE Airframe Maintenance Program LABELS - UPDATE THE BASE
						// VERIFIED DATE AND RECORD A JOURNAL NOTE
						search_on("Updating AMP Confirmation Date...");

						Query = $"UPDATE Aircraft_General_Dates SET agd_cc_amp_date = '{modAdminCommon.DateToday}' ";
						Query = $"{Query}WHERE agd_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
						Query = $"{Query} AND agd_journ_id = 0 ";

						//Call LOCAL_ADO_DB.Execute(Query)
						DbCommand TempCommand_5 = null;
						TempCommand_5 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_5);
						TempCommand_5.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_5.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) | ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_5);
						TempCommand_5.ExecuteNonQuery(); //6/10/04 aey


						// CHANGE FORM COLORS
						lbl_gen[114].ForeColor = Color.Black;
						cbo_ac_airframe_maintenance_prog_AMP.BackColor = Color.White;

						// INSERT THE JOURNAL ENTRY
						modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject("Verified Airframe Maintenance Program Info", "VAAMP", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0);
						modAdminCommon.Rec_Journal_Info.journ_description = " ";
						modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
						modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "VAAMP";
						modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
						modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
						modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
						modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
						modAdminCommon.Rec_Journal_Info.journ_status = "A";
						modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

						GetJournalID = frm_Journal.DefInstance.Commit_Journal_Entry();

						Fill_Aircraft_Journal_Grid();
						this.Activate();
						search_off();

					} 
					 
					break;
				case 118 :  //aey 6/29/04  Airframe Maintence Tracking Program 
					 
					if (cbo_ac_airframe_maint_tracking_prog_AMTP.Text == "Unknown - Unknown")
					{
						bVerifiedAMTP = true;
					}  //aey 7/1/04 disable updates to unknown 
					 
					if (!bVerifiedAMTP)
					{
						bVerifiedAMTP = true;

						// USER DOUBLE CLICKED ON THE Airframe Maintence Tracking Program LABELS - UPDATE THE BASE
						// VERIFIED DATE AND RECORD A JOURNAL NOTE
						search_on("Updating AMTP Confirmation Date...");

						Query = $"UPDATE Aircraft_General_Dates SET agd_cc_amtp_date = '{modAdminCommon.DateToday}' ";
						Query = $"{Query}WHERE agd_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
						Query = $"{Query} AND agd_journ_id = 0 ";

						//Call LOCAL_ADO_DB.Execute(Query)
						DbCommand TempCommand_6 = null;
						TempCommand_6 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_6);
						TempCommand_6.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_6.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) | ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_6);
						TempCommand_6.ExecuteNonQuery(); //6/10/04 aey


						// CHANGE FORM COLORS
						lbl_gen[118].ForeColor = Color.Black;
						cbo_ac_airframe_maint_tracking_prog_AMTP.BackColor = Color.White;

						// INSERT THE JOURNAL ENTRY
						modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject("Verified Airframe Maintenance Tracking Program Info ", "VAAMTP", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0);
						modAdminCommon.Rec_Journal_Info.journ_description = " ";
						modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
						modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "VAAMTP";
						modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
						modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
						modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
						modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
						modAdminCommon.Rec_Journal_Info.journ_status = "A";
						modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

						GetJournalID = frm_Journal.DefInstance.Commit_Journal_Entry();

						Fill_Aircraft_Journal_Grid();
						this.Activate();
						search_off();

					} 
					 
					break;
				case 84 :  // Make/Model Label 
					 
					// 11/07/2002 - By David D. Cruger 
					// Double click the Make/Model label will 
					// Activate the Pull Down Control 
					 
					//If (tmp_ac_journ_id = 0) And _  'current record 
					if (Convert.ToString(modAdminCommon.snp_User["user_type"]) == "Research Manager" || Convert.ToString(modAdminCommon.snp_User["user_type"]) == "Administrator")
					{
						if (MessageBox.Show($"Are you SURE you want the Make/Model pull down enabled? {Environment.NewLine}{Environment.NewLine}" +
						                    $"Changing a Make/Model should be done ONLY if you are absolutely {Environment.NewLine}" +
						                    $"sure of what you are doing", "Activate Make/Model Pull Down", MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
						{
							cbo_amod_make_name.Enabled = true;
						}
					} 
					 
					break;
				default:
					search_off(); 
					// Doesn't Matter 
					 
					break;
			}

			tab_aircraft_details.Enabled = true;
			tbr_ToolBar.Enabled = true;
			tab_ACMain.Enabled = true;

		}

		private void grd_AircraftHistory_Click(Object eventSender, EventArgs eventArgs)
		{


			if (grd_AircraftHistory.Enabled)
			{

				grd_AircraftHistory.Enabled = false;

				if (grd_AircraftHistory.MouseRow > 0 || AllowDBLClick)
				{

					AllowDBLClick = false;
					cmd_Active.Enabled = true;

					if (!snp_History.BOF && !snp_History.EOF)
					{

						snp_History.MoveFirst();
						int tempForEndVar = grd_AircraftHistory.CurrentRowIndex - 1;
						for (int I = 1; I <= tempForEndVar; I++)
						{
							snp_History.MoveNext();
						}

						cmdModifyTransaction.Enabled = !(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_History["journ_subcategory_code"])}").Trim().StartsWith("OM", StringComparison.Ordinal) || ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_History["journ_subcategory_code"])}").Trim().StartsWith("MA", StringComparison.Ordinal));

					} // If (snp_History.BOF = False And snp_History.EOF = False) Then

				} // If grd_AircraftHistory.MouseRow > 0 Or AllowDBLClick Then

				grd_AircraftHistory.Enabled = true;

			} // If grd_AircraftHistory.Enabled = True Then

		}

		private void grd_AircraftHistory_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			if (grd_AircraftHistory.CurrentRowIndex > 0 || AllowDBLClick)
			{

				if (grd_AircraftHistory.Enabled)
				{

					grd_AircraftHistory.Enabled = false;

					if (cmd_Active.Text == "View Current Aircraft Record")
					{
						cmd_Active.Text = "View Historical Aircraft Record";
					}

					cmd_Active_Click(cmd_Active, new EventArgs());

					AllowDBLClick = false;

					grd_AircraftHistory.Enabled = true;
				} // If grd_AircraftHistory.Enabled = True Then

			} // If grd_AircraftHistory.Row > 0 Or AllowDBLClick Then

		} // grd_AircraftHistory_DblClick

		private void lst_Avionics_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (cbo_av_description.Visible && cbo_av_description.Enabled)
			{
				modFillAircraftControls.Fill_Avionics_Lookup(cbo_av_description, lst_Avionics.Text.Trim(), modGlobalVars.cEmptyString, Convert.ToInt32(snp_Aircraft_Model["amod_id"]));
				// cbo_av_description.SetFocus
			}

		}

		private void lst_Company_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			//aey 9/24/04
			if (ListBoxHelper.GetSelectedIndex(lst_Company) > -1)
			{
				ToolTipMain.SetToolTip(lst_Company, lst_Company.Text);
				strPhoneGrid = "Company";
			}

		}

		private void lst_Company_DoubleClick(Object eventSender, EventArgs eventArgs) => grd_AircraftContacts_doubleClickBodyCode();


		private void lst_Company_MouseDown(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			int lRow1 = 0;
			string strData = "";
			int iPos1 = 0;
			int iPos2 = 0;
			int iCnt1 = 0;
			string strCompId = "";
			int lCompId = 0;
			string strCompany = "";
			string strType = "";
			string strPhoneNbr = "";
			string strMsg = "";

			strPhoneGrid = "";

			if (ListBoxHelper.GetSelectedIndex(lst_Company) > -1)
			{

				lRow1 = ListBoxHelper.GetSelectedIndex(lst_Company);
				strData = lst_Company.GetListItem(ListBoxHelper.GetSelectedIndex(lst_Company));

				iPos1 = (strData.IndexOf(": ") + 1);
				if (iPos1 > 0)
				{

					strType = strData.Substring(Math.Min(0, strData.Length), Math.Min(iPos1 - 1, Math.Max(0, strData.Length)));
					strPhoneNbr = strData.Substring(Math.Min(iPos1 + 1, strData.Length));

					iCnt1 = modCommon.ReturnNbrChars(strPhoneNbr, "-");
					if (iCnt1 > 0)
					{

						if (!snp_AircraftContacts.BOF && !snp_AircraftContacts.EOF)
						{

							lCompId = Convert.ToInt32(snp_AircraftContacts["comp_id"]);
							strCompany = Convert.ToString(lst_Company.Tag).Trim();

							if (lCompId > 0)
							{

								if (strCompany != "")
								{

									if (MessageBox.Show($"Auto Dial This Number?{Environment.NewLine}{Environment.NewLine}{strData}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
									{

										strPhoneGrid = "Company";

										modCommon.Find_And_Format_Phone_Number_For_TAPI_Dialer(lCompId, 0, ref strPhoneNbr);

										strMsg = $"Company: {strCompany} - [{strType} - {strPhoneNbr}]";

										modAdminCommon.Record_Event("Dial Phone Number", strMsg, modAdminCommon.gbl_Aircraft_ID, modAdminCommon.gbl_Aircraft_Journal_ID, lCompId, false, 0, 0);

										modCommon.EnterStandardJournalNotes($"Auto Dialed - {strMsg}", "", modAdminCommon.gbl_Aircraft_ID, lCompId, 0, 0);

										// MSW changed - per andrew - 5/12/22
										//TAPIDialer Replace(strPhoneNbr, "-", "")
										modCallOne.CallOne_Dialer(StringsHelper.Replace(StringsHelper.Replace(strPhoneNbr, "-", "", 1, -1, CompareMethod.Binary), " ", "", 1, -1, CompareMethod.Binary));

									} // If MsgBox("Auto Dial This Number?" & vbCrLf & vbCrLf & strData, vbYesNo) = vbYes Then

								} // If strCompany <> "" Then

							} // If lCompId > 0 Then

						} // If snp_AircraftContacts.BOF = False And snp_AircraftContacts.EOF = False Then

					} // If iCnt1 > 0 Then

				} // If iPos1 > 0 Then

			} // If lst_Company.ListIndex > -1 Then

		} // lst_Company_MouseDown

		private void lst_Contact_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{
			//aey 9/24/04
			if (ListBoxHelper.GetSelectedIndex(lst_Contact) > -1)
			{
				ToolTipMain.SetToolTip(lst_Contact, lst_Contact.GetListItem(ListBoxHelper.GetSelectedIndex(lst_Contact)));
				strPhoneGrid = "Contact";
			}
		}

		private void lst_Contact_DoubleClick(Object eventSender, EventArgs eventArgs) => grd_AircraftContacts_doubleClickBodyCode();


		private void lst_Contact_MouseDown(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			int lRow1 = 0;
			string strData = "";
			int iPos1 = 0;
			int iPos2 = 0;
			int iCnt1 = 0;
			string strCompId = "";
			int lCompId = 0;
			string strContactId = "";
			int lContactId = 0;
			string strCompany = "";
			string strContact = "";
			string strType = "";
			string strPhoneNbr = "";
			string strTemp = "";
			string strMsg = "";

			if (ListBoxHelper.GetSelectedIndex(lst_Contact) > -1)
			{

				lRow1 = ListBoxHelper.GetSelectedIndex(lst_Contact);
				strData = lst_Contact.GetListItem(ListBoxHelper.GetSelectedIndex(lst_Contact));

				//----------------------------------------------
				// Did The User Click On A Phone Number

				iPos1 = (strData.IndexOf(": ") + 1);
				if (iPos1 > 0)
				{

					//----------------------------------------------
					// The First Line In The List Box Should Contain The
					// Contact Name And Contact Id

					modCommon.Return_Contact_Name_And_Id_From_ListBox(lst_Contact, ref strContact, ref lContactId);

					if (chkShowAllContactInfo.CheckState == CheckState.Checked)
					{
						lContactId = lst_Contact.GetItemData(ListBoxHelper.GetSelectedIndex(lst_Contact));
						strContact = modCommon.GetContactShortName(lContactId, Reference_Journal_ID);
					}

					if (strContact != "")
					{

						if (lContactId > 0)
						{

							lCompId = Convert.ToInt32(snp_AircraftContacts["comp_id"]);
							strCompany = Convert.ToString(lst_Company.Tag).Trim();

							strType = strData.Substring(Math.Min(0, strData.Length), Math.Min(iPos1 - 1, Math.Max(0, strData.Length))).Trim();
							strPhoneNbr = strData.Substring(Math.Min(iPos1 + 1, strData.Length)).Trim();

							// added MSW -if there is an email at the end it will not try to dial it.  11/28/18
							if (strPhoneNbr.Trim().IndexOf(' ') >= 0)
							{
								strPhoneNbr = strPhoneNbr.Trim().Substring(0, Math.Min(strPhoneNbr.Trim().IndexOf(' ') + 1, strPhoneNbr.Trim().Length));
							}
							if (MessageBox.Show($"Auto Dial This Number?{Environment.NewLine}{Environment.NewLine}{strData}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
							{

								strPhoneGrid = "Contact";

								// No Need Any More
								//ReturnContactIdByFirstLastName

								modCommon.Find_And_Format_Phone_Number_For_TAPI_Dialer(lCompId, lContactId, ref strPhoneNbr);

								strMsg = $"Contact: {strContact} - [{strType} - {strPhoneNbr}]";

								modAdminCommon.Record_Event("Dial Phone Number", strMsg, modAdminCommon.gbl_Aircraft_ID, modAdminCommon.gbl_Aircraft_Journal_ID, lCompId, false, 0, lContactId);

								modCommon.EnterStandardJournalNotes($"Auto Dialed - {strMsg}", "", modAdminCommon.gbl_Aircraft_ID, lCompId, lContactId, 0);

								// MSW changed - per andrew - 5/12/22
								//TAPIDialer Replace(strPhoneNbr, "-", "")
								modCallOne.CallOne_Dialer(StringsHelper.Replace(StringsHelper.Replace(strPhoneNbr, "-", "", 1, -1, CompareMethod.Binary), " ", "", 1, -1, CompareMethod.Binary));

							} // If MsgBox("Auto Dial This Number?" & vbCrLf & vbCrLf & strData, vbYesNo) = vbYes Then

						} // If lContactId > 0 Then

					} // If strContact <> "" Then

				} // If iPos1 > 0 Then

			} // If lst_Contact.ListIndex > -1 Then

		} // lst_Contact_MouseDown

		private void lst_Research_Action_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			string temp_note = "";
			string temp_type = "";
			if (ListBoxHelper.GetSelectedIndex(lst_Research_Action) > -1)
			{

				cmdClearResearchAction.Visible = true;
				txtAddlHotBoxNotes.Text = modGlobalVars.cEmptyString;
				txtAddlHotBoxNotes.Visible = true;


				temp_note = lst_Research_Action.Text.Trim();

				// this passes their ID in
				//UPGRADE_WARNING: (1068) find_research_action_item() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				temp_type = Convert.ToString(modCommon.find_research_action_item(lst_Research_Action.GetItemData(ListBoxHelper.GetSelectedIndex(lst_Research_Action))));

				// added MSW - 8/3/2020
				if (temp_type.Trim() == "PUBLICATION")
				{
					lbl_gen[77].Visible = false;
					txtAddlHotBoxNotes.Visible = false;
					cmdClearResearchAction.Visible = false;
				}
				else
				{
					lbl_gen[77].Visible = true;
					lbl_gen[83].Text = lst_Research_Action.Text;
					txtAddlHotBoxNotes.Visible = true;
					cmdClearResearchAction.Visible = true;
				}




			}

		}

		private void lstAcPictures_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			string FileType = "";
			string strFileName = "";

			try
			{

				FileType = lstAcPictures.Text.Substring(Math.Min(lstAcPictures.Text.IndexOf('[') + 1, lstAcPictures.Text.Length));
				FileType = FileType.Substring(0, Math.Min(Strings.Len(FileType) - 1, FileType.Length)).ToLower();

				if (Strings.Len(modAdminCommon.gbl_AircraftPictures.Trim()) > 0)
				{

					strFileName = $"{modAdminCommon.gbl_AircraftPictures}\\{Convert.ToString(adoAircraftRecordset["ac_id"])}{modGlobalVars.cHyphen}{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}{modGlobalVars.cHyphen}{lstAcPictures.GetItemData(ListBoxHelper.GetSelectedIndex(lstAcPictures)).ToString()}.{FileType}";

					if (File.Exists(strFileName))
					{

						if (FileType == "jpg")
						{
							//   pic_ac1.Picture = LoadPicture(gbl_AircraftPictures & "\" & adoAircraftRecordset!ac_id & cHyphen & adoAircraftRecordset!ac_journ_id & cHyphen & lstAcPictures.ItemData(lstAcPictures.ListIndex) & "." & FileType)

							//            If InStr(LOCAL_ADO_DB, "jetnet_ra_test") > 0 Then
							//                   web_Ac1.Navigate strFileName
							//                   'web_Ac1.Zoom (100)
							//                   '"http://www.homebasetest.com/ImageUploader.aspx?ac_id=" & Reference_Aircraft_ID & "&Journ_ID=0&gbl_User_ID=" & gbl_User_ID & "&test=1"""
							//            Else
							//                    web_Ac1.Navigate strFileName
							//                   '  web_Ac1.Zoom (100)
							//                    '"http://www.homebasetest.com/ImageUploader.aspx?ac_id=" & Reference_Aircraft_ID & "&Journ_ID=0&gbl_User_ID=" & gbl_User_ID
							//            End If




							imgACPicture.Image = Image.FromFile($"{modAdminCommon.gbl_AircraftPictures}\\{Convert.ToString(adoAircraftRecordset["ac_id"])}{modGlobalVars.cHyphen}{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}{modGlobalVars.cHyphen}{lstAcPictures.GetItemData(ListBoxHelper.GetSelectedIndex(lstAcPictures)).ToString()}.{FileType}");
							imgACPicture.Visible = true;
							imgACPicture.Width = 700;
							imgACPicture.Height = 433;


							Application.DoEvents();
							web_Ac1.Navigate(new Uri(strFileName));
							Application.DoEvents();
							web_Ac1.Refresh();
							Application.DoEvents();
							web_Ac1.Refresh();
							Application.DoEvents();

						}

						if ((FileType == "mpg") || (FileType == "mpeg"))
						{
							imgACPicture.Visible = false;
						}

					}
					else
					{
						imgACPicture.Visible = false;
					} // If gfso.fileexists(strfilename) = True Then

				} // If Len(Trim(gbl_AircraftPictures)) > 0 Then
			}
			catch (Exception e)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				if (Information.Err().Number == 484)
				{
					MessageBox.Show("Corrupted Photo, Please Remove, and Re-Attach", "Error : Corrupted Image", MessageBoxButtons.OK, MessageBoxIcon.Error);
					return;
				}

				search_off();
				modAdminCommon.Report_Error($"lstAcPictures_Click_Error: {e.Message}");
			}

		}

		public void mnu_Help_Click(Object eventSender, EventArgs eventArgs)
		{

			//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//VB.Global.Load(frm_WebReport.DefInstance);
			frm_WebReport.DefInstance.WhichReport = "Aircraft Help";
			frm_WebReport.DefInstance.Show();
			frm_WebReport.DefInstance.Activate();

		}

		public void mnuAddExclusiveBroker_Click(Object eventSender, EventArgs eventArgs)
		{

			// Exclusive Flag
			SecondExclusive = chkArray[chkExclusiveFlag_INDEX].CheckState == CheckState.Checked;

			StoreKeyAircraftContacts();

			//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
			tCompFind_ActionTypes = (modGlobalVars.e_find_form_action_types) modGlobalVars.gFIND_EXBROKER;

			if (modGlobalVars.bCallShowAndLoadOnlyOnce)
			{

				//UPGRADE_TODO: (1067) Member Clear_Search_Criteria is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Clear_Search_Criteria(true, true, true);
				//UPGRADE_TODO: (1067) Member EntryPoint is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].EntryPoint = modGlobalVars.e_find_form_entry_points.geExclusiveBroker;
				//UPGRADE_TODO: (1067) Member ActionTypes is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].ActionTypes = tCompFind_ActionTypes;
				//UPGRADE_TODO: (1067) Member Reference_JournalID is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Reference_JournalID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);
				//UPGRADE_TODO: (1067) Member Reference_AircraftID is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Reference_AircraftID = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
				//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Show();
				//UPGRADE_TODO: (1067) Member ZOrder is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
				modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].ZOrder(0);

			}

		}

		public void mnuAddIDNote_Click(Object eventSender, EventArgs eventArgs)
		{
			frm_Journal.DefInstance.Reference_Journal_ID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);
			frm_Journal.DefInstance.Reference_Ac_Id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
			frm_Journal.DefInstance.Reference_Comp_Id = 0;
			frm_Journal.DefInstance.Reference_Subject = modGlobalVars.cEmptyString;
			frm_Journal.DefInstance.Reference_Yacht_Id = 0;

			if (!(snp_AircraftContacts.BOF && snp_AircraftContacts.EOF))
			{
				frm_Journal.DefInstance.Reference_Contact_Id = Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]);
			}
			else
			{
				frm_Journal.DefInstance.Reference_Contact_Id = 0;
			}

			frm_Journal.DefInstance.Reference_Category_Code = "IDNOTE";
			frm_Journal.DefInstance.Reference_SubCategory_Code = "IDNOTE";
			frm_Journal.DefInstance.pnl_Journal_Heading.Visible = false;
			modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
			frm_Journal.DefInstance.ShowDialog();

			Fill_Aircraft_Journal_Grid();
			this.Activate();
			search_off();
		}

		public void mnuAircraftShowUserHistory_Click(Object eventSender, EventArgs eventArgs)
		{

			if (frm_Main_Menu.DefInstance.mnuShowUserHistory.Text == "Show User History")
			{
				frm_UserHistory.DefInstance.Refresh_User_History_Grids("All");
				mnuAircraftShowUserHistory.Text = "Hide User History";
				frm_Main_Menu.DefInstance.mnuShowUserHistory.Text = "Hide User History";
				modCommon.CenterFormOnHomebaseMainForm(frm_UserHistory.DefInstance);
				frm_UserHistory.DefInstance.Show();
			}
			else
			{
				frm_UserHistory.DefInstance.TimerOff();
				mnuAircraftShowUserHistory.Text = "Show User History";
				frm_Main_Menu.DefInstance.mnuShowUserHistory.Text = "Show User History";
				frm_UserHistory.DefInstance.Hide();
			}

		} // mnuAircraftShowUserHistory_Click

		public void mnuAttachedSpecs_Click(Object eventSender, EventArgs eventArgs)
		{

			search_on("Loading Spec Form...");
			Application.DoEvents();
			Application.DoEvents();
			//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//VB.Global.Load(frm_AttachSpecDoc.DefInstance);
			search_off();

			tbr_ToolBar.Enabled = false;

			Application.DoEvents();
			Application.DoEvents();


			frm_AttachSpecDoc.DefInstance.txtSpecACId.Text = txt_ac_id.Text;
			frm_AttachSpecDoc.DefInstance.Refresh();
			frm_AttachSpecDoc.DefInstance.ShowDialog();

			Application.DoEvents();
			Application.DoEvents();
			Application.DoEvents();
			Application.DoEvents();

			search_on("Exiting Spec Form...");
			search_off();

			Application.DoEvents();
			Application.DoEvents();
			Application.DoEvents();
			Application.DoEvents();
			JetNetSupport.PInvoke.SafeNative.kernel32.Sleep(500);
			Application.DoEvents();
			Application.DoEvents();
			Application.DoEvents();
			tbr_ToolBar.Enabled = true;



		} // mnuAttachedSpecs_Click

		public void mnuChangeBusinessType_Click(Object eventSender, EventArgs eventArgs)
		{

			string Query = "";

			Select_Aircraft_Contact();

			if (!ContactRecordsetFilled)
			{ //9/29/06 mjm
				return;
			}

			string BusinessType = modCommon.GetBusinessTypeToUse(Convert.ToInt32(snp_AircraftContacts["comp_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), true);

			if (BusinessType != modGlobalVars.cEmptyString)
			{

				Query = "UPDATE Aircraft_Reference ";
				Query = $"{Query}SET cref_business_type = '{BusinessType.Substring(0, Math.Min(BusinessType.IndexOf(modGlobalVars.cHyphen), BusinessType.Length)).Trim()}' ";
				Query = $"{Query}WHERE cref_id = {grd_AircraftContacts.get_RowData(grd_AircraftContacts.CurrentRowIndex).ToString()}";

				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery(); //6/10/04 aey

				modAircraft.SetOperatorFlag(modAdminCommon.gbl_Aircraft_ID, modAdminCommon.gbl_Aircraft_Journal_ID);

				modCommon.CheckForAircraftTransmit(grd_AircraftContacts.get_RowData(grd_AircraftContacts.CurrentRowIndex));
				modCommon.ClearAircraftActionDate(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]));
				Fill_Aircraft_Contact_Grid();

			}

		}

		public void mnuChangeContactType_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.mnuChangeContactType, eventSender);

			try
			{

				Select_Aircraft_Contact();

				if (!ContactRecordsetFilled)
				{ //9/29/06 mjm
					return;
				}
				int new_comp_id = 0;
				new_comp_id = 0;

				RememberOldCompName = Convert.ToString(snp_AircraftContacts["comp_name"]);
				RememberOldCompType = StringsHelper.Replace(mnuChangeContactType[Index].Text, "Change ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);

				if (MessageBox.Show($"Are you sure you want to change the {RememberOldCompType} on this historical transaction?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
				{

					sOwnerWillChange = CheckForOwnerChange(new_comp_id);

					if (sOwnerWillChange.ToUpper() != ("Cancel").ToUpper())
					{

						StoreKeyAircraftContacts(); // remember the key contacts for the aircraft

						tCompFind_ActionTypes = modGlobalVars.e_find_form_action_types.geIdContact;

						if (modGlobalVars.bCallShowAndLoadOnlyOnce)
						{

							//UPGRADE_TODO: (1067) Member Clear_Search_Criteria is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Clear_Search_Criteria(true, true, true);
							//UPGRADE_TODO: (1067) Member EntryPoint is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].EntryPoint = modGlobalVars.e_find_form_entry_points.geChangeHistContact;
							//UPGRADE_TODO: (1067) Member ActionTypes is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].ActionTypes = tCompFind_ActionTypes;
							//UPGRADE_TODO: (1067) Member Reference_JournalID is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Reference_JournalID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);
							//UPGRADE_TODO: (1067) Member Reference_AircraftID is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Reference_AircraftID = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
							//UPGRADE_TODO: (1067) Member HistoricalContactType is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].HistoricalContactType = Index.ToString();
							//UPGRADE_TODO: (1067) Member HistoricalContactName is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].HistoricalContactName = mnuChangeContactType[Index].Text.Trim();
							//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Show();
							//UPGRADE_TODO: (1067) Member ZOrder is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].ZOrder(0);

							modAircraft.SetOperatorFlag(modAdminCommon.gbl_Aircraft_ID, modAdminCommon.gbl_Aircraft_Journal_ID);

						}

						Release_Lock = false;

					}

					modGlobalVars.bKeepAircraftFocus = true;

				}
			}
			catch (System.Exception excep)
			{

				search_off();
				modAdminCommon.Report_Error($"mnuChangeContactType_Error: {excep.Message}", "Aircraft");
			}

		}

		public void mnuChangeHistPercentage_Click(Object eventSender, EventArgs eventArgs) => mnuChangePercentage_Click(mnuChangePercentage, new EventArgs());


		public void mnuChangeOperator_Click(Object eventSender, EventArgs eventArgs)
		{
			//sets or removes operating company aey 6/14/05

			ADORecordSetHelper snpPrevOpCompID = new ADORecordSetHelper(); // rtw - 8/30/2010
			int PrevOpCompID = 0;
			string Query = "";
			string tmp_Flag = "";

			int lCRefId = 0;
			int lACId = 0;
			int lJournId = 0;
			int lCompId = 0;

			try
			{

				Select_Aircraft_Contact();

				lCRefId = Convert.ToInt32(snp_AircraftContacts["cref_id"]);
				lACId = Convert.ToInt32(snp_AircraftContacts["cref_ac_id"]);
				lJournId = Convert.ToInt32(snp_AircraftContacts["cref_journ_id"]);
				lCompId = Convert.ToInt32(snp_AircraftContacts["cref_comp_id"]);

				tmp_Flag = ($"{Convert.ToString(snp_AircraftContacts["cref_operator_flag"])} ").Trim().ToUpper();

				if (tmp_Flag != "Y")
				{ // Already Set As Operator

					if (!ContactRecordsetFilled)
					{ //9/29/06 mjm
						return;
					}

					if (tmp_Flag == "N")
					{
						tmp_Flag = "O"; // Manual Set O/n
						modAdminCommon.Record_Event("Aircraft", "Added Manual Set As Operator", lACId, lJournId, lCompId);
						modAdminCommon.Record_Event("Operating Company Change", "Update Aircraft Company Roles", lACId);
					}
					else
					{
						tmp_Flag = "N"; // Turn Off Flag
						modAdminCommon.Record_Event("Aircraft", "Removed Manual Set As Operator", lACId, lJournId, lCompId);
					}

					// If Manual O/n, Then Turn All Records Off
					if (tmp_Flag == "O")
					{

						// SELECT THE CURRENT COMPANY SET AS OPERATOR FOR USE
						// LATER IN UPDATING COMPANY STATS
						Query = "select top 1 cref_comp_id from aircraft_reference ";
						Query = $"{Query}where cref_operator_flag in ('Y','O') ";
						Query = $"{Query}and (cref_ac_id = {lACId.ToString()}) ";
						Query = $"{Query}AND (cref_journ_id = {lJournId.ToString()}) ";

						snpPrevOpCompID.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockOptimistic);

						if (!(snpPrevOpCompID.BOF && snpPrevOpCompID.EOF))
						{
							PrevOpCompID = Convert.ToInt32(snpPrevOpCompID["cref_comp_id"]);
						}
						else
						{
							PrevOpCompID = 0;

						}

						snpPrevOpCompID.Close();
						snpPrevOpCompID = null;

						Query = "UPDATE Aircraft_Reference ";
						Query = $"{Query}SET cref_operator_flag = 'N' ";
						Query = $"{Query}WHERE (cref_ac_id = {lACId.ToString()}) ";
						Query = $"{Query}AND (cref_journ_id = {lJournId.ToString()}) ";

						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery();

					} //

					Query = "UPDATE Aircraft_Reference ";
					Query = $"{Query}SET cref_operator_flag = '{tmp_Flag}' ";
					Query = $"{Query}WHERE (cref_id = {lCRefId.ToString()}) ";

					DbCommand TempCommand_2 = null;
					TempCommand_2 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
					TempCommand_2.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_2.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
					TempCommand_2.ExecuteNonQuery();

					modCommon.Company_Stats_Update(lCompId); // RUN ONCE FOR NEW OPERATOR
					if (PrevOpCompID > 0)
					{
						modCommon.Company_Stats_Update(PrevOpCompID); // RUN ONCE FOR PREVIOUS OPERATOR
					}

					modAircraft.SetOperatorFlag(lACId, lJournId);

					Fill_Aircraft_Contact_Grid();

					search_off();

				} // If tmp_Flag <> "Y" Then ' Already Set As Operator
			}
			catch (System.Exception excep)
			{

				search_off();
				MessageBox.Show("mnuChangeOperator_Error: Error setting the operator for this aircraft", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Record_Error("Aircraft", $"mnuChangeOperator_Error: {Information.Err().Number.ToString()} {excep.Message}");
			}

		}

		public void mnuChangePercentage_Click(Object eventSender, EventArgs eventArgs)
		{

			string OldPercent = "";
			string ChangedCompany = "";
			int JournNote = 0; // used as flag to determine if journal insert was successful

			string NewPercent = $"{InputBoxHelper.InputBox("Please Enter the new Percentage", "Change Percentage")}{modGlobalVars.cEmptyString}";

			if (NewPercent == modGlobalVars.cEmptyString)
			{
				return;
			}

			//aey 7/9/04
			//validation added
			double NewNum = modAdminCommon.MakeNumeric(NewPercent);
			if (NewNum < 0 || NewNum > 99.9d)
			{ //aey 8/3/04 changed <= to <
				MessageBox.Show("Invalid Number", "Change Percentage", MessageBoxButtons.OK, MessageBoxIcon.Error);
				return;
			}

			if (NewPercent != modGlobalVars.cEmptyString)
			{
				NewPercent = StringsHelper.Replace(NewPercent, "%", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);
				OldPercent = Convert.ToString(snp_AircraftContacts["cref_owner_percent"]);

				modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(snp_AircraftContacts["comp_id"]), "ChgPct");
				ChangePercentage(NewPercent, Convert.ToString(snp_AircraftContacts["cref_contact_type"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(snp_AircraftContacts["comp_id"]));

				modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
				modAdminCommon.Rec_Journal_Info.journ_comp_id = Convert.ToInt32(snp_AircraftContacts["cref_comp_id"]);
				modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
				modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
				modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
				modAdminCommon.Rec_Journal_Info.journ_description = " ";
				modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
				modAdminCommon.Rec_Journal_Info.journ_status = "A";
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
				grd_AircraftContacts.CurrentColumnIndex = 2;
				ChangedCompany = grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString();
				modAdminCommon.Rec_Journal_Info.journ_subject = $"Changed {ChangedCompany} Fraction/Share From {OldPercent}% To {NewPercent}%";

				JournNote = frm_Journal.DefInstance.Commit_Journal_Entry();

				if (JournNote > 0)
				{
					modAdminCommon.ADO_Transaction("CommitTrans");
				}
				else
				{
					modAdminCommon.ADO_Transaction("RollbackTrans");
					MessageBox.Show("Change Percentage Failed", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
				}

				Fill_Aircraft_Contact_Grid(); //aey 9/1/04  quicker

				tab_aircraft_details.Enabled = true; //aey 9/10/04
				tbr_ToolBar.Enabled = true;
				tab_ACMain.Enabled = true;

			}

		}

		public void mnuConvertFSPEND_Click(Object eventSender, EventArgs eventArgs) => ChangeFSPENDtoFractionalSeller();


		public void mnuDeleteHistoricalRecord_Click(Object eventSender, EventArgs eventArgs)
		{

			string journal_date_last = "";
			journal_date_last = modAircraft.Find_Journal_Date(Reference_Aircraft_ID, Convert.ToInt32(Double.Parse(modAdminCommon.gbl_Aircraft_Journal_ID.ToString())));
			// & " Journ ID: " & gbl_Aircraft_Journal_ID   ' enter into eventlog


			string evtl_subject = $"Deleted History Record Journal ID: {modAdminCommon.gbl_Aircraft_Journal_ID.ToString()}";

			// look up
			string journ_subject = $"Deleted {journal_date_last} {lbl_gen[86].Text}";

			// date of journal txtHistoryDate.Text

			string strToday = "";
			if (!Delete_History_Record())
			{
				MessageBox.Show("Delete History Record Failed", "Aircraft : Delete Historical Record", MessageBoxButtons.OK, MessageBoxIcon.Error);
			}
			else
			{
				modAdminCommon.Record_Event("DeleteAircraftHistory", evtl_subject, Reference_Aircraft_ID, modAdminCommon.gbl_Aircraft_Journal_ID, 0);


				// ADDED MSW - 4/14/20 - JOURNAL NOTE REQUESETED
				strToday = DateTime.Now.ToString("d");


				modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(strToday.Trim());
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
				modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";
				modAdminCommon.Rec_Journal_Info.journ_subject = journ_subject;
				modAdminCommon.Rec_Journal_Info.journ_description = "";
				modAdminCommon.Rec_Journal_Info.journ_ac_id = Reference_Aircraft_ID;
				modAdminCommon.Rec_Journal_Info.journ_comp_id = Reference_Company_ID;
				modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;

				modAdminCommon.Rec_Journal_Info.journ_account_id = ""; // Trim$(cbo_comp_account(COMP_ACCOUNT_REP).Text)
				modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
				modAdminCommon.Rec_Journal_Info.journ_status = "A";

				frm_Journal.DefInstance.Commit_Journal_Entry_Long_Subject();

				if ((evtl_subject.IndexOf("History") + 1) == 0)
				{ // then we deleted the journal 0 record - MSW - 7/3/24

				}
				else
				{
					cmd_jcat_Redisplay_Journal_List_Click(cmd_jcat_Redisplay_Journal_List, new EventArgs()); // make sure you re-load the journal list
				}


			}



			search_off();

		}

		public void mnuDocumentJournal_Click(Object eventSender, EventArgs eventArgs)
		{

			frm_Journal.DefInstance.Reference_Journal_ID = 0;
			frm_Journal.DefInstance.Reference_Ac_Id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
			frm_Journal.DefInstance.Reference_Comp_Id = 0;
			frm_Journal.DefInstance.Reference_Yacht_Id = 0;

			Select_Aircraft_Contact();

			if (!ContactRecordsetFilled)
			{ //9/29/06 mjm
				return;
			}

			if (!(snp_AircraftContacts.BOF && snp_AircraftContacts.EOF))
			{
				frm_Journal.DefInstance.Reference_Contact_Id = Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]);
			}
			else
			{
				frm_Journal.DefInstance.Reference_Contact_Id = 0;
			}

			frm_Journal.DefInstance.Reference_Category_Code = "AH";
			frm_Journal.DefInstance.Reference_SubCategory_Code = "ACDOC";
			frm_Journal.DefInstance.pnl_Journal_Heading.Visible = false;
			modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
			frm_Journal.DefInstance.ShowDialog();
			Fill_Aircraft_Journal_Grid();
			this.Activate();
			search_off();

		}

		// 01/22/2013 - By David D. Cruger Added
		public void mnuAddAircraftDeliveryNote_Click(Object eventSender, EventArgs eventArgs)
		{

			mnuAddAircraftDeliveryNote.Enabled = false;

			frm_Journal.DefInstance.Reference_Journal_ID = 0;
			frm_Journal.DefInstance.Reference_Ac_Id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
			frm_Journal.DefInstance.Reference_Comp_Id = 0;
			frm_Journal.DefInstance.Reference_Yacht_Id = 0;

			Select_Aircraft_Contact();

			if (!ContactRecordsetFilled)
			{ //9/29/06 mjm
				return;
			}

			if (!(snp_AircraftContacts.BOF && snp_AircraftContacts.EOF))
			{
				frm_Journal.DefInstance.Reference_Contact_Id = Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]);
			}
			else
			{
				frm_Journal.DefInstance.Reference_Contact_Id = 0;
			}

			frm_Journal.DefInstance.txt_category.Text = "Aircraft Delivery Notes";
			frm_Journal.DefInstance.Reference_Subject = "";
			frm_Journal.DefInstance.Reference_Category_Code = "AN";
			frm_Journal.DefInstance.Reference_SubCategory_Code = "ADN";
			frm_Journal.DefInstance.pnl_Journal_Heading.Visible = false;
			modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
			frm_Journal.DefInstance.ShowDialog();
			Fill_Aircraft_Journal_Grid();
			this.Activate();
			search_off();

			mnuAddAircraftDeliveryNote.Enabled = true;

		}

		public void mnuDoNotSend_Click(Object eventSender, EventArgs eventArgs) => SetCompanyTransmitNumber(99);


		public void mnuEditAddNote_Click(Object eventSender, EventArgs eventArgs)
		{

			pnl_Journal.Visible = true;
			SSTabHelper.SetSelectedIndex(tab_ACMain, 3);
			cmd_cancel_Click(cmd_Cancel, new EventArgs());
			txt_journal_note.Focus();

		}

		public void mnueditchange_Click(Object eventSender, EventArgs eventArgs)
		{

			try
			{
				bool pass_test = false;
				pass_test = true;
				Form Frm = null;
				Form f = null;

				check_for_acfl(ref pass_test);


				//scenario #2 - transaction

				string Msg = "";
				int LifeCycleTemp = 0;
				string tmpYear = "";

				if (pass_test)
				{
					if (Convert.ToString(adoAircraftRecordset["ac_ownership_type"]) == "S")
					{

						Msg = $"This aircraft currently has a shared ownership.{Environment.NewLine}";
						Msg = $"{Msg}Only HISTORICAL whole sales may be entered for this aircraft.{Environment.NewLine}";
						Msg = $"{Msg}To perform a new whole sale the shares must all be sold back to a single owner first.{Environment.NewLine}";
						Msg = $"{Msg}Click Yes to proceed with entering a HISTORICAL whole sale or click No to return to the aircraft record.";

						if (MessageBox.Show(Msg, AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
						{
							return;
						}
					}

					//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_lifecycle_stage.OriginalValue of type Variant is being forced to int. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
					LifeCycleTemp = Convert.ToInt32(adoAircraftRecordset.GetField("ac_lifecycle_stage").OriginalValue);
					if (LifeCycleTemp == 1 || LifeCycleTemp == 2)
					{
						if (txt_ac_year[1].Text.Trim() == modGlobalVars.cEmptyString)
						{

							Msg = $"If you are about to record a NEW transaction (selling to the first owner), Please enter the Year Delivered and click OK.{Environment.NewLine}";
							Msg = $"{Msg}Otherwise please click Cancel to go to the transaction form.";

							tmpYear = InputBoxHelper.InputBox(Msg, "Year Delivered");

							if (tmpYear.Trim() != modGlobalVars.cEmptyString && Strings.Len(tmpYear) == 4)
							{

								// Temp Hold
								//adoAircraftRecordset.Resync
								//UPGRADE_ISSUE: (2064) ADODB.ResyncEnum property ResyncEnum.adResyncUnderlyingValues was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								//UPGRADE_ISSUE: (2064) ADODB.Recordset method adoAircraftRecordset.Resync was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								adoAircraftRecordset.Resync(AffectEnum.adAffectCurrent, UpgradeStubs.ADODB_ResyncEnum.getadResyncUnderlyingValues());
								adoAircraftRecordset["ac_year"] = tmpYear.Trim();
								adoAircraftRecordset.Update();
								txt_ac_year[1].Text = tmpYear;
							}
						}

					}

					modAdminCommon.HasWanteds = CheckForWanteds(Convert.ToInt32(adoAircraftRecordset["ac_id"]));

					StoreKeyAircraftContacts();

					// moved theses 3 ffrom below where the .setfocus was
					frm_Aircraft_Change.DefInstance.Companies_Connected_List = Companies_Connected_List;
					frm_Aircraft_Change.DefInstance.AvailListedDate = ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_list_date"])}").Trim();
					frm_Aircraft_Change.DefInstance.Trans_Type = "WS";


					frm_Aircraft_Change.DefInstance.Show();
					frm_Aircraft_Change.DefInstance.Aircraft_ID = Convert.ToInt32(Conversion.Val(txt_ac_id.Text));

					Application.DoEvents();
					Application.DoEvents();
					// ADDED MSW - 6/19/18 - IF YOU HIT CANCEL, OR DONT ENTER YEAR, then dont check new
					if (tmpYear.Trim() != modGlobalVars.cEmptyString && Strings.Len(tmpYear) == 4)
					{
					}
					else
					{
						// IF YOU DID NOT ENTER A VALD YEAR, OR HIT CANCEL
						Application.DoEvents();
						Application.DoEvents();
						frm_Aircraft_Change.DefInstance.chk_NewAircraft.CheckState = CheckState.Unchecked;
						Application.DoEvents();
						Application.DoEvents();
					}
					Application.DoEvents();
					Application.DoEvents();



					Application.DoEvents();
					Application.DoEvents();
					Application.DoEvents();
					Application.DoEvents();
					frm_Aircraft_Change.DefInstance.Activate();

					Release_Lock = false;
					if (adoAircraftRecordset != null)
					{
						if (adoAircraftRecordset.State == ConnectionState.Open)
						{
							adoAircraftRecordset.CancelBatch(); // added in MSW - 2/29/16
							adoAircraftRecordset.CancelUpdate(); // added in MSW - 2/29/16
							adoAircraftRecordset.Close(); // Temp Hold
						}
					}

					Unload_Aircraft_Form();
					this.Close();
				}
			}
			catch (System.Exception excep)
			{

				MessageBox.Show($"Error mnueditchange_Click: {excep.Message}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
			}

		}

		public void mnueditchangeDelivery_Click(Object eventSender, EventArgs eventArgs)
		{
			DialogResult UserResponse = (DialogResult) 0; // used to hold response to the message box
			string Msg = ""; // message to be displayed to user


			bool pass_test = true;

			check_for_acfl(ref pass_test);


			if (pass_test)
			{

				Msg = "Caution: You are about to perform a <Delivery Position> sale. ";
				Msg = $"{Msg}This means that you are selling the delivery position from one company to another ";
				Msg = $"{Msg}while the aircraft is still in the <Production> stage. ";
				Msg = $"{Msg}This is not the same as selling the aircraft new-to-market. ";
				Msg = $"{Msg}Is this still what you want to do?";

				UserResponse = MessageBox.Show(Msg, AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNoCancel);

				if (UserResponse == System.Windows.Forms.DialogResult.Yes)
				{

					modAdminCommon.HasWanteds = CheckForWanteds(Convert.ToInt32(adoAircraftRecordset["ac_id"]));

					StoreKeyAircraftContacts();

					frm_Aircraft_Change.DefInstance.Show();
					frm_Aircraft_Change.DefInstance.Aircraft_ID = Convert.ToInt32(Conversion.Val(txt_ac_id.Text));
					frm_Aircraft_Change.DefInstance.Trans_Type = "DP";
					frm_Aircraft_Change.DefInstance.Activate();

					Release_Lock = false;

					Unload_Aircraft_Form();
					this.Close();

				}
			}

		}

		public void mnueditchangeForeclosure_Click(Object eventSender, EventArgs eventArgs)
		{


			bool pass_test = true;

			check_for_acfl(ref pass_test);


			if (pass_test)
			{

				modAdminCommon.HasWanteds = CheckForWanteds(Convert.ToInt32(adoAircraftRecordset["ac_id"]));

				StoreKeyAircraftContacts();

				frm_Aircraft_Change.DefInstance.Show();
				frm_Aircraft_Change.DefInstance.Aircraft_ID = Convert.ToInt32(Conversion.Val(txt_ac_id.Text));
				frm_Aircraft_Change.DefInstance.Trans_Type = "FC";
				frm_Aircraft_Change.DefInstance.Activate();

				Release_Lock = false;

				Unload_Aircraft_Form();
				this.Close();
			}

		}

		public void mnueditchangeFractional_Click(Object eventSender, EventArgs eventArgs)
		{

			string Msg = "";

			bool Continue = true;

			check_for_acfl(ref Continue);


			if (Convert.ToString(adoAircraftRecordset["ac_ownership_type"]) == "W")
			{

				Msg = $"This aircraft is currently wholly owned.{Environment.NewLine}";
				Msg = $"{Msg}Only HISTORICAL fractional sales may be entered for this aircraft.{Environment.NewLine}";
				Msg = $"{Msg}Click Yes to proceed with entering a HISTORICAL fractional sale or click No to return to the aircraft record.";

				if (MessageBox.Show(Msg, AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
				{
					Continue = false;
				}
			}

			if (Continue)
			{

				StoreKeyAircraftContacts();

				frm_Aircraft_Change.DefInstance.Show();
				frm_Aircraft_Change.DefInstance.Aircraft_ID = Convert.ToInt32(Conversion.Val(txt_ac_id.Text));
				frm_Aircraft_Change.DefInstance.Trans_Type = "FS";

				if (Convert.ToString(adoAircraftRecordset["ac_ownership_type"]) != "F")
				{
					frm_Aircraft_Change.DefInstance.ac_journ_id = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]); //aey 5/24/05
				}
				else
				{
					frm_Aircraft_Change.DefInstance.ac_journ_id = 0;
				}

				frm_Aircraft_Change.DefInstance.Activate();

				Release_Lock = false;

				Unload_Aircraft_Form();
				this.Close();

			}

		}

		public void mnueditchangeLease_Click(Object eventSender, EventArgs eventArgs)
		{

			string Msg = "";

			bool Continue = true;
			check_for_acfl(ref Continue);


			if (Convert.ToString(adoAircraftRecordset["ac_ownership_type"]) == "S")
			{

				Msg = $"This aircraft is currently share owned.{Environment.NewLine}";
				Msg = $"{Msg}Only HISTORICAL lease transactions may be entered for this aircraft.{Environment.NewLine}";
				Msg = $"{Msg}Click Yes to proceed with entering a HISTORICAL lease transaction click No to return to the aircraft record.";

				if (MessageBox.Show(Msg, AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
				{
					Continue = false;
				}
			}

			if (Continue)
			{
				modAdminCommon.HasWanteds = CheckForWanteds(Convert.ToInt32(adoAircraftRecordset["ac_id"]));

				StoreKeyAircraftContacts();

				frm_Aircraft_Change.DefInstance.Show();
				frm_Aircraft_Change.DefInstance.Aircraft_ID = Convert.ToInt32(Conversion.Val(txt_ac_id.Text));
				frm_Aircraft_Change.DefInstance.Trans_Type = "LA";
				frm_Aircraft_Change.DefInstance.Activate();

				Release_Lock = false;

				Unload_Aircraft_Form();
				this.Close();

			}

		}

		public void mnueditchangeShare_Click(Object eventSender, EventArgs eventArgs)
		{

			string Msg = "";
			int LifeCycleTemp = 0;
			string tmpYear = "";
			bool pass_test = false;

			check_for_acfl(ref pass_test);

			if (pass_test)
			{

				//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_lifecycle_stage.OriginalValue of type Variant is being forced to int. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				LifeCycleTemp = Convert.ToInt32(adoAircraftRecordset.GetField("ac_lifecycle_stage").OriginalValue);

				if (LifeCycleTemp == 1 || LifeCycleTemp == 2)
				{

					if (txt_ac_year[1].Text.Trim() == modGlobalVars.cEmptyString)
					{

						Msg = $"If you are about to record a NEW transaction (selling to the first owner), Please enter the Year Delivered and click OK.{Environment.NewLine}";
						Msg = $"{Msg}Otherwise please click Cancel to go to the transaction form.";

						tmpYear = InputBoxHelper.InputBox(Msg, "Year Delivered");

						if (tmpYear.Trim() != modGlobalVars.cEmptyString && Strings.Len(tmpYear) == 4)
						{

							// Temp Hold
							//adoAircraftRecordset.Resync
							//UPGRADE_ISSUE: (2064) ADODB.ResyncEnum property ResyncEnum.adResyncUnderlyingValues was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_ISSUE: (2064) ADODB.Recordset method adoAircraftRecordset.Resync was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							adoAircraftRecordset.Resync(AffectEnum.adAffectCurrent, UpgradeStubs.ADODB_ResyncEnum.getadResyncUnderlyingValues());
							adoAircraftRecordset["ac_year"] = tmpYear.Trim();
							adoAircraftRecordset.Update();
							txt_ac_year[1].Text = tmpYear;

						} // If Trim$(tmpYear) <> cEmptyString And Len(tmpYear) = 4 Then

					} // If Trim(txt_ac_year(1).Text) = cEmptyString Then

				} // If LifeCycleTemp = 1 Or LifeCycleTemp = 2 Then

				modAdminCommon.HasWanteds = CheckForWanteds(Convert.ToInt32(adoAircraftRecordset["ac_id"]));

				StoreKeyAircraftContacts();

				frm_Aircraft_Change.DefInstance.Show();
				frm_Aircraft_Change.DefInstance.Aircraft_ID = Convert.ToInt32(Conversion.Val(txt_ac_id.Text));
				frm_Aircraft_Change.DefInstance.Trans_Type = "SS";
				frm_Aircraft_Change.DefInstance.Activate();

				Release_Lock = false;

				Unload_Aircraft_Form();
				this.Close();

			} // If pass_test = True Then

		} // mnueditchangeShare_Click

		public void mnueditchangeSieze_Click(Object eventSender, EventArgs eventArgs)
		{


			bool pass_test = true;

			check_for_acfl(ref pass_test);


			if (pass_test)
			{

				modAdminCommon.HasWanteds = CheckForWanteds(Convert.ToInt32(adoAircraftRecordset["ac_id"]));

				StoreKeyAircraftContacts();

				frm_Aircraft_Change.DefInstance.Show();
				frm_Aircraft_Change.DefInstance.Aircraft_ID = Convert.ToInt32(Conversion.Val(txt_ac_id.Text));
				frm_Aircraft_Change.DefInstance.Trans_Type = "SZ";
				frm_Aircraft_Change.DefInstance.Activate();

				Release_Lock = false;

				Unload_Aircraft_Form();
				this.Close();
			}

		}


		public void Display_Aircraft_Model_Engine_List()
		{

			try
			{

				string Query = "";
				ADORecordSetHelper snp_Aircraft_Model_Engine = new ADORecordSetHelper(); //aey 6/10/04

				cbo_ac_engine_name.Items.Clear();
				cbo_ac_engine_name.AddItem(modGlobalVars.cEmptyString);

				Query = $"SELECT * FROM Aircraft_Model_Engine WHERE ameng_amod_id = {Convert.ToString(snp_Aircraft_Model["amod_id"])} and ameng_active_flag = 'Y' ";
				snp_Aircraft_Model_Engine.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(snp_Aircraft_Model_Engine.BOF && snp_Aircraft_Model_Engine.EOF))
				{

					while(!snp_Aircraft_Model_Engine.EOF)
					{
						cbo_ac_engine_name.AddItem(($"{Convert.ToString(snp_Aircraft_Model_Engine["ameng_engine_name"])} ").Trim());
						snp_Aircraft_Model_Engine.MoveNext();
					};
					cbo_ac_engine_name.SelectedIndex = 0;
				}

				cbo_ac_engine_name.AddItem("ENGINES REMOVED");

				snp_Aircraft_Model_Engine.Close();
				snp_Aircraft_Model_Engine = null;
			}
			catch
			{

				this.Cursor = CursorHelper.CursorDefault;
				modAdminCommon.Report_Error($"Display_Aircraft_Model_Engine_List_Error: [{ErrorMsgInfo}] ");
			}

		}

		public void Select_Aircraft()
		{
			//******************************************************************************************
			//
			// THE PURPOSE OF THIS PROCEDURE IS TO SELECT THE AIRCRAFT RECORDSET
			// FOR DISPLAY ON THE AIRCRAFT FORM
			//
			// RTW - 4/28/2004 - ADDED DOCUMENTATION
			//******************************************************************************************

			string strError = "";
			try
			{

				// 02/02/2012 - By David D. Cruger
				// For Monitoring

				string strMsg = "";
				System.DateTime dtStartDate = DateTime.FromOADate(0);
				System.DateTime dtEndDate = DateTime.FromOADate(0);

				string strQuery = "";
				ADORecordSetHelper ado_JournDate = new ADORecordSetHelper();
				string strQuery1 = "";

				int lACId = 0;

				int lJournId = 0;

				lACId = Convert.ToInt32(Double.Parse(($"{txt_ac_id.Text} ").Trim()));
				lJournId = tmp_ac_journ_id;

				modCommon.Start_Activity_Monitor_Message("Open Aircraft", ref strMsg, ref dtStartDate, ref dtEndDate);

				MenuEnable("Off");

				this.Cursor = Cursors.WaitCursor;
				search_on("Getting Aircraft Information...");

				strError = "start";
				// SET VARIABLES INDICATING THAT SEVERAL OF THE AIRCRAFT
				// GRIDS HAVE NOT BEEN LOADED
				bEquipmentGridLoaded = false;
				bInteriorGridLoaded = false;
				bExteriorGridLoaded = false;
				bMaintenanceGridLoaded = false;

				// SET VARIABLES INDICATING THAT REGNO AND BASE FIELDS HAVE NOT BEEN VERIFIED
				bVerifiedRegNo = false;
				bVerifiedBase = false;
				bVerifiedEMP = false;
				bVerifiedEMGP = false;
				bVerifiedAMP = false;
				bVerifiedAMTP = false;

				RememberWhatChanged = modGlobalVars.cEmptyString;
				bKeyFeaturesChanged = false;
				bKeyFeature1 = false;
				bKeyFeature2 = false;
				bKeyFeature3 = false;
				bKeyFeature4 = false;
				bKeyFeature5 = false;
				bKeyFeature6 = false;
				bKeyFeatureDamage = false;

				bAvionicsChanged = false;
				bModificationsChanged = false;
				bCertificationsChanged = false;
				bSpecificationsChanged = false;

				strError = " tempjid ";
				if (tmp_ac_journ_id == 0)
				{
					lbl_gen[199].Text = "Current Aircraft";
					txtHistoryDate.Text = modGlobalVars.cEmptyString;
					txtHistoryDate.Visible = false;
					cmd_Active.Text = "View Historical Aircraft Record";
					lbl_gen[7].Text = "Date Purchased:";
					lbl_gen[98].Visible = false;
					txt_ac_sale_price.Visible = false;
				}
				else
				{
					lbl_gen[98].Visible = true;
					txt_ac_sale_price.Visible = true;

					strQuery = $"SELECT journ_date FROM Journal WITH(NOLOCK) WHERE journ_id = {tmp_ac_journ_id.ToString()}";
					ado_JournDate.Open(strQuery, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
					if (!(ado_JournDate.BOF && ado_JournDate.EOF))
					{
						lbl_gen[199].Text = "History as of ";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_JournDate["journ_date"]))
						{

							txtHistoryDate.Text = Convert.ToDateTime(ado_JournDate["journ_date"]).ToString("d");
							RememberHistoryDate = DateTime.Parse(txtHistoryDate.Text).ToString("d");
							txtHistoryDate.Visible = true;
							lbl_gen[7].Text = "Date Seller Purchased:";

						}
						else
						{

							txtHistoryDate.Text = DateTime.Parse(modAdminCommon.DateToday).ToString("d");
							RememberHistoryDate = DateTime.Parse(txtHistoryDate.Text).ToString("d");
							txtHistoryDate.Visible = true;
							lbl_gen[7].Text = "Date Seller Purchased: *";

						}

					}
					// CLOSE RECORSET
					if (ado_JournDate != null)
					{
						if (ado_JournDate.State == ConnectionState.Open)
						{ // Already Open Close It
							ado_JournDate.Close();
						}
						ado_JournDate = null;
					}
					cmd_Active.Text = "View Current Aircraft Record";
				}

				strError = "new rs";

				if (adoAircraftRecordset != null)
				{
					if (adoAircraftRecordset.State == ConnectionState.Open)
					{
						adoAircraftRecordset.CancelBatch(); // added in MSW - 2/12/16
						adoAircraftRecordset.CancelUpdate(); // added in MSW - 2/12/16
						adoAircraftRecordset.Close();
					}
					adoAircraftRecordset = null;
				}

				adoAircraftRecordset = new ADORecordSetHelper();

				strQuery = "SELECT * FROM Aircraft ";

				strQuery = $"{strQuery}WHERE (ac_id = {txt_ac_id.Text.Trim()}) ";
				strQuery = $"{strQuery}AND (ac_journ_id = {tmp_ac_journ_id.ToString()}) ";

				adoAircraftRecordset.CursorLocation = CursorLocationEnum.adUseClient;
				adoAircraftRecordset.Open(strQuery, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockOptimistic);


				// ADDED IN MSW - TO MAKE A REFRESH ISSUE NOT HAPPEN WITH THE DOCS IN PROCESS X STAYING
				strQuery1 = "SELECT faalog_id FROM FAA_Document_Log WITH (NOLOCK) ";
				strQuery1 = $"{strQuery1}WHERE (faalog_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}) ";
				strQuery1 = $"{strQuery1}AND (faalog_journ_id = {Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]).ToString()}) ";

				if (modAdminCommon.Exist(strQuery1))
				{
					//UPGRADE_WARNING: (2065) TabDlg.SSTab property tab_aircraft_details.TabCaption has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
					SSTabHelper.SetTabCaption(tab_aircraft_details, 10, "Docs in Process");
					tab_aircraft_details.ImageList.Images[10] = mdi_ResearchAssistant.DefInstance.imgNormal.Images["Delete"];
				}
				else
				{
					//UPGRADE_WARNING: (2065) TabDlg.SSTab property tab_aircraft_details.TabCaption has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
					SSTabHelper.SetTabCaption(tab_aircraft_details, 10, "Docs in Process");
					tab_aircraft_details.ImageList.Images[10] = null;
				}
				//-------------------------------------------

				string Query2 = "";
				Query2 = $"select top 1 * from publication_listing with (NOLOCK) where publist_status ='O' and publist_ac_id = {txt_ac_id.Text.Trim()}";
				Query2 = $"{Query2} and publist_category = 'Doc Request' ";

				if (modAdminCommon.Exist(Query2))
				{
					//   tab_aircraft_details.TabVisible(6) = True
					// tab_aircraft_details.TabPicture(6) =  ' pic_verify_ac(0).Picture    'aey 6/15/04
					//  tab_aircraft_details.TabCaption(9) = "XXFAA DOCSXX"
					tab_aircraft_details.ImageList.Images[9] = Image.FromFile("\\\\jetnet4\\pictures\\delete_icon.jpg");
					//  tab_aircraft_details.TabPicture(6) = LoadPicture("\\jetnet4\pictures\aircraft\114278-0-688086.jpg")
					// tab_aircraft_details.TabVisible(6) = True
				}
				else
				{
					// tab_aircraft_details.TabVisible(6) = False
				}


				// added MSw - 12/6/22 - to include restricted info
				Query2 = $"select top 1 * from Aircraft_Restricted with (NOLOCK) where  acrestrict_ac_id = {txt_ac_id.Text.Trim()}";

				if (modAdminCommon.Exist(Query2))
				{
					chkArray[7].CheckState = CheckState.Checked;
					chkArray[7].Visible = true;
					chkArray[7].Tag = "1";
				}
				else
				{
					chkArray[7].CheckState = CheckState.Unchecked;
					chkArray[7].Visible = true;
					chkArray[7].Tag = "0";
				}

				// added MSW - 12/22/22
				if (Convert.ToString(modAdminCommon.snp_User["user_type"]) == "Technical" || Convert.ToString(modAdminCommon.snp_User["user_type"]) == "Administrator")
				{ //removed research manager - 1/12/23
					chkArray[7].Visible = true;
				}
				else
				{
					chkArray[7].Visible = false;
				}

				// if we are re-loading for the history re-load then dont really re-load
				if (!re_load_history2)
				{

					if (!(adoAircraftRecordset.BOF && adoAircraftRecordset.EOF))
					{

						if (Convert.ToInt32(adoAircraftRecordset["ac_id"]) == 0 && Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]) == 0)
						{

							MessageBox.Show($"Error Loading Aircraft [{txt_ac_id.Text.Trim()}] ID=0 JID=0", "Aircraft: Select_Aircraft", MessageBoxButtons.OK, MessageBoxIcon.Error);

							Unload_Aircraft_Form();
							this.Close();

							return;
						}

						strError = "sel_model";

						// if we cant select the model then exit
						if (!Select_Aircraft_Model())
						{
							Unload_Aircraft_Form();
							this.Close();
							return;
						}

						strError = "display_ac ";

						if (re_load_history)
						{
							string tempRefParam = "";
							string tempRefParam2 = "";
							load_status_block(ref tempRefParam, ref tempRefParam2);
						}
						else
						{
							Display_Aircraft();
						}


						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset["AC_Journ_id"]))
						{
							if (Convert.ToDouble(adoAircraftRecordset["AC_Journ_id"]) > 0)
							{
								strError = "ac_jid>0 ";
								lbl_gen[50].Text = $"PC Record Key:  {GetPCRecKey(Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]))}";
							}
						}

						if (!adoAircraftRecordset.BOF && !adoAircraftRecordset.EOF)
						{

							if (!snp_Aircraft_Model.BOF && !snp_Aircraft_Model.EOF)
							{
								strMsg = $"{strMsg} - {($"{Convert.ToString(snp_Aircraft_Model["amod_make_name"])} ").Trim()} / {($"{Convert.ToString(snp_Aircraft_Model["amod_model_name"])} ").Trim()} - SerNbr: [{($"{Convert.ToString(adoAircraftRecordset["ac_ser_no_full"])} ").Trim()}]";
							}

						}

						modCommon.End_Activity_Monitor_Message("Open Aircraft", ref strMsg, dtStartDate, ref dtEndDate, lACId, lJournId, 0, 0, 0);

						frm_UserHistory.DefInstance.Refresh_User_History_Grids("Aircraft");

					}
					else
					{
						Unload_Aircraft_Form();
						this.Close();
						return;
					} // if not eof/bof aey 5/26/04
				}
				strError = "Search Off";

				search_off();
				MenuEnable("On");
			}
			catch (System.Exception excep)
			{

				search_off();
				MenuEnable("On");

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Select_Aircraft_Error: {strError}({Information.Err().Number.ToString()}) {excep.Message} frm_Aircraft acid[{txt_ac_id.Text.Trim()}] jid[{tmp_ac_journ_id.ToString().Trim()}]");
			}

		}

		public bool Select_Aircraft_Model()
		{
			bool result = false;
			string Query = "";

			try
			{
				result = false;
				int_Num_Engines = 0;
				int_Num_Props = 0;

				Query = "SELECT amod_id, amod_customer_flag, amod_serno_hyphen_flag, amod_make_name,amod_model_name,amod_type_code,";
				Query = $"{Query}amod_common_verify_days,amod_sale_verify_days,amod_airframe_type_code,amod_number_of_engines,amod_class_code, amod_number_of_props";
				Query = $"{Query} FROM Aircraft_Model WITH(NOLOCK) WHERE amod_id = {Convert.ToString(adoAircraftRecordset["ac_amod_id"])}";

				snp_Aircraft_Model = null;
				snp_Aircraft_Model = new ADORecordSetHelper();

				//aey 6/24/04 changed from dynamic to static
				snp_Aircraft_Model.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(snp_Aircraft_Model.EOF && snp_Aircraft_Model.BOF))
				{
					snp_Aircraft_Model.MoveFirst();
					// SET THE NUMBER OF ENGINES AND PROPS FOR EDITING PURPOSES
					int_Num_Engines = Convert.ToInt32(snp_Aircraft_Model["amod_number_of_engines"]);
					int_Num_Props = Convert.ToInt32(snp_Aircraft_Model["amod_number_of_props"]);
					result = true;
				}
				else
				{
					// no records close model record set
					snp_Aircraft_Model.Close();
					snp_Aircraft_Model = null;
				}

				return result;
			}
			catch (System.Exception excep)
			{

				snp_Aircraft_Model = null;
				result = false;
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"select_aircraft_model_Error ({Information.Err().Number.ToString()}) {excep.Message}", "frm_Aircraft(MODEL)");
				return result;
			}
		}

		public void mnuEditNewJournal_Click(Object eventSender, EventArgs eventArgs)
		{

			frm_Journal.DefInstance.Reference_Journal_ID = 0;
			frm_Journal.DefInstance.Historical_Journal_ID = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);
			frm_Journal.DefInstance.Reference_Ac_Id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
			frm_Journal.DefInstance.Reference_Comp_Id = 0;
			frm_Journal.DefInstance.Reference_Subject = modGlobalVars.cEmptyString;
			frm_Journal.DefInstance.Reference_Yacht_Id = 0;

			if (!(snp_AircraftContacts.BOF && snp_AircraftContacts.EOF))
			{
				frm_Journal.DefInstance.Reference_Contact_Id = Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]);
			}
			else
			{
				frm_Journal.DefInstance.Reference_Contact_Id = 0;
			}

			frm_Journal.DefInstance.Reference_Category_Code = "AR";
			frm_Journal.DefInstance.Reference_SubCategory_Code = "NOTERN";
			frm_Journal.DefInstance.pnl_Journal_Heading.Visible = false;
			modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
			frm_Journal.DefInstance.txt_journ_subject.Enabled = true;
			frm_Journal.DefInstance.ShowDialog();


			Fill_Aircraft_Journal_Grid();
			this.Activate();
			search_off();

		}

		public void mnuEditRegNbrRequestToFAA_Click(Object eventSender, EventArgs eventArgs) => modCommon.EMail_RegNbr_Request_To_FAA(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToString(adoAircraftRecordset["ac_reg_no"]));


		public void mnuenterprice_Click(Object eventSender, EventArgs eventArgs)
		{

			ADORecordSetHelper ado_company = new ADORecordSetHelper();
			string Query = "";
			bool found_record = false;

			Query = "Select journ_date ";
			Query = $"{Query} from  Aircraft with (NOLOCK)";
			Query = $"{Query} inner join Aircraft_Model with (NOLOCK) on ac_amod_id = amod_id";
			Query = $"{Query} inner join Journal with (NOLOCK) on ac_journ_id = journ_id";
			Query = $"{Query} where ac_id = {txt_ac_id.Text} ";
			Query = $"{Query} and ac_journ_id = {tmp_ac_journ_id.ToString()} ";
			Query = $"{Query} and journ_subcat_code_part1='WS' and journ_internal_trans_flag='N'";
			Query = $"{Query} and journ_subcat_code_part3 NOT IN ('DB','DS','FI','FY','IT','MF','RE','CC','LS', 'RM')";

			ado_company.CursorLocation = CursorLocationEnum.adUseClient;
			ado_company.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockBatchOptimistic);

			if (!ado_company.BOF && !ado_company.EOF)
			{
				do 
				{ // Loop Until ado_Company.EOF = True

					found_record = true;

					ado_company.MoveNext();
					Application.DoEvents();

				}
				while(!ado_company.EOF);
			}

			// if found_record is false, then this record was not a retail non internal sale
			if (!found_record)
			{
				if (MessageBox.Show("Please Note: This transaction is NOT a Retail Sale and therefore may not be displayed as often to clients.  If this transaction is part of a back-to-back sale then consider entering the sale price on the appropriate retail sale record. Continue?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
				{
					found_record = true;

				}

			}


			//if record is found, so it is retail non inteernal, or override is a Y then go in
			if (found_record)
			{
				// Display Sale Price
				chkArray[chkDisplaySalePrice_INDEX].Enabled = false;

				frm_enter_sale_price_company.DefInstance.txt_asking_price.Text = txt_ac_asking_price.Text;
				frm_enter_sale_price_company.DefInstance.txt_sale_price.Text = txt_ac_sale_price.Text;
				frm_enter_sale_price_company.DefInstance.AC_ID = Convert.ToInt32(Double.Parse(txt_ac_id.Text));
				frm_enter_sale_price_company.DefInstance.journ_id = tmp_ac_journ_id;


				frm_enter_sale_price_company.DefInstance.amod_ID = cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex);
				frm_enter_sale_price_company.DefInstance.trans_date = txtHistoryDate.Text;

				frm_enter_sale_price_company.DefInstance.ShowDialog();
			}





		}

		public void mnuEvents_Click(Object eventSender, EventArgs eventArgs)
		{

			frm_EventsList.DefInstance.gblACID = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
			frm_EventsList.DefInstance.gblYacht_ID = 0;
			frm_EventsList.DefInstance.gblCOMPID = 0;
			frm_EventsList.DefInstance.Show();
			//UPGRADE_WARNING: (2065) Form method frm_EventsList.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
			frm_EventsList.DefInstance.BringToFront();

		}

		public void mnuFAAFlightData_Click(Object eventSender, EventArgs eventArgs)
		{


			//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//VB.Global.Load(frm_FAAFlightData.DefInstance);
			frm_FAAFlightData.DefInstance.SetACId(Convert.ToInt32(adoAircraftRecordset["ac_id"]));
			frm_FAAFlightData.DefInstance.SetGridType(1); // All Flights
			modCommon.CenterFormOnHomebaseMainForm(frm_FAAFlightData.DefInstance);
			frm_FAAFlightData.DefInstance.Refresh_FAA_Flight_Data_Grid();
			frm_FAAFlightData.DefInstance.ShowDialog();

			int lAPortId = frm_FAAFlightData.DefInstance.GetAPortId();

			if (lAPortId > 0)
			{
				Fill_Aircraft_Base_Information(lAPortId);
				modAdminCommon.Record_Event("Aircraft", $"Add Aircraft Base From Flight Data [{lAPortId.ToString()}]-{txtBaseAirportName.Text}", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0);
			}

		} // mnuFAAFlightData_Click

		public void mnuFileClose_Click(Object eventSender, EventArgs eventArgs)
		{

			DialogResult Answer = (DialogResult) 0;
			Form Frm = null;
			Form f = null;
			frm_Company o_Local_Show_Company = null;

			try
			{


				Application.DoEvents();
				Application.DoEvents();
				Application.DoEvents();
				Application.DoEvents();
				Application.DoEvents();
				Unload_Aircraft_Form();
				Application.DoEvents();
				Application.DoEvents();
				Application.DoEvents();
				Application.DoEvents();


				if (Reference_Company_ID > 0)
				{

					Answer = MessageBox.Show("Return to Company?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo);

					if (Answer == System.Windows.Forms.DialogResult.Yes)
					{

						modStatusBar.Update_Status_Bar(modAdminCommon.SB, "Returning to Company.....", Color.Red);

						// cleanup any contact forms and open a clean form
						modCommon.Unload_Form("frm_Company");

						o_Local_Show_Company = frm_Company.CreateInstance();
						//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//VB.Global.Load(o_Local_Show_Company);
						o_Local_Show_Company.Form_Initialize();
						o_Local_Show_Company.StartForm = tStart_Form;
						o_Local_Show_Company.Reference_CompanyID = Reference_Company_ID;
						o_Local_Show_Company.Reference_CompanyJID = 0;
						o_Local_Show_Company.Reference_AircraftID = Convert.ToInt32(Conversion.Val(txt_ac_id.Text));
						o_Local_Show_Company.Reference_AircraftJID = tmp_ac_journ_id;
						o_Local_Show_Company.Show();
						//UPGRADE_WARNING: (2065) Form method o_Local_Show_Company.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
						o_Local_Show_Company.BringToFront();
						//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
						o_Local_Show_Company.Form_Activated(null, new EventArgs());

						Reference_Company_ID = 0;

					}
					else if (Answer == System.Windows.Forms.DialogResult.No)
					{ 

						// go back to the start page in the tree

						modCommon.pubf_ReturnToStartPage(StartForm);

						Reference_Company_ID = 0;

						if (modCommon.Is_Form_Already_Loaded("frm_Company"))
						{
							modCommon.Unload_Form("frm_Company");
						}

					} // ElseIf Answer = vbNo Then

				}
				else
				{
					// If Reference_Company_ID > 0 Then

					// go back to the start page in the tree
					modCommon.pubf_ReturnToStartPage(StartForm);

					Reference_Company_ID = 0;
					modAdminCommon.gbl_Aircraft_ID = 0;

					if (modCommon.Is_Form_Already_Loaded("frm_Company"))
					{
						modCommon.Unload_Form("frm_Company");
					}

				} // If Reference_Company_ID > 0 Then
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnuFileClose frm_Aircraft: ac_id:{Conversion.Val($"{modAdminCommon.gbl_Aircraft_ID.ToString()}{modGlobalVars.cEmptyString}").ToString()} ip:{((int) Answer).ToString()} {excep.Message} {Information.Err().Number.ToString()}");
				search_off();
			}



		} // mnuFileClose

		private void FillAircraftContactRecordset()
		{

			search_on("Getting Contacts...");

			if (snp_AircraftContacts != null)
			{
				if (snp_AircraftContacts.State == ConnectionState.Open)
				{
					snp_AircraftContacts.Close();
					snp_AircraftContacts = null;
				}
			}

			snp_AircraftContacts = new ADORecordSetHelper();


			ContactRecordsetFilled = false;

			//Change this Query so all are selected even if there isn't a contact
			string Query = "SELECT * FROM Aircraft_Reference WITH(NOLOCK), Aircraft_Purchased_Question WITH(NOLOCK), Aircraft_Contact_Type WITH(NOLOCK), Company WITH(NOLOCK)";
			Query = $"{Query} WHERE (cref_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])})";
			Query = $"{Query} AND (cref_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])})";
			Query = $"{Query} AND (cref_contact_type = actype_code)";
			Query = $"{Query} AND (cref_comp_id = comp_id and cref_journ_id = comp_journ_id)";
			Query = $"{Query} AND acpq_id = cref_purchase_question";
			Query = $"{Query} ORDER BY cref_transmit_seq_no";

			// changed to ado
			snp_AircraftContacts.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snp_AircraftContacts.BOF && snp_AircraftContacts.EOF))
			{
				ContactRecordsetFilled = true;
			}

			search_off();

		}

		public void Fill_Aircraft_Contact_Grid(int row_number = 0)
		{
			// ********************************************************************
			//
			// PURPOSE: THIS PROCEDURE FILLS THE AIRCRAFT COMPANY/CONTACT GRID
			//


			try
			{

				string Query = "";
				StringBuilder TempName = new StringBuilder();
				StringBuilder TempAddress = new StringBuilder();
				ADORecordSetHelper snpContact = new ADORecordSetHelper();
				bool HasPrimary = false;
				string strError = ""; //aey 6/3/04
				int lCnt1 = 0;
				bool is_Verified = false;

				HasPrimary = false;
				strError = "fill lease";

				// Removed 3/1/12 to increase speed. moved outside of the function
				//Call FillLeaseGrid


				// MSW/RTW ADDED 3/12/12/ - THIS MAKES THE AC LEASEABLE
				mnueditchangeLease.Enabled = true;


				search_on("Filling Contact Grid...");

				strError = "fill contact";

				FillAircraftContactRecordset();

				if (!ContactRecordsetFilled)
				{ //9/29/06 mjm
					return;
				}

				tmpExclusiveBroker = modGlobalVars.cEmptyString;

				Total_Exclusive = 0;
				primary_comp_id = 0;
				grd_AircraftContacts.Visible = false;
				grd_AircraftContacts.Enabled = false;
				grd_AircraftContacts.Redraw = false;

				grd_AircraftContacts.Clear();

				grd_AircraftContacts.ColumnsCount = 8;
				grd_AircraftContacts.RowsCount = 2;
				grd_AircraftContacts.FixedRows = 1;
				grd_AircraftContacts.FixedColumns = 0;

				grd_AircraftContacts.CurrentColumnIndex = 0;
				grd_AircraftContacts.CurrentRowIndex = 0;

				grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = "Seq";
				grd_AircraftContacts.SetColumnWidth(0, 27);

				grd_AircraftContacts.CurrentColumnIndex = 1;
				grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = "Relationship to Aircraft";
				grd_AircraftContacts.SetColumnWidth(1, 140);

				grd_AircraftContacts.CurrentColumnIndex = 2;
				grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = "Company Name";
				grd_AircraftContacts.SetColumnWidth(2, 260);

				grd_AircraftContacts.CurrentColumnIndex = 3;
				grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = "Location";
				grd_AircraftContacts.SetColumnWidth(3, 167);

				grd_AircraftContacts.CurrentColumnIndex = 4;
				grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = "Contact [Title]";
				grd_AircraftContacts.SetColumnWidth(4, 160);


				grd_AircraftContacts.CurrentColumnIndex = 5;
				grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = "Purchase Question";
				grd_AircraftContacts.SetColumnWidth(5, 201);

				grd_AircraftContacts.CurrentColumnIndex = 6;
				grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = "Frac. Expire Date";
				grd_AircraftContacts.SetColumnWidth(6, 113);

				grd_AircraftContacts.CurrentColumnIndex = 7;
				grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = "Verified";
				grd_AircraftContacts.SetColumnWidth(7, 0);

				lbl_gen[55].Visible = false;
				PercentTotal = 0;

				if (!cbo_change_rel.Visible)
				{
					modFillCompConControls.Fill_Contact_Type_ListFromArray(cbo_change_rel, lbl_gen[39], modGlobalVars.e_find_form_entry_points.geAssociateToAircraft);
					lbl_gen[39].Text = "Notes:";
					cbo_change_rel.Visible = true;
				}

				HasOperator = false;
				strError = "fill ac grid";

				Companies_Connected_List = ""; // added MSW 4/15/16

				txt_gen[4].Text = "Operating Company"; // Automatically Set

				if (!(snp_AircraftContacts.BOF && snp_AircraftContacts.EOF))
				{

					grd_AircraftContacts.Visible = true;
					strError = "A/C Contacts";

					modAdminCommon.arrCurrentKeyACContacts = ArraysHelper.InitializeArray<string[, ]>(new int[]{41, 3}, new int[]{0, 0});
					strError = "A/C redim";
					grd_AircraftContacts.CurrentRowIndex = 1;

					lCnt1 = 0;

					while(!snp_AircraftContacts.EOF)
					{

						grd_AircraftContacts.CurrentColumnIndex = 0;

						if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "99" || (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "93" && tmpExclusiveBroker.Trim() == modGlobalVars.cEmptyString))
						{
							tmpExclusiveBroker = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_name"])}").Trim();
						}

						if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_primary_poc_flag"])}").Trim().ToUpper() == "Y")
						{
							HasPrimary = true;
						}

						strError = "A/C trans";

						if (Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_transmit_seq_no"])}").Trim()) < 99)
						{
							if (Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_transmit_seq_no"])}").Trim()) == 2)
							{
								HasOperator = true;
							}
							strError = "A/C trans <99";

							grd_AircraftContacts.CellBackColor = Color.Purple;
							grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_transmit_seq_no"])}").Trim();
							grd_AircraftContacts.CellForeColor = Color.White;

							if (Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_transmit_seq_no"])}").Trim()) == StringsHelper.ToDoubleSafe("1"))
							{
								OwnerCompanyID = Convert.ToInt32(Double.Parse(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_id"])}").Trim()));
							}
							if (Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_transmit_seq_no"])}").Trim()) == StringsHelper.ToDoubleSafe("2"))
							{
								OperatorCompanyID = Convert.ToInt32(Double.Parse(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_id"])}").Trim()));
							}
							if (Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_transmit_seq_no"])}").Trim()) == StringsHelper.ToDoubleSafe("6"))
							{
								Additional1CompanyID = Convert.ToInt32(Double.Parse(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_id"])}").Trim()));
							}

							modAdminCommon.arrCurrentKeyACContacts[Convert.ToInt32(Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_transmit_seq_no"])}").Trim())), 1] = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_id"])}").Trim();
							modAdminCommon.arrCurrentKeyACContacts[Convert.ToInt32(Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_transmit_seq_no"])}").Trim())), 2] = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_id"])}").Trim();

						}

						strError = "A/C col=1";

						// ***********************************************
						// BUILD THE COMPANY NAME FOR DISPLAY
						grd_AircraftContacts.CurrentColumnIndex = 1;
						TempName = new StringBuilder(Convert.ToString(snp_AircraftContacts["actype_name"]).Trim());
						//**************************************
						// IF THERE IS A PERCENTAGE ASSOCIATED WITH THE COMPANY, THEN DISPLAY THE PERCENTAGE
						// NEXT TO THE COMPANY NAME
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_AircraftContacts["cref_owner_percent"]))
						{
							if (Math.Abs(Convert.ToDouble(snp_AircraftContacts["cref_owner_percent"])) > 0 && Math.Abs(Convert.ToDouble(snp_AircraftContacts["cref_owner_percent"])) <= 100)
							{

								// ONLY DISPLAY PERCENTAGES FOR REFERENCES THAT MAY HAVE PERCENTAGES
								switch((Convert.ToString(snp_AircraftContacts["cref_contact_type"])))
								{
									case "97" : case "17" : case "08" : case "69" : case "70" : case "95" : case "96" : 
										TempName.Append($" ({StringsHelper.Format(snp_AircraftContacts["cref_owner_percent"], "###,###,##0.00#")}%)"); 
										break;
								}

								lbl_gen[55].Visible = false;
							}
						}

						grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = TempName.ToString();
						if (modCommon.GetImportantRelationships(Convert.ToInt32(snp_AircraftContacts["cref_id"])))
						{
							grd_AircraftContacts.CellFontBold = true;
						}

						if (Companies_Connected_List.Trim() != "")
						{
							if ((Companies_Connected_List.IndexOf($" {Convert.ToString(snp_AircraftContacts["cref_comp_id"])} ") + 1) == 0)
							{
								Companies_Connected_List = $"{Companies_Connected_List}, {Convert.ToString(snp_AircraftContacts["cref_comp_id"])} ";
							}
						}
						else
						{
							Companies_Connected_List = $"{Convert.ToString(snp_AircraftContacts["cref_comp_id"])} ";
						}



						is_Verified = false; // means verified = Y
						if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_verified_flag"])}").Trim().ToUpper() == "Y")
						{
							is_Verified = true; // verified N means un confirmed/verified
						}


						if (Convert.ToString(snp_AircraftContacts["cref_primary_poc_flag"]) == "Y")
						{
							primary_comp_id = Convert.ToInt32(snp_AircraftContacts["cref_comp_id"]);
							grd_AircraftContacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.PrimaryColor)));
						}
						else
						{
							if (Convert.ToString(snp_AircraftContacts["cref_primary_poc_flag"]) == "X")
							{
								Total_Exclusive++;
								grd_AircraftContacts.CellBackColor = Color.FromArgb(192, 192, 255);
							}
							else if (!is_Verified)
							{ 
								grd_AircraftContacts.CellBackColor = SystemColors.Control;
							}
							else
							{
								grd_AircraftContacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
							}
						}







						grd_AircraftContacts.CurrentColumnIndex = 2;
						grd_AircraftContacts.ColAlignment[grd_AircraftContacts.CurrentColumnIndex] = DataGridViewContentAlignment.MiddleLeft;
						grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_name"])}").Trim();

						grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = $"{grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString()} [{modCommon.GetBusinessTypeName(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_business_type"])}").Trim())}]";
						grd_AircraftContacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));

						if (($"{Convert.ToString(snp_AircraftContacts["cref_operator_flag"])}{modGlobalVars.cEmptyString}").Trim() == "Y")
						{ // Y=Automatically Set
							grd_AircraftContacts.CellBackColor = Color.FromArgb(192, 255, 255);
						}

						if (($"{Convert.ToString(snp_AircraftContacts["cref_operator_flag"])}{modGlobalVars.cEmptyString}").Trim() == "O")
						{ // O=Manually Set
							grd_AircraftContacts.CellBackColor = Color.FromArgb(192, 255, 255);
							txt_gen[4].Text = "*Operating Company"; // Manually Set
						}

						if (!is_Verified)
						{
							grd_AircraftContacts.CellBackColor = SystemColors.Control;
						}


						grd_AircraftContacts.CurrentColumnIndex = 3;
						//------------------------------------------------------------------------------------------------------------------------------
						//6/25/2001 rje start correct address display
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["Comp_city"])}").Trim()) > 0 && Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_state"])}").Trim()) > 0)
						{
							grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = $"{($"{Convert.ToString(snp_AircraftContacts["Comp_city"])} ").Trim()},{($"{Convert.ToString(snp_AircraftContacts["comp_state"])} ").Trim()}";
							grd_AircraftContacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
						}
						TempAddress = new StringBuilder(modGlobalVars.cEmptyString);
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["Comp_city"])}").Trim()) > 0 && Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_state"])}").Trim()) == 0)
						{
							TempAddress.Append(($"{Convert.ToString(snp_AircraftContacts["Comp_city"])} ").Trim());
						}
						if (Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["Comp_city"])}").Trim()) == 0 && Strings.Len(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_state"])}").Trim()) > 0)
						{
							TempAddress.Append(($"{Convert.ToString(snp_AircraftContacts["comp_state"])} ").Trim());
						}
						if (Strings.Len(TempAddress.ToString().Trim()) > 0)
						{
							grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = TempAddress.ToString();
							grd_AircraftContacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
						}

						if (!is_Verified)
						{
							grd_AircraftContacts.CellBackColor = SystemColors.Control;
						}

						grd_AircraftContacts.CurrentColumnIndex = 4;

						grd_AircraftContacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
						//select the contact info for this record - if the contact id is greater than 0
						strError = "A/C contact id";
						if (Convert.ToDouble(snp_AircraftContacts["cref_contact_id"]) > 0)
						{
							Query = $"SELECT * FROM Contact WITH(NOLOCK) WHERE contact_id = {Convert.ToString(snp_AircraftContacts["cref_contact_id"])}";
							Query = $"{Query} AND contact_journ_id = {Convert.ToString(snp_AircraftContacts["cref_journ_id"])}";

							snpContact.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

							if (!(snpContact.BOF && snpContact.EOF))
							{
								strError = "A/C open contact";

								if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snpContact["Contact_hide_flag"])}").Trim() == "Y")
								{
									grd_AircraftContacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HiddenColor)));
								}
								//aey 7/12/04 added suffix and suffix # 289
								grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = $"{($"{Convert.ToString(snpContact["contact_first_name"])} ").Trim()} {((Strings.Len(($"{Convert.ToString(snpContact["contact_middle_initial"])}{modGlobalVars.cEmptyString}").Trim()) == 0) ? " " : $"{Convert.ToString(snpContact["contact_middle_initial"])}. ")}{($"{Convert.ToString(snpContact["contact_last_name"])} ").Trim()}{((Strings.Len(($"{Convert.ToString(snpContact["contact_suffix"])}{modGlobalVars.cEmptyString}").Trim()) == 0) ? modGlobalVars.cEmptyString : $" {Convert.ToString(snpContact["contact_suffix"])}")} [{($"{modGlobalVars.cEmptyString}{Convert.ToString(snpContact["contact_title"])}").Trim()}]";


							}
							snpContact.Close();
							snpContact = null;
						}

						if (!is_Verified)
						{
							grd_AircraftContacts.CellBackColor = SystemColors.Control;
						}

						grd_AircraftContacts.CurrentColumnIndex = 6;
						grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_AircraftContacts["cref_fraction_expires_date"]))
						{
							if (Convert.ToDateTime(snp_AircraftContacts["cref_fraction_expires_date"]).ToOADate() != 0)
							{
								grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = $"Expires: {Convert.ToDateTime(snp_AircraftContacts["cref_fraction_expires_date"]).ToString("d")}";
							}
						}

						if (!is_Verified)
						{
							grd_AircraftContacts.CellBackColor = SystemColors.Control;
						}

						grd_AircraftContacts.CurrentColumnIndex = 5;
						grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_AircraftContacts["acpq_question"]))
						{
							if (Convert.ToString(snp_AircraftContacts["acpq_question"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = Convert.ToString(snp_AircraftContacts["acpq_question"]).Trim();
							}
						}

						if (!is_Verified)
						{
							grd_AircraftContacts.CellBackColor = SystemColors.Control;
						}


						grd_AircraftContacts.CurrentColumnIndex = 7;
						grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_AircraftContacts["cref_verified_flag"]))
						{
							if (Convert.ToString(snp_AircraftContacts["cref_verified_flag"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = Convert.ToString(snp_AircraftContacts["cref_verified_flag"]).Trim();
							}
						}


						grd_AircraftContacts.set_RowData(grd_AircraftContacts.CurrentRowIndex, Convert.ToInt32(snp_AircraftContacts["cref_id"]));

						grd_AircraftContacts.RowsCount++;
						grd_AircraftContacts.CurrentRowIndex++;

						lCnt1++;
						if (lCnt1 == 5)
						{
							grd_AircraftContacts.Visible = true;
							grd_AircraftContacts.Enabled = true;
							grd_AircraftContacts.Redraw = true;
							Application.DoEvents();
							grd_AircraftContacts.Enabled = false;
							grd_AircraftContacts.Redraw = false;
						}

						snp_AircraftContacts.MoveNext();

					};

					grd_AircraftContacts.RowsCount--;
					grd_AircraftContacts.CurrentRowIndex = 1;
					grd_AircraftContacts.Enabled = true;

					grd_AircraftContacts_singleClickBodyCode();

				}
				else
				{

					strError = "No Contacts";
					//==========================================
					// Keith Humpf 11-17-2003
					// If there are no contacts at all, don't
					// worry about missing a primary
					//==========================================
					HasPrimary = true;

					grd_AircraftContacts.Enabled = false;
					grd_AircraftContacts.CurrentRowIndex = 1;
					grd_AircraftContacts.CurrentColumnIndex = 2;
					grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].Value = "No Contacts Found";

				}

				//   If row_number > 0 Then
				//      grd_AircraftContacts.Row = row_number
				//   End If

				grd_AircraftContacts.Visible = true;
				grd_AircraftContacts.Enabled = true;
				grd_AircraftContacts.Redraw = true;




				strError = "save trans";

				Display_Account_Rep();

				if (NeedToSaveContactTransmits)
				{

					NeedToSaveContactTransmits = false;
					search_on("Saving Transmits...");

					SaveAircraftContactTransmits();
					modCommon.ClearAircraftActionDate(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]));

				}

				if (!HasPrimary && Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]) == 0 && Convert.ToInt32(adoAircraftRecordset["ac_lifecycle_stage"]) != 4)
				{
					MessageBox.Show($"THIS AIRCRAFT HAS NO PRIMARY CONTACT!{Environment.NewLine}Please assign a primary", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Information);
				}


				if (added_research_only && Last_Journal_ID.Trim() != "")
				{
					// added in MSW - 11/12/19 -------- so that it pops up after ac loads back up
					frm_Journal.DefInstance.Reference_Yacht_Id = 0;
					frm_Journal.DefInstance.Reference_Journal_ID = Convert.ToInt32(Double.Parse(Last_Journal_ID));
					frm_Journal.DefInstance.Display_Journal_Entry();
					frm_Journal.DefInstance.ShowDialog();

					Last_Journal_ID = "";
					added_research_only = false;
				}




				search_off();

				grd_AircraftContacts.Redraw = true;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Fill_Aircraft_Contact_Grid_Error: ({Information.Err().Number.ToString()}) {excep.Message} acid[{Convert.ToString(adoAircraftRecordset["AC_ID"])}] jid[{Convert.ToString(adoAircraftRecordset["AC_Journ_id"])}]");
				this.Cursor = CursorHelper.CursorDefault;
			}

		}

		private void Select_Aircraft_Contact()
		{


			strPhoneGrid = "";

			if (!ContactRecordsetFilled)
			{
				// *******************************************
				// IF THERE IS NO RECORDSET THEN GET ONE
				FillAircraftContactRecordset();
			}

			if (!(snp_AircraftContacts.BOF && snp_AircraftContacts.EOF))
			{
				snp_AircraftContacts.MoveFirst();
				int tempForEndVar = grd_AircraftContacts.CurrentRowIndex - 1;
				for (int I = 1; I <= tempForEndVar; I++)
				{
					snp_AircraftContacts.MoveNext();
				}
			}

		}

		private void Update_Aircraft_KeyFeature()
		{
			//******************************************************************************************

			try
			{
				string cellcolor = "";

				if (grd_AircraftKeyFeatures.CurrentRowIndex == 0)
				{
					return;
				}
				else
				{
					bKeyFeaturesChanged = true;
					switch(grd_AircraftKeyFeatures.CurrentRowIndex)
					{
						case 1 : 
							bKeyFeature1 = true; 
							break;
						case 2 : 
							bKeyFeature2 = true; 
							break;
						case 3 : 
							bKeyFeature3 = true; 
							break;
						case 4 : 
							bKeyFeature4 = true; 
							break;
						case 5 : 
							bKeyFeature5 = true; 
							break;
						case 6 : 
							bKeyFeature6 = true; 
							 
							break;
					}

					if (cbo_Feature_Options.Text == "Yes")
					{
						cellcolor = modAdminCommon.NoColor;
					}
					if (cbo_Feature_Options.Text == "No")
					{
						cellcolor = modAdminCommon.NoColor;
					}
					if (cbo_Feature_Options.Text == "Unknown")
					{
						cellcolor = modAdminCommon.ConfirmColor;
					}
					if (cbo_Feature_Options.Text == "Accident")
					{
						cellcolor = modAdminCommon.NoColor;
					}
					if (cbo_Feature_Options.Text == "Incident")
					{
						cellcolor = modAdminCommon.NoColor;
					}
					grd_AircraftKeyFeatures.CurrentColumnIndex = 1;
					grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = cbo_Feature_Options.Text.Trim();
					grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
					grd_AircraftKeyFeatures.CurrentColumnIndex = 2;
					grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = txt_Kfeat_Update_Code.Text.Trim();
					if (grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString() == "DAM")
					{
						bKeyFeatureDamage = true;
					}
					grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

					// SET THE FINAL COLUMN TO THE WORD UPDATE INDICATING IT HAS BEEN CHANGED
					grd_AircraftKeyFeatures.CurrentColumnIndex = 3;
					grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "UPDATE";
					grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

					grd_AircraftKeyFeatures.CurrentColumnIndex = 0;
					grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
					grd_AircraftKeyFeatures.CurrentColumnIndex = 4;
					grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

					grd_AircraftKeyFeatures.set_RowData(grd_AircraftKeyFeatures.CurrentRowIndex, 1);
					return;
				}
			}
			catch
			{

				MessageBox.Show("Update_Aircraft_KeyFeature_Error:", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
			}
		}

		private void Select_Aircraft_FAA()
		{
			try
			{
				string Query = "";

				Query = "SELECT * FROM Aircraft_FAA_Document WITH(NOLOCK)";
				Query = $"{Query} WHERE acfaa_ac_id={Convert.ToString(adoAircraftRecordset["ac_id"]).Trim()}";
				Query = $"{Query} AND acfaa_journ_id = {tmp_ac_journ_id.ToString()}";

				snp_Aircraft_FAA = new ADORecordSetHelper();
				snp_Aircraft_FAA.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(snp_Aircraft_FAA.BOF && snp_Aircraft_FAA.EOF))
				{
					snp_Aircraft_FAA.MoveFirst();
				}

				Display_Aircraft_FAA();
			}
			catch (System.Exception excep)
			{

				this.Cursor = CursorHelper.CursorDefault;
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Select_Aircraft_FAA_Error: {Information.Err().Number.ToString()} {excep.Message}");
			}

		}

		private void Display_Aircraft_FAA()
		{

			//
			//   Purpose: The purpose of this procedure is to fill in all
			//            the information on the FAA Documents tab
			//   Last Modified On: 9/18/2002
			//   Last Modified By: Keith Humpf

			try
			{


				txt_acfaa_reg_no[0].Text = modGlobalVars.cEmptyString;
				txt_acfaa_reg_no[1].Text = modGlobalVars.cEmptyString;
				txt_acfaa_reg_no[2].Text = modGlobalVars.cEmptyString;
				txt_acfaa_reg_no[3].Text = modGlobalVars.cEmptyString;
				txt_acfaa_reg_status[0].Text = modGlobalVars.cEmptyString;
				txt_acfaa_reg_status[1].Text = modGlobalVars.cEmptyString;
				txt_acfaa_reg_status[2].Text = modGlobalVars.cEmptyString;
				txt_acfaa_reg_status[3].Text = modGlobalVars.cEmptyString;
				txt_acfaa_party_comp_name[0].Text = modGlobalVars.cEmptyString;
				txt_acfaa_party_comp_name[1].Text = modGlobalVars.cEmptyString;
				txt_acfaa_party_comp_name[2].Text = modGlobalVars.cEmptyString;
				txt_acfaa_party_comp_name[3].Text = modGlobalVars.cEmptyString;
				txt_acfaa_party_comp_name[4].Text = modGlobalVars.cEmptyString;
				txt_acfaa_party_comp_name[5].Text = modGlobalVars.cEmptyString;
				txt_acfaa_party_comp_name[6].Text = modGlobalVars.cEmptyString;
				txt_acfaa_party_comp_name[7].Text = modGlobalVars.cEmptyString;
				txt_acfaa_party_comp_name[8].Text = modGlobalVars.cEmptyString;
				txt_acfaa_party_comp_name[9].Text = modGlobalVars.cEmptyString;
				txt_acfaa_notes.Text = modGlobalVars.cEmptyString;

				if (!(snp_Aircraft_FAA.BOF && snp_Aircraft_FAA.EOF))
				{
					txt_acfaa_reg_no[0].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_reg_no1"])} ").Trim();
					txt_acfaa_reg_no[1].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_reg_no2"])} ").Trim();
					txt_acfaa_reg_no[2].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_reg_no3"])} ").Trim();
					txt_acfaa_reg_no[3].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_reg_no4"])} ").Trim();
					txt_acfaa_reg_status[0].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_reg_status1"])} ").Trim();
					txt_acfaa_reg_status[1].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_reg_status2"])} ").Trim();
					txt_acfaa_reg_status[2].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_reg_status3"])} ").Trim();
					txt_acfaa_reg_status[3].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_reg_status4"])} ").Trim();
					txt_acfaa_party_comp_name[0].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_party_comp_name1"])} ").Trim();
					txt_acfaa_party_comp_name[1].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_party_comp_name2"])} ").Trim();
					txt_acfaa_party_comp_name[2].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_party_comp_name3"])} ").Trim();
					txt_acfaa_party_comp_name[3].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_party_comp_name4"])} ").Trim();
					txt_acfaa_party_comp_name[4].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_party_comp_name5"])} ").Trim();
					txt_acfaa_party_comp_name[5].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_party_comp_name6"])} ").Trim();
					txt_acfaa_party_comp_name[6].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_party_comp_name7"])} ").Trim();
					txt_acfaa_party_comp_name[7].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_party_comp_name8"])} ").Trim();
					txt_acfaa_party_comp_name[8].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_party_comp_name9"])} ").Trim();
					txt_acfaa_party_comp_name[9].Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_party_comp_name10"])} ").Trim();
					txt_acfaa_notes.Text = ($"{Convert.ToString(snp_Aircraft_FAA["acfaa_notes"])} ").Trim();
				}

				temp_acfaa_reg_no0 = txt_acfaa_reg_no[0].Text;
				temp_acfaa_reg_no1 = txt_acfaa_reg_no[1].Text;
				temp_acfaa_reg_no2 = txt_acfaa_reg_no[2].Text;
				temp_acfaa_reg_no3 = txt_acfaa_reg_no[3].Text;
				temp_acfaa_reg_status0 = txt_acfaa_reg_status[0].Text;
				temp_acfaa_reg_status1 = txt_acfaa_reg_status[1].Text;
				temp_acfaa_reg_status2 = txt_acfaa_reg_status[2].Text;
				temp_acfaa_reg_status3 = txt_acfaa_reg_status[3].Text;
				temp_acfaa_party_comp_name0 = txt_acfaa_party_comp_name[0].Text;
				temp_acfaa_party_comp_name1 = txt_acfaa_party_comp_name[1].Text;
				temp_acfaa_party_comp_name2 = txt_acfaa_party_comp_name[2].Text;
				temp_acfaa_party_comp_name3 = txt_acfaa_party_comp_name[3].Text;
				temp_acfaa_party_comp_name4 = txt_acfaa_party_comp_name[4].Text;
				temp_acfaa_party_comp_name5 = txt_acfaa_party_comp_name[5].Text;
				temp_acfaa_party_comp_name6 = txt_acfaa_party_comp_name[6].Text;
				temp_acfaa_party_comp_name7 = txt_acfaa_party_comp_name[7].Text;
				temp_acfaa_party_comp_name8 = txt_acfaa_party_comp_name[8].Text;
				temp_acfaa_party_comp_name9 = txt_acfaa_party_comp_name[9].Text;
				temp_acfaa_notes = txt_acfaa_notes.Text;

				int tempForEndVar = txt_acfaa_reg_no.GetUpperBound(0);
				for (int I = 0; I <= tempForEndVar; I++)
				{
					if (txt_acfaa_reg_no[I].Text.Trim() != modGlobalVars.cEmptyString)
					{
						SSTabHelper.SetSelectedIndex(tab_aircraft_details, 9);
						return;
					}
				}
				int tempForEndVar2 = txt_acfaa_reg_status.GetUpperBound(0);
				for (int I = 0; I <= tempForEndVar2; I++)
				{
					if (txt_acfaa_reg_status[I].Text.Trim() != modGlobalVars.cEmptyString)
					{
						SSTabHelper.SetSelectedIndex(tab_aircraft_details, 9);
						return;
					}
				}
				int tempForEndVar3 = txt_acfaa_party_comp_name.GetUpperBound(0);
				for (int I = 0; I <= tempForEndVar3; I++)
				{
					if (txt_acfaa_party_comp_name[I].Text.Trim() != modGlobalVars.cEmptyString)
					{
						SSTabHelper.SetSelectedIndex(tab_aircraft_details, 9);
						return;
					}
				}
				if (txt_acfaa_notes.Text.Trim() != modGlobalVars.cEmptyString)
				{
					SSTabHelper.SetSelectedIndex(tab_aircraft_details, 9);
				}
			}
			catch (System.Exception excep)
			{

				this.Cursor = CursorHelper.CursorDefault;
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Display_Aircraft_FAA_Error: [{ErrorMsgInfo}] {Information.Err().Number.ToString()} {excep.Message}");
			}

		}

		private void Display_Account_Rep()
		{

			try
			{

				string Query = "";
				ADORecordSetHelper snp_AccountRep = new ADORecordSetHelper(); // Recordset aey 723/04 converted to ado

				tab_aircraft_details.Enabled = false;

				search_on("Getting Account Rep Info ...");

				if (primary_comp_id > 0)
				{

					Query = $"SELECT comp_account_id FROM Company WITH(NOLOCK) WHERE comp_id = {primary_comp_id.ToString()} AND comp_journ_id = 0";

					snp_AccountRep.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

					if (!(snp_AccountRep.BOF && snp_AccountRep.EOF))
					{
						snp_AccountRep.MoveFirst();
						Aircraft_Account_Rep = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AccountRep["comp_account_id"])}").Trim();
						lbl_gen[15].Text = $"Current Account Rep:  {(Aircraft_Account_Rep.Trim())}";
					}

					snp_AccountRep.Close();
					snp_AccountRep = null;

				}
				else
				{
					lbl_gen[15].Text = "Current Account Rep: Unknown";
				}

				tab_aircraft_details.Enabled = true;

				search_off();
			}
			catch
			{

				this.Cursor = CursorHelper.CursorDefault;
				modAdminCommon.Report_Error($"Display_Account_Rep_Error: [{ErrorMsgInfo}] ");
			}

		}

		public void mnuFileLogout_Click(Object eventSender, EventArgs eventArgs)
		{

			AnsweredCancel = false;
			Unload_Aircraft_Form();
			if (!AnsweredCancel)
			{
				Unload_Aircraft_Form();
				frm_Main_Menu.DefInstance.Close();
			}

		}

		private void Clear_Aircraft()
		{

			//  CLEAR TOP OF FORM
			txt_amod_type_code.Text = modGlobalVars.cEmptyString;
			cbo_amod_make_name.Items.Clear();
			txt_ac_ser_no[0].Text = modGlobalVars.cEmptyString;
			txt_ac_ser_no[1].Text = modGlobalVars.cEmptyString;
			txt_ac_ser_no[2].Text = modGlobalVars.cEmptyString;
			txt_ac_alt_ser_no[0].Text = modGlobalVars.cEmptyString;
			txt_ac_alt_ser_no[1].Text = modGlobalVars.cEmptyString;
			txt_ac_alt_ser_no[2].Text = modGlobalVars.cEmptyString;
			txt_ac_year[1].Text = modGlobalVars.cEmptyString;
			txt_ac_year[0].Text = modGlobalVars.cEmptyString;
			txt_ac_year[2].Text = modGlobalVars.cEmptyString; // this is really the reg expiration date

			modCommon.SetComboText(cbo_ac_status, modGlobalVars.cEmptyString);

			cbo_ac_asking.SelectedIndex = 0;
			cbo_ac_delivery.Items.Clear();
			cbo_ac_delivery.AddItem(modGlobalVars.cEmptyString);
			cbo_ac_delivery.AddItem("Immediate");
			cbo_ac_delivery.AddItem("Date");
			cbo_ac_delivery.SelectedIndex = 0;
			txt_ac_asking_price.Text = modGlobalVars.cEmptyString;
			txt_ac_list_date.Text = modGlobalVars.cEmptyString;
			lbl_gen[13].Text = modGlobalVars.cEmptyString;
			lbl_gen[14].Text = modGlobalVars.cEmptyString;
			lbl_gen[15].Text = modGlobalVars.cEmptyString;
			lbl_gen[245].Text = modGlobalVars.cEmptyString;
			lbl_gen[256].Text = modGlobalVars.cEmptyString;
			cbo_ac_foreign_currency_name.SelectedIndex = -1;
			txt_ac_foreign_currency_price.Text = modGlobalVars.cEmptyString;
			txt_ac_sale_price.Text = modGlobalVars.cEmptyString;
			chkArray[chkAvailableFlag_INDEX].CheckState = CheckState.Unchecked;
			chkArray[chkExclusiveExp_INDEX].CheckState = CheckState.Unchecked; // Exclusive Expiration

			//  CLEAR MAIN TAB
			txt_ac_engine_ser_no[0].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_ser_no[1].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_ser_no[2].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_ser_no[3].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_tot_hrs[0].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_tot_hrs[1].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_tot_hrs[2].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_tot_hrs[3].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_soh_hrs[0].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_soh_hrs[1].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_soh_hrs[2].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_soh_hrs[3].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_shi_hrs[0].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_shi_hrs[1].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_shi_hrs[2].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_shi_hrs[3].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_tbo_hrs[0].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_tbo_hrs[1].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_tbo_hrs[2].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_tbo_hrs[3].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_snew_cycles[0].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_snew_cycles[1].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_snew_cycles[2].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_snew_cycles[3].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_soh_cycles[0].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_soh_cycles[1].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_soh_cycles[2].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_soh_cycles[3].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_shs_cycles[0].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_shs_cycles[1].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_shs_cycles[2].Text = modGlobalVars.cEmptyString;
			txt_ac_engine_shs_cycles[3].Text = modGlobalVars.cEmptyString;
			txt_ac_times_as_of_date.Text = modGlobalVars.cEmptyString;
			txt_ac_airframe_tot_hrs.Text = modGlobalVars.cEmptyString;
			txt_ac_airframe_tot_landings.Text = modGlobalVars.cEmptyString;
			txt_ac_prop_ser_no[0].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_ser_no[1].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_ser_no[2].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_ser_no[3].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_snew_hrs[0].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_snew_hrs[1].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_snew_hrs[2].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_snew_hrs[3].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_soh_hrs[0].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_soh_hrs[1].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_soh_hrs[2].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_soh_hrs[3].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_soh_mo[0].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_soh_mo[1].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_soh_mo[2].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_soh_mo[3].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_soh_year[0].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_soh_year[1].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_soh_year[2].Text = modGlobalVars.cEmptyString;
			txt_ac_prop_soh_year[3].Text = modGlobalVars.cEmptyString;
			chk_oncondtbo.CheckState = CheckState.Unchecked;

			//  CLEAR MAINTENANCE TAB
			txt_ac_maint_eoh_by_name.Text = modGlobalVars.cEmptyString;
			txt_ac_maint_hots_by_name.Text = modGlobalVars.cEmptyString;
			txt_ac_maint_eoh_mo.Text = modGlobalVars.cEmptyString;
			txt_ac_maint_eoh_year.Text = modGlobalVars.cEmptyString;
			txt_ac_maint_hots_mo.Text = modGlobalVars.cEmptyString;
			txt_ac_maint_hots_year.Text = modGlobalVars.cEmptyString;

			//  CLEAR INTERIOR/EXTERIOR
			txt_ac_interior_rating.Text = modGlobalVars.cEmptyString;
			txt_ac_exterior_rating.Text = modGlobalVars.cEmptyString;
			txt_ac_interior_mo.Text = modGlobalVars.cEmptyString;
			txt_ac_interior_year.Text = modGlobalVars.cEmptyString;
			txt_ac_exterior_mo.Text = modGlobalVars.cEmptyString;
			txt_ac_exterior_year.Text = modGlobalVars.cEmptyString;
			txt_ac_interior_doneby_name.Text = modGlobalVars.cEmptyString;
			txt_ac_exterior_doneby_name.Text = modGlobalVars.cEmptyString;
			txt_ac_passenger_count.Text = "0";

			// CLEAR Lease Information
			pnl_LeaseEntry.Visible = false;
			// Leased Flag
			chkArray[chkLeasedFlag_INDEX].CheckState = CheckState.Unchecked;
			txt_ac_lease_expire_date.Text = modGlobalVars.cEmptyString;
			txt_ac_lease_type[0].Text = modGlobalVars.cEmptyString;
			txt_ac_lease_type[1].Text = modGlobalVars.cEmptyString;
			txt_ac_lease_type[2].Text = modGlobalVars.cEmptyString;

			//clear company listing   - msw 4/24/2014
			grd_AircraftContacts.Clear();


		}

		public void mnuhomebase_Click(Object eventSender, EventArgs eventArgs)
		{

			//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//VB.Global.Load(frm_WebReport.DefInstance);
			frm_WebReport.DefInstance.WhichReport = "Homebase Record";
			frm_WebReport.DefInstance.Show();


		}

		public void mnuPubs_Click(Object eventSender, EventArgs eventArgs)
		{
			//aey 7/23/04
			frm_WebCrawl.DefInstance.WhichAcctRep = modAdminCommon.gbl_Account_ID;

			//  If tab_aircraft_details.TabIndex = 26 Then  ' if we are on the pubs tab - msw -
			//      Call setup_doc_request
			//  End If

			frm_WebCrawl.DefInstance.Show();

		}

		public void mnuRemoveExclusive_Click(Object eventSender, EventArgs eventArgs)
		{

			if (MessageBox.Show("Are you sure you want to take this aircraft off exclusive?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
			{
				// this stuff should not be wrapped in a transaction (rtw - 11/19/2001)
				StoreKeyAircraftContacts();

				modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "RemExcl");

				modAircraft.MakePurplePrimary(adoAircraftRecordset);

				modAdminCommon.ADO_Transaction("CommitTrans");

				// This transaction
				modAdminCommon.EventTempCompName = modAircraft.GetCurrentOwner(Convert.ToInt32(adoAircraftRecordset["ac_id"]));
				modAdminCommon.EventTempCompID = modAircraft.GetCurrentOwnerID(Convert.ToInt32(adoAircraftRecordset["ac_id"]));

				modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), modAdminCommon.EventTempCompID, "RemExcl2");

				if (RemoveAircraftFromExclusive())
				{
					modAdminCommon.ADO_Transaction("CommitTrans");

					search_on("Saving Transmits...");

					SaveAircraftContactTransmits(); // start a new transaction
				}
				else
				{
					modAdminCommon.ADO_Transaction("RollbackTrans");
				}

				Select_Aircraft();

				Launch_To_Journal_If_Necessary();

				search_off();

			}

		}

		public void mnuremoveprice_Click(Object eventSender, EventArgs eventArgs)
		{




			frm_Sale_Prices.DefInstance.is_remove = Convert.ToInt32(Double.Parse(txt_ac_id.Text));
			frm_Sale_Prices.DefInstance.journ_remove = tmp_ac_journ_id;
			frm_Sale_Prices.DefInstance.lbl_ac_id.Text = txt_ac_id.Text;
			frm_Sale_Prices.DefInstance.lbl_journ_id.Text = tmp_ac_journ_id.ToString();
			frm_Sale_Prices.DefInstance.grd_sale_prices_Click(frm_Sale_Prices.DefInstance.grd_sale_prices, new EventArgs());
			frm_Sale_Prices.DefInstance.Show();


		}

		public void mnureport_Click(Object eventSender, EventArgs eventArgs)
		{

			//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//VB.Global.Load(frm_WebReport.DefInstance);
			frm_WebReport.DefInstance.WhichReport = "Aircraft Details";
			frm_WebReport.DefInstance.Show();

		}

		public void mnurestoreacavailable_Click(Object eventSender, EventArgs eventArgs)
		{

			int trow = grd_AircraftHistory.CurrentRowIndex;

			grd_AircraftHistory.CurrentColumnIndex = 1;
			grd_AircraftHistory.CurrentRowIndex = 1;

			if (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked)
			{
				if (((int) MessageBox.Show("Your Current Aircraft is on the Market, The Aircraft Cannot Be Restored", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK)) != 0)
				{

				}
			}
			else if (grd_AircraftHistory[grd_AircraftHistory.CurrentRowIndex, grd_AircraftHistory.CurrentColumnIndex].FormattedValue.ToString() == "Off Market, Not For Sale")
			{ 
				if (MessageBox.Show("Do You Want To Restore This Aircraft From Last Off Market?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
				{
					tmp_ac_journ_id = grd_AircraftHistory.get_RowData(grd_AircraftHistory.CurrentRowIndex);
					modAdminCommon.gbl_Aircraft_Journal_ID = tmp_ac_journ_id;
					lbl_gen[86].Text = Convert.ToString(grd_AircraftHistory[grd_AircraftHistory.CurrentRowIndex, 1].Value);

					dont_do_events_journal = true;
					re_load_history = true;
					re_load_history2 = false;

					if (adoAircraftRecordset.State == ConnectionState.Open)
					{
						adoAircraftRecordset.CancelUpdate();
						adoAircraftRecordset.Close();
					}
					adoAircraftRecordset = null;

					Select_Aircraft();

					re_load_history = false;
					re_load_history2 = true;

					tmp_ac_journ_id = 0;
					modAdminCommon.gbl_Aircraft_Journal_ID = 0;
					lbl_gen[86].Text = "";


					if (adoAircraftRecordset.State == ConnectionState.Open)
					{
						adoAircraftRecordset.CancelUpdate();
						adoAircraftRecordset.Close();
					}
					adoAircraftRecordset = null;

					Select_Aircraft();

					re_load_history2 = false;
				}
			}
			else
			{
				//------------------------------WHATEVER ROW THEY HAVE CLICKED ON---------------------------------------------
				grd_AircraftContacts.CurrentColumnIndex = 2;
				grd_AircraftContacts.CurrentRowIndex = 1;

				grd_AircraftHistory.CurrentColumnIndex = 1;
				grd_AircraftHistory.CurrentRowIndex = trow;

				if (MessageBox.Show("Are You Sure You Want To Restore This Aircraft from the selected Historical Record?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
				{
					if (grd_AircraftContacts[grd_AircraftContacts.CurrentRowIndex, grd_AircraftContacts.CurrentColumnIndex].FormattedValue.ToString().IndexOf("Awaiting Doc") >= 0)
					{
						//      If InStr(grd_AircraftHistory.Text, "On Market") > 0 Then

						tmp_ac_journ_id = grd_AircraftHistory.get_RowData(grd_AircraftHistory.CurrentRowIndex);
						modAdminCommon.gbl_Aircraft_Journal_ID = tmp_ac_journ_id;
						lbl_gen[86].Text = Convert.ToString(grd_AircraftHistory[grd_AircraftHistory.CurrentRowIndex, 1].Value);

						dont_do_events_journal = true;
						re_load_history = true;
						re_load_history2 = false;

						if (adoAircraftRecordset.State == ConnectionState.Open)
						{
							adoAircraftRecordset.CancelUpdate();
							adoAircraftRecordset.Close();
						}
						adoAircraftRecordset = null;

						Select_Aircraft();

						re_load_history = false;
						re_load_history2 = true;

						tmp_ac_journ_id = 0;
						modAdminCommon.gbl_Aircraft_Journal_ID = 0;
						lbl_gen[86].Text = "";


						if (adoAircraftRecordset.State == ConnectionState.Open)
						{
							adoAircraftRecordset.CancelUpdate();
							adoAircraftRecordset.Close();
						}
						adoAircraftRecordset = null;

						Select_Aircraft();

						re_load_history2 = false;
					}
					else
					{
						MessageBox.Show("The Current Aircraft Is Not Owned By Awaiting Docs, You Cannot Restore It To a Historical Record", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
					}
					// End If
				}
				//---------------------------------------------------------------------------

			}


		}

		public void mnuSalePrices_Click(Object eventSender, EventArgs eventArgs)
		{

			frm_Sale_Prices.DefInstance.is_remove = 0;
			frm_Sale_Prices.DefInstance.journ_remove = 0;
			frm_Sale_Prices.DefInstance.Show();

		}

		public void mnuSendAsAdditional1_Click(Object eventSender, EventArgs eventArgs) => SetCompanyTransmitNumber(6);


		public void mnuSendAsAdditional2_Click(Object eventSender, EventArgs eventArgs) => SetCompanyTransmitNumber(7);


		public void mnuSendAsAdditional3_Click(Object eventSender, EventArgs eventArgs) => SetCompanyTransmitNumber(8);


		public void mnuSendAsChiefPilot_Click(Object eventSender, EventArgs eventArgs) => SetCompanyTransmitNumber(3);


		public void mnuSendAsExclusiveBroker_Click(Object eventSender, EventArgs eventArgs) => SetCompanyTransmitNumber(4);


		public void mnuSendAsExclusiveRepresentative_Click(Object eventSender, EventArgs eventArgs) => SetCompanyTransmitNumber(5);


		public void mnuSendAsOperator_Click(Object eventSender, EventArgs eventArgs) => SetCompanyTransmitNumber(2);


		public void mnuSendAsOwner_Click(Object eventSender, EventArgs eventArgs) => SetCompanyTransmitNumber(1);


		public void mnuSendAsPurchaser_Click(Object eventSender, EventArgs eventArgs) => SetCompanyTransmitNumber(10);


		public void mnuSendAsRegisteredAsOwner_Click(Object eventSender, EventArgs eventArgs) => SetCompanyTransmitNumber(9);


		public void mnuSendAsRegisteredAsPurchaser_Click(Object eventSender, EventArgs eventArgs) => SetCompanyTransmitNumber(11);


		//Private Sub mnuTransactions_Click()
		//
		//End Sub

		public void mnuTransmit_Click(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				string[] tmpArrayToPass = new string[]{"", ""};

				if (MessageBox.Show($"This will send this aircraft to the customers even if NO CHANGES have been made.{Environment.NewLine}{Environment.NewLine}Are you sure you want to transmit this Aircraft?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
				{

					modCommon.ClearAircraftActionDate(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]));

					modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "MTrans");

					if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0)
					{
						modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Change", ref tmpArrayToPass);
						if (Convert.ToString(adoAircraftRecordset["ac_forsale_flag"]) == "Y")
						{
							modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Change", ref tmpArrayToPass);
						}
					}
					else
					{

						modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Transaction", "Change", ref tmpArrayToPass);
					}


					modAdminCommon.ADO_Transaction("CommitTrans");
					MessageBox.Show("Transmit Successful", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
				}
			}
			catch (System.Exception excep)
			{


				modAdminCommon.Report_Error($"mnuTransmit_Click_Error: {excep.Message}");
			}

		}

		public void mnuUpdateAwaitingDocs_Click(Object eventSender, EventArgs eventArgs)
		{

			Select_Aircraft_Contact();

			if (!ContactRecordsetFilled)
			{ //9/29/06 mjm
				return;
			}

			frm_PopUp.DefInstance.ComingFrom = "Awaiting Docs";

			frm_PopUp.DefInstance.Text = "Awaiting Docs";
			frm_PopUp.DefInstance.PassedACID = Convert.ToInt32(Double.Parse(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_id"])}").Trim()));
			frm_PopUp.DefInstance.PassedCompID = Convert.ToInt32(Double.Parse(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_id"])}").Trim()));
			frm_PopUp.DefInstance.PassedContID = Convert.ToInt32(Double.Parse(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_id"])}").Trim()));
			frm_PopUp.DefInstance.PassedContType = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim();
			frm_PopUp.DefInstance.PassedJournID = Convert.ToInt32(Double.Parse(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}").Trim()));

			frm_PopUp.DefInstance.PassedCountry = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["Comp_country"])}").Trim();
			frm_PopUp.DefInstance.PassedState = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_state"])}").Trim();

			frm_PopUp.DefInstance.ShowDialog();

			Fill_Aircraft_Contact_Grid();
			mnuUpdateAwaitingDocs.Enabled = false;

		}

		private void Enable_Aircraft()
		{

			//ENABLE AIRCRAFT FIELDS ON FORM
			cmd_Save.Visible = true;
			txt_ac_ser_no[0].Enabled = true;
			txt_ac_ser_no[1].Enabled = true;
			txt_ac_ser_no[2].Enabled = true;
			txt_ac_reg_no[0].Enabled = true;
			txt_ac_reg_no[1].Enabled = true;
			txt_ac_year[1].Enabled = true;
			txt_ac_year[0].Enabled = true;
			txt_ac_purchase_date.Enabled = true;
			cbo_ac_status.Enabled = true;
			if (cmd_Active.Text == "View Current Aircraft Record")
			{
				cbo_ac_status.Enabled = false;
			}
			cbo_ac_asking.Enabled = true;
			cbo_ac_delivery.Enabled = true;
			txt_ac_asking_price.Enabled = true;
			txt_ac_list_date.Enabled = true;
			lbl_gen[13].Enabled = true;
			lbl_gen[14].Enabled = true;
			lbl_gen[15].Enabled = true;
			lbl_gen[245].Enabled = true;
			lbl_gen[256].Enabled = true;
			cbo_ac_foreign_currency_name.Enabled = true;
			txt_ac_foreign_currency_price.Enabled = true;
			txt_ac_sale_price.Enabled = true;
			chkArray[chkAvailableFlag_INDEX].Enabled = true;
			chkArray[chkExclusiveExp_INDEX].Enabled = true; // Exclusive Expiration

			//ENABLE MAIN TAB
			cbo_ac_engine_name.Enabled = true;
			cbo_ac_engine_maint_prog.Enabled = true;
			txt_ac_ser_no[0].Enabled = true;
			txt_ac_ser_no[1].Enabled = true;
			txt_ac_ser_no[2].Enabled = true;
			txt_ac_engine_ser_no[0].Enabled = true;
			txt_ac_engine_ser_no[1].Enabled = true;
			txt_ac_engine_ser_no[2].Enabled = true;
			txt_ac_engine_ser_no[3].Enabled = true;
			txt_ac_engine_tot_hrs[0].Enabled = true;
			txt_ac_engine_tot_hrs[1].Enabled = true;
			txt_ac_engine_tot_hrs[2].Enabled = true;
			txt_ac_engine_tot_hrs[3].Enabled = true;
			txt_ac_engine_soh_hrs[0].Enabled = true;
			txt_ac_engine_soh_hrs[1].Enabled = true;
			txt_ac_engine_soh_hrs[2].Enabled = true;
			txt_ac_engine_soh_hrs[3].Enabled = true;
			txt_ac_engine_shi_hrs[0].Enabled = true;
			txt_ac_engine_shi_hrs[1].Enabled = true;
			txt_ac_engine_shi_hrs[2].Enabled = true;
			txt_ac_engine_shi_hrs[3].Enabled = true;
			txt_ac_engine_tbo_hrs[0].Enabled = true;
			txt_ac_engine_tbo_hrs[1].Enabled = true;
			txt_ac_engine_tbo_hrs[2].Enabled = true;
			txt_ac_engine_tbo_hrs[3].Enabled = true;
			txt_ac_engine_snew_cycles[0].Enabled = true;
			txt_ac_engine_snew_cycles[1].Enabled = true;
			txt_ac_engine_snew_cycles[2].Enabled = true;
			txt_ac_engine_snew_cycles[3].Enabled = true;
			txt_ac_engine_soh_cycles[0].Enabled = true;
			txt_ac_engine_soh_cycles[1].Enabled = true;
			txt_ac_engine_soh_cycles[2].Enabled = true;
			txt_ac_engine_soh_cycles[3].Enabled = true;
			txt_ac_engine_shs_cycles[0].Enabled = true;
			txt_ac_engine_shs_cycles[1].Enabled = true;
			txt_ac_engine_shs_cycles[2].Enabled = true;
			txt_ac_engine_shs_cycles[3].Enabled = true;
			txt_ac_times_as_of_date.Enabled = true;
			txt_ac_airframe_tot_hrs.Enabled = true;
			txt_ac_airframe_tot_landings.Enabled = true;
			txt_ac_prop_ser_no[0].Enabled = true;
			txt_ac_prop_ser_no[1].Enabled = true;
			txt_ac_prop_ser_no[2].Enabled = true;
			txt_ac_prop_ser_no[3].Enabled = true;
			txt_ac_prop_snew_hrs[0].Enabled = true;
			txt_ac_prop_snew_hrs[1].Enabled = true;
			txt_ac_prop_snew_hrs[2].Enabled = true;
			txt_ac_prop_snew_hrs[3].Enabled = true;
			txt_ac_prop_soh_hrs[0].Enabled = true;
			txt_ac_prop_soh_hrs[1].Enabled = true;
			txt_ac_prop_soh_hrs[2].Enabled = true;
			txt_ac_prop_soh_hrs[3].Enabled = true;
			txt_ac_prop_soh_mo[0].Enabled = true;
			txt_ac_prop_soh_mo[1].Enabled = true;
			txt_ac_prop_soh_mo[2].Enabled = true;
			txt_ac_prop_soh_mo[3].Enabled = true;
			txt_ac_prop_soh_year[0].Enabled = true;
			txt_ac_prop_soh_year[1].Enabled = true;
			txt_ac_prop_soh_year[2].Enabled = true;
			txt_ac_prop_soh_year[3].Enabled = true;
			chk_oncondtbo.Enabled = true;
			cbo_ac_apu_model_name.Enabled = true;

			txt_ac_apu[0].Enabled = true;
			txt_ac_apu[1].Enabled = true;
			txt_ac_apu[2].Enabled = true;
			//txt_ac_apu(3).Enabled = True

			cbo_ac_apu_maint_prog.Enabled = true;

			//ENABLE MAINTENANCE TAB
			cbo_ac_engine_management_prog_EMGP.Enabled = true;
			cbo_ac_warranty_notes.Enabled = true;
			cbo_ac_warranty_notes.Enabled = true;
			txt_ac_maint_eoh_mo.Enabled = true;
			txt_ac_maint_eoh_year.Enabled = true;
			txt_ac_maint_eoh_by_name.Enabled = true;
			txt_ac_maint_hots_by_name.Enabled = true;
			txt_ac_maint_hots_mo.Enabled = true;
			txt_ac_maint_hots_year.Enabled = true;
			txt_ac_damage_history_notes.Enabled = true;

			//ENABLE INTERIOR/EXTERIOR
			txt_ac_interior_rating.Enabled = true;
			txt_ac_exterior_rating.Enabled = true;
			txt_ac_interior_mo.Enabled = true;
			txt_ac_interior_year.Enabled = true;
			txt_ac_exterior_mo.Enabled = true;
			txt_ac_exterior_year.Enabled = true;
			txt_ac_interior_doneby_name.Enabled = true;
			txt_ac_exterior_doneby_name.Enabled = true;
			txt_ac_passenger_count.Enabled = true;
			cbo_ac_interior_config_name.Enabled = true;

			// ENABLE Lease Information
			pnl_LeaseEntry.Visible = false;
			txt_ac_lease_expire_date.Enabled = true;
			txt_ac_lease_type[0].Enabled = true;
			txt_ac_lease_type[1].Enabled = true;
			txt_ac_lease_type[2].Enabled = true;

			// ENABLE JOURNAL Information
			cbo_jcat_category_code.Enabled = true;
			cbo_jcat_subcategory_code.Enabled = true;
			cbo_jcat_account_rep.Enabled = true;
			txt_journal_category_start_date.Enabled = true;
			txt_journal_category_end_date.Enabled = true;
			txt_ac_common_notes.Enabled = true;

			// ENABLE FAA Information
			txt_acfaa_party_comp_name[0].Enabled = true;
			txt_acfaa_party_comp_name[1].Enabled = true;
			txt_acfaa_party_comp_name[2].Enabled = true;
			txt_acfaa_party_comp_name[3].Enabled = true;
			txt_acfaa_party_comp_name[4].Enabled = true;
			txt_acfaa_party_comp_name[5].Enabled = true;
			txt_acfaa_party_comp_name[6].Enabled = true;
			txt_acfaa_party_comp_name[7].Enabled = true;
			txt_acfaa_party_comp_name[8].Enabled = true;
			txt_acfaa_party_comp_name[9].Enabled = true;
			txt_acfaa_reg_no[0].Enabled = true;
			txt_acfaa_reg_no[1].Enabled = true;
			txt_acfaa_reg_status[0].Enabled = true;
			txt_acfaa_reg_status[1].Enabled = true;
			txt_acfaa_notes.Enabled = true;

		}

		private void Disable_Aircraft()
		{

			//DISABLE AIRCRAFT FIELDS ON FORM
			txt_amod_type_code.Enabled = false;
			cbo_amod_make_name.Enabled = false;
			txt_ac_ser_no[0].Enabled = false;
			txt_ac_ser_no[1].Enabled = false;
			txt_ac_ser_no[2].Enabled = false;
			txt_ac_reg_no[0].Enabled = false;
			txt_ac_reg_no[1].Enabled = false;
			txt_ac_year[1].Enabled = false;
			txt_ac_year[0].Enabled = false;
			txt_ac_purchase_date.Enabled = false;
			cbo_ac_status.Enabled = false;
			cbo_ac_asking.Enabled = false;
			cbo_ac_delivery.Enabled = false;
			txt_ac_asking_price.Enabled = false;
			txt_ac_list_date.Enabled = false;
			lbl_gen[13].Enabled = false;
			lbl_gen[14].Enabled = false;
			lbl_gen[15].Enabled = false;
			lbl_gen[245].Enabled = false;
			lbl_gen[256].Enabled = false;
			cbo_ac_foreign_currency_name.Enabled = false;
			txt_ac_foreign_currency_price.Enabled = false;
			txt_ac_sale_price.Enabled = false;
			chkArray[chkAvailableFlag_INDEX].Enabled = false;
			chkArray[chkExclusiveExp_INDEX].Enabled = false; // Exclusive Expiration

			//DISABLE MAIN TAB
			cbo_ac_engine_name.Enabled = false;
			cbo_ac_engine_maint_prog.Enabled = false;
			txt_ac_ser_no[0].Enabled = false;
			txt_ac_ser_no[1].Enabled = false;
			txt_ac_ser_no[2].Enabled = false;
			txt_ac_engine_ser_no[0].Enabled = false;
			txt_ac_engine_ser_no[1].Enabled = false;
			txt_ac_engine_ser_no[2].Enabled = false;
			txt_ac_engine_ser_no[3].Enabled = false;
			txt_ac_engine_tot_hrs[0].Enabled = false;
			txt_ac_engine_tot_hrs[1].Enabled = false;
			txt_ac_engine_tot_hrs[2].Enabled = false;
			txt_ac_engine_tot_hrs[3].Enabled = false;
			txt_ac_engine_soh_hrs[0].Enabled = false;
			txt_ac_engine_soh_hrs[1].Enabled = false;
			txt_ac_engine_soh_hrs[2].Enabled = false;
			txt_ac_engine_soh_hrs[3].Enabled = false;
			txt_ac_engine_shi_hrs[0].Enabled = false;
			txt_ac_engine_shi_hrs[1].Enabled = false;
			txt_ac_engine_shi_hrs[2].Enabled = false;
			txt_ac_engine_shi_hrs[3].Enabled = false;
			txt_ac_engine_tbo_hrs[0].Enabled = false;
			txt_ac_engine_tbo_hrs[1].Enabled = false;
			txt_ac_engine_tbo_hrs[2].Enabled = false;
			txt_ac_engine_tbo_hrs[3].Enabled = false;
			txt_ac_engine_snew_cycles[0].Enabled = false;
			txt_ac_engine_snew_cycles[1].Enabled = false;
			txt_ac_engine_snew_cycles[2].Enabled = false;
			txt_ac_engine_snew_cycles[3].Enabled = false;
			txt_ac_engine_soh_cycles[0].Enabled = false;
			txt_ac_engine_soh_cycles[1].Enabled = false;
			txt_ac_engine_soh_cycles[2].Enabled = false;
			txt_ac_engine_soh_cycles[3].Enabled = false;
			txt_ac_engine_shs_cycles[0].Enabled = false;
			txt_ac_engine_shs_cycles[1].Enabled = false;
			txt_ac_engine_shs_cycles[2].Enabled = false;
			txt_ac_engine_shs_cycles[3].Enabled = false;
			txt_ac_times_as_of_date.Enabled = false;
			txt_ac_airframe_tot_hrs.Enabled = false;
			txt_ac_airframe_tot_landings.Enabled = false;
			txt_ac_prop_ser_no[0].Enabled = false;
			txt_ac_prop_ser_no[1].Enabled = false;
			txt_ac_prop_ser_no[2].Enabled = false;
			txt_ac_prop_ser_no[3].Enabled = false;
			txt_ac_prop_snew_hrs[0].Enabled = false;
			txt_ac_prop_snew_hrs[1].Enabled = false;
			txt_ac_prop_snew_hrs[2].Enabled = false;
			txt_ac_prop_snew_hrs[3].Enabled = false;
			txt_ac_prop_soh_hrs[0].Enabled = false;
			txt_ac_prop_soh_hrs[1].Enabled = false;
			txt_ac_prop_soh_hrs[2].Enabled = false;
			txt_ac_prop_soh_hrs[3].Enabled = false;
			txt_ac_prop_soh_year[0].Enabled = false;
			txt_ac_prop_soh_year[1].Enabled = false;
			txt_ac_prop_soh_year[2].Enabled = false;
			txt_ac_prop_soh_year[3].Enabled = false;
			txt_ac_prop_soh_mo[0].Enabled = false;
			txt_ac_prop_soh_mo[1].Enabled = false;
			txt_ac_prop_soh_mo[2].Enabled = false;
			txt_ac_prop_soh_mo[3].Enabled = false;
			chk_oncondtbo.Enabled = false;
			cbo_ac_apu_model_name.Enabled = false;

			txt_ac_apu[0].Enabled = false;
			txt_ac_apu[1].Enabled = false;
			txt_ac_apu[2].Enabled = false;
			//  txt_ac_apu(3).Enabled = False

			cbo_ac_apu_maint_prog.Enabled = false;

			//DISABLE MAINTENANCE TAB
			cbo_ac_engine_management_prog_EMGP.Enabled = false;
			cbo_ac_warranty_notes.Enabled = false;
			cbo_ac_warranty_notes.Enabled = false;
			txt_ac_maint_eoh_mo.Enabled = false;
			txt_ac_maint_eoh_year.Enabled = false;
			txt_ac_maint_eoh_by_name.Enabled = false;
			txt_ac_maint_hots_by_name.Enabled = false;

			txt_ac_maint_hots_mo.Enabled = false;
			txt_ac_maint_hots_year.Enabled = false;
			txt_ac_damage_history_notes.Enabled = false;

			//ENABLE COMPANIES TAB
			txt_ac_confidential_notes.Enabled = false;

			//DISABLE INTERIOR/EXTERIOR
			txt_ac_interior_rating.Enabled = false;
			txt_ac_exterior_rating.Enabled = false;
			txt_ac_interior_mo.Enabled = false;
			txt_ac_interior_year.Enabled = false;
			txt_ac_exterior_mo.Enabled = false;
			txt_ac_exterior_year.Enabled = false;
			txt_ac_interior_doneby_name.Enabled = false;
			txt_ac_exterior_doneby_name.Enabled = false;
			txt_ac_passenger_count.Enabled = false;
			cbo_ac_interior_config_name.Text = (false).ToString();

			//DISABLE Lease Information
			pnl_LeaseEntry.Visible = false;
			pnl_LeaseList.Visible = false;
			txt_ac_lease_expire_date.Enabled = false;
			txt_ac_lease_type[0].Enabled = false;
			txt_ac_lease_type[1].Enabled = false;
			txt_ac_lease_type[2].Enabled = false;

			//DISABLE JOURNAL Information
			cbo_jcat_category_code.Enabled = false;
			cbo_jcat_subcategory_code.Enabled = false;
			cbo_jcat_account_rep.Enabled = false;
			txt_journal_category_start_date.Enabled = false;
			txt_journal_category_end_date.Enabled = false;
			txt_ac_common_notes.Enabled = false;

			//DISABLE FAA Information
			txt_acfaa_party_comp_name[0].Enabled = false;
			txt_acfaa_party_comp_name[1].Enabled = false;
			txt_acfaa_party_comp_name[2].Enabled = false;
			txt_acfaa_party_comp_name[3].Enabled = false;
			txt_acfaa_party_comp_name[4].Enabled = false;
			txt_acfaa_party_comp_name[5].Enabled = false;
			txt_acfaa_party_comp_name[6].Enabled = false;
			txt_acfaa_party_comp_name[7].Enabled = false;
			txt_acfaa_party_comp_name[8].Enabled = false;
			txt_acfaa_party_comp_name[9].Enabled = false;
			txt_acfaa_reg_no[0].Enabled = false;
			txt_acfaa_reg_no[1].Enabled = false;
			txt_acfaa_reg_status[0].Enabled = false;
			txt_acfaa_reg_status[1].Enabled = false;
			txt_acfaa_notes.Enabled = false;


			mnu_Edit.Enabled = false;
			mnuTransactions.Enabled = false;



			// picture items added - 5/25/23
			cmdSaveDocNotes[1].Enabled = false;
			cmdSaveDocNotes[5].Enabled = false;

		}

		private void pnl_gen_Click(Object eventSender, EventArgs eventArgs)
		{

			//  Dim testtextbefore As String
			//  Dim testtextafter As String
			//
			//  ' FORWARD GALLEY IN GENERAL TEST
			//  testtextbefore = "RS externally servicable forward galley"
			//
			//  ' LAV ENTRY IN GENERAL TEST
			//'  testtextbefore = "RS externally servicable aft flusing toilet"
			//'
			//'  testtextafter = Apply_Aircraft_Rules(testtextbefore, "Interior", "Lavatory")
			//'
			//'  MsgBox ("BEFORE: " & testtextbefore & " --- AFTER: " & testtextafter)
			//
			//
			//  testtextafter = Apply_Aircraft_Rules(testtextbefore, "Interior", "General")
			//  MsgBox ("BEFORE: " & testtextbefore & " --- AFTER: " & testtextafter)

		}

		private void pnl_gen_DoubleClick(Object eventSender, EventArgs eventArgs)
		{


			frm_aircraft popup_ac = frm_aircraft.CreateInstance();


			// added in MSW - 12/29/2020 - -------------
			modAdminCommon.gbl_Aircraft_ID = modAdminCommon.gbl_Aircraft_ID; // Aircraft Id (ACId)
			modAdminCommon.gbl_Aircraft_Journal_ID = 0;

			popup_ac.Form_Initialize();
			popup_ac.StartForm = tStart_Form;
			popup_ac.Reference_Aircraft_ID = modAdminCommon.gbl_Aircraft_ID;
			popup_ac.Reference_Journal_ID = modAdminCommon.gbl_Aircraft_Journal_ID;
			popup_ac.Reference_Company_ID = 0;
			popup_ac.Show();
			//UPGRADE_WARNING: (2065) Form method popup_ac.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
			popup_ac.BringToFront();
			//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
			popup_ac.Form_Activated(null, new EventArgs());


		}

		private void tab_ACMain_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			mnurestoreacavailable.Available = false;


			switch((SSTabHelper.GetSelectedIndex(tab_ACMain)))
			{
				case 1 : 
					Fill_Aircraft_History_Grid(); 
					grd_AircraftHistory.Redraw = true; 
					mnurestoreacavailable.Available = true; 
					 
					break;
				case 5 : 
					// tom remove this commercial 
					check_for_Commercial_mapping(); 
					 
					break;
			}

			tab_ACMainPreviousTab = tab_ACMain.SelectedIndex;
		}

		private void tab_aircraft_details_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			tab_aircraft_details.Enabled = false;
			tbr_ToolBar.Enabled = false;
			tab_ACMain.Enabled = false;

			Fill_Tabs(SSTabHelper.GetSelectedIndex(tab_aircraft_details));

			tab_aircraft_details.Enabled = true;
			tbr_ToolBar.Enabled = true;
			tab_ACMain.Enabled = true;

			if (bEdit_PurchQuest_Outstanding)
			{
				modGridEditCommon.InPlace_Grid_Reset(grd_AircraftContacts, cbo_ac_purchase_question, RememberGridRow, RememberGridCol);
				bEdit_PurchQuest_Outstanding = false;
			}

			if (bEdit_HelicopterGrid_Outstanding)
			{
				if (cbo_edit_heli.Visible)
				{
					modGridEditCommon.InPlace_Grid_Reset(GrdHelicopter, cbo_edit_heli, RememberGridRow, RememberGridCol);
				}
				else if (txt_edit_heli.Visible)
				{ 
					modGridEditCommon.InPlace_Grid_Reset(GrdHelicopter, txt_edit_heli, RememberGridRow, RememberGridCol);
				}
				bEdit_HelicopterGrid_Outstanding = false;
			}

			if (SSTabHelper.GetSelectedIndex(tab_aircraft_details) == 1 && !tab_certifications_loaded)
			{
				Fill_Aircraft_Certified_Grid();
			}

			if (SSTabHelper.GetSelectedIndex(tab_aircraft_details) == 4 && !tab_avionics_loaded)
			{
				Fill_Aircraft_Avionics_Grid();
			}

			if (SSTabHelper.GetSelectedIndex(tab_aircraft_details) == 1 && !tab_damage_loaded)
			{
				Fill_Aircraft_DamageInspection_Grid();
			}




			// ************************************************************8
			// AIRCRAFT DOCUMENTS TAB
			// RTW MODIFIED TO RESLECT THE DOCS GRID EVERY TIME YOU GO TO TAB
			//If tab_Aircraft_Details.Tab = 10 And tab_faa_loaded = False Then
			if (SSTabHelper.GetSelectedIndex(tab_aircraft_details) == 10)
			{
				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0)
				{
					//UPGRADE_WARNING: (2065) TabDlg.SSTab property tab_aircraft_details.TabCaption has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
					SSTabHelper.SetTabCaption(tab_aircraft_details, 10, "Transaction Notes");
					pnl_TransactionNotes.Visible = true;
					grd_DocumentLog.Visible = false;
					cmd_DocsInProcessRefresh.Visible = false;

					cmdSaveDocNotes[0].Visible = false;
					cmdSaveDocNotes[2].Visible = false;
					cmdSaveDocNotes[3].Visible = false;

					cboAcctRep[0].Visible = false;

					txtDocNotes[0].Visible = false;
					txtDocNotes[2].Visible = false;
					txtDocNotes[3].Visible = false;

					lbl_gen[63].Visible = false;
					lbl_gen[93].Visible = false;
					lbl_gen[94].Visible = false;
					lbl_gen[122].Visible = false; // Open In Browser
					lbl_gen[124].Visible = false; // Attach Doc To Company

					web_Browser.Visible = false;
					cmdViewDocumentInSeparateWindow.Visible = false;

				}
				else
				{
					Fill_FAA_Doc_Grid();
					grd_DocumentLog.Visible = true;
					//UPGRADE_WARNING: (2065) TabDlg.SSTab property tab_aircraft_details.TabCaption has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
					SSTabHelper.SetTabCaption(tab_aircraft_details, 10, "Documents in Process");
					pnl_TransactionNotes.Visible = false;
				}

				// added MSW - 10/1/21
				Fill_Document_Type();
			}


			// *************************************************************************
			// CONTACTS/COMPANY TAB - LEASE GRID
			if (SSTabHelper.GetSelectedIndex(tab_aircraft_details) == 5 && !tab_lease_loaded)
			{
				Application.DoEvents();
				Application.DoEvents();
				pnl_LeaseList.Visible = false;
				pnl_LeaseEntry.Visible = false;


				Application.DoEvents();

				FillLeaseGrid();

				Application.DoEvents();
				Application.DoEvents();
				Application.DoEvents();

			}

			if (SSTabHelper.GetSelectedIndex(tab_aircraft_details) == 13)
			{
				fill_ac_pub_details(0);
			}
			else if (SSTabHelper.GetSelectedIndex(tab_aircraft_details) == 9)
			{ 
				fill_ac_pub_details(1);
			}

			search_off();

			tab_Aircraft_DetailsPreviousTab = tab_aircraft_details.SelectedIndex;//gap-note validate if
		}

		private void Fill_Document_Type()
		{

			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			string strQuery1 = "";

			try
			{

				strQuery1 = "SELECT doctype_code, doctype_description ";
				strQuery1 = $"{strQuery1}FROM Document_Type WITH (NOLOCK) ";
				strQuery1 = $"{strQuery1}WHERE (doctype_subdir_name = 'FAAPDF') ";
				strQuery1 = $"{strQuery1}AND (doctype_contract_doc_view = 'N') ";
				strQuery1 = $"{strQuery1}AND (doctype_company_doc_view = 'N') ";
				strQuery1 = $"{strQuery1}ORDER BY doctype_code";

				rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!rstRec1.BOF && !rstRec1.EOF)
				{

					cbo_drop_array[1].Items.Clear();
					do 
					{ // Loop Until rstRec1.EOF = True

						cbo_drop_array[1].AddItem($"{($"{Convert.ToString(rstRec1["doctype_code"])} ").Trim()} - {($"{Convert.ToString(rstRec1["doctype_description"])} ").Trim()}");
						rstRec1.MoveNext();

					}
					while(!rstRec1.EOF);

				} // If rstRec1.BOF = False And rstRec1.EOF = False Then

				rstRec1.Close();

				rstRec1 = null;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Report_Error("Fill_Document_Type", excep.Message);
			}

		} // End Sub

		public void fill_ac_pub_details(int grid_index)
		{

			// RTW/MSW - 8/14/12 - YACHT - TO TURN AB ON OR OFF
			ADORecordSetHelper ado_Yacht = new ADORecordSetHelper();
			string Query = "";
			string cellcolor = "";
			string tmp_text = "";
			string type_of = "";
			string tnotes = "";
			StringBuilder temp_notes = new StringBuilder();

			try
			{

				Query = modGlobalVars.cEmptyString;
				cellcolor = modGlobalVars.cEmptyString;

				//extract fields from yacht table
				grd_pubs[grid_index].Visible = false;
				grd_pubs[grid_index].Enabled = false;

				//Clear the grid.
				grd_pubs[grid_index].Clear();

				//Set the number of columns and rows in the grid.S

				if (cbo_drop_array[0].Text.Trim() == "Memo" || cbo_drop_array[0].Text.Trim() == "Doc Request" || grid_index == 1)
				{
					grd_pubs[grid_index].ColumnsCount = 8;
				}
				else
				{
					grd_pubs[grid_index].ColumnsCount = 7;
				}


				grd_pubs[grid_index].RowsCount = 3;


				grd_pubs[grid_index].FixedRows = 1;
				grd_pubs[grid_index].FixedColumns = 0;

				//point to the first column and first row.
				grd_pubs[grid_index].CurrentRowIndex = 0;

				grd_pubs[grid_index].CurrentColumnIndex = 0;

				if (grid_index == 0)
				{
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Add Memo";
				}
				else if (grid_index == 1)
				{ 
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Add Document Request";
				}



				grd_pubs[grid_index].CurrentRowIndex = 1;

				grd_pubs[grid_index].CurrentColumnIndex = 0;
				grd_pubs[grid_index].SetColumnWidth(grd_pubs[grid_index].CurrentColumnIndex, 167);
				grd_pubs[grid_index].CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Type/Title";

				if (cbo_drop_array[0].Text.Trim() == "Memo" || cbo_drop_array[0].Text.Trim() == "Doc Request" || grid_index == 1)
				{
					grd_pubs[grid_index].CurrentColumnIndex = 1;
					grd_pubs[grid_index].SetColumnWidth(grd_pubs[grid_index].CurrentColumnIndex, 100);
					grd_pubs[grid_index].CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Entry Date(User)";

					grd_pubs[grid_index].CurrentColumnIndex = 2;
					grd_pubs[grid_index].SetColumnWidth(grd_pubs[grid_index].CurrentColumnIndex, 100);
					grd_pubs[grid_index].CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Status";

					grd_pubs[grid_index].CurrentColumnIndex = 3;
					grd_pubs[grid_index].SetColumnWidth(grd_pubs[grid_index].CurrentColumnIndex, 453);
					grd_pubs[grid_index].CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Notes";

					grd_pubs[grid_index].CurrentColumnIndex = 4;
					grd_pubs[grid_index].SetColumnWidth(grd_pubs[grid_index].CurrentColumnIndex, 0);
					grd_pubs[grid_index].CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Link";


					grd_pubs[grid_index].CurrentColumnIndex = 5;
					grd_pubs[grid_index].SetColumnWidth(grd_pubs[grid_index].CurrentColumnIndex, 0);
					grd_pubs[grid_index].CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Link";

				}
				else
				{
					grd_pubs[grid_index].CurrentColumnIndex = 1;
					grd_pubs[grid_index].SetColumnWidth(grd_pubs[grid_index].CurrentColumnIndex, 100);
					grd_pubs[grid_index].CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Source/Entry";

					grd_pubs[grid_index].CurrentColumnIndex = 2;
					grd_pubs[grid_index].SetColumnWidth(grd_pubs[grid_index].CurrentColumnIndex, 0);
					grd_pubs[grid_index].CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Status";

					grd_pubs[grid_index].CurrentColumnIndex = 3;
					grd_pubs[grid_index].SetColumnWidth(grd_pubs[grid_index].CurrentColumnIndex, 667);
					grd_pubs[grid_index].CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Notes";

					grd_pubs[grid_index].CurrentColumnIndex = 4;
					grd_pubs[grid_index].SetColumnWidth(grd_pubs[grid_index].CurrentColumnIndex, 0);
					grd_pubs[grid_index].CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Link";


					grd_pubs[grid_index].CurrentColumnIndex = 5;
					grd_pubs[grid_index].SetColumnWidth(grd_pubs[grid_index].CurrentColumnIndex, 0);
					grd_pubs[grid_index].CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Link";

				}



				grd_pubs[grid_index].CurrentColumnIndex = 6;
				grd_pubs[grid_index].SetColumnWidth(grd_pubs[grid_index].CurrentColumnIndex, 0);
				grd_pubs[grid_index].CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "PUBID";



				if (cbo_drop_array[0].Text.Trim() == "Memo" || cbo_drop_array[0].Text.Trim() == "Doc Request" || grid_index == 1)
				{
					grd_pubs[grid_index].CurrentColumnIndex = 7;
					grd_pubs[grid_index].SetColumnWidth(grd_pubs[grid_index].CurrentColumnIndex, 120);
					grd_pubs[grid_index].CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Last Update Date";
				}

				grd_pubs[grid_index].CurrentRowIndex = 2;

				if (cbo_drop_array[0].Text.Trim() == "")
				{
					cbo_drop_array[0].Items.Clear();
					cbo_drop_array[0].AddItem("Pub");
					cbo_drop_array[0].AddItem("Memo");
					//cbo_drop_array(0).AddItem ("Doc Request")


					// cbo_drop_array(0).AddItem ("Add - Request Document")

					cbo_drop_array[0].AddItem("All");



					//  default on pubs should be cs, edpb, alpb
					//transactions team logins - Barb Ward - brw twyla staples - tjr -
					//Michele hendesron - mah lynn -lm and alliey asb

					if (modAdminCommon.gbl_User_ID == "cs" || modAdminCommon.gbl_User_ID == "edpb" || modAdminCommon.gbl_User_ID == "edpb")
					{
						cbo_drop_array[0].Text = "Pub";
					}
					else if (modAdminCommon.gbl_User_ID == "brw" || modAdminCommon.gbl_User_ID == "tjr" || modAdminCommon.gbl_User_ID == "mah" || modAdminCommon.gbl_User_ID == "lm" || modAdminCommon.gbl_User_ID == "asb")
					{ 
						cbo_drop_array[0].Text = "Doc Request";
					}
					else
					{
						//cbo_drop_array(0).Text = "Memo"
						cbo_drop_array[0].Text = "Pub"; // defaulted to pubs for now - msw
					}
				}





				Query = " select publist_process_status as type_of, pub_name as SOURCE,  ";
				Query = $"{Query} publist_clear_date as CLEARDATE, publist_entry_date as PUBDATE, publist_status,";
				Query = $"{Query} publist_url as WEBLINK, publist_ac_id,  publist_id,  publist_update_date, ";
				Query = $"{Query} publist_description as LASTNOTES";

				Query = $"{Query} , publist_original_desc, publist_research_note, publist_category ";
				Query = $"{Query} , publist_user_id , publist_entry_date, publist_status ";
				Query = $"{Query} from Publication_Listing with (NOLOCK) ";
				Query = $"{Query}  left outer join Publications with (NOLOCK) on pub_id = publist_source ";
				Query = $"{Query} where publist_ac_id = {txt_ac_id.Text} ";

				if (grid_index == 1)
				{
					Query = $"{Query} and publist_Category = 'Doc Request' ";
				}
				else if (cbo_drop_array[0].Text.Trim() != "" && cbo_drop_array[0].Text.Trim() != "All" && cbo_drop_array[0].Text.Trim() != "Add - Request Document")
				{ 
					Query = $"{Query} and publist_Category = '{cbo_drop_array[0].Text.Trim()}' ";
				}

				ado_Yacht.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockBatchOptimistic);

				if (!ado_Yacht.BOF && !ado_Yacht.EOF)
				{

					do 
					{ // Loop Until ado_Yacht.EOF = True

						//grd_pubs(grid_index).RowData(grd_pubs(grid_index).Row) = ado_Yacht("yd_id")

						grd_pubs[grid_index].CurrentColumnIndex = 0;
						grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = modGlobalVars.cEmptyString;


						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (Convert.ToString(ado_Yacht["publist_category"]).Trim() == "Memo" || Convert.ToString(ado_Yacht["publist_category"]).Trim() == "Doc Request" || grid_index == 1)
						{

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Yacht["publist_original_desc"]))
							{
								type_of = Convert.ToString(ado_Yacht["publist_original_desc"]).Trim();
							}

							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = type_of;

						}
						else if (!Convert.IsDBNull(ado_Yacht["type_of"]))
						{ 
							type_of = Convert.ToString(ado_Yacht["type_of"]).Trim();

							tnotes = "";
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Yacht["LASTNOTES"]))
							{
								tnotes = Convert.ToString(ado_Yacht["LASTNOTES"]).Trim();
							}


							if (type_of.ToLower().Trim().IndexOf("for sale") >= 0)
							{
								type_of = "For Sale Listing";
							}
							else if (type_of.ToLower().Trim().IndexOf("sold") >= 0)
							{ 
								type_of = "Sold Listing";
							}
							else
							{
								type_of = "For Sale News Article";
							}

							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = type_of;
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["publist_category"]))
						{

							if (Convert.ToString(ado_Yacht["publist_category"]).Trim() == "Memo" || Convert.ToString(ado_Yacht["publist_category"]).Trim() == "Doc Request" || grid_index == 1)
							{
								grd_pubs[grid_index].CurrentColumnIndex = 1;
								grd_pubs[grid_index].CellFontUnderline = true;
								grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Yacht["publist_entry_date"]))
								{
									grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["publist_entry_date"]).Trim();
								}

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Yacht["publist_user_id"]))
								{
									grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = $"{grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].FormattedValue.ToString()} ({Convert.ToString(ado_Yacht["publist_user_id"]).Trim()}) ";
								}
							}
							else
							{
								grd_pubs[grid_index].CurrentColumnIndex = 1;
								grd_pubs[grid_index].CellFontUnderline = true;
								grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Yacht["SOURCE"]))
								{
									grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["SOURCE"]).Trim();
								}
							}
						}




						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (Convert.ToString(ado_Yacht["publist_category"]).Trim() == "Memo" || Convert.ToString(ado_Yacht["publist_category"]).Trim() == "Doc Request")
						{


							grd_pubs[grid_index].CurrentColumnIndex = 2;
							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = modGlobalVars.cEmptyString;


							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Yacht["publist_status"]))
							{
								temp_notes = new StringBuilder(Convert.ToString(ado_Yacht["publist_status"]));
							}


							if (temp_notes.ToString().Trim() != "")
							{

								if (temp_notes.ToString().Trim() == "C")
								{
									temp_notes = new StringBuilder("C - Cleared");
								}
								else if (temp_notes.ToString().Trim() == "N")
								{ 
									temp_notes = new StringBuilder("N - No Action Required");
								}
								else if (temp_notes.ToString().Trim() == "O")
								{ 
									temp_notes = new StringBuilder("O - Open");
								}
								else if (temp_notes.ToString().Trim() == "I")
								{ 
									temp_notes = new StringBuilder("I - In Progress");
								}
								else if (temp_notes.ToString().Trim() == "1")
								{ 
									temp_notes = new StringBuilder("1st Attempt");
								}
								else if (temp_notes.ToString().Trim() == "2")
								{ 
									temp_notes = new StringBuilder("2nd Attempt");
								}
								else if (temp_notes.ToString().Trim() == "3")
								{ 
									temp_notes = new StringBuilder("3rd Attempt");
								}
								else if (temp_notes.ToString().Trim() == "H")
								{ 
									temp_notes = new StringBuilder("H - Hold");
								}
								else if (temp_notes.ToString().Trim() == "Z")
								{ 
									temp_notes = new StringBuilder("Z - Completed");
								}

							}

							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = temp_notes.ToString();


							grd_pubs[grid_index].CurrentColumnIndex = 3;
							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Yacht["publist_research_note"]))
							{
								temp_notes = new StringBuilder(Convert.ToString(ado_Yacht["publist_research_note"]));
							}

							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = temp_notes.ToString();


							grd_pubs[grid_index].CurrentColumnIndex = 4;
							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = temp_notes.ToString();

							grd_pubs[grid_index].CurrentColumnIndex = 5;
							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Yacht["WEBLINK"]))
							{
								grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["WEBLINK"]).Trim();
							}

						}
						else if (!Convert.IsDBNull(ado_Yacht["publist_status"]))
						{ 


							grd_pubs[grid_index].CurrentColumnIndex = 2;
							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["publist_status"]).Trim();

							temp_notes = new StringBuilder("");
							if (grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].FormattedValue.ToString() == "O")
							{
								grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Open";

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Yacht["PUBDATE"]))
								{
									System.DateTime TempDate2 = DateTime.FromOADate(0);
									temp_notes = new StringBuilder($"Found on {((DateTime.TryParse(Convert.ToString(ado_Yacht["PUBDATE"]).Trim(), out TempDate2)) ? TempDate2.ToString("MM/dd/yy") : Convert.ToString(ado_Yacht["PUBDATE"]).Trim())}");
								}

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Yacht["LASTNOTES"]))
								{
									temp_notes.Append($": {Convert.ToString(ado_Yacht["LASTNOTES"]).Trim()}");
								}



							}
							else if (grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].FormattedValue.ToString() == "C")
							{ 
								grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "Cleared";

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Yacht["CLEARDATE"]))
								{
									temp_notes = new StringBuilder($"Cleared On {Convert.ToString(ado_Yacht["CLEARDATE"]).Trim()}");
								}

							}
							else if (grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].FormattedValue.ToString() == "R")
							{ 
								grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "References";
								temp_notes = new StringBuilder("Reference");
							}
							else if (grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].FormattedValue.ToString() == "N")
							{ 
								grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "No Action Required";

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Yacht["PUBDATE"]))
								{
									System.DateTime TempDate3 = DateTime.FromOADate(0);
									temp_notes = new StringBuilder($"Found on {((DateTime.TryParse(Convert.ToString(ado_Yacht["PUBDATE"]).Trim(), out TempDate3)) ? TempDate3.ToString("MM/dd/yy") : Convert.ToString(ado_Yacht["PUBDATE"]).Trim())}");
								}

								temp_notes.Append(" - No Action Required");

							}
							else if (grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].FormattedValue.ToString() == "I")
							{ 
								grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "In Progress";
							}

							grd_pubs[grid_index].CurrentColumnIndex = 3;
							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = temp_notes.ToString();

							grd_pubs[grid_index].CurrentColumnIndex = 4;
							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Yacht["WEBLINK"]))
							{
								grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["WEBLINK"]).Trim();
							}

						}

						// added in MSW - 4/30/21
						grd_pubs[grid_index].CurrentColumnIndex = 6;
						grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["publist_id"]))
						{
							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["publist_id"]).Trim();
						}

						if (cbo_drop_array[0].Text.Trim() == "Memo" || cbo_drop_array[0].Text.Trim() == "Doc Request" || grid_index == 1)
						{
							grd_pubs[grid_index].CurrentColumnIndex = 7;
							grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Yacht["publist_update_date"]))
							{
								grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["publist_update_date"]).Trim();
							}
						}


						grd_pubs[grid_index].RowsCount++;
						grd_pubs[grid_index].CurrentRowIndex++;

						ado_Yacht.MoveNext();

					}
					while(!ado_Yacht.EOF);

					grd_pubs[grid_index].RowsCount--;

					grd_pubs[grid_index].CurrentRowIndex = 1;
					grd_pubs[grid_index].Enabled = true;

				}
				else
				{

					grd_pubs[grid_index].CurrentRowIndex = 1;
					grd_pubs[grid_index].CurrentColumnIndex = 1;
					grd_pubs[grid_index].set_RowData(1, 0);
					grd_pubs[grid_index][grd_pubs[grid_index].CurrentRowIndex, grd_pubs[grid_index].CurrentColumnIndex].Value = "No Pubs Found";
					grd_pubs[grid_index].Enabled = true;

				} // If (ado_Yacht.BOF = False And ado_Yacht.EOF = False) Then

				ado_Yacht.Close();

				grd_pubs[grid_index].Visible = true;
				grd_pubs[grid_index].Redraw = true;

				ado_Yacht = null;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Record_Error("Yact fill_yacht_bridge_details_Error", excep.Message);
			}

		} // fill_yacht_bridge_details_Error

		private void tbr_ToolBar_ButtonClick(Object eventSender, EventArgs eventArgs)
		{
			ToolStripItem Button = (ToolStripItem) eventSender;
			try
			{

				AnsweredCancel = false;

				switch(Button.Name)
				{
					case "Home" : 

						 
						modAdminCommon.gbl_bHomeClicked = true; 
						Unload_Aircraft_Form(); 
						 
						//     Form_Unload "frm_AttachSpecDoc" 
						//     Unload frm_AttachSpecDoc 
						 
						if (!AnsweredCancel)
						{
							Unload_Aircraft_Form();
							this.Close();
						} 
						 
						break;
					case "Back" : 
						 
						if (cbo_ac_use_code.Text == "")
						{
							MessageBox.Show("Usage Code is not allowed to be blank, Please Correct", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
						}
						else
						{

							Application.DoEvents();
							Application.DoEvents();
							Application.DoEvents();

							Application.DoEvents();
							Application.DoEvents();
							Application.DoEvents();

							mnuFileClose_Click(mnuFileClose, new EventArgs());

							Application.DoEvents();
							Application.DoEvents();
							Application.DoEvents();
							Application.DoEvents();

							// added in MSW - to helpwith a change, then back then going back in
							set_changes_to_false();

							this.Close();

						} 
						 
						break;
					case "Help" : 
						MessageBox.Show("Help is forthcoming", "Aircraft", MessageBoxButtons.OK, MessageBoxIcon.Information); 
						 
						break;
					default:
						 
						break;
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"tbr_ToolBar_ButtonClick_Error: ac form {excep.Message} {Information.Err().Number.ToString()} {Button.Name}");
				modStatusBar.Clear_Status_Bar(modAdminCommon.SB);
			}

		}


		private void ToolbarButtonsSetup()
		{

			ToolStrip tbr = tbr_ToolBar; //gap-note ToolStrip instead of Control

			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[2].Visible = true;
			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[4].Visible = true;
			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[6].Visible = false;
			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[8].Visible = false;

			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[2].Enabled = true;
			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[4].Enabled = true;
			//  .Buttons(6).Enabled = False
			//  .Buttons(8).Enabled = False

		}

		private void ToolbarSetup()
		{

			ToolStrip tbr = tbr_ToolBar; //gap-note ToolStrip instead of Control

			//UPGRADE_TODO: (1067) Member ImageList is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.ImageList = mdi_ResearchAssistant.DefInstance.imgNormal;

			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			(tbr.Items[2] as ToolStripButton).Image = (Image) resources.GetObject( "Home");
			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			(tbr.Items[4] as ToolStripButton).Image = (Image) resources.GetObject( "Back");
			//     .Buttons(6).Image = "Save"
			//    .Buttons(8).Image = "Help"

			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[2].Text = "Home";
			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[4].Text = "Back";
			//    .Buttons(6).Key = "Save"
			//    .Buttons(8).Key = "Help"

			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[2].ToolTipText = "Go to Main Menu";
			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[4].ToolTipText = "Go to Previous Screen";
			//     .Buttons(6).ToolTipText = "Save screen data"
			//    .Buttons(8).ToolTipText = "Online Help"

		}

		private void Fill_Aircraft_History_Grid()
		{

			// 01/06/2003 - By David D. Cruger;
			// Adjusted the content of the Subject Display.
			// Added the jcat_subcategory_transtype
			// 5/3/204 aey
			// col3  added for journal_id

			string strError = "";
			try
			{

				string acline = "";
				string Query = "";
				int History_Rec_Number = 0;
				int RememberToClick = 0;

				strError = "init";
				cmd_Active.Enabled = false;
				RememberToClick = 0;
				FirstHistoricalPurchase_JournID = 0;


				grd_AircraftHistory.Clear();
				grd_AircraftHistory.FixedRows = 0;
				grd_AircraftHistory.FixedColumns = 0;
				grd_AircraftHistory.RowsCount = 1;
				grd_AircraftHistory.ColumnsCount = 3;

				grd_AircraftHistory.SetColumnWidth(0, 67);
				grd_AircraftHistory.SetColumnWidth(1, 377);
				grd_AircraftHistory.SetColumnWidth(2, 67);

				grd_AircraftHistory.CurrentRowIndex = 0;

				grd_AircraftHistory.CurrentColumnIndex = 0;
				grd_AircraftHistory[grd_AircraftHistory.CurrentRowIndex, grd_AircraftHistory.CurrentColumnIndex].Value = "Date";
				grd_AircraftHistory.CellBackColor = grd_AircraftHistory.BackColorFixed;

				grd_AircraftHistory.CurrentColumnIndex = 1;
				grd_AircraftHistory[grd_AircraftHistory.CurrentRowIndex, grd_AircraftHistory.CurrentColumnIndex].Value = "Subject";
				grd_AircraftHistory.CellBackColor = grd_AircraftHistory.BackColorFixed;

				grd_AircraftHistory.CurrentColumnIndex = 2;
				grd_AircraftHistory[grd_AircraftHistory.CurrentRowIndex, grd_AircraftHistory.CurrentColumnIndex].Value = "Journal Id";
				grd_AircraftHistory.CellBackColor = grd_AircraftHistory.BackColorFixed;

				History_Rec_Number = 0;

				strError = "query";
				Query = "SELECT Journal.*, jcat_subcategory_transtype, jcat_auto_subject_flag ";
				Query = $"{Query}FROM Aircraft WITH(NOLOCK), Journal WITH(NOLOCK), Journal_Category WITH(NOLOCK)";
				Query = $"{Query} WHERE journ_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
				Query = $"{Query} AND ac_journ_id > 0 AND ac_journ_id=journ_id";
				Query = $"{Query} AND journ_subcategory_code = jcat_subcategory_code";

				if (chkArray[chkIncMktSummary_INDEX].CheckState == CheckState.Checked)
				{
					Query = $"{Query} AND (jcat_category_code = 'AH'";
					Query = $"{Query} OR jcat_category_code = 'MS')";
				}
				else
				{
					Query = $"{Query} AND jcat_category_code = 'AH'";
				}

				Query = $"{Query} ORDER BY journ_date desc, journ_id desc";

				// CLOSE RECORDSET  aey 7/1/04
				if (snp_History != null)
				{
					if (snp_History.State == ConnectionState.Open)
					{ // Already Open Close It
						snp_History.Close();
					}
				}

				snp_History = null;

				snp_History = new ADORecordSetHelper();
				snp_History.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
				strError = "chk eof";

				if (!(snp_History.BOF && snp_History.EOF))
				{


					while(!snp_History.EOF)
					{
						strError = "read";

						//get the journal ID of the most recent whole sale transaction
						if (FirstHistoricalPurchase_JournID == 0 && Convert.ToString(snp_History["journ_subcategory_code"]).Trim().StartsWith("WS", StringComparison.Ordinal) || Convert.ToString(snp_History["journ_subcategory_code"]).Trim().StartsWith("SZ", StringComparison.Ordinal) || Convert.ToString(snp_History["journ_subcategory_code"]).Trim().StartsWith("FC", StringComparison.Ordinal))
						{
							FirstHistoricalPurchase_JournID = Convert.ToInt32(snp_History["journ_id"]);
						}

						History_Rec_Number++;
						acline = $"{Convert.ToDateTime(snp_History["journ_date"]).ToString("d")}{"\t"}";
						if (($"{Convert.ToString(snp_History["jcat_auto_subject_flag"])} ").Trim() == "Y")
						{
							acline = $"{acline}{($"{Convert.ToString(snp_History["jcat_subcategory_transtype"])} ").Trim()} - {($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_History["journ_subject"])}").Trim()}{"\t"}";
						}
						else
						{
							acline = $"{acline}{($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_History["journ_subject"])}").Trim()}{"\t"}";
						}
						acline = $"{acline}{Convert.ToString(snp_History["journ_id"])}";

						grd_AircraftHistory.AddItem(acline);
						grd_AircraftHistory.set_RowData(grd_AircraftHistory.RowsCount - 1,Convert.ToInt32( snp_History.GetField("journ_id")));
						grd_AircraftHistory.SetRowHeight(grd_AircraftHistory.RowsCount - 1, 27);

						if (modAdminCommon.gbl_Aircraft_Journal_ID == Convert.ToDouble(snp_History["journ_id"]))
						{
							RememberToClick = grd_AircraftHistory.RowsCount - 1;
						}
						snp_History.MoveNext();
					};
					grd_AircraftHistory.FixedRows = 1;

					mnuDeleteHistoricalRecord.Text = "Delete This Historical Record";
					mnuDeleteHistoricalRecord.Enabled = true;

				}
				else
				{
					strError = "mnu";
					mnuDeleteHistoricalRecord.Text = "Delete This Aircraft";
					mnuDeleteHistoricalRecord.Enabled = true;
				} // If Not (snp_History.BOF And snp_History.EOF) Then

				//   Screen.MousePointer = vbNormal
				if (History_Rec_Number > 0)
				{
					cmd_Active.Visible = true;
					grd_AircraftHistory.Visible = true;
				}
				else
				{
					cmd_Active.Visible = false;
					cmdModifyTransaction.Visible = false;
					grd_AircraftHistory.Visible = false;
				}

				strError = "end";
				cmdModifyTransaction.Enabled = false;

				if (RememberToClick > 0)
				{
					grd_AircraftHistory.CurrentRowIndex = RememberToClick;
					grd_AircraftHistory.CurrentColumnIndex = 1;

					snp_History.MoveFirst();
					int tempForEndVar = RememberToClick - 1;
					for (int I = 0; I <= tempForEndVar; I++)
					{
						snp_History.MoveNext();
					}

				}

				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0)
				{
					cmd_Active.Enabled = true;
				}

				grd_AircraftHistory.Redraw = true;
				search_off();
			}
			catch (System.Exception excep)
			{

				search_off();
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Fill_Aircraft_History_Grid_Error: {Information.Err().Number.ToString()} {excep.Message} {strError} {Convert.ToString(adoAircraftRecordset["ac_id"])}");
			}

		}

		private void Update_Primary_Company()
		{
			//
			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO CHANGE THE PRIMARY COMPANY
			// FOR THIS CONTACT TO A DIFFERENT AIRCRAFT REFERENCE RECORD.
			//
			// RTW - 4/28/2004 - ADDED DOCUMENTATION
			//
			// 02/06/2012 - By David D. Cruger
			// Reworked this routine a bit to help track down the lockup
			// for changing POC.  I also added the monitoring to this.
			//
			// *********************************************************

			// 02/06/2012 - By David D. Cruger
			// For Monitoring

			string strMsg = "";
			System.DateTime dtStartDate = DateTime.FromOADate(0);
			System.DateTime dtEndDate = DateTime.FromOADate(0);
			int lACId = 0;
			int lJournId = 0;
			int lContactId = 0;

			string strStatus = "";
			string Query = "";
			string query1 = "";
			string Query2 = "";
			string TempName = "";
			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			int NewCompID = 0;
			int OldCompID = 0;
			int New_Aircraft_Reference_ID = 0; // USED TO UNIQUELY IDENTIY THE REFERENCE RECORD TO BE PRIMARY
			string strErrDesc = "";

			string strCompName = "";
			string strCONTACTNAME = "";

			try
			{

				modCommon.Start_Activity_Monitor_Message("Set Aircraft POC", ref strMsg, ref dtStartDate, ref dtEndDate);

				lACId = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
				lJournId = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);
				lContactId = Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]);

				// FIND THE CURRENT - TARGET POC IN THE RECORDSET
				// AND SAVE THE COMPANY ID NUMBER
				strStatus = "get cref"; //aey 6/16/04
				if (!ContactRecordsetFilled)
				{ //9/29/06 mjm
					return;
				}

				Select_Aircraft_Contact();

				if (!ContactRecordsetFilled)
				{ //9/29/06 mjm
					return;
				}

				NewCompID = Convert.ToInt32(snp_AircraftContacts["comp_id"]);
				New_Aircraft_Reference_ID = Convert.ToInt32(snp_AircraftContacts["cref_id"]);

				// BUILD UPDATE QUERY 1 TO REMOVE ANY PRIMARY FROM THE AIRCRAFT
				query1 = "UPDATE Aircraft_Reference SET cref_primary_poc_flag = 'N' ";
				query1 = $"{query1}WHERE (cref_ac_id = {lACId.ToString()}) ";
				query1 = $"{query1}AND (cref_journ_id = {lJournId.ToString()}) ";
				query1 = $"{query1}AND (cref_primary_poc_flag = 'Y') ";

				// BUILD UPDATE QUERY 2 TO SET THE PRIMARY TO THE SPECIFIC REFERENCE SELECTED
				Query2 = "UPDATE Aircraft_Reference SET cref_primary_poc_flag = 'Y' ";
				Query2 = $"{Query2}WHERE (cref_id = {New_Aircraft_Reference_ID.ToString()}) ";

				// IDENTIFY THE COMPANY FOR THE JOURNAL ENTRY
				strCompName = ($"{Convert.ToString(snp_AircraftContacts["comp_name"])} ").Trim();
				strCONTACTNAME = "";

				// GET THE CONTACT NAME AS WELL FOR THE JOURNAL ENTRY
				if (Convert.ToDouble(snp_AircraftContacts["cref_contact_id"]) > 0)
				{

					Query = "SELECT contact_first_name, contact_middle_initial, contact_last_name ";
					Query = $"{Query}FROM Contact WITH (NOLOCK ) ";
					Query = $"{Query}WHERE ( contact_id = {Convert.ToString(snp_AircraftContacts["cref_contact_id"])}) ";
					Query = $"{Query}AND (contact_journ_id = {Convert.ToString(snp_AircraftContacts["cref_journ_id"])}) ";

					rstRec1.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

					if (!rstRec1.BOF && !rstRec1.EOF)
					{

						strCONTACTNAME = $" ({($"{Convert.ToString(rstRec1["contact_first_name"])} ").Trim()} ";

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(rstRec1["contact_middle_initial"]))
						{
							strCONTACTNAME = $"{strCONTACTNAME}{($"{Convert.ToString(rstRec1["contact_middle_initial"])} ").Trim()}. ";
						}

						strCONTACTNAME = $"{strCONTACTNAME}{($"{Convert.ToString(rstRec1["contact_last_name"])} ").Trim()})";

					} // If (rstRec1.BOF = False And rstRec1.EOF = False) Then

					rstRec1.Close();

				} // If (snp_AircraftContacts!cref_contact_id > 0) Then

				// ASSIGN JOURNAL RECORD INFORMATION FOR ENTRY
				modAdminCommon.Rec_Journal_Info.journ_subject = $"Primary Company (Contact) changed to {strCompName}{strCONTACTNAME}";
				modAdminCommon.Rec_Journal_Info.journ_description = " ";
				modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
				modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
				modAdminCommon.Rec_Journal_Info.journ_comp_id = NewCompID;
				modAdminCommon.Rec_Journal_Info.journ_contact_id = Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]);
				modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
				modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
				modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
				modAdminCommon.Rec_Journal_Info.journ_status = "A";

				strStatus = "start trans"; //aey 6/16/04

				modAdminCommon.ADO_Transaction("BeginTrans", 0, 0, NewCompID, "UpdateAC-POC");

				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = query1;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();
				DbCommand TempCommand_2 = null;
				TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
				TempCommand_2.CommandText = Query2;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand_2.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
				TempCommand_2.ExecuteNonQuery();

				// ENTER THE JOURNAL NOTE DESCRIBING THE REASSIGNMENT

				if (frm_Journal.DefInstance.Commit_Journal_Entry() > 0)
				{

					modAdminCommon.ADO_Transaction("CommitTrans");

					strStatus = "if primary"; //aey 6/16/04

					if (NewCompID != primary_comp_id)
					{

						Display_Account_Rep();

						OldCompID = primary_comp_id;

						modAdminCommon.ADO_Transaction("BeginTrans");

						// UPDATE THE CALLBACK FOR THE PREVIOUS PRIMARY COMPANY
						modCompany.update_company_callback_date(primary_comp_id, modGlobalVars.cEmptyString);

						// UPDATE THE CALLBACK DATE FOR THE NEW PRIMARY COMPANY
						modCompany.update_company_callback_date(NewCompID, modGlobalVars.cEmptyString);

						//changed to add false so that it wont put in the new reassign, but will still clear the old one
						// MSW - 7/5/23
						modCommon.Check_For_Account_Reassignment(primary_comp_id, NewCompID, lACId, "N");

						primary_comp_id = NewCompID;

						modAdminCommon.ADO_Transaction("CommitTrans");

						modAircraft.SetOperatorFlag(lACId, lJournId);

						// RERUN COMPANY STATS JUST IN CASE THE OPERATOR CHANGED

						modCommon.Company_Stats_Update(NewCompID); //aey 6/15/05

						modCommon.Company_Stats_Update(OldCompID); //aey 6/15/05

					} // If NewCompID <> primary_comp_id Then

					Fill_Aircraft_Contact_Grid();

					Fill_Aircraft_Journal_Grid();

					modCommon.End_Activity_Monitor_Message("Set Aircraft POC", ref strMsg, dtStartDate, ref dtEndDate, lACId, lJournId, NewCompID, 0, lContactId);

				}
				else
				{
					modAdminCommon.ADO_Transaction("RollbackTrans");
				} //  If (frm_Journal.Commit_Journal_Entry > 0) Then

				grd_AircraftContacts.Redraw = true;

				rstRec1 = null;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				strErrDesc = $"AC:{Convert.ToString(adoAircraftRecordset["ac_id"])} {Information.Err().Number.ToString()} {excep.Message}"; //aey 6/21/04

				grd_AircraftContacts.Redraw = true;

				modAdminCommon.ADO_Transaction("RollbackTrans");

				modAdminCommon.Report_Error($"Update_Primary_Company_Error: Aircraft Reassign may have failed- {strStatus} {strErrDesc}");
			}

		}

		private void Check_Permission()
		{

			object strOwner = null;
			try
			{
				//see who has this aircraft record locked - if anyone
				strOwner = modCommon.AircraftLocked(Convert.ToInt32(Double.Parse(txt_ac_id.Text)), tmp_ac_journ_id);

				//If someone has this locked who is not "me" then say so
				//UPGRADE_WARNING: (1068) strOwner of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				if (Convert.ToString(strOwner) != "False" && strOwner != modAdminCommon.snp_User["user_id"])
				{
					//UPGRADE_WARNING: (1068) strOwner of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
					lbl_gen[42].Text = $"Locked by {Convert.ToString(strOwner)}.";
					pnl_gen[5].BackColor = Color.Yellow;
					Disable_Aircraft();
					//------------------------------------------------------------------------------------------------------
					//We want to add a call to routine here that will disable all fields so there can't be any updates.
					//------------------------------------------------------------------------------------------------------
				}
				else
				{

					// ADDED MSW - 10/20/16 - unlock all current AC if on a current AC
					if (tmp_ac_journ_id == 0)
					{
						modCommon.UnLockAircraft_ALL(Convert.ToString(modAdminCommon.snp_User["user_id"]));
					}
					else
					{
						modCommon.UnLockAircraft_ALL_History(Convert.ToString(modAdminCommon.snp_User["user_id"]));
					}

					//Lock the record
					modCommon.LockAircraft(Convert.ToInt32(Double.Parse(txt_ac_id.Text)), tmp_ac_journ_id, Convert.ToString(modAdminCommon.snp_User["user_id"]));
					lbl_gen[42].Text = " ";
					pnl_gen[5].BackColor = pnl_gen[4].BackColor;

					Enable_Aircraft();

					if (tmp_ac_journ_id == 0 && (Convert.ToString(modAdminCommon.snp_User["user_type"]) == "Research Manager" || Convert.ToString(modAdminCommon.snp_User["user_type"]) == "Administrator"))
					{ //current record
						txt_ac_ser_no[0].ReadOnly = false;
						txt_ac_ser_no[1].ReadOnly = false;
						txt_ac_ser_no[2].ReadOnly = false;
						// cbo_amod_make_name.Enabled = True
					}
					else
					{
						txt_ac_ser_no[0].ReadOnly = true;
						txt_ac_ser_no[1].ReadOnly = true;
						txt_ac_ser_no[2].ReadOnly = true;
						cbo_amod_make_name.Enabled = false;
					}

					if (Convert.ToString(modAdminCommon.snp_User["user_type"]) == "Research Manager" || Convert.ToString(modAdminCommon.snp_User["user_type"]) == "Administrator")
					{
						// cmdRetrieveSpecs.Visible = True   '6/11/04 aey
						chkArray[chkIncMktSummary_INDEX].Enabled = true;
					}
					else
					{
						cmdRetrieveSpecs.Visible = false;
						chkArray[chkIncMktSummary_INDEX].Enabled = false;
					}

					if (tmp_ac_journ_id > 0 && (Convert.ToString(modAdminCommon.snp_User["user_type"]) == "Research Manager" || Convert.ToString(modAdminCommon.snp_User["user_type"]) == "Administrator" || ($"{modGlobalVars.cEmptyString}{Convert.ToString(modAdminCommon.snp_User["user_id"])}").Trim().ToUpper() == "LLS"))
					{ //historical record
						mnuDeleteHistoricalRecord.Enabled = true;
					}
					else
					{
						mnuDeleteHistoricalRecord.Enabled = false;
					}

				} // If Not (strOwner = "False") And Not (strOwner = snp_User!user_id) Then
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (1068) strOwner of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Check_Permission_Error: [{excep.Message}] E#:{Information.Err().Number.ToString()} usr:{Convert.ToString(modAdminCommon.snp_User["user_id"])} lock:{Convert.ToString(strOwner)}");
			}

		}

		private bool ValidateAskingPrice(bool bIsDisplay, bool CancelMessage = false)
		{

			string Query = "";
			ADORecordSetHelper snpAsking = new ADORecordSetHelper();
			string Msg = "";

			double nAmodStartPrice = 0;
			double nAmodEndPrice = 0;
			bool bResults = true;

			if (txt_ac_asking_price.Text.Trim() != modGlobalVars.cEmptyString)
			{
				if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_asking_price.Text) > 0)
				{

					Query = "SELECT amod_start_price, amod_end_price FROM Aircraft_Model WITH(NOLOCK) ";
					Query = $"{Query}WHERE (amod_id = {cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex).ToString()}) ";

					snpAsking.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

					if (!(snpAsking.BOF && snpAsking.EOF))
					{

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snpAsking["amod_start_price"]))
						{
							if (Convert.ToDouble(snpAsking["amod_start_price"]) > 0)
							{
								nAmodStartPrice = Convert.ToDouble(snpAsking["amod_start_price"]);
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snpAsking["amod_end_price"]))
						{
							if (Convert.ToDouble(snpAsking["amod_end_price"]) > 0)
							{
								nAmodEndPrice = Convert.ToDouble(snpAsking["amod_end_price"]);
							}
						}

						if (nAmodStartPrice == 0 && nAmodEndPrice == 0)
						{
							if (bIsDisplay)
							{
								return false;
								// nothing to validate aginst for display so fail
							}
							else
							{
								return true;
								// nothing to validate aginst
							}
						}

						if (nAmodStartPrice > 0 || nAmodEndPrice > 0)
						{

							if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_asking_price.Text) < nAmodStartPrice || modCommon.pubf_ReturnNumberFromDollarAmt(txt_ac_asking_price.Text) > nAmodEndPrice)
							{

								Msg = "The normal asking price for this model is between $";
								Msg = $"{Msg}{Strings.FormatNumber(nAmodStartPrice, 2, TriState.False, TriState.False, TriState.True)}";
								Msg = $"{Msg} and $";
								Msg = $"{Msg}{Strings.FormatNumber(nAmodEndPrice, 2, TriState.False, TriState.False, TriState.True)}";
								Msg = $"{Msg}{Environment.NewLine}Do you still want to save?";

								if (CancelMessage)
								{
									bResults = false;
								}
								else if (txt_ac_asking_price.Visible)
								{ 

									if (MessageBox.Show(Msg, AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
									{

										bResults = false;

										txt_ac_asking_price.Text = Strings.FormatNumber(adoAircraftRecordset.GetField("ac_asking_price").OriginalValue, 2, TriState.False, TriState.False, TriState.True);

									} // If MsgBox(Msg, vbYesNo) = vbNo Then

								} // If CancelMessage = True Then

							}

						}

					} // If (snpAsking.BOF = False) And (snpAsking.EOF = False) Then

					snpAsking.Close();

				}
				else
				{
					bResults = true;
				} // If CLng(txt_ac_asking_price.Text) > 0 Then
			}

			snpAsking = null;

			return bResults;

		}

		private bool Validate_Aircraft()
		{
			//hour thresholds added aey 6/7/2004
			//error recording added 6/15/04 aey
			//check for total percentage on fractional/share added 7/7/04 aey

			bool result = false;
			int MaxHoursThreshold = 0; //total time max 'aey 6/7/04
			int AC_TotalHours = 0; //other times should be less than total time
			string tmpErrDesc = ""; //aey 6/15/04
			ADORecordSetHelper adoCheckPCT = new ADORecordSetHelper(); //aey 7/7/04

			try
			{
				MaxHoursThreshold = 100000;

				result = true;

				tmpErrDesc = "available 1.0";
				if (!ValidateAvailableStatus())
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					return result;
				}

				tmpErrDesc = "available 1.1";
				//Validate Aircraft Top
				if (cbo_amod_make_name.Text.Trim() == modGlobalVars.cEmptyString)
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("<Make and Model Can Not Be Blank>", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					return result;
				}

				tmpErrDesc = "available 1.2";
				if (cbo_ac_asking.Text.Trim() == modGlobalVars.cEmptyString && chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked)
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Asking must be assigned", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					cbo_ac_asking.Focus();
					return result;
				}

				tmpErrDesc = "available 1.3";
				if (txt_ac_list_date.Text.Trim() == modGlobalVars.cEmptyString && chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked)
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Date Listed must be assigned", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_list_date.Focus();
					return result;
				}

				tmpErrDesc = "available 1.4";
				if (!(Information.IsDate(txt_ac_list_date.Text.Trim()) || txt_ac_list_date.Text.Trim() == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Date Listed must be a date value", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_list_date.Focus();
					return result;
				}

				// ***************************************************
				// MAKE SURE THAT THE DATE LISTED IS NOT IN THE FUTURE
				// RTW - 8/26/2010
				tmpErrDesc = "list date 1.5";
				if (Strings.Len(txt_ac_list_date.Text.Trim()) > 0)
				{
					if (((int) DateAndTime.DateDiff("d", DateTime.Parse(txt_ac_list_date.Text), DateTime.Parse(modAdminCommon.DateToday), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1)) < 0)
					{
						result = false;
						tab_aircraft_details.Enabled = true;
						tbr_ToolBar.Enabled = true;
						tab_ACMain.Enabled = true;
						MessageBox.Show("Date Listed must not be in the future", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
						txt_ac_list_date.Focus();
						return result;
					}
				}


				//Validate Aircraft Main Tab
				tmpErrDesc = "eng noise rating";
				if (!(Information.IsNumeric(txt_ac_engine_noise_rating.Text) || txt_ac_engine_noise_rating.Text.Trim() == modGlobalVars.cEmptyString || Conversion.Val(txt_ac_engine_noise_rating.Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine Noise Rating must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_noise_rating.Focus();
				}

				// 02/16/2016 - By David D. Cruger
				// Moved This To The Validate Aircraft Procedure
				// Validate RegNbr Does NOT Already Exists

				if (($"{txt_ac_reg_no[0].Text} ").Trim() != ($"{Convert.ToString(adoAircraftRecordset["ac_reg_no"])} ").Trim())
				{
					if (Strings.Len(StringsHelper.Replace(txt_ac_reg_no[0].Text.Trim(), "-", "", 1, -1, CompareMethod.Binary)) > 2)
					{ // added MSW - 1/24 - make sure length > 2
						if (modCommon.RegNoDuplicate(($"{txt_ac_reg_no[0].Text} ").Trim(), modAdminCommon.gbl_Aircraft_ID.ToString()))
						{

							if (MessageBox.Show($"Registration Number already exists{Environment.NewLine}{Environment.NewLine}Do you still want to Save this Aircraft?", "Registration Number Exists", MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
							{
								result = false;
								tab_aircraft_details.Enabled = true;
								tbr_ToolBar.Enabled = true;
								tab_ACMain.Enabled = true;
								txt_ac_reg_no[0].Focus();
							}
							else
							{
								modAdminCommon.Record_Event("Aircraft", $"RegNbr Already Exists. Save Anyway {($"{txt_ac_reg_no[0].Text} ").Trim()}", modAdminCommon.gbl_Aircraft_ID, modAdminCommon.gbl_Aircraft_Journal_ID, 0, false, 0, 0);
							}

						} // If RegNoDuplicate(Trim(txt_ac_reg_no(0).Text & " "), CStr(gbl_Aircraft_ID)) = True Then
					}
				} // If Trim(txt_ac_reg_no(0).Text & " ") <> Trim(adoAircraftRecordset!ac_reg_no & " ") Then

				AC_TotalHours = MaxHoursThreshold; //6/9/04 aey

				tmpErrDesc = "Threshold 1";

				if (!(Information.IsNumeric(txt_ac_airframe_tot_hrs.Text) || txt_ac_airframe_tot_hrs.Text.Trim() == modGlobalVars.cEmptyString || Conversion.Val(txt_ac_airframe_tot_hrs.Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show($"Airframe Total Hours must be numeric and less than {MaxHoursThreshold.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_airframe_tot_hrs.Focus();
				}

				tmpErrDesc = "Threshold 2";

				if (!(Information.IsNumeric(txt_ac_airframe_tot_landings.Text) || txt_ac_airframe_tot_landings.Text.Trim() == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Airframe Total Landings must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_airframe_tot_landings.Focus();
				}

				tmpErrDesc = "Threshold 3";

				if (!(Information.IsNumeric(txt_ac_engine_tot_hrs[0].Text) || (txt_ac_engine_tot_hrs[0].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_tot_hrs[0].Text) > AC_TotalHours))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 1 hours must be numeric and less than Airframe Total Time", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_tot_hrs[0].Focus();
				}

				tmpErrDesc = "Threshold 4";

				if (!(Information.IsNumeric(txt_ac_engine_tot_hrs[1].Text) || (txt_ac_engine_tot_hrs[1].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_tot_hrs[1].Text) > AC_TotalHours))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 2 hours must be numeric and less than Airframe Total Time", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_tot_hrs[1].Focus();
				}

				tmpErrDesc = "Threshold 5";

				if (!(Information.IsNumeric(txt_ac_engine_tot_hrs[2].Text) || (txt_ac_engine_tot_hrs[2].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_tot_hrs[2].Text) > AC_TotalHours))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 3 hours must be numeric and less than Airframe Total Time", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_tot_hrs[2].Focus();
				}

				tmpErrDesc = "Threshold 6";

				if (!(Information.IsNumeric(txt_ac_engine_tot_hrs[3].Text) || (txt_ac_engine_tot_hrs[3].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_tot_hrs[3].Text) > AC_TotalHours))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 4 hours must be numeric and less than Airframe Total Time", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_tot_hrs[3].Focus();
				}

				tmpErrDesc = "Threshold 7";

				if (!(Information.IsNumeric(txt_ac_engine_soh_hrs[0].Text) || (txt_ac_engine_soh_hrs[0].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_soh_hrs[0].Text) > AC_TotalHours))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 1 SOH hours must be numeric and less than Airframe Total Time", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_soh_hrs[0].Focus();
				}

				tmpErrDesc = "Threshold 8";

				if (!(Information.IsNumeric(txt_ac_engine_soh_hrs[1].Text) || (txt_ac_engine_soh_hrs[1].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_soh_hrs[1].Text) > AC_TotalHours))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 2 SOH hours must be numeric and less than Airframe Total Time", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_soh_hrs[1].Focus();
				}

				tmpErrDesc = "Threshold 9";

				if (!(Information.IsNumeric(txt_ac_engine_soh_hrs[2].Text) || (txt_ac_engine_soh_hrs[2].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_soh_hrs[2].Text) > AC_TotalHours))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 3 SOH hours must be numeric and less than Airframe Total Time", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_soh_hrs[2].Focus();
				}

				tmpErrDesc = "Threshold 10";

				if (!(Information.IsNumeric(txt_ac_engine_soh_hrs[3].Text) || (txt_ac_engine_soh_hrs[3].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_soh_hrs[3].Text) > AC_TotalHours))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 4 SOH hours must be numeric and less than Airframe Total Time", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_soh_hrs[3].Focus();
				}

				tmpErrDesc = "Threshold 11";

				if (!(Information.IsNumeric(txt_ac_engine_shi_hrs[0].Text) || (txt_ac_engine_shi_hrs[0].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_shi_hrs[0].Text) > AC_TotalHours))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 1 SHI hours must be numeric and less than Airframe Total Time", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_shi_hrs[0].Focus();
				}

				tmpErrDesc = "Threshold 12";

				if (!(Information.IsNumeric(txt_ac_engine_shi_hrs[1].Text) || (txt_ac_engine_shi_hrs[1].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_shi_hrs[1].Text) > AC_TotalHours))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 2 SHI hours must be numeric and less than Airframe Total Time", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_shi_hrs[1].Focus();
				}

				tmpErrDesc = "Threshold 13";

				if (!(Information.IsNumeric(txt_ac_engine_shi_hrs[2].Text) || (txt_ac_engine_shi_hrs[2].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_shi_hrs[2].Text) > AC_TotalHours))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 3 SHI hours must be numeric and less than Airframe Total Time", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_shi_hrs[2].Focus();
				}

				tmpErrDesc = "Threshold 14";

				if (!(Information.IsNumeric(txt_ac_engine_shi_hrs[3].Text) || (txt_ac_engine_shi_hrs[3].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_shi_hrs[3].Text) > AC_TotalHours))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 4 SHI hours must be numeric and less than Airframe Total Time", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_shi_hrs[3].Focus();
				}

				tmpErrDesc = "Threshold 15";

				if (!(Information.IsNumeric(txt_ac_engine_tbo_hrs[0].Text) || (txt_ac_engine_tbo_hrs[0].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_tbo_hrs[0].Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show($"Engine 1 TBO hours must be numeric and less than {MaxHoursThreshold.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_tbo_hrs[0].Focus();
				}

				tmpErrDesc = "Threshold 16";

				if (!(Information.IsNumeric(txt_ac_engine_tbo_hrs[1].Text) || (txt_ac_engine_tbo_hrs[1].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_tbo_hrs[1].Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show($"Engine 2 TBO hours must be numeric and less than {MaxHoursThreshold.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_tbo_hrs[1].Focus();
				}

				tmpErrDesc = "Threshold 17";

				if (!(Information.IsNumeric(txt_ac_engine_tbo_hrs[2].Text) || (txt_ac_engine_tbo_hrs[2].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_tbo_hrs[2].Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show($"Engine 3 TBO hours must be numeric and less than {MaxHoursThreshold.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_tbo_hrs[2].Focus();
				}

				tmpErrDesc = "Threshold 18";

				if (!(Information.IsNumeric(txt_ac_engine_tbo_hrs[3].Text) || (txt_ac_engine_tbo_hrs[3].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_engine_tbo_hrs[3].Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show($"Engine 4 TBO hours must be numeric and less than {MaxHoursThreshold.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_tbo_hrs[3].Focus();
				}

				tmpErrDesc = "cycles";

				if (!(Information.IsNumeric(txt_ac_engine_snew_cycles[0].Text) || txt_ac_engine_snew_cycles[0].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 1 SNEW cycles must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_snew_cycles[0].Focus();
				}

				tmpErrDesc = "cycles.1";

				if (!(Information.IsNumeric(txt_ac_engine_snew_cycles[1].Text) || txt_ac_engine_snew_cycles[1].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 2 SNEW cycles must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_snew_cycles[1].Focus();
				}

				tmpErrDesc = "cycles.2";

				if (!(Information.IsNumeric(txt_ac_engine_snew_cycles[2].Text) || txt_ac_engine_snew_cycles[2].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 3 SNEW cycles must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_snew_cycles[2].Focus();
				}

				tmpErrDesc = "cycles.3";

				if (!(Information.IsNumeric(txt_ac_engine_snew_cycles[3].Text) || txt_ac_engine_snew_cycles[3].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 4 SNEW cycles must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_snew_cycles[3].Focus();
				}

				tmpErrDesc = "cycles.4";

				if (!(Information.IsNumeric(txt_ac_engine_soh_cycles[0].Text) || txt_ac_engine_soh_cycles[0].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 1 SOH cycles must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_soh_cycles[0].Focus();
				}

				tmpErrDesc = "cycles.5";

				if (!(Information.IsNumeric(txt_ac_engine_soh_cycles[1].Text) || txt_ac_engine_soh_cycles[1].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 2 SOH cycles must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_soh_cycles[1].Focus();
				}

				tmpErrDesc = "cycles.6";

				if (!(Information.IsNumeric(txt_ac_engine_soh_cycles[2].Text) || txt_ac_engine_soh_cycles[2].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 3 SOH cycles must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_soh_cycles[2].Focus();
				}

				tmpErrDesc = "cycles.7";

				if (!(Information.IsNumeric(txt_ac_engine_soh_cycles[3].Text) || txt_ac_engine_soh_cycles[3].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 4 SOH cycles must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_soh_cycles[3].Focus();
				}

				tmpErrDesc = "cycles.8";

				if (!(Information.IsNumeric(txt_ac_engine_shs_cycles[0].Text) || txt_ac_engine_shs_cycles[0].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 1 SHS cycles must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_shs_cycles[0].Focus();
				}

				tmpErrDesc = "cycles.9";

				if (!(Information.IsNumeric(txt_ac_engine_shs_cycles[1].Text) || txt_ac_engine_shs_cycles[1].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 2 SHS cycles must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_shs_cycles[1].Focus();
				}

				tmpErrDesc = "cycles.10";

				if (!(Information.IsNumeric(txt_ac_engine_shs_cycles[2].Text) || txt_ac_engine_shs_cycles[2].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 3 SHS cycles must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_shs_cycles[2].Focus();
				}

				tmpErrDesc = "cycles.11";

				if (!(Information.IsNumeric(txt_ac_engine_shs_cycles[3].Text) || txt_ac_engine_shs_cycles[3].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine 4 SHS cycles must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_engine_shs_cycles[3].Focus();
				}

				tmpErrDesc = "times as of";

				if (txt_ac_times_as_of_date.Text == "0")
				{
					txt_ac_times_as_of_date.Text = modGlobalVars.cEmptyString;
				} //aey 1/12/05
				if (Strings.Len(($"{txt_ac_times_as_of_date.Text}{modGlobalVars.cEmptyString}").Trim()) < 5)
				{
					txt_ac_times_as_of_date.Text = modGlobalVars.cEmptyString;
				} //aey 1/12/05

				if (Strings.Len(($"{modGlobalVars.cEmptyString}{txt_ac_times_as_of_date.Text}").Trim()) > 0)
				{
					System.DateTime TempDate2 = DateTime.FromOADate(0);
					if (!Information.IsDate(txt_ac_times_as_of_date.Text))
					{
						result = false;
						tab_aircraft_details.Enabled = true;
						tbr_ToolBar.Enabled = true;
						tab_ACMain.Enabled = true;
						MessageBox.Show("Times as of Date must be DD/MM/CCYY Format", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
						txt_ac_times_as_of_date.Focus();
					}
					else if (String.CompareOrdinal(DateTime.Parse(txt_ac_times_as_of_date.Text).ToString("yyyy/MM/dd"), (DateTime.TryParse(modAdminCommon.DateToday, out TempDate2)) ? TempDate2.ToString("yyyy/MM/dd") : modAdminCommon.DateToday) > 0)
					{ 
						txt_ac_times_as_of_date.Text = DateTime.Parse(modAdminCommon.GetDateTime()).ToString("MM/dd/yyyy");
						//Validate_Aircraft = False
						//tab_Aircraft_Details.Enabled = True
						//tbr_ToolBar.Enabled = True
						//tab_ACMain.Enabled = True
						//MsgBox ("Times as of Date cannot be Greater Than Today")
						//txt_ac_times_as_of_date.SetFocus
					}
				}

				tmpErrDesc = "hours";

				if (!(Information.IsNumeric(txt_ac_prop_snew_hrs[0].Text) || (txt_ac_prop_snew_hrs[0].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_prop_snew_hrs[0].Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show($"Prop 1 SNEW Hours must be numeric and less than {MaxHoursThreshold.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_prop_snew_hrs[0].Focus();
				}

				tmpErrDesc = "hours.1";

				if (!(Information.IsNumeric(txt_ac_prop_snew_hrs[1].Text) || (txt_ac_prop_snew_hrs[1].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_prop_snew_hrs[1].Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show($"Prop 2 SNEW Hours must be numeric and less than {MaxHoursThreshold.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_prop_snew_hrs[1].Focus();
				}

				tmpErrDesc = "hours.2";

				if (!(Information.IsNumeric(txt_ac_prop_snew_hrs[2].Text) || (txt_ac_prop_snew_hrs[2].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_prop_snew_hrs[2].Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show($"Prop 3 SNEW Hours must be numeric and less than {MaxHoursThreshold.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_prop_snew_hrs[2].Focus();
				}

				tmpErrDesc = "hours.3";

				if (!(Information.IsNumeric(txt_ac_prop_snew_hrs[3].Text) || (txt_ac_prop_snew_hrs[3].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_prop_snew_hrs[3].Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show($"Prop 4 SNEW Hours must be numeric and less than {MaxHoursThreshold.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_prop_snew_hrs[3].Focus();
				}

				tmpErrDesc = "hours.4";

				if (!(Information.IsNumeric(txt_ac_prop_soh_hrs[0].Text) || (txt_ac_prop_soh_hrs[0].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_prop_soh_hrs[0].Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show($"Prop 1 SOH Hours must be numeric and less than {MaxHoursThreshold.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_prop_soh_hrs[0].Focus();
				}

				tmpErrDesc = "hours.5";

				if (!(Information.IsNumeric(txt_ac_prop_soh_hrs[1].Text) || (txt_ac_prop_soh_hrs[1].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_prop_soh_hrs[1].Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show($"Prop 2 SOH Hours must be numeric and less than {MaxHoursThreshold.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_prop_soh_hrs[1].Focus();
				}

				tmpErrDesc = "hours.6";

				if (!(Information.IsNumeric(txt_ac_prop_soh_hrs[2].Text) || (txt_ac_prop_soh_hrs[2].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_prop_soh_hrs[2].Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show($"Prop 3 SOH Hours must be numeric and less than {MaxHoursThreshold.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_prop_soh_hrs[2].Focus();
				}

				tmpErrDesc = "hours.7";

				if (!(Information.IsNumeric(txt_ac_prop_soh_hrs[3].Text) || (txt_ac_prop_soh_hrs[3].Text == modGlobalVars.cEmptyString) || Conversion.Val(txt_ac_prop_soh_hrs[3].Text) > MaxHoursThreshold))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show($"Prop 4 SOH Hours must be numeric and less than {MaxHoursThreshold.ToString()}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_prop_soh_hrs[3].Focus();
				}

				tmpErrDesc = "dates";

				if (!Validate_MoYear(txt_ac_prop_soh_mo[0].Text, txt_ac_prop_soh_year[0].Text))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Prop 1 SOH Month/Year must be MM/CCYY Format", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_prop_soh_mo[0].Focus();
				}

				tmpErrDesc = "dates.1";

				if (!Validate_MoYear(txt_ac_prop_soh_mo[1].Text, txt_ac_prop_soh_year[1].Text))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Prop 2 SOH Month/Year must be MM/CCYY Format", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_prop_soh_mo[1].Focus();
				}

				tmpErrDesc = "dates.2";

				if (!Validate_MoYear(txt_ac_prop_soh_mo[2].Text, txt_ac_prop_soh_year[2].Text))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Prop 3 SOH Month/Year must be MM/CCYY Format", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_prop_soh_mo[2].Focus();
				}

				tmpErrDesc = "dates.3";

				if (!Validate_MoYear(txt_ac_prop_soh_mo[3].Text, txt_ac_prop_soh_year[3].Text))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Prop 4 SOH Month/Year must be MM/CCYY Format", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_prop_soh_mo[3].Focus();
				}

				tmpErrDesc = "dates.4";

				if (!(Information.IsNumeric(txt_ac_apu[1].Text) || txt_ac_apu[1].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("APU Total Hours must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_apu[1].Focus();
				}

				tmpErrDesc = "dates.5";

				if (!(Information.IsNumeric(txt_ac_apu[2].Text) || txt_ac_apu[2].Text == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("APU SOH Hours must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_apu[2].Focus();
				}

				tmpErrDesc = "dates.6";
				//
				//    If Not (IsNumeric(txt_ac_apu(3)) Or txt_ac_apu(3) = cEmptyString) Then
				//        Validate_Aircraft = False
				//        tab_aircraft_details.Enabled = True
				//        tbr_ToolBar.Enabled = True
				//        tab_ACMain.Enabled = True
				//        MsgBox ("APU SHI Hours must be numeric")
				//        txt_ac_apu(3).SetFocus
				//    End If

				//Validate Aircraft Maintenance Tab
				tmpErrDesc = "maint tab";

				if (!Validate_MoYear(txt_ac_maint_eoh_mo.Text, txt_ac_maint_eoh_year.Text))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Engine Overhaul Date must be MM/CCYY Format", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_maint_eoh_mo.Focus();
				}

				tmpErrDesc = "maint tab.1";

				if (!Validate_MoYear(txt_ac_maint_hots_mo.Text, txt_ac_maint_hots_year.Text))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("HOTS Inspection BY Date must be MM/CCYY Format", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_maint_hots_mo.Focus();
				}

				//Validate Interior/Exterior Tab
				tmpErrDesc = "ie tab";

				if (!(Information.IsNumeric(txt_ac_interior_rating.Text) || txt_ac_interior_rating.Text.Trim() == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Interior Rating must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_interior_rating.Focus();
				}

				tmpErrDesc = "ie tab.1";

				if (!(Conversion.Val(txt_ac_interior_rating.Text) >= 0 && Conversion.Val(txt_ac_interior_rating.Text) <= 10))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Interior Rating must be between 00 and 10", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_interior_rating.Focus();
				}

				tmpErrDesc = "ie tab.2";

				if (!(Information.IsNumeric(txt_ac_exterior_rating.Text) || txt_ac_exterior_rating.Text.Trim() == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Exterior Rating must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_exterior_rating.Focus();
				}

				tmpErrDesc = "ie tab.3";

				if (!(Conversion.Val(txt_ac_exterior_rating.Text) >= 0 && Conversion.Val(txt_ac_exterior_rating.Text) <= 10))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Exterior Rating must be between 00 and 10", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_exterior_rating.Focus();
				}

				tmpErrDesc = "ie tab.4";

				if (!(Information.IsNumeric(txt_ac_passenger_count.Text) || txt_ac_passenger_count.Text.Trim() == modGlobalVars.cEmptyString))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Passenger Count must be numeric", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_passenger_count.Focus();
				}

				tmpErrDesc = "ie tab.5";

				if (!Validate_MoYear(txt_ac_interior_mo.Text, txt_ac_interior_year.Text))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Aircraft Interior Date must be MM/CCYY Format", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_interior_mo.Focus();
				}

				tmpErrDesc = "ie tab.6";

				if (!Validate_MoYear(txt_ac_exterior_mo.Text, txt_ac_exterior_year.Text))
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Aircraft Exterior Date must be MM/CCYY Format", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_exterior_mo.Focus();
				}

				//Validate Companies Tab
				tmpErrDesc = "co tab";

				if (!Information.IsDate(txt_ac_lease_expire_date.Text) && Strings.Len(($"{txt_ac_lease_expire_date.Text}{modGlobalVars.cEmptyString}").Trim()) > 0)
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					MessageBox.Show("Lease Expire Date must be DD/MM/CCYY Format", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_lease_expire_date.Focus();
				}

				tmpErrDesc = "asking price";

				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0)
				{ //aey 9/1/04 only validate on current a/c
					if (!ValidateAskingPrice(false))
					{
						result = false;
						tab_aircraft_details.Enabled = true;
						tbr_ToolBar.Enabled = true;
						tab_ACMain.Enabled = true;
						return result;
					}
				}

				//------------------------------------------------------------------------
				// 06/27/2007 - By David D. Cruger
				// Can NOT Enter an ACBase State without adding the Country
				// The Combo Boxes Should Protect against this but an extra check
				// doesn't hurt
				//------------------------------------------------------------------------

				tmpErrDesc = "ACBase State/Country";

				if (cboBaseState.Text != modGlobalVars.cEmptyString && cboBaseCountry.Text == modGlobalVars.cEmptyString)
				{
					result = false;
					tab_aircraft_details.Enabled = true;
					tbr_ToolBar.Enabled = true;
					tab_ACMain.Enabled = true;
					SSTabHelper.SetSelectedIndex(tab_ACMain, 4); // AC Base
					tab_ACMain.Focus();
					MessageBox.Show("Aircraft has a Base State but NO Base Country", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
				}

				tmpErrDesc = "Purchase Date";

				//aey 8/12/04 check to see if it is a valid date
				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0 && txt_ac_purchase_date.Text != modGlobalVars.cEmptyString && Convert.ToString(adoAircraftRecordset["ac_purchase_date"]) != txt_ac_purchase_date.Text)
				{

					if (Convert.ToDateTime(txt_ac_purchase_date.Text) > Convert.ToDateTime(txtHistoryDate.Text))
					{
						result = false;
						MessageBox.Show("Historical Purchase Date cannot come before transaction date", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					}

				}

				tmpErrDesc = "totpct";

				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0)
				{
					if (PercentTotal > 0 && Math.Floor(PercentTotal + 0.01d) != 100)
					{
						MessageBox.Show("Total ownership is not 100%", "Validate A/c", MessageBoxButtons.OK, MessageBoxIcon.Error);
					}
				}

				tmpErrDesc = "validate COR";

				if (!ValidateCOR())
				{
					result = false;
					MessageBox.Show("This Country of Registration does not match the current Registration Number", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				tmpErrDesc = $"{Information.Err().Number.ToString()} {excep.Message} {excep.Source} {tmpErrDesc}";

				modAdminCommon.Report_Error($"Validate_Aircraft_Error:{tmpErrDesc}");
				result = false;
			}

			return result;
		} // Validate_Aircraft

		public bool Validate_MoYear(string mo, string yr)
		{

			bool result = false;
			result = true;

			if (Strings.Len(mo.Trim()) > 0)
			{
				if (Strings.Len(yr.Trim()) == 0)
				{
					return false;
				}
			}

			if (Strings.Len(yr.Trim()) < 4 && Strings.Len(yr.Trim()) > 0)
			{
				return false;
			}

			if (Strings.Len(mo.Trim()) > 0)
			{
				if (!Information.IsNumeric(mo.Trim()))
				{
					return false;
				}
			}

			if (Strings.Len(yr.Trim()) > 0)
			{
				if (!Information.IsNumeric(yr.Trim()))
				{
					return false;
				}
			}

			//for now, just return true (per Rick 3/16/01)
			//Validate_MoYear = True

			//Double ticked lines stayed commented 6/21/2001 rje
			//      Validate_MoYear = False
			//      If (Len(Trim(moyear)) > 0) Then
			//   '      If Not (Len(Trim(moyear)) = 4 And (IsNumeric(moyear))) Then
			//            If left(moyear, InStr(moyear, "/") - 1) > 0 And left(moyear, InStr(moyear, "/") - 1) < 13 And IsNumeric(left(moyear, InStr(moyear, "/") - 1)) Then
			//   '            If (Mid(moyear, 3, 1) = "/") Then
			//                  If ((right(moyear, 4) > 1950 And right(moyear, 4) < 2100)) And IsNumeric(right(moyear, 4)) Then
			//                     Validate_MoYear = True
			//                  End If
			//   '            End If
			//            End If
			//   '         Validate_MoYear = True
			//   '      End If
			//   '      Validate_MoYear = True
			//      Else
			//          Validate_MoYear = True
			//      End If

			return result;
		}

		private void Insert_Journal_Note()
		{

			// INSERT A RESEARCH ACTION JOURNAL ENTRY
			// RTW - MODIFIED - 2/15/2012 - TO INSERT ENTRY INTO HOT BOX TABLE
			try
			{
				string strMsg = "";
				int InsertJournID = 0;
				string HotQuery = "";



				frm_Journal.DefInstance.Reference_Subject = modGlobalVars.cEmptyString;

				modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RA";
				modAdminCommon.Rec_Journal_Info.journ_subject = txt_journal_note.Text.Substring(0, Math.Min(200, txt_journal_note.Text.Length));
				modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
				modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);

				modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
				modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;

				modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
				modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
				modAdminCommon.Rec_Journal_Info.journ_status = "P";

				modAdminCommon.ADO_Transaction("BeginTrans");

				InsertJournID = frm_Journal.DefInstance.Commit_Journal_Entry();
				if (InsertJournID > 0)
				{
					modAdminCommon.ADO_Transaction("CommitTrans");
				}
				else
				{
					modAdminCommon.ADO_Transaction("RollbackTrans");
					strMsg = "The journal entry was not inserted.";
					MessageBox.Show(strMsg, "Insert Not Done", MessageBoxButtons.OK, MessageBoxIcon.Information);
					return;
				}




				//    ' RTW - MODIFIED - 2/15/2012 - TO INSERT ENTRY INTO HOT BOX TABLE
				//    HotQuery = "INSERT INTO Hot_Box_Summary"
				//' Journal Information
				//HotQuery = HotQuery & "(hbs_entry_date,hbs_ac_id,hbs_journ_id,hbs_user_id,hbs_subject,hbs_description,hbs_status,"
				//' AC Make/Model Information
				//HotQuery = HotQuery & "hbs_amod_id, hbs_airframe_type_code,hbs_type_code,hbs_make_name,hbs_model_name,hbs_ser_no_full,"
				//HotQuery = HotQuery & "hbs_reg_no,hbs_ac_product_business_flag,hbs_ac_product_helicopter_flag,hbs_ac_product_commercial_flag,"
				//' Company Information
				//HotQuery = HotQuery & "hbs_comp_id,hbs_comp_name,hbs_comp_account_id,hbs_contact_id) "

				//HotQuery = HotQuery & "SELECT "
				//'Journal Information
				//HotQuery = HotQuery & "(CAST(CAST(journ_entry_date AS Date) AS DATETIME) + CAST(CAST(journ_entry_time AS Time) AS DATETIME)),"
				//HotQuery = HotQuery & "journ_ac_id,"
				//HotQuery = HotQuery & "journ_id,"
				//HotQuery = HotQuery & "journ_user_id,"
				//HotQuery = HotQuery & "journ_subject,"
				//HotQuery = HotQuery & "journ_description,"
				//HotQuery = HotQuery & "journ_status,"
				//' Make/Model Information
				//HotQuery = HotQuery & "amod_id,"
				//HotQuery = HotQuery & "amod_airframe_type_code,"
				//HotQuery = HotQuery & "amod_type_code,"
				//HotQuery = HotQuery & "amod_make_name,"
				//HotQuery = HotQuery & "amod_model_name,"
				//HotQuery = HotQuery & "ac_ser_no_full,"
				//HotQuery = HotQuery & "ac_reg_no,"
				//HotQuery = HotQuery & "ac_product_business_flag,"
				//HotQuery = HotQuery & "ac_product_helicopter_flag,"
				//HotQuery = HotQuery & "ac_product_commercial_flag,"
				//' Company Information
				//HotQuery = HotQuery & "comp_id,"
				//HotQuery = HotQuery & "comp_name,"
				//HotQuery = HotQuery & "comp_account_id,"
				//HotQuery = HotQuery & "cref_contact_id "
				//HotQuery = HotQuery & "From Journal "
				//HotQuery = HotQuery & "INNER JOIN Aircraft ON journ_ac_id = ac_id AND ac_journ_id = 0 "
				//HotQuery = HotQuery & "INNER JOIN Aircraft_Model ON ac_amod_id = amod_id "
				//HotQuery = HotQuery & "INNER JOIN Aircraft_Reference ON ac_id = cref_ac_id AND cref_journ_id = 0 "
				//HotQuery = HotQuery & "INNER JOIN Company ON cref_comp_id = comp_id AND comp_journ_id = 0 "
				//HotQuery = HotQuery & "WHERE (journ_id=" & InsertJournID & ") "
				//HotQuery = HotQuery & "and (journ_subcategory_code='RA')"

				//If (InsertJournID > 0) Then
				//  LOCAL_ADO_DB.Execute (HotQuery)
				//End If

				modAircraft.delete_and_insert_hotbox(ref InsertJournID, ref modAdminCommon.gbl_Aircraft_ID);

				txt_journal_note.Text = modGlobalVars.cEmptyString;
				Fill_Aircraft_Journal_Grid();
			}
			catch
			{

				MessageBox.Show("Insert_Journal_Note_Error:", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
			}
		}

		private void Remove_Company_Association()
		{
			string errMsg = "";
			try
			{
				string Query = "";
				int I = 0;
				ADORecordSetHelper snp_CompFound = new ADORecordSetHelper();
				ADORecordSetHelper ado_FoundComp = new ADORecordSetHelper();
				bool RemoveCompanyFlag = false;
				//Dim TransmitSeqNum As Integer

				errMsg = "align";

				Select_Aircraft_Contact();

				if (!ContactRecordsetFilled)
				{ //9/29/06 mjm
					return;
				}

				errMsg = "Owner";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "00")
				{
					MessageBox.Show("Cannot Remove Owner!", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					return;
				}

				//TransmitSeqNum = Val(Trim(cEmptyString & snp_AircraftContacts!cref_transmit_seq_no))
				errMsg = "transmit";
				if (I <= modAdminCommon.arrPriorKeyACContacts.GetUpperBound(0))
				{ //8/25/05 aey
					modAdminCommon.arrPriorKeyACContacts[I, 1] = "0"; //use I instead of transmit seq no
					modAdminCommon.arrPriorKeyACContacts[I, 2] = "0";
				}

				errMsg = "refs";
				Query = $"DELETE FROM Aircraft_Reference WHERE cref_id = {Convert.ToString(snp_AircraftContacts["cref_id"])}";

				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery(); //6/10/04 aey

				//12/16/04 aey  -- Do not delete acpros or non-awaiting-doc company
				RemoveCompanyFlag = false;
				errMsg = "open rs";
				Query = $"SELECT * FROM Company WITH(NOLOCK) WHERE comp_id = {Convert.ToString(snp_AircraftContacts["cref_comp_id"])}";
				Query = $"{Query} and comp_journ_id = {Convert.ToString(snp_AircraftContacts["cref_journ_id"])}";

				ado_FoundComp.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
				if (!(ado_FoundComp.BOF && ado_FoundComp.EOF))
				{

					errMsg = "await";

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(ado_FoundComp["Comp_Name"]))
					{
						if (Convert.ToString(ado_FoundComp["Comp_Name"]).Trim() != "")
						{
							if (Convert.ToString(ado_FoundComp["Comp_Name"]).Trim().ToUpper() == ("Awaiting Documentation").ToUpper())
							{
								RemoveCompanyFlag = true;
							}
						}
					}


					errMsg = "acpros";
					if (Convert.ToString(ado_FoundComp["comp_acpros_flag"]).Trim().ToUpper() == "Y")
					{
						RemoveCompanyFlag = false;
					}

				}

				ado_FoundComp.Close();

				if (RemoveCompanyFlag)
				{
					errMsg = "check journ";
					// CHECK IF THE COMPANY / JOURNAL ID BEING REMOVED HAS ANY OTHER CONNECTED DATA
					// USING HomebaseDoesCompanyHaveAnyReferencesWithJournalId
					Query = $"Exec HomebaseDoesCompanyHaveAnyReferencesWithJournalId {Convert.ToString(snp_AircraftContacts["cref_comp_id"])},{Convert.ToString(snp_AircraftContacts["cref_journ_id"])}";
					snp_CompFound.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

					if (!(snp_CompFound.BOF && snp_CompFound.EOF))
					{
						if (Convert.ToInt32(snp_CompFound["LinkFound"]) == 0)
						{
							// *******************************************
							//  REMOVE THE COMPANY
							Query = $"EXEC HomebaseDeleteAllCompanyRecordsBasedCompId {Convert.ToString(snp_AircraftContacts["cref_comp_id"])},{Convert.ToString(snp_AircraftContacts["cref_journ_id"])}";
							DbCommand TempCommand_2 = null;
							TempCommand_2 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
							TempCommand_2.CommandText = Query;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_2.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
							TempCommand_2.ExecuteNonQuery();
						}
					}

					snp_CompFound.Close();

				}

				errMsg = "mark";

				if (!RemoveCompanyFlag)
				{
					modCommon.Company_Stats_Update(Convert.ToInt32(snp_AircraftContacts["cref_comp_id"])); //aey 6/15/05
				}
				//''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
				// kth - 10/7/2002
				// Removing a reference to an aircraft should update the "last update date" on the aircraft file
				//''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
				Query = $"UPDATE Aircraft SET ac_upd_date = '{DateTime.Now.ToString()}', ";
				Query = $"{Query}ac_upd_user_id = '{modAdminCommon.gbl_User_ID}', ac_action_date = NULL";
				Query = $"{Query} WHERE ac_id = {Convert.ToString(adoAircraftRecordset["AC_ID"])}";
				Query = $"{Query} AND ac_journ_id = {Convert.ToString(adoAircraftRecordset["AC_Journ_id"])}";

				DbCommand TempCommand_3 = null;
				TempCommand_3 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_3);
				TempCommand_3.CommandText = Query;
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_3);
				TempCommand_3.ExecuteNonQuery(); //6/10/04 aey

				errMsg = "write journ";
				if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim() == "42")
				{
					modAdminCommon.Rec_Journal_Info.journ_subject = "Delivery Position Holder Removed";
					modAdminCommon.Rec_Journal_Info.journ_description = " ";
					modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
					modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
					modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
					modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
					modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
					modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
					modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
					modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
					modAdminCommon.Rec_Journal_Info.journ_status = "A";

					if (!(frm_Journal.DefInstance.Commit_Journal_Entry() > 0))
					{
						MessageBox.Show("The journal entry was not inserted.", "Insert Not Done", MessageBoxButtons.OK, MessageBoxIcon.Information);
					}
				}

				grd_AircraftContacts.Redraw = true;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Remove Company Error: {errMsg} {Information.Err().Number.ToString()} {excep.Message} {txt_ac_id.Text}");
			}

		}

		private void Fill_Aircraft_Research_Action()
		{

			try
			{
				ADORecordSetHelper snpResearchAction = new ADORecordSetHelper(); //aey 6/10/04
				string Query = "";

				lbl_gen[83].Text = modGlobalVars.cEmptyString;

				lst_Research_Action.Items.Clear();
				lst_Research_Action.Enabled = false;

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (Convert.IsDBNull(adoAircraftRecordset["AC_ID"]) || Convert.ToInt32(adoAircraftRecordset["AC_ID"]) == 0)
				{
					modAdminCommon.Report_Error("Fill_Aircraft_Research_Action_Error: (NULL) adoAircraftRecordset('AC_ID').Value ", "frm_aircraft()");
					return;
				}


				int tempRefParam = 0;
				modCommon.fill_research_action_list(0, Convert.ToInt32(Double.Parse(Convert.ToString(adoAircraftRecordset["ac_id"]))), lst_Research_Action, null, "", 0, ref tempRefParam, false, false, "", -1, tab_ACMain);


				//    ' ***************************************************************
				//    ' RTW MODIFIED 2/23/2012 - READ FROM HOTBOX TABLE
				//    Query = "SELECT distinct hbs_journ_id, hbs_entry_date, hbs_subject FROM Hot_Box_Summary WITH(NOLOCK)"
				//    Query = Query & " WHERE hbs_ac_id = " & CStr(adoAircraftRecordset("ac_id").Value)
				//    Query = Query & " AND hbs_status = 'P' ORDER BY hbs_entry_date"
				//    'Query = Query & " AND hbs_status = 'P' AND journ_subcategory_code='RA' ORDER BY hbs_entry_date"
				//
				//    snpResearchAction.CursorLocation = adUseClient
				//    snpResearchAction.Open Query, LOCAL_ADO_DB, adOpenStatic, adLockReadOnly, adCmdText
				//
				//    If Not (snpResearchAction.BOF And snpResearchAction.EOF) Then
				//
				//        Do While Not snpResearchAction.EOF
				//
				//            lst_Research_Action.AddItem FormatDateTime(snpResearchAction("hbs_entry_date").Value, vbShortDate) & " - " & Trim$(snpResearchAction("hbs_subject").Value)
				//            lst_Research_Action.forecolor = &HFF&
				//            lst_Research_Action.ItemData(lst_Research_Action.ListCount - 1) = CLng(snpResearchAction("hbs_journ_id").Value)
				//
				//            snpResearchAction.MoveNext
				//        Loop
				//
				//        If snpResearchAction.RecordCount > 0 Then
				//            tab_ACMain.Tab = 3
				//        End If
				//
				//        snpResearchAction.Close
				//
				//    End If






				lst_Research_Action.Enabled = true;

				cmdClearResearchAction.Visible = false;
				txtAddlHotBoxNotes.Visible = false;
				lbl_gen[77].Visible = false;

				snpResearchAction = null;
				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Fill_Aircraft_Research_Action_Error: ({Information.Err().Number.ToString()}) {excep.Message}ACID[{Convert.ToString(adoAircraftRecordset["ac_id"])}]", "frm_aircraft()");
				search_off();
				return;
			}
		}
		private bool Check_If_Maint_Exists(string maint_type, int ac_id, ref string date_month, ref string date_year)
		{

			bool result = false;
			try
			{
				ADORecordSetHelper snpResearchAction = new ADORecordSetHelper(); //aey 6/10/04
				string Query = "";
				string date_that_exists = "";
				int exists_count = 0;
				result = false;
				exists_count = 0;

				// ***************************************************************
				Query = $"select * from Aircraft_Maintenance with (NOLOCK) where acmaint_name = '{maint_type}' and acmaint_complied_date is not null and acmaint_journ_id = 0 and acmaint_ac_id = {ac_id.ToString()}";
				Query = $"{Query} and acmaint_notes not like '%as reported%' ";
				//Query = Query & " AND hbs_status = 'P' AND journ_subcategory_code='RA' ORDER BY hbs_entry_date"

				snpResearchAction.CursorLocation = CursorLocationEnum.adUseClient;
				snpResearchAction.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(snpResearchAction.BOF && snpResearchAction.EOF))
				{


					while(!snpResearchAction.EOF)
					{

						result = true;

						date_that_exists = Convert.ToString(snpResearchAction["acmaint_complied_date"]);

						if (date_that_exists.Trim() != "")
						{
							date_month = DateTime.Parse(date_that_exists.Trim()).Month.ToString();
							date_year = DateTime.Parse(date_that_exists.Trim()).Year.ToString();
							exists_count++;
						}


						snpResearchAction.MoveNext();
					};
					snpResearchAction.Close();

				}

				if (exists_count > 1)
				{
					result = false;
				}

				snpResearchAction = null;
				return result;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Check_If_Maint_Exists_Error: ({Information.Err().Number.ToString()}) {excep.Message}");
				search_off();
				return result;
			}
		}
		public void Unload_Aircraft_Form()
		{

			try
			{

				string strResponse = "";
				int intIndex = 0;
				string Query = "";
				string M = "";

				if (txt_ac_id.Text != "")
				{ // added MSW = 7/3/24


					strOwner = modCommon.AircraftLocked(Convert.ToInt32(Double.Parse(txt_ac_id.Text)), tmp_ac_journ_id);

					if (strOwner == Convert.ToString(modAdminCommon.snp_User["user_id"]))
					{
						if (!DeletedHistory && modAdminCommon.gbl_Aircraft_ID > 0)
						{
							if (CheckForAnyChanges())
							{
								M = StringsHelper.Replace(RememberWhatChanged, Environment.NewLine, "  ", 1, -1, CompareMethod.Binary);
								modStatusBar.Update_Status_Bar(modAdminCommon.SB, M, Color.Red);
								Application.DoEvents();
								strResponse = ((int) MessageBox.Show("Do You Want to Save Changes?", "Aircraft Save Changes", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question)).ToString();
								Application.DoEvents();

								if (strResponse == ((int) System.Windows.Forms.DialogResult.Cancel).ToString())
								{
									AnsweredCancel = true;
									modAdminCommon.ADO_Transaction("RollbackTrans");

									intIndex = 0;


									while((intIndex < adoAircraftRecordset.FieldsMetadata.Count))
									{
										adoAircraftRecordset[intIndex] = adoAircraftRecordset.GetField(intIndex).OriginalValue;
										intIndex++;
									};

									this.Cursor = CursorHelper.CursorDefault;
									return;
								}

								if (strResponse == ((int) System.Windows.Forms.DialogResult.Yes).ToString())
								{
									intIndex = 0;


									while((intIndex < adoAircraftRecordset.FieldsMetadata.Count))
									{
										adoAircraftRecordset[intIndex] = adoAircraftRecordset.GetField(intIndex).OriginalValue;
										intIndex++;
									};
									cmd_Save_Click(cmd_Save, new EventArgs());
								} //strResponse = vbYes

								if (strResponse == ((int) System.Windows.Forms.DialogResult.No).ToString())
								{

									if (Model_Change_Journ_ID > 0)
									{
										Query = $"DELETE FROM Journal WHERE journ_id = {Model_Change_Journ_ID.ToString()}";
										DbCommand TempCommand = null;
										TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
										UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
										TempCommand.CommandText = Query;
										UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
										TempCommand.ExecuteNonQuery(); //6/10/04 aey
									}

									if (Serial_Number_Change_Journ_ID > 0)
									{
										Query = $"DELETE FROM Journal WHERE journ_id = {Serial_Number_Change_Journ_ID.ToString()}";
										DbCommand TempCommand_2 = null;
										TempCommand_2 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
										UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
										TempCommand_2.CommandText = Query;
										UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
										TempCommand_2.ExecuteNonQuery(); //6/10/04 aey
									}

									modAdminCommon.ADO_Transaction("RollbackTrans");

									intIndex = 0;


									while((intIndex < adoAircraftRecordset.FieldsMetadata.Count))
									{
										adoAircraftRecordset[intIndex] = adoAircraftRecordset.GetField(intIndex).OriginalValue;
										intIndex++;
									};

									this.Cursor = CursorHelper.CursorDefault;
								} //strResponse = vbNo

							} // CheckForAnyChanges

						} //Not DeletedHistory And gbl_Aircraft_ID > 0

					} // (strOwner = snp_User!user_id)

				}

				modStatusBar.Clear_Status_Bar(modAdminCommon.SB);

				snp_AircraftContacts = null;
				ContactRecordsetFilled = false;

				snp_Journal = null;

				snp_AircraftAvionics = null;

				snp_Aircraft_Certified = null;

				snp_Aircraft_FAA = null;

				snp_Aircraft_Model = null;

				snp_Inspect_Journal = null;

				snp_Damage_Journal = null;

				snp_History = null;
			}
			catch (System.Exception excep)
			{

				MessageBox.Show($"Error Unload_Aircraft_Form: {excep.Message}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
			}

		} // Unload_Aircraft_Form

		private void Display_Company_Contact()
		{
			//******************************************************************************************
			//
			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO DISPLAY THE COMPANY AND/OR CONTACT
			//          FOR A REFERENCE RECORD CLICKED ON BY THE USER IN THE AIRCRAFT
			//          COMPANY RELATIONSHIP GRID.
			//
			//******************************************************************************************

			string Error_Note = "";
			try
			{ // additional string for identifying specific error
				string Query = "";
				string strLock = "";
				string temp_type = "";

				Error_Note = "Init";
				if (adoAircraftRecordset.State == ConnectionState.Closed)
				{
					//The recordset is closed (we went to another form??)
					return;
				}

				search_on("Getting Company Info...");

				// *************************************************************
				// POSITION THE SNAPSHOT IN THE SAME SPOT AS THE GRID SELECTION
				Error_Note = ">Selecting Aircraft Contact";
				Select_Aircraft_Contact();

				if (!ContactRecordsetFilled)
				{ //9/29/06 mjm
					return;
				}

				// ************************************************************************
				// CLEAR THE COMPANY AND CONTACT LIST BOXES IF NO REFERENCES ARE SELECTED
				Error_Note = ">rs open?";

				if (snp_AircraftContacts.State == ConnectionState.Closed)
				{
					lst_Company.Items.Clear();
					lst_Contact.Items.Clear();
					search_off();
					return;
				}

				Error_Note = ">bof and eof";

				if (snp_AircraftContacts.BOF || snp_AircraftContacts.EOF)
				{ //and to or 7/19/04 aey
					lst_Company.Items.Clear();
					lst_Contact.Items.Clear();
					search_off();
					return;
				}
				else
				{
					// snp_AircraftContacts.MoveFirst   'added 7/19/04 aey
				}

				// ******************************************
				// DISABLE THE CLEAR EXCLUSIVE COMMAND BUTTON
				cmd_Clear_Exclusive_Confirmation_Company.Enabled = false;


				// ***********************************************************************
				// IF THE COMPANY IS AWAITING DOCUMENTATION THEN
				// ENABLE THE MENU OPTION FOR UPDATING THE AWAITING DOCUMENTATION COMAPNY
				Error_Note = ">check for awaiting docs";
				mnuUpdateAwaitingDocs.Enabled = ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["comp_name"])}").Trim() == "Awaiting Documentation";

				// *************************************************
				// ONLY SHOW THE FINANCIAL DOCUMENTS COMMAND BUTTON
				// IF THE AIRCRAFT RECORD IS HISTORICAL
				cmdFinancialDocuments.Visible = false;
				if (tmp_ac_journ_id > 0)
				{
					cmdFinancialDocuments.Visible = true;
				}

				// ***************************************************************
				// CLEAR THE COMPANY LIST BOX AND DISPLAY COMPANY INFORMATION
				Error_Note = ">building company display";
				lst_Company.Items.Clear();

				if (($"{Convert.ToString(snp_AircraftContacts["cref_primary_poc_flag"])}{modGlobalVars.cEmptyString}").Trim() == "Y")
				{
					lst_Company.AddItem($"***** PRIMARY COMPANY-{($"{Convert.ToString(snp_AircraftContacts["actype_name"])} ").Trim()} *****");
				}
				else
				{
					lst_Company.AddItem($"***** COMPANY-{($"{Convert.ToString(snp_AircraftContacts["actype_name"])} ").Trim()} *****");
				}




				Error_Note = ">building company name";

				modCommon.Build_Company_NameAddress(frm_aircraft.DefInstance.lst_Company, Convert.ToInt32(snp_AircraftContacts["comp_id"]), Convert.ToInt32(snp_AircraftContacts["comp_journ_id"]));

				fill_research_contact_list(Convert.ToInt32(snp_AircraftContacts["comp_id"]), Convert.ToInt32(snp_AircraftContacts["comp_journ_id"]));


				Error_Note = ">Pgm reference";
				Query = $"Select * from program_reference WITH(NOLOCK) where pgref_comp_id = {Convert.ToInt32(snp_AircraftContacts["comp_id"]).ToString()}";

				if (modAdminCommon.Exist(Query))
				{
					lst_Company.AddItem(modGlobalVars.cEmptyString);
					lst_Company.AddItem("** Fractional Program **");
					lst_Company.AddItem(modCommon.DLookUp("prog_name", "aircraft_programs WITH(NOLOCK) inner join program_reference WITH(NOLOCK) on prog_id=pgref_prog_id ", $"pgref_comp_id={Convert.ToString(snp_AircraftContacts["comp_id"])} "));
				}

				// ***************************************************************
				// DISPLAY CONTACT INFORMATION
				Error_Note = $">building contact display {((int) chkShowAllContactInfo.CheckState).ToString()}";
				Error_Note = $">building contact display {((int) chkShowAllContactInfo.CheckState).ToString()} {Convert.ToString(snp_AircraftContacts["cref_contact_id"])}";

				if (Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_id"])}").Trim()) > 0)
				{
					search_on("Getting Contact Info...");
					// ********************************************************
					// PASS THE CONTACT PROCEDURE A TRUE IF THE USER DESIRES
					// INFORMATION INCLUDING ALL CONTACTS
					if (chkShowAllContactInfo.CheckState == CheckState.Checked)
					{
						modCommon.Build_Contact_Info(frm_aircraft.DefInstance.lst_Contact, Conversion.Val($"{Convert.ToString(snp_AircraftContacts["cref_contact_id"])}{modGlobalVars.cEmptyString}"), Conversion.Val($"{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}{modGlobalVars.cEmptyString}"), true);
					}
					else
					{
						modCommon.Build_Contact_Info(frm_aircraft.DefInstance.lst_Contact, Conversion.Val($"{Convert.ToString(snp_AircraftContacts["cref_contact_id"])}{modGlobalVars.cEmptyString}"), Conversion.Val($"{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}{modGlobalVars.cEmptyString}"), false);
					}
					lst_Contact.Visible = true;
				}
				else
				{

					if (chkShowAllContactInfo.CheckState == CheckState.Checked)
					{
						modCommon.Build_Contact_Info(frm_aircraft.DefInstance.lst_Contact, Conversion.Val($"{Convert.ToString(snp_AircraftContacts["cref_contact_id"])}{modGlobalVars.cEmptyString}"), Conversion.Val($"{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}{modGlobalVars.cEmptyString}"), true, Convert.ToInt32(snp_AircraftContacts["comp_id"]));
						lst_Contact.Visible = true;
					}
					else
					{
						lst_Contact.Visible = false;
					}

				}

				TurnOnOffCompanyButtons();

				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0)
				{
					DisableButtonsForHistorical();
				}

				cmd_Confirm_Company.Enabled = true; //aey 4/21/2006
				cmd_Confirm_Company.Text = "&Confirm Company";

				strLock = modCommon.CompanyLocked(Convert.ToInt32(snp_AircraftContacts["comp_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]));

				if (!((strLock == "False") || (strLock == Convert.ToString(modAdminCommon.snp_User["user_id"]))))
				{
					cmd_Confirm_Company.Enabled = false;
					cmd_Confirm_Company.Text = "Confirm Company/Locked";
				}

				search_off();
			}
			catch (System.Exception excep)
			{

				Error_Note = $"{excep.Message} - {Error_Note} {txt_ac_id.Text}";
				this.Cursor = CursorHelper.CursorDefault;
				modAdminCommon.Report_Error($"Display_Company_Contact_Error: [{Error_Note}] ");
				modStatusBar.Clear_Status_Bar(modAdminCommon.SB);
			}
		}

		private void DisableButtonsForHistorical(string PassedHist = "")
		{
			 //aey 2/17/05

			try
			{
				Select_Aircraft_Contact();
			}
			catch
			{
			}

			if (!ContactRecordsetFilled)
			{
				try
				{ //9/29/06 mjm
					return;
				}
				catch
				{
				}
			}

			if (PassedHist == "Show")
			{
				ErrorHandlingHelper.ResumeNext(

					() => {cmd_Primary.Enabled = true;}, 
					() => {cmd_Set_As_Exclusive.Enabled = true;}, 
					() => {cmd_Clear_Exclusive_Confirmation_Company.Enabled = true;}, 
					() => {cmd_Confirm_Company.Enabled = true;}, 
					() => {cmd_Remove_Association.Enabled = true;}, 
					() => {cmd_AssociateCompany.Enabled = true;}, 
					() => {txt_gen[0].Visible = true;}, 
					() => {txt_gen[1].Visible = true;});

			}
			else
			{

				if (!(snp_AircraftContacts.BOF && snp_AircraftContacts.EOF))
				{

					if (ErrorHandlingHelper.ResumeNextExpr<bool>(() => snp_AircraftContacts.EOF))
					{
						try
						{ //aey 2/17/05
							snp_AircraftContacts.MoveLast();
						}
						catch
						{
						}
					}

					if (ErrorHandlingHelper.ResumeNextExpr<bool>(() => snp_AircraftContacts.BOF))
					{
						try
						{ //aey 2/17/05
							snp_AircraftContacts.MoveFirst();
						}
						catch
						{
						}
					}

					switch(ErrorHandlingHelper.ResumeNextExpr<string>(() => ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}").Trim()))
					{
						case "95" : case "96" : case "69" : case "70" : case "91" : case "97" : case "12" : case "13" : case "57" : case "39" : case "51" : case "52" : 
							try
							{
								cmd_Remove_Association.Enabled = false;
							}
							catch
							{
							} 
							txt_gen[0].Visible = false; 
							txt_gen[1].Visible = false; 
							break;
						default:
							try
							{
								cmd_Remove_Association.Enabled = true;
							}
							catch
							{
							} 
							break;
					}
				}
				ErrorHandlingHelper.ResumeNext(
					() => {cmd_Primary.Enabled = false;}, 
					() => {cmd_Set_As_Exclusive.Enabled = false;}, 
					() => {cmd_Clear_Exclusive_Confirmation_Company.Enabled = false;}, 
					() => {cmd_Confirm_Company.Enabled = false;}, 
					() => {cmd_AssociateCompany.Enabled = true;});
			}

		}

		private void txt_ac_alt_ser_no_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_alt_ser_no, eventSender);
			ToolTipMain.SetToolTip(txt_ac_alt_ser_no[Index], txt_ac_alt_ser_no[Index].Text);
		}


		private void txt_ac_delivery_date_Leave(Object eventSender, EventArgs eventArgs)
		{

			if (!Information.IsDate(txt_ac_delivery_date.Text) && Strings.Len(txt_ac_delivery_date.Text.Trim()) > 0)
			{
				MessageBox.Show("Invalid Delivery Date", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
				txt_ac_delivery_date.Focus();
			}

		}

		private void Set_Exclusive_Company()
		{
			// MODIFIED 10/7/2010 - RTW - TO WRAP ENTIRE CHANGE TO EXCLUSIVE CONTACT
			string Query = "";
			string Query2 = "";
			string TempName = "";
			string strMsg = "";
			int tmp_Reference_ID = 0;

			try
			{

				//''''''''''''''''''''''''''''''''''''''''''''''''''''
				// First clear out anyone already marked "Exclusive" '
				//''''''''''''''''''''''''''''''''''''''''''''''''''''
				// GET THE SPECIFIC AIRCRAFT REFERENCE ID AND USE IT TO CLEAR THE EXCLUSIVE
				tmp_Reference_ID = Get_Exclusive_Reference_ID(Convert.ToInt32(Double.Parse(Convert.ToString(adoAircraftRecordset["ac_id"]))), Convert.ToInt32(Double.Parse(Convert.ToString(adoAircraftRecordset["ac_journ_id"]))));
				Query = "UPDATE Aircraft_Reference SET cref_primary_poc_flag = 'N'";
				Query = $"{Query} WHERE cref_id = {tmp_Reference_ID.ToString()}";
				//Query = Query & " AND cref_journ_id = " & CStr(adoAircraftRecordset!AC_Journ_id)
				//Query = Query & " AND cref_primary_poc_flag = 'X'"

				//Call LOCAL_ADO_DB.Execute(Query)

				Select_Aircraft_Contact();

				if (!ContactRecordsetFilled)
				{
					return;
				}

				// SET QUERY TO CLEAR THE EXCLUSIVE REFERENCE TO THE NEW ONE SELECTED
				Query2 = "UPDATE Aircraft_Reference SET cref_primary_poc_flag = 'X'";
				Query2 = $"{Query2} WHERE cref_id = {Convert.ToString(snp_AircraftContacts["cref_id"])}";
				//Query = Query & " WHERE cref_ac_id = " & CStr(adoAircraftRecordset!AC_ID)
				//Query = Query & " AND cref_journ_id = " & CStr(adoAircraftRecordset!AC_Journ_id)
				//Query = Query & " AND cref_comp_id = " & CStr(snp_AircraftContacts!Comp_id)
				//Query = Query & " AND cref_contact_type = '" & snp_AircraftContacts!cref_contact_type & "'"
				//Query = Query & " AND cref_contact_id = " & CStr(snp_AircraftContacts!cref_contact_id)

				modAdminCommon.ADO_Transaction("BeginTrans");

				// CLEAR THE CURRENT EXCLUSIVE CONTACT
				if (tmp_Reference_ID > 0)
				{
					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();
				}

				// SET THE NEW EXCLUSIVE CONTACT
				DbCommand TempCommand_2 = null;
				TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
				TempCommand_2.CommandText = Query2;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
				TempCommand_2.ExecuteNonQuery();


				if (Convert.ToDouble(snp_AircraftContacts["cref_contact_id"]) > 0)
				{
					TempName = modCommon.GetContactName(Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]), 0);
				}
				else
				{
					TempName = modCommon.GetCompanyName(Convert.ToInt32(snp_AircraftContacts["comp_id"]), 0);
				}

				modAdminCommon.Rec_Journal_Info.journ_subject = $"Exclusive Company set to {TempName}";
				modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
				modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
				modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
				modAdminCommon.Rec_Journal_Info.journ_comp_id = Convert.ToInt32(snp_AircraftContacts["comp_id"]);
				modAdminCommon.Rec_Journal_Info.journ_contact_id = Convert.ToInt32(snp_AircraftContacts["cref_contact_id"]);
				modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
				modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
				modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
				modAdminCommon.Rec_Journal_Info.journ_status = "A";

				if (!(frm_Journal.DefInstance.Commit_Journal_Entry() > 0))
				{
					throw new Exception();
				}

				modAdminCommon.ADO_Transaction("CommitTrans");

				Fill_Aircraft_Contact_Grid();
				Fill_Aircraft_Journal_Grid();
			}
			catch (System.Exception excep)
			{

				MessageBox.Show("The journal entry was not inserted.", "Aircraft : Insert Exclusive Error", MessageBoxButtons.OK, MessageBoxIcon.Information);
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Set_Exclusive_Company_Error: {Information.Err().Number.ToString()} {excep.Message}");
				modAdminCommon.ADO_Transaction("RollbackTrans");

				return;
			}


		}

		private void Clear_Exclusive_Company()
		{
			string Query = "";

			try
			{

				if (Total_Exclusive == 1)
				{

					if (MessageBox.Show("Do You Want to Remove Aircraft from Exclusive?", "Aircraft: Remove Exclusive", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
					{

						txt_exclusive_verify_date.Text = modGlobalVars.cEmptyString;
						txt_exclusive_verify_date.Visible = false;
						// Exclusive Flag
						chkArray[chkExclusiveFlag_INDEX].CheckState = CheckState.Unchecked;
						chkArray[chkExclusiveFlag_INDEX].Visible = false;
						// Exclusive Expiration
						chkArray[chkExclusiveExp_INDEX].CheckState = CheckState.Unchecked;
						chkArray[chkExclusiveExp_INDEX].Visible = false;
						lbl_gen[11].Visible = false;

					}
					else
					{
						return;
					}
				}

				Query = "UPDATE Aircraft_Reference SET cref_primary_poc_flag = 'N'";
				Query = $"{Query} WHERE cref_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
				Query = $"{Query} AND cref_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";
				Query = $"{Query} AND cref_comp_id = {Convert.ToString(snp_AircraftContacts["comp_id"])}";
				Query = $"{Query} AND cref_contact_type = '{Convert.ToString(snp_AircraftContacts["cref_contact_type"])}'";
				Query = $"{Query} AND cref_contact_id = {Convert.ToString(snp_AircraftContacts["cref_contact_id"])}";
				Query = $"{Query} AND cref_primary_poc_flag = 'X'";

				modAdminCommon.ADO_Transaction("BeginTrans");

				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();

				modAdminCommon.ADO_Transaction("CommitTrans");

				Fill_Aircraft_Contact_Grid();
			}
			catch
			{
			}



			//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
			modAdminCommon.Report_Error($"Clear_Exclusive_Company_Error: {Information.Err().Number.ToString()} {Information.Err().Description}");
			modAdminCommon.ADO_Transaction("RollbackTrans");

		}

		public void Fill_Aircraft_Feature_Grid()
		{
			//******************************************************************************************
			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO FILL A GRID OF
			// FEATURE CODES FOR A GIVEN AIRCRAFT
			//
			// RTW - 4/13/2004 - MODIFIED TO INDICATE IF FEATURE CODES ARE AUTO GENERATED
			// RTW - 4/14/2004 - MODIFIED TO USE LOCAL ADO AND ADDED COLUMN TO INDICATE CHANGE
			//******************************************************************************************

			try
			{

				ADORecordSetHelper ado_ACKeyFeature = new ADORecordSetHelper();
				string Query = "";
				string cellcolor = "";
				string AutoType = ""; // INDICATES WHETHER THE AUTOMATED MAINTENANCE TYPE IS BASED ON RULES R STANDARD EQUIPMENT
				int lCnt1 = 0;

				grd_AircraftKeyFeatures.Clear();
				grd_AircraftKeyFeatures.BorderStyle = BorderStyle.None;
				grd_AircraftKeyFeatures.Visible = false;
				grd_AircraftKeyFeatures.Enabled = false;
				grd_AircraftKeyFeatures.Redraw = false;

				bKeyFeaturesChanged = false;

				grd_AircraftKeyFeatures.ColumnsCount = 5;
				grd_AircraftKeyFeatures.RowsCount = 2;

				grd_AircraftKeyFeatures.FixedRows = 1;
				grd_AircraftKeyFeatures.FixedColumns = 0;

				grd_AircraftKeyFeatures.CurrentRowIndex = 0;
				grd_AircraftKeyFeatures.CurrentColumnIndex = 0;

				// KEY FEATURE SEQUENCE NUMBER
				grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_AircraftKeyFeatures.SetColumnWidth(grd_AircraftKeyFeatures.CurrentColumnIndex, 30);
				grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Seq";

				// KEY FEATURE STATUS
				grd_AircraftKeyFeatures.CurrentColumnIndex = 1;
				grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_AircraftKeyFeatures.SetColumnWidth(grd_AircraftKeyFeatures.CurrentColumnIndex, 60);
				grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Status";

				// KEY FEATURE CODE
				grd_AircraftKeyFeatures.CurrentColumnIndex = 2;
				grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_AircraftKeyFeatures.SetColumnWidth(grd_AircraftKeyFeatures.CurrentColumnIndex, 40);
				grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Code";

				// KEY FEATURE GRID CHANGE STATUS
				grd_AircraftKeyFeatures.CurrentColumnIndex = 3;
				grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_AircraftKeyFeatures.SetColumnWidth(grd_AircraftKeyFeatures.CurrentColumnIndex, 53);
				grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Change";


				// KEY FEATURE GRID CHANGE STATUS
				grd_AircraftKeyFeatures.CurrentColumnIndex = 4;
				grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_AircraftKeyFeatures.SetColumnWidth(grd_AircraftKeyFeatures.CurrentColumnIndex, 67);
				grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Type";

				//'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
				// Need to change the select based on Current (journ_id = 0) or
				// historical (journ_id > 0)
				//'''''''''''''''''''''''''''''''''''''''''''''''''
				Query = "SELECT Aircraft_Key_Feature.*, kfeat_auto_generate_flag";
				//  Query = Query & " FROM Aircraft_Key_Feature WITH(NOLOCK), Key_Feature WITH(NOLOCK), Aircraft_Model_Key_Feature WITH(NOLOCK)"

				Query = $"{Query} FROM Aircraft_Key_Feature WITH(NOLOCK) ";
				Query = $"{Query} inner join Key_Feature WITH(NOLOCK) on kfeat_Code = afeat_feature_code ";
				Query = $"{Query} left outer join  Aircraft_Model_Key_Feature WITH(NOLOCK) on afeat_feature_code = amfeat_feature_code ";

				if (cbo_amod_make_name.SelectedIndex > -1)
				{
					Query = $"{Query} AND amfeat_amod_id = {cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex).ToString()}";
				}
				else
				{
					Query = $"{Query} AND amfeat_amod_id = {Convert.ToString(snp_Aircraft_Model["amod_id"])}";
				}


				Query = $"{Query} WHERE afeat_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";

				if (bolRetrieveSpecs)
				{
					Query = $"{Query} AND afeat_journ_id = {SpecsJournID.ToString()}";
				}
				else
				{
					Query = $"{Query} AND afeat_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";
				}

				//    Query = Query & " AND kfeat_Code = afeat_feature_code AND afeat_feature_code = amfeat_feature_code"
				//
				//    If cbo_amod_make_name.ListIndex > -1 Then
				//        Query = Query & " AND amfeat_amod_id = " & cbo_amod_make_name.ItemData(cbo_amod_make_name.ListIndex)
				//    Else
				//        Query = Query & " AND amfeat_amod_id = " & CStr(snp_Aircraft_Model!amod_id)
				//    End If

				Query = $"{Query} ORDER BY afeat_seq_no, afeat_feature_code";

				ado_ACKeyFeature.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(ado_ACKeyFeature.BOF && ado_ACKeyFeature.EOF))
				{

					grd_AircraftKeyFeatures.CurrentRowIndex = 1;

					lCnt1 = 0;


					while(!ado_ACKeyFeature.EOF)
					{



						// DETERMINE HOW TO COLOR THE GRID ROW
						grd_AircraftKeyFeatures.CurrentColumnIndex = 1;

						cellcolor = modAdminCommon.NoColor;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ACKeyFeature["afeat_status_flag"]))
						{
							if ((Convert.ToString(ado_ACKeyFeature["afeat_status_flag"]).Trim().ToUpper() == "U" || Convert.ToString(ado_ACKeyFeature["afeat_status_flag"]).Trim() == modGlobalVars.cEmptyString) && Convert.ToInt32(Conversion.Val($"{Convert.ToString(adoAircraftRecordset["ac_lifecycle_stage"])}")) != 4)
							{
								cellcolor = modAdminCommon.ConfirmColor;
							}
						}

						// GREY OUT THE GRID LINE OF THE FEATURE CODE IS AUTO GENERATED
						// OR IF THE KEY FEATURE IS CONSIDERED STANDARD EQUIPMENT
						// SO THEREFORE THE USER MAY NOT EDIT

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ACKeyFeature["kfeat_auto_generate_flag"]) && !Convert.IsDBNull(ado_ACKeyFeature["afeat_status_flag"]))
						{
							if (Convert.ToString(ado_ACKeyFeature["kfeat_auto_generate_flag"]).Trim() != modGlobalVars.cEmptyString && Convert.ToString(ado_ACKeyFeature["afeat_status_flag"]).Trim() != modGlobalVars.cEmptyString)
							{
								if (Convert.ToString(ado_ACKeyFeature["kfeat_auto_generate_flag"]).Trim().ToUpper() == "Y" && Convert.ToString(ado_ACKeyFeature["afeat_status_flag"]).Trim().ToUpper() == "Y")
								{

									cellcolor = modAdminCommon.InactiveColor;
								}
							}
						}

						AutoType = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ACKeyFeature["kfeat_auto_generate_flag"]))
						{
							if (Convert.ToString(ado_ACKeyFeature["kfeat_auto_generate_flag"]).Trim() != modGlobalVars.cEmptyString)
							{
								if (Convert.ToString(ado_ACKeyFeature["kfeat_auto_generate_flag"]).Trim().ToUpper() == "Y")
								{
									AutoType = "ENTRY";
								}
							}
						}

						grd_AircraftKeyFeatures.CurrentColumnIndex = 2;
						if (modAdminCommon.Key_Feature_Standard(Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToString(ado_ACKeyFeature["afeat_feature_code"]).Trim()))
						{
							cellcolor = modAdminCommon.InactiveColor;
							AutoType = "STANDARD";
						}

						// DISPLAY THE FEATURE CODE SEQUENCE NUMBER
						grd_AircraftKeyFeatures.CurrentColumnIndex = 0;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ACKeyFeature["afeat_seq_no"]))
						{ // added MSW - 6/13/23
							grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = Convert.ToString(ado_ACKeyFeature["afeat_seq_no"]);
						}
						else
						{
							grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = 0;
						}

						grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						// DISPLAY THE FEATURE CODE STATUS FLAG VALUE
						grd_AircraftKeyFeatures.CurrentColumnIndex = 1;
						grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ACKeyFeature["afeat_status_flag"]))
						{

							if (Convert.ToString(ado_ACKeyFeature["afeat_status_flag"]).Trim().ToUpper() == "Y")
							{
								grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Yes";
							}
							if (Convert.ToString(ado_ACKeyFeature["afeat_status_flag"]).Trim().ToUpper() == "N")
							{
								grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "No";
							}
							if (Convert.ToString(ado_ACKeyFeature["afeat_status_flag"]).Trim().ToUpper() == "I")
							{
								grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Incident";
							}
							if (Convert.ToString(ado_ACKeyFeature["afeat_status_flag"]).Trim().ToUpper() == "A")
							{
								grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Accident";
							}
							if (Convert.ToString(ado_ACKeyFeature["afeat_status_flag"]).Trim().ToUpper() == "U" || Convert.ToString(ado_ACKeyFeature["afeat_status_flag"]).Trim() == modGlobalVars.cEmptyString)
							{
								grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Unknown";
							}
						}
						else
						{
							grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Unknown";
						}

						if (Convert.ToString(ado_ACKeyFeature["afeat_feature_code"]).Trim().ToUpper() == "DAM")
						{
							cbo_dam.Items.Clear();
							cbo_dam.AddItem("Yes");
							cbo_dam.AddItem("No");
							cbo_dam.AddItem("Incident");
							cbo_dam.AddItem("Accident");
							cbo_dam.AddItem("Unknown");

							cbo_dam.Text = grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString();
						}

						// DISPLAY THE FEATURE CODE TO THE GRID
						grd_AircraftKeyFeatures.CurrentColumnIndex = 2;
						
						grd_AircraftKeyFeatures.ColAlignment[2] = DataGridViewContentAlignment.NotSet;
						grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = Convert.ToString(ado_ACKeyFeature["afeat_feature_code"]).Trim().ToUpper();
						grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						// DISPLAY A BLANK FOR THE CHANGE VALUE ON LOAD
						grd_AircraftKeyFeatures.CurrentColumnIndex = 3;
						
						grd_AircraftKeyFeatures.ColAlignment[3] = DataGridViewContentAlignment.NotSet;
						grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						if (cellcolor == modAdminCommon.InactiveColor || Convert.ToString(ado_ACKeyFeature["kfeat_auto_generate_flag"]).Trim().ToUpper() == "Y")
						{
							grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "AUTO";
						}

						// DISPLAY A TYPE OF AUTO GENERATE
						grd_AircraftKeyFeatures.CurrentColumnIndex = 4;
						
						grd_AircraftKeyFeatures.ColAlignment[4] = DataGridViewContentAlignment.NotSet;
						grd_AircraftKeyFeatures.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = AutoType;

						ado_ACKeyFeature.MoveNext();

						grd_AircraftKeyFeatures.RowsCount++;
						grd_AircraftKeyFeatures.CurrentRowIndex++;

						lCnt1++;
						if (lCnt1 == 8)
						{
							grd_AircraftKeyFeatures.Visible = true;
							grd_AircraftKeyFeatures.Enabled = true;
							grd_AircraftKeyFeatures.Redraw = true;
							Application.DoEvents();
							grd_AircraftKeyFeatures.Enabled = false;
							grd_AircraftKeyFeatures.Redraw = false;
						}

					};

					grd_AircraftKeyFeatures.RowsCount--;

					grd_AircraftKeyFeatures.Enabled = true;

				}
				else
				{

					grd_AircraftKeyFeatures.FixedRows = 0;
					grd_AircraftKeyFeatures.RowsCount = 1;
					grd_AircraftKeyFeatures.CurrentRowIndex = 0;
					grd_AircraftKeyFeatures.Enabled = false;

				} // If Not (ado_ACKeyFeature.BOF And ado_ACKeyFeature.EOF) Then

				// CLOSE RECORSET
				ado_ACKeyFeature.Close();

				grd_AircraftKeyFeatures.Visible = true;
				grd_AircraftKeyFeatures.Redraw = true;

				grd_AircraftKeyFeatures.CurrentColumnIndex = 0;

				ado_ACKeyFeature = null;
			}
			catch (System.Exception excep)
			{

				search_off();
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Fill_Aircraft_Feature_Grid_Error: {Information.Err().Number.ToString()} {excep.Message}");
				return;
			}

		}

		private void Display_Keyfeature_Help()
		{
			//
			//   Purpose: The purpose of this procedure is to display the bubble help
			//            for the feature code the user clicked on (bottom left of main tab)
			//   Last Modified On: 4/15/2004
			//   Last Modified By: Rick Wanner
			//
			// ******************************************************************

			ADORecordSetHelper FeatureLookup = null;
			string temp_TopCaption = "";
			string temp_BottomCaption = "";
			string Query = "";

			try
			{

				Query = $"SELECT kfeat_name, kfeat_description, kfeat_research_notes FROM Key_Feature WITH(NOLOCK) WHERE kfeat_code = '{grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim()}'";
				FeatureLookup = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(FeatureLookup.Fields) && !(FeatureLookup.BOF && FeatureLookup.EOF))
				{
					temp_TopCaption = $"{($"{Convert.ToString(FeatureLookup["kfeat_name"])} ").Trim()}{Environment.NewLine}{($"{Convert.ToString(FeatureLookup["kfeat_description"])} ").Trim()}{Environment.NewLine}";
					temp_BottomCaption = $"{($"{Convert.ToString(FeatureLookup["kfeat_research_notes"])} ").Trim()}{Environment.NewLine}";
					FeatureLookup.Close();
				}

				FeatureLookup = null;

				frm_Tips.DefInstance.TopCaption = temp_TopCaption;
				frm_Tips.DefInstance.BottomCaption = temp_BottomCaption;
				frm_Tips.DefInstance.ShowDialog();
			}
			catch
			{

				// CLOSE RECORSET
				this.Cursor = CursorHelper.CursorDefault;
				modAdminCommon.Report_Error($"Display_Keyfeature_Help_Error: [{ErrorMsgInfo}] ");
			}

		}

		private void Display_Key_Feature()
		{
			//
			//   Purpose: The purpose of this procedure is to display the information
			//            about the feature code the user just clicked on. It fills
			//            the combo box and positions it on the current value (lower
			//            left on the main tab)
			//   Last Modified On: 9/18/2002
			//   Last Modified By: Keith Humpf
			//   Modified 6/28/04 by aey - drop downbox choices
			//******************************************************************************************

			try
			{
				//>>>>>> Per 6/28/04 eMail from Lee
				//everyone gets a 'No' & 'Unknown'
				// for type DAM - damages, managers get "Yes", "Accident", "Incident", "No" and "Unknown".
				// for type DAM, researchers get "no" & "unknown"
				//otherwise everyone gets a "Yes"

				cbo_Feature_Options.Items.Clear();

				// IF IT IS NOT AUTO THEN USER CAN SELECT A YES
				grd_AircraftKeyFeatures.CurrentColumnIndex = 3;

				//and <> UPDATE added 12/30/05 aey
				if (grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim() != "AUTO" && grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim() != "UPDATE")
				{
					grd_AircraftKeyFeatures.CurrentColumnIndex = 2; //6/28/04 aey
					if (grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().ToUpper() != "DAM")
					{
						cbo_Feature_Options.AddItem("Yes");
					}
					else if ((($"{Convert.ToString(modAdminCommon.snp_User["user_type"])} ").Trim() == "Research Manager") || (($"{Convert.ToString(modAdminCommon.snp_User["user_type"])} ").Trim() == "Administrator"))
					{ 
						cbo_Feature_Options.AddItem("Yes");
					}
				}

				cbo_Feature_Options.AddItem("No");

				if ((($"{Convert.ToString(modAdminCommon.snp_User["user_type"])} ").Trim() == "Research Manager") || (($"{Convert.ToString(modAdminCommon.snp_User["user_type"])} ").Trim() == "Administrator"))
				{
					grd_AircraftKeyFeatures.CurrentColumnIndex = 2; //6/11/04 aey
					if (grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().ToUpper() == "DAM")
					{
						cbo_Feature_Options.AddItem("Incident");
						cbo_Feature_Options.AddItem("Accident");
					}
				}

				cbo_Feature_Options.AddItem("Unknown");

				grd_AircraftKeyFeatures.CurrentColumnIndex = 1;
				cbo_Feature_Options.Text = grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString();
				grd_AircraftKeyFeatures.CurrentColumnIndex = 2;
				txt_Kfeat_Update_Code.Text = grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString();
				gbl_status = cbo_Feature_Options.Text;

				cbo_Feature_Options.Visible = true;
				txt_Kfeat_Update_Code.Visible = true;

				grd_AircraftKeyFeatures.CurrentColumnIndex = 0;
			}
			catch
			{

				this.Cursor = CursorHelper.CursorDefault;
				modAdminCommon.Report_Error($"Display_Key_Feature_Error: [{ErrorMsgInfo}] ");
			}

		}



		private void Fill_Aircraft_Avionics_Grid()
		{
			int I = 0;
			string strMsg = "";
			try
			{
				string Query = "";
				string temp_color = "";

				strMsg = "init";
				// bAvionicsGridLoaded = True
				I = 0;
				grd_AircraftAvionics.Clear();
				grd_AircraftAvionics.BorderStyle = BorderStyle.None;
				arrAvionics = Array.CreateInstance(typeof(string), new int[]{1}, new int[]{0});

				//bAvionicsChanged = False

				grd_AircraftAvionics.ColumnsCount = 2;

				grd_AircraftAvionics.RowsCount = 1;
				grd_AircraftAvionics.CurrentColumnIndex = 0;
				grd_AircraftAvionics.CurrentRowIndex = 0;
				grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].Value = "Avionics Name";
				grd_AircraftAvionics.ColAlignment[0] = DataGridViewContentAlignment.TopLeft;
				grd_AircraftAvionics.CellBackColor = BackColor;

				grd_AircraftAvionics.CurrentColumnIndex = 1;
				grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].Value = "Avionics Description";
				grd_AircraftAvionics.ColAlignment[1] = DataGridViewContentAlignment.TopLeft;
				grd_AircraftAvionics.CellBackColor = BackColor;


				grd_AircraftAvionics.SetColumnWidth(0, 133);
				grd_AircraftAvionics.SetColumnWidth(1, 320);

				strMsg = "query";
				Query = "SELECT * FROM Aircraft_Avionics";
				Query = $"{Query} left outer join Aircraft with (NOLOCK) on ac_journ_id = 0 and ac_id = av_ac_id ";
				Query = $"{Query} left outer join Aircraft_Model_Avionics with (NOLOCK) on amav_amod_id = ac_amod_id and av_ac_journ_id = 0  and amav_name = av_name  ";

				Query = $"{Query} WHERE av_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";

				if (bolRetrieveSpecs)
				{
					Query = $"{Query} and av_ac_journ_id = {SpecsJournID.ToString()}";
				}
				else
				{
					Query = $"{Query} and av_ac_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";
				}

				strMsg = "set ado";
				snp_AircraftAvionics = null;
				snp_AircraftAvionics = new ADORecordSetHelper();

				strMsg = "open";
				snp_AircraftAvionics.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
				strMsg = "if eof";
				if (!(snp_AircraftAvionics.BOF && snp_AircraftAvionics.EOF))
				{
					snp_AircraftAvionics.MoveLast();
					snp_AircraftAvionics.MoveFirst();
					strMsg = "movefirst";
					arrAvionics = Array.CreateInstance(typeof(string), new int[]{snp_AircraftAvionics.RecordCount + 1, 3}, new int[]{0, 0});
					I = 1;

					while(!snp_AircraftAvionics.EOF)
					{



						grd_AircraftAvionics.RowsCount++;
						grd_AircraftAvionics.CurrentRowIndex++;
						grd_AircraftAvionics.CurrentColumnIndex = 0;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_AircraftAvionics["amav_id"]))
						{
							grd_AircraftAvionics.CellForeColor = Color.FromArgb(255, 128, 128);
						}


						grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].Value = ($"{Convert.ToString(snp_AircraftAvionics["av_name"])} ").Trim();

						grd_AircraftAvionics.CurrentColumnIndex = 1;
						grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].Value = ($"{Convert.ToString(snp_AircraftAvionics["av_description"])} ").Trim();
						grd_AircraftAvionics.CellAlignment = DataGridViewContentAlignment.TopLeft;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_AircraftAvionics["amav_id"]))
						{
							grd_AircraftAvionics.CellForeColor = Color.FromArgb(255, 128, 128);
							//            Else
							//                grd_AircraftAvionics.BackColor = &HFF8080
						}


						arrAvionics.SetValue(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftAvionics["av_name"])}").Trim(), I, 1);
						arrAvionics.SetValue(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_AircraftAvionics["av_description"])}").Trim(), I, 2);



						I++;
						snp_AircraftAvionics.MoveNext();
					};
					grd_AircraftAvionics.CurrentRowIndex = 0;
				}

				strMsg = "clean up";
				grd_AircraftAvionics.FixedRows = 0;
				grd_AircraftAvionics.FixedColumns = 0;

				grd_AircraftAvionics.CurrentRowIndex = 0;
				for (I = 0; I <= 1; I++)
				{
					grd_AircraftAvionics.CurrentColumnIndex = I;
					grd_AircraftAvionics.CellBackColor = BackColor;
				}

				tab_avionics_loaded = true;
				grd_AircraftAvionics.Redraw = true;
				search_off();
			}
			catch (System.Exception excep)
			{

				this.Cursor = CursorHelper.CursorDefault;
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Fill_Aircraft_Avionics_Grid_Error: acid:{modAdminCommon.gbl_Aircraft_ID.ToString()},I:{I.ToString()} {strMsg} {Information.Err().Number.ToString()} {excep.Message}");
			}

		}

		private void Select_Aircraft_Avionics()
		{
			try
			{

				if (grd_AircraftAvionics.CurrentRowIndex > 0)
				{

					grd_AircraftAvionics.CurrentColumnIndex = 0;

					int tempForEndVar = lst_Avionics.Items.Count - 1;
					for (int I = 0; I <= tempForEndVar; I++)
					{
						if (lst_Avionics.GetListItem(I).Trim().ToLower() == grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim().ToLower())
						{
							ListBoxHelper.SetSelectedIndex(lst_Avionics, I);
							break;
						}
					}

					grd_AircraftAvionics.CurrentColumnIndex = 1;

					modFillAircraftControls.Fill_Avionics_Lookup(cbo_av_description, lst_Avionics.Text.Trim(), grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim(), Convert.ToInt32(snp_Aircraft_Model["amod_id"]), Lock_Avionics);

					Temp_Avionics = grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim();

					cmd_Av_Add[1].Visible = true; // update
					cmd_Av_Add[2].Visible = true; // delete
					cmd_Av_Add[3].Visible = true; // cancel

					pnl_Av.Visible = true;
					lst_Avionics.Enabled = false;

				}
			}
			catch
			{

				this.Cursor = CursorHelper.CursorDefault;
				modAdminCommon.Report_Error("Select_Aircraft_Avionics_Error: ");
				modStatusBar.Clear_Status_Bar(modAdminCommon.SB);
			}

		}

		private void Check_Aircraft_Model_Avionics(int amod_id, string in_avion_name)
		{
			try
			{
				int I = 0;
				string Query = "";
				ADORecordSetHelper snp_FieldValues = new ADORecordSetHelper();


				lbl_gen[48].Text = "";

				Query = " select (amav_name + ': ' + amav_notes + ' Base configured with ' + amav_default_description) as desc1 ";
				Query = $"{Query} from Aircraft_Model_Avionics with (NOLOCK) ";
				Query = $"{Query} where amav_amod_id = {amod_id.ToString()}  and amav_name = '{in_avion_name}' ";

				snp_FieldValues.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);


				if (!(snp_FieldValues.BOF && snp_FieldValues.EOF))
				{


					while(!snp_FieldValues.EOF)
					{

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_FieldValues["Desc1"]))
						{
							lbl_gen[48].Text = Convert.ToString(snp_FieldValues["Desc1"]);
						}
						else
						{
							lbl_gen[48].Text = "";
						}


						Lock_Avionics = true;

						snp_FieldValues.MoveNext();
					};
				}

				Application.DoEvents();
				Application.DoEvents();

				grd_Features[3].Visible = !Lock_Avionics;

				Application.DoEvents();
				Application.DoEvents();
			}
			catch
			{

				this.Cursor = CursorHelper.CursorDefault;
				modAdminCommon.Report_Error("Check_Aircraft_Model_Avionics_Error: ");
			}

		}

		private void Update_Avionics()
		{
			//******************************************************************************************
			//* Note: VBC id'd the following unreferenced items and handled them as described:         *
			//*                                                                                        *
			//* Local Variables (Removed)                                                              *
			//*  Query                                                                                 *
			//******************************************************************************************

			try
			{
				int RememberRow = 0;
				bool FoundOne = false;

				FoundOne = false;



				cbo_av_description.Text = modCommon.RemoveAllInvisibleChars(modCommon.RemoveAllSpecificCharacters(cbo_av_description.Text));

				// RTW - MODIFIED - 4/19/2011
				// UPDATED TO MAKE SURE THAT CAN NOT ENTER A BLANK DESCRIPTION FOR AVIONICS

				if (cbo_av_description.Text.Trim() == "")
				{
					MessageBox.Show($"User entered blank Avionics for {lst_Avionics.Text.Trim()}. Add Aborted", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					return;
				}
				if (RecordStat == "Add")
				{

					int tempForEndVar = grd_AircraftAvionics.RowsCount - 1;
					for (int I = 1; I <= tempForEndVar; I++)
					{
						grd_AircraftAvionics.CurrentColumnIndex = 0;
						grd_AircraftAvionics.CurrentRowIndex = I;
						if (lst_Avionics.Text.Trim().Substring(Math.Min(0, lst_Avionics.Text.Trim().Length), Math.Min(45, Math.Max(0, lst_Avionics.Text.Trim().Length))).ToLower() == grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim().Substring(Math.Min(0, grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim().Length), Math.Min(45, Math.Max(0, grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim().Length))).ToLower())
						{
							grd_AircraftAvionics.CurrentColumnIndex = 1;
							if (grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim().Substring(Math.Min(0, grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim().Length), Math.Min(75, Math.Max(0, grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim().Length))).ToLower() == cbo_av_description.Text.Trim().Substring(Math.Min(0, cbo_av_description.Text.Trim().Length), Math.Min(75, Math.Max(0, cbo_av_description.Text.Trim().Length))).ToLower())
							{
								MessageBox.Show("Can't Insert Duplicate Avionics.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
								FoundOne = true;
								break;
							}
						}
					}

					if (!FoundOne)
					{
						bAvionicsChanged = true;
						grd_AircraftAvionics.RowsCount++;
						grd_AircraftAvionics.CurrentRowIndex = grd_AircraftAvionics.RowsCount - 1;
						grd_AircraftAvionics.CurrentColumnIndex = 0;
						grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].Value = lst_Avionics.Text.Trim();
						grd_AircraftAvionics.set_RowData(grd_AircraftAvionics.CurrentRowIndex, 1);
						grd_AircraftAvionics.CurrentColumnIndex = 1;
						grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].Value = cbo_av_description.Text.Trim();
						grd_AircraftAvionics.Refresh();
					}

				}
				else
				{
					if (Temp_Avionics.Trim().ToLower() != cbo_av_description.Text.Trim().ToLower())
					{

						RememberRow = grd_AircraftAvionics.CurrentRowIndex;

						int tempForEndVar2 = grd_AircraftAvionics.RowsCount - 1;
						for (int I = 1; I <= tempForEndVar2; I++)
						{
							grd_AircraftAvionics.CurrentColumnIndex = 0;
							grd_AircraftAvionics.CurrentRowIndex = I;
							if (lst_Avionics.Text.Trim().Substring(Math.Min(0, lst_Avionics.Text.Trim().Length), Math.Min(45, Math.Max(0, lst_Avionics.Text.Trim().Length))).ToLower() == grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim().Substring(Math.Min(0, grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim().Length), Math.Min(45, Math.Max(0, grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim().Length))).ToLower())
							{
								grd_AircraftAvionics.CurrentColumnIndex = 1;
								if (grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim().Substring(Math.Min(0, grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim().Length), Math.Min(75, Math.Max(0, grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim().Length))).ToLower() == cbo_av_description.Text.Trim().Substring(Math.Min(0, cbo_av_description.Text.Trim().Length), Math.Min(75, Math.Max(0, cbo_av_description.Text.Trim().Length))).ToLower())
								{
									MessageBox.Show("Can't Insert Duplicate Avionics.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
									FoundOne = true;
									break;
								}
							}
						}

						if (!FoundOne)
						{
							grd_AircraftAvionics.CurrentRowIndex = RememberRow;
							grd_AircraftAvionics.CurrentColumnIndex = 1;
							bAvionicsChanged = true;
							grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].Value = cbo_av_description.Text.Trim();
							grd_AircraftAvionics.set_RowData(grd_AircraftAvionics.CurrentRowIndex, 1);
							grd_AircraftAvionics.Refresh();
						}
					}
				}
			}
			catch
			{

				MessageBox.Show("Update_Avionics_Error:", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
			}


		}

		private void Delete_Avionics()
		{

			bAvionicsChanged = true;
			grd_AircraftAvionics.RemoveItem(grd_AircraftAvionics.CurrentRowIndex);
			grd_AircraftAvionics.Refresh();

		}


		private void Save_Avionics()
		{
			//******************************************************************************************
			//******************************************************************************************

			string RememberFieldName = "";
			string errString = "";
			try
			{
				StringBuilder Query = new StringBuilder();

				errString = "Exist";

				if (bAvionicsChanged)
				{
					errString = "delete";
					Query = new StringBuilder("Delete from Aircraft_Avionics");
					Query.Append($" WHERE av_ac_id={Convert.ToString(adoAircraftRecordset["ac_id"])} ");
					Query.Append($"and av_ac_journ_id={Convert.ToString(adoAircraftRecordset["ac_journ_id"])} ");
					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = Query.ToString();
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery(); //aey 6/30/04
					//   End If

					errString = "insert";
					if (grd_AircraftAvionics.RowsCount <= 1)
					{ //aey 7/30/04
						errString = "No rows to insert";
						CheckForAvionicsDeleteTransmit();
						return;
					}

					int tempForEndVar = grd_AircraftAvionics.RowsCount - 1;
					for (int I = 1; I <= tempForEndVar; I++)
					{
						Query = new StringBuilder("insert into Aircraft_Avionics (av_ac_id,");
						Query.Append("av_ac_journ_id,");
						Query.Append("av_name,");
						Query.Append("av_description)");
						grd_AircraftAvionics.CurrentRowIndex = I;
						Query.Append($" values ({Convert.ToString(adoAircraftRecordset["ac_id"])},");
						Query.Append($"{Convert.ToString(adoAircraftRecordset["ac_journ_id"])},");
						grd_AircraftAvionics.CurrentColumnIndex = 0;
						Query.Append($"'{modAdminCommon.Fix_Quote(grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim()).Substring(0, Math.Min(45, modAdminCommon.Fix_Quote(grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim()).Length))}',");
						RememberFieldName = grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim();
						grd_AircraftAvionics.CurrentColumnIndex = 1;
						Query.Append($"'{modAdminCommon.Fix_Quote(grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim()).Substring(0, Math.Min(75, modAdminCommon.Fix_Quote(grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim()).Length))}')");
						DbCommand TempCommand_2 = null;
						TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
						TempCommand_2.CommandText = Query.ToString();
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
						TempCommand_2.ExecuteNonQuery(); //aey 6/30/04
						CheckForAvionicsTransmit(RememberFieldName, grd_AircraftAvionics[grd_AircraftAvionics.CurrentRowIndex, grd_AircraftAvionics.CurrentColumnIndex].FormattedValue.ToString().Trim());
					}

					errString = "transmit";
					CheckForAvionicsDeleteTransmit();

				}
				bAvionicsChanged = false;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				errString = $"{Information.Err().Number.ToString()} {errString} {excep.Message} {RememberFieldName}";
				modAdminCommon.Report_Error($"Save_Avionics_Error:{errString}");
			}
		}

		private void CheckForAvionicsTransmit(string PassedField, string PassedNewValue)
		{
			bool ReDimError = false;
			bool CheckForAvionicsTransmit_Error = false;

			bool FoundIt = false;
			try
			{
				CheckForAvionicsTransmit_Error = true;
				ReDimError = false;
				int tempForEndVar = 0;
				FoundIt = false;
				try
				{

					tempForEndVar = arrAvionics.GetUpperBound(0);
				}
				catch
				{
				}
				for (int I = 1; I <= tempForEndVar; I++)
				{
					if (ErrorHandlingHelper.ResumeNextExpr<bool>(() => ((string) arrAvionics.GetValue(I, 1)) == PassedField.Trim()))
					{
						if (ErrorHandlingHelper.ResumeNextExpr<bool>(() => ((string) arrAvionics.GetValue(I, 2)) == PassedNewValue.Trim()))
						{
							FoundIt = true;
							try
							{
								break;
							}
							catch
							{
							}
						}
					}
				}

				if (!FoundIt)
				{

					switch(ErrorHandlingHelper.ResumeNextExpr<string>(() => PassedField.Trim().ToLower()))
					{
						case "adf" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_adf";}); 
							 
							break;
						case "avionics package" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_avncs";}); 
							 
							break;
						case "altimeter" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_altimtr";}); 
							 
							break;
						case "flight director" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_fdir";}); 
							 
							break;
						case "radar altimeter" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_rdr_alt";}); 
							 
							break;
						case "autopilot" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_a_p";}); 
							 
							break;
						case "rnav" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_rnav";}); 
							 
							break;
						case "radar" : case "weather radar" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_radar";}); 
							 
							break;
						case "loran" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_loran";}); 
							 
							break;
						case "communication radios" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_comms";}); 
							 
							break;
						case "rmi" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_rmi";}); 
							 
							break;
						case "navigation radios" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_navs";}); 
							 
							break;
						case "hsi" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_hsi";}); 
							 
							break;
						case "dme" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_dme";}); 
							 
							break;
						case "compass" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_compass";}); 
							 
							break;
						case "flight phone" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_fphone";}); 
							 
							break;
						case "tpdr" : case "transponder" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_tpdr";}); 
							 
							break;
						case "hi frequency" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_hi_freq";}); 
							 
							break;
						case "lrn" : case "afis" : case "fms" : case "gps" : case "ins" : case "irs" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_lrn";}); 
							 
							break;
						case "efis" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_efis";}); 
							 
							break;
						case "stormscope" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_stormscope";}); 
							 
							break;
						case "tcas" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_tcas";}); 
							 
							break;
						case "cvr" : case "fdr" : 
							ErrorHandlingHelper.ResumeNext(

								() => {Transmit_Change_Flag = true;}, 

								() => {ReDimError = true;CheckForAvionicsTransmit_Error = false;}, 
								() => {arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});}, 
								() => {arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = "avionics_cvrfdr";}); 
							 
							break;
					}

				}
			}
			catch (Exception excep)
			{
				if (!ReDimError && !CheckForAvionicsTransmit_Error)
				{
					throw excep;
				}
				if (CheckForAvionicsTransmit_Error)
				{

					modAdminCommon.Report_Error($"CheckForAvionicsTransmit_Error: {excep.Message}");
					return;

				}
				if (ReDimError || CheckForAvionicsTransmit_Error)
				{

					arr_Transmit_Fields = new string[]{""};
					//UPGRADE_TODO: (1065) Error handling statement (Resume Next) could not be converted. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1065
					UpgradeHelpers.Helpers.NotUpgradedHelper.NotifyNotUpgradedElement("Resume Next Statement");

				}
			}

		}

		private void Display_APU_Maint_Plan_List()
		{

			//
			//   Purpose: The purpose of this procedure is to fill the apu maintenance plan
			//            combo box (in the lower right on the main tab)
			//   Last Modified On: 9/18/2002
			//   Last Modified By: Keith Humpf

			try
			{
				string Query = "";
				string Temp = "";
				ADORecordSetHelper snp_APU_Maint_Plan = new ADORecordSetHelper(); // Snapshot aey 7/23/04 converted to ado

				Query = "SELECT DISTINCT emp_code, emp_name FROM Engine_Maintenance_Program WITH(NOLOCK)";
				snp_APU_Maint_Plan.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				cbo_ac_apu_maint_prog.Items.Clear();

				if (!(snp_APU_Maint_Plan.BOF && snp_APU_Maint_Plan.EOF))
				{

					while(!snp_APU_Maint_Plan.EOF)
					{

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_APU_Maint_Plan["emp_name"]))
						{

							if (cbo_ac_engine_maint_prog.Text.Trim().ToUpper() != Convert.ToString(snp_APU_Maint_Plan["emp_name"]).Trim().ToUpper())
							{
								Temp = ($"{Convert.ToString(snp_APU_Maint_Plan["emp_code"])} {modGlobalVars.cHyphen}").Trim();
								Temp = $"{Temp} ({Convert.ToString(snp_APU_Maint_Plan["emp_name"]).Trim()})";
							}

							cbo_ac_apu_maint_prog.AddItem(Temp);

						}

						snp_APU_Maint_Plan.MoveNext();
					};
				}

				snp_APU_Maint_Plan.Close();
				snp_APU_Maint_Plan = null;
			}
			catch
			{

				this.Cursor = CursorHelper.CursorDefault;
				modAdminCommon.Report_Error($"Display_APU_Maint_Plan_List_Error: [{ErrorMsgInfo}] ");
			}

		}

		private void Fill_Aircraft_Certified_Grid()
		{
			try
			{

				string Query = "";

				bCertificationsChanged = false;

				grd_Aircraft_Certified.Clear();

				grd_Aircraft_Certified.ColumnsCount = 1;
				grd_Aircraft_Certified.RowsCount = 2;
				grd_Aircraft_Certified.BorderStyle = BorderStyle.None;

				grd_Aircraft_Certified.FixedColumns = 0;
				grd_Aircraft_Certified.FixedRows = 1;

				grd_Aircraft_Certified.CurrentColumnIndex = 0;
				grd_Aircraft_Certified.CurrentRowIndex = 0;

				grd_Aircraft_Certified.SetColumnWidth(0, 200);
				grd_Aircraft_Certified.CellBackColor = BackColor;
				grd_Aircraft_Certified[grd_Aircraft_Certified.CurrentRowIndex, grd_Aircraft_Certified.CurrentColumnIndex].Value = "Certification";

				Query = $"SELECT * FROM Aircraft_Certified WHERE accert_ac_id={Convert.ToString(adoAircraftRecordset["ac_id"])}";
				Query = $"{Query} AND accert_ac_journ_id={Convert.ToString(adoAircraftRecordset["ac_journ_id"])} ";

				snp_Aircraft_Certified = null;
				snp_Aircraft_Certified = new ADORecordSetHelper(); //aey 6/10/04

				snp_Aircraft_Certified.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(snp_Aircraft_Certified.BOF && snp_Aircraft_Certified.EOF))
				{

					grd_Aircraft_Certified.CurrentRowIndex = 1;


					while(!snp_Aircraft_Certified.EOF)
					{
						grd_Aircraft_Certified.CurrentColumnIndex = 0;
						grd_Aircraft_Certified[grd_Aircraft_Certified.CurrentRowIndex, grd_Aircraft_Certified.CurrentColumnIndex].Value = ($"{Convert.ToString(snp_Aircraft_Certified["accert_name"])} ").Trim();
						snp_Aircraft_Certified.MoveNext();

						grd_Aircraft_Certified.RowsCount++;
						grd_Aircraft_Certified.CurrentRowIndex++;

					};

				}

				grd_Aircraft_Certified.RowsCount--;

				if (grd_Aircraft_Certified.RowsCount == 1)
				{
					grd_Aircraft_Certified.CurrentColumnIndex = 0;
					grd_Aircraft_Certified.CurrentRowIndex = 0;
					grd_Aircraft_Certified[grd_Aircraft_Certified.CurrentRowIndex, grd_Aircraft_Certified.CurrentColumnIndex].Value = "None Found";
					grd_Aircraft_Certified.RowsCount = 1;
				}
				else
				{
					snp_Aircraft_Certified.MoveFirst();
				}

				grd_Aircraft_Certified.Redraw = true;
				tab_certifications_loaded = true;

				search_off();
			}
			catch (System.Exception excep)
			{

				this.Cursor = CursorHelper.CursorDefault;
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Fill_Aircraft_Certified_Grid_Error: ,ac:{Conversion.Str(modAdminCommon.gbl_Aircraft_ID)} {Information.Err().Number.ToString()} {excep.Message}");
			}

		}

		private void Update_Certification()
		{
			bool bCanAdd = true;

			// Check and see if this item is in the list alredy

			if (cbo_accert_name.Text.Trim() == modGlobalVars.cEmptyString)
			{
				return;
			}

			int tempForEndVar = grd_Aircraft_Certified.RowsCount - 1;
			for (int X = 1; X <= tempForEndVar; X++)
			{

				grd_Aircraft_Certified.CurrentRowIndex = X;
				grd_Aircraft_Certified.CurrentColumnIndex = 0;

				if (grd_Aircraft_Certified[grd_Aircraft_Certified.CurrentRowIndex, grd_Aircraft_Certified.CurrentColumnIndex].FormattedValue.ToString().Trim() == cbo_accert_name.Text.Trim())
				{
					bCanAdd = false;
				}

			}


			if (bCanAdd && Convert.ToString(grd_Aircraft_Certified[0, 0].Value) != "None Found" && grd_Aircraft_Certified.RowsCount > 1)
			{
				bCertificationsChanged = true;
				grd_Aircraft_Certified.RowsCount++;
				grd_Aircraft_Certified.CurrentRowIndex++;
				grd_Aircraft_Certified.CurrentColumnIndex = 0;
				grd_Aircraft_Certified[grd_Aircraft_Certified.CurrentRowIndex, grd_Aircraft_Certified.CurrentColumnIndex].Value = cbo_accert_name.Text.Trim();
				grd_Aircraft_Certified.Redraw = true;

			}
			else if (bCanAdd && (Convert.ToString(grd_Aircraft_Certified[0, 0].Value) == "None Found" || Convert.ToString(grd_Aircraft_Certified[0, 0].Value) == "Certification"))
			{ 

				bCertificationsChanged = true;
				grd_Aircraft_Certified.Clear();
				grd_Aircraft_Certified.ColumnsCount = 1;
				grd_Aircraft_Certified.CurrentColumnIndex = 0;
				grd_Aircraft_Certified.CurrentRowIndex = 0;
				grd_Aircraft_Certified.SetColumnWidth(0, 200);
				grd_Aircraft_Certified.CellBackColor = BackColor;
				grd_Aircraft_Certified[grd_Aircraft_Certified.CurrentRowIndex, grd_Aircraft_Certified.CurrentColumnIndex].Value = "Certification";
				grd_Aircraft_Certified.RowsCount++;
				grd_Aircraft_Certified.CurrentRowIndex++;
				grd_Aircraft_Certified.CurrentColumnIndex = 0;
				grd_Aircraft_Certified[grd_Aircraft_Certified.CurrentRowIndex, grd_Aircraft_Certified.CurrentColumnIndex].Value = cbo_accert_name.Text.Trim();
				grd_Aircraft_Certified.FixedColumns = 0;
				grd_Aircraft_Certified.FixedRows = 1;
				grd_Aircraft_Certified.Redraw = true;

			}
			else
			{
				MessageBox.Show("Can't add same item TWICE", "Duplicate Certification", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
			}

		}

		private void Delete_Certification()
		{

			bCertificationsChanged = true;

			if (Convert.ToString(grd_Aircraft_Certified[0, 0].Value) != "None Found")
			{

				if (grd_Aircraft_Certified.CurrentRowIndex == 1 && grd_Aircraft_Certified[grd_Aircraft_Certified.CurrentRowIndex, grd_Aircraft_Certified.CurrentColumnIndex].FormattedValue.ToString() != modGlobalVars.cEmptyString)
				{

					// If MsgBox("Would You Like To Delete All of the Certifications?", vbYesNo) = vbYes Then
					//  grd_Aircraft_Certified.Text = cEmptyString
					//  grd_Aircraft_Certified.Rows = 1
					// Else
					// If MsgBox("Would You Like To Delete " & grd_Aircraft_Certified.Text & "?", vbYesNo) = vbYes Then
					if (grd_Aircraft_Certified[grd_Aircraft_Certified.CurrentRowIndex, grd_Aircraft_Certified.CurrentColumnIndex].FormattedValue.ToString() != "Certification" && grd_Aircraft_Certified.RowsCount > 2)
					{
						grd_Aircraft_Certified.RemoveItem(grd_Aircraft_Certified.CurrentRowIndex);
					}
					else if (grd_Aircraft_Certified.CurrentRowIndex == 1)
					{ 
						grd_Aircraft_Certified.RowsCount--;
					}
					// End If
					// End If



				}
				else
				{

					if (grd_Aircraft_Certified[grd_Aircraft_Certified.CurrentRowIndex, grd_Aircraft_Certified.CurrentColumnIndex].FormattedValue.ToString() != "Certification" && grd_Aircraft_Certified.RowsCount > 1)
					{

						grd_Aircraft_Certified.RemoveItem(grd_Aircraft_Certified.CurrentRowIndex);

					}

				}

			}

			grd_Aircraft_Certified.Redraw = true;

		}

		public void Fill_Tabs(int tabnumber)
		{
			//
			// THE PURPOSE OF THIS PROCEDURE IS TO PERFORM ACTIONS BASED ON SELECTION
			// OF A SPECIFIC AIRCRAFT FORM TAB
			//
			// RTW - 4/28/2004 - MODIFIED TO SUPPORT FILLING IN DATA ONLY ON TAB
			// SELECTION
			//******************************************************************************************

			string URL = "";
			int LoopCount = 0; //aey 4/11/05 loop timeout
			int amod_id = 0;
			//Dim CiscoIndexServer As New Cisso.CissoUtil

			try
			{

				// 11/24/2010 - By David D. Cruger
				// Removed The Use of the Cisso Util; Windows 7 Didn't like it

				tab_aircraft_details.Visible = true;

				switch(tabnumber)
				{
					case 0 : 
						// THIS IS THE MAIN TAB 
						 
						break;
					case 1 : 
						// THIS IS THE MAINTENANCE TAB 
						if (!bMaintenanceGridLoaded)
						{
							Fill_Aircraft_Details();
							Fill_Aircraft_Certified_Grid();
							Fill_Aircraft_DamageInspection_Grid();
							Fill_Aircraft_Maintenance_Grid();
						}
						else
						{
							grd_Maintenance.Redraw = true;
							grd_Aircraft_Certified.Redraw = true;
							grd_aircraftdamage.Redraw = true;
							//grd_AircraftInspection.Redraw = True
						} 
						 
						//added MSW 4/27/17 - does not auto load on entrance like the other functions do 
						if (!grd_aircraftdamage.Visible)
						{
							Fill_Aircraft_DamageInspection_Grid();
						} 
						 
						break;
					case 2 : 
						// THIS IS THE INTERIOR/EXTERIOR TAB 
						 
						if (!bInteriorGridLoaded)
						{
							Fill_Aircraft_Details();
						}
						else
						{
							grd_Interior.Redraw = true;
						} 
						 
						if (!bExteriorGridLoaded)
						{
							Fill_Aircraft_Details();
						}
						else
						{
							grd_Exterior.Redraw = true;
						} 
						 
						break;
					case 3 : 
						// THIS IS THE EQUIPMENT TAB 
						if (!bEquipmentGridLoaded)
						{
							Fill_Aircraft_Details();
						}
						else
						{
							grd_Equipment.Redraw = true;
						} 
						 
						break;
					case 5 : 
						Fill_Aircraft_Contact_Grid(); 
						 
						break;
					case 6 : 
						// THIS IS TE JOURNAL TAB 
						// reset the sort each time we recall the tab 
						Fill_Aircraft_Journal_Grid(); 
						 
						break;
					case 7 : 
						// 11/24/2010 - By David D. Cruger; 
						// Tweaked; not working on Windows 7 PC's 
						// The CiscoIndexServer Does Not Seem To Run on Windows 7 
						// THIS IS THE OPERATING COSTS TAB 
						this.Cursor = Cursors.WaitCursor; 
						//web_OpCosts.Visible = False 
						LoopCount = 0; 
						amod_id = Convert.ToInt32(snp_Aircraft_Model["amod_id"]); 
						//URL = gbl_WebSite & "internal.asp?destination=DisplayModelOPCosts.asp" & CiscoIndexServer.URLEncode("?id=" & amod_ID, 1) & "&userid=0&userpassword=" 
						URL = $"{modAdminCommon.gbl_WebSite}internal.asp?destination=DisplayModelOPCosts.asp{modCommon.pubf_URLEncode($"?id={amod_id.ToString()}", true)}&userid=0&userpassword="; 

						 
						//  URL = "http://www.jetnetevolution.com/DisplayModelDetail.aspx?homebase=Y&id=" & amod_ID & "&type=opcosts" 
						URL = $"http://www.homebase.com/homebaseOpCosts.aspx?AmodID={amod_id.ToString()}&homebase=Y"; 
						//UPGRADE_ISSUE: (2064) SHDocVw.WebBrowser method web_OpCosts.Object was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
						//UPGRADE_TODO: (1067) Member Silent is not defined in type object(...). More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067 
						this.web_OpCosts.getObject().Silent = true; 
						web_OpCosts.Navigate(new Uri(URL)); 

						while(!(web_OpCosts.ReadyState == WebBrowserReadyState.Interactive || web_OpCosts.ReadyState == WebBrowserReadyState.Complete || LoopCount > 100000))
						{
							//Screen.MousePointer = vbHourglass
							//web_OpCosts.Visible = False
							LoopCount++;
						}; 
						this.Cursor = CursorHelper.CursorDefault; 
						//web_OpCosts.Visible = True 
						 
						// COMMENT OUT MSW - 2/12/21 
						//    amod_id = snp_Aircraft_Model!amod_id 
						//  Load frm_WebReport 
						//  frm_WebReport.ac_id = amod_id 
						//  frm_WebReport.Ac_Maint_ID = 0 
						//  frm_WebReport.WhichReport = "Op Costs2" 
						//  frm_WebReport.Show 

						 
						break;
					case 8 : 
						// 11/24/2010 - By David D. Cruger; 
						// Tweaked; not working on Windows 7 PC's 
						// The CiscoIndexServer Does Not Seem To Run on Windows 7 
						// THIS IS THE PERFORMANCE SPECS TAB 
						this.Cursor = Cursors.WaitCursor; 
						//web_Specs.Visible = False 
						// 
						LoopCount = 0; 
						amod_id = Convert.ToInt32(snp_Aircraft_Model["amod_id"]); 
						//URL = gbl_WebSite & "internal.asp?destination=DisplayModelSpecs.asp" & CiscoIndexServer.URLEncode("?id=" & amod_ID, 1) & "&userid=0&userpassword=" 
						//     URL = gbl_WebSite & "internal.asp?destination=DisplayModelSpecs.asp" & pubf_URLEncode("?id=" & amod_ID, 1) & "&userid=0&userpassword=" 

						 
						//        'URL = "http://www.jetnetevolution.com/DisplayModelDetail.aspx?homebase=Y&id=" & amod_ID & "&type=performance" 
						//        URL = "http://www.homebase.com/homebasePerformance.aspx?AmodID=" & amod_ID & "&ac_id=" & Reference_Aircraft_ID 
						//        Me.web_Specs.Object.Silent = True 
						//        web_Specs.Navigate URL 
						//        Do Until web_Specs.ReadyState = READYSTATE_INTERACTIVE Or web_Specs.ReadyState = READYSTATE_COMPLETE Or LoopCount > 100000 
						//            'Screen.MousePointer = vbHourglass 
						//            'web_Specs.Visible = False 
						//            LoopCount = LoopCount + 1 
						//        Loop 
						//        Screen.MousePointer = vbNormal 
						//        'web_Specs.Visible = True 
						//' 

						 
						URL = $"http://www.homebase.com/homebasePerformance.aspx?AmodID={Convert.ToString(snp_Aircraft_Model["amod_id"])}&ac_id={modAdminCommon.gbl_Aircraft_ID.ToString()}&homebase=Y"; 
						//UPGRADE_ISSUE: (2064) SHDocVw.WebBrowser method web_Specs.Object was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
						//UPGRADE_TODO: (1067) Member Silent is not defined in type object(...). More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067 
						this.web_Specs.getObject().Silent = true; 
						web_Specs.Navigate(new Uri(URL)); 

						while(!(web_Specs.ReadyState == WebBrowserReadyState.Interactive || web_Specs.ReadyState == WebBrowserReadyState.Complete || LoopCount > 100000))
						{
							//Screen.MousePointer = vbHourglass
							//web_OpCosts.Visible = False
							LoopCount++;
						}; 
						this.Cursor = CursorHelper.CursorDefault; 
						 
						//          amod_id = snp_Aircraft_Model!amod_id 
						//         Load frm_WebReport 
						//        frm_WebReport.ac_id = amod_id 
						//        frm_WebReport.Ac_Maint_ID = 0 
						//        frm_WebReport.WhichReport = "Performance Specs" 
						//        frm_WebReport.Show 


						 
						break;
					case 9 : 
						//  THIS IS THE FAA DOCS TAB 
						Select_Aircraft_FAA(); 
						 
						break;
					case 11 : 
						// THIS IS THE AIRCRAFT DOCUMENTS TAB 
						FillAircraftDocumentsGrid(); 
						 
						break;
					case 12 : 
						// THIS IS THE AIRCRAFT PICTURES TAB 
						FillAircraftPicturesList(); 

						 
						break;
				}

				//Set CiscoIndexServer = Nothing

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Fill_Tabs_Error ({Information.Err().Number.ToString()}) {excep.Message} : tab[{tabnumber.ToString()}] acid[{modAdminCommon.gbl_Aircraft_ID.ToString()}]", "frmAircraft(TAB)");
				search_off();

				return;
			}

		}

		public void Fill_Aircraft_Journal_Grid_Header()
		{


			grd_Aircraft_Journal.Visible = true;
			grd_Aircraft_Journal.Enabled = true;
			grd_Aircraft_Journal.Redraw = true;

			grd_Aircraft_Journal.Clear();

			grd_Aircraft_Journal.ColumnsCount = 10;
			grd_Aircraft_Journal.RowsCount = 2;

			grd_Aircraft_Journal.FixedRows = 1;
			grd_Aircraft_Journal.FixedColumns = 0;

			grd_Aircraft_Journal.CurrentRowIndex = 0;

			int lCol1 = -1;

			lCol1++;
			grd_Aircraft_Journal.CurrentColumnIndex = lCol1;
			grd_Aircraft_Journal.CellBackColor = BackColor;
			grd_Aircraft_Journal.SetRowHeight(0, 33);
			grd_Aircraft_Journal.SetColumnWidth(lCol1, 133);
			grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "Entry Date - Time";

			lCol1++;
			grd_Aircraft_Journal.CurrentColumnIndex = lCol1;
			grd_Aircraft_Journal.CellBackColor = BackColor;
			grd_Aircraft_Journal.SetColumnWidth(lCol1, 67);
			grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "Event Date";


			lCol1++;
			grd_Aircraft_Journal.CurrentColumnIndex = lCol1;
			grd_Aircraft_Journal.CellBackColor = BackColor;
			grd_Aircraft_Journal.SetColumnWidth(lCol1, 67);
			grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "User";

			lCol1++;
			grd_Aircraft_Journal.CurrentColumnIndex = lCol1;
			grd_Aircraft_Journal.CellBackColor = BackColor;
			grd_Aircraft_Journal.SetColumnWidth(lCol1, 303);
			grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "Subject";
			grd_Aircraft_Journal.DefaultCellStyle.WrapMode = DataGridViewTriState.True;

			lCol1++;
			grd_Aircraft_Journal.CurrentColumnIndex = lCol1;
			grd_Aircraft_Journal.CellBackColor = BackColor;
			grd_Aircraft_Journal.SetColumnWidth(lCol1, 117);
			grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "Contact";

			lCol1++;
			grd_Aircraft_Journal.CurrentColumnIndex = lCol1;
			grd_Aircraft_Journal.CellBackColor = BackColor;
			grd_Aircraft_Journal.SetColumnWidth(lCol1, 30);
			grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "Int. Note";

			lCol1++;
			grd_Aircraft_Journal.CurrentColumnIndex = lCol1;
			grd_Aircraft_Journal.CellBackColor = BackColor;
			grd_Aircraft_Journal.SetColumnWidth(lCol1, 30);
			grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "Cust. Note";

			lCol1++;
			grd_Aircraft_Journal.CurrentColumnIndex = lCol1;
			grd_Aircraft_Journal.CellBackColor = BackColor;
			grd_Aircraft_Journal.SetColumnWidth(lCol1, 30);
			grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "Doc";

			lCol1++;
			grd_Aircraft_Journal.CurrentColumnIndex = lCol1;
			grd_Aircraft_Journal.CellBackColor = BackColor;
			grd_Aircraft_Journal.SetColumnWidth(lCol1, 133);
			grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "Category";

			lCol1++;
			grd_Aircraft_Journal.CurrentColumnIndex = lCol1;
			grd_Aircraft_Journal.CellBackColor = BackColor;
			grd_Aircraft_Journal.SetColumnWidth(lCol1, 67);
			grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "Journal Id";

			grd_Aircraft_Journal.CurrentColumnIndex = 0;
			grd_Aircraft_Journal.ColSel = 0;

			grd_Aircraft_Journal.Enabled = false;
			grd_Aircraft_Journal.Redraw = false;

		} // Fill_Aircraft_Journal_Grid_Header

		public void Fill_Aircraft_Journal_Grid()
		{
			//******************************************************************************************

			// 01/06/2003 - By David D. Cruger
			// Added to the Journal Subject display
			// jcat_subcategory_transtype
			// 5/3/2004 aey
			// added Journal_Id to end

			string Query = "";
			string acline = "";
			string errMsg = "";
			int errCol = 0;
			int lCnt1 = 0;
			int lRow1 = 0;
			string strJSubject = "";

			try
			{

				errCol = -1;
				errMsg = "start";

				strJSubject = txtACJournalSearch.Text.Trim();

				search_on("Getting Aircraft Journal Entries....");

				Fill_Aircraft_Journal_Grid_Header();

				// extra line added in MSW - in case it gets here - MSW - 7/3/24
				if (adoAircraftRecordset == null)
				{
					return;
				}

				if (adoAircraftRecordset.State == ConnectionState.Closed)
				{
					MessageBox.Show("The recordset is closed", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					return;
				}

				errCol = 0;

				errMsg = "ac rs open";

				if (adoAircraftRecordset.State != ConnectionState.Open)
				{
					throw new Exception();
				}

				errMsg = "qry select";

				Query = modGlobalVars.cEmptyString;
				if (chkArray[chkJournOnlyShowFirst_INDEX].CheckState == CheckState.Checked && Conversion.Val(($"{modGlobalVars.cEmptyString}{txtHowManyJournal.Text}").Trim()) > 0)
				{
					Query = $"SELECT TOP {txtHowManyJournal.Text.Trim()} ";
				}
				else
				{
					Query = "SELECT ";
				}

				Query = $"{Query}journ_id, journ_contact_id, jcat_subcategory_code, jcat_subcategory_name, jcat_category_name, ";
				Query = $"{Query}jcat_category_code, jcat_subcategory_code, jcat_auto_subject_flag, jcat_subcategory_transtype, ";
				Query = $"{Query}jcat_subcategory_transtofrom, journ_subject, journ_description, journ_customer_note, journ_account_id, ";
				Query = $"{Query}journ_user_id, journ_date, journ_entry_date, journ_entry_time, user_first_name, user_last_name ";
				Query = $"{Query}FROM Journal WITH(NOLOCK) inner join Journal_Category WITH(NOLOCK) on journ_subcategory_code=jcat_subcategory_code ";
				Query = $"{Query}LEFT OUTER JOIN [User] WITH(NOLOCK) on journ_user_id = [user].user_id ";
				Query = $"{Query}WHERE (journ_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}) ";
				Query = $"{Query}AND (journ_status = 'A') ";

				// added MSW - 7/28/2020
				if (modAdminCommon.gbl_User_ID == "mvit" || modAdminCommon.gbl_User_ID == "dcr" || modAdminCommon.gbl_User_ID == "kkf" || modAdminCommon.gbl_User_ID == "pls" || modAdminCommon.gbl_User_ID == "lmc" || modAdminCommon.gbl_User_ID == "has" || modAdminCommon.gbl_User_ID == "llp" || modAdminCommon.gbl_User_ID == "cbqc" || modAdminCommon.gbl_User_ID == "cjb" || modAdminCommon.gbl_User_ID == "abr" || modAdminCommon.gbl_User_ID == "nrk" || modAdminCommon.gbl_User_ID == "ms" || modAdminCommon.gbl_User_ID == "alsp" || modAdminCommon.gbl_User_ID == "tpb" || modAdminCommon.gbl_User_ID == "jmm" || modAdminCommon.gbl_User_ID == "avl" || modAdminCommon.gbl_User_ID == "kvl" || modAdminCommon.gbl_User_ID == "jlf")
				{ // ast 2 added - 9/1/2020 msw  - alsp - 10/15/20  ' tpb - added 3/27/23 based on request per patty - jmm added - 6/9/23 - avl added MSw - 2/14/24
				}
				else
				{
					Query = $"{Query}  AND journ_subject <> 'SPEC - QC Item Sent' ";
				}

				if (modAdminCommon.gbl_User_ID == "mvit" || modAdminCommon.gbl_User_ID == "dcr" || modAdminCommon.gbl_User_ID == "jkc" || modAdminCommon.gbl_User_ID == "mah" || modAdminCommon.gbl_User_ID == "lmc" || modAdminCommon.gbl_User_ID == "pls" || modAdminCommon.gbl_User_ID == "tle" || modAdminCommon.gbl_User_ID == "cbqc" || modAdminCommon.gbl_User_ID == "cjb" || modAdminCommon.gbl_User_ID == "nrk")
				{ // matt added cjb and nrk - 2/15/22

				}
				else
				{
					//Query = Query & "AND (jcat_subcategory_code <> 'SP') "
					Query = $"{Query}  AND ((jcat_subcategory_code <> 'SP') or journ_subject = 'A/C Value - Cleared Sale Price') "; //  added MSW 12/5/19 - so they will see cleared
				}

				if (cbo_jcat_category_code.Text != "All" && cbo_jcat_category_code.Text != modGlobalVars.cEmptyString)
				{
					if (cbo_jcat_category_code.Text.Trim() == "Aircraft History")
					{
						Query = $"{Query}AND ((jcat_category_name= '{cbo_jcat_category_code.Text}') or jcat_subcategory_code = 'CHPUR' or ( journ_subject like 'Deleted%' and journ_subject <> 'Deleted' and journ_subject <> 'Deleted Aircraft Picture' and journ_ac_id > 0 )) "; // added MSW - 12/17/18
					}
					else
					{
						Query = $"{Query}AND (jcat_category_name= '{cbo_jcat_category_code.Text}') ";
					}
				}

				if (cbo_jcat_subcategory_code.Text != "All" && cbo_jcat_subcategory_code.Text != modGlobalVars.cEmptyString)
				{
					Query = $"{Query}AND (jcat_subcategory_name= '{cbo_jcat_subcategory_code.Text}') ";
				}
				else
				{
					Query = $"{Query}AND (jcat_category_code <> 'MS') ";
				}

				if (cbo_jcat_account_rep.Text != "All" && cbo_jcat_account_rep.Text != modGlobalVars.cEmptyString)
				{
					Query = $"{Query}AND (journ_account_id = '{cbo_jcat_account_rep.Text}') ";
				}

				if (Strings.Len(($"{txt_journal_category_start_date.Text}{modGlobalVars.cEmptyString}").Trim()) > 0 || Strings.Len(($"{txt_journal_category_end_date.Text}{modGlobalVars.cEmptyString}").Trim()) > 0)
				{

					if (Strings.Len(($"{txt_journal_category_start_date.Text}{modGlobalVars.cEmptyString}").Trim()) > 0 && !Information.IsDate(txt_journal_category_start_date.Text))
					{
						MessageBox.Show("Start Date for Query must be in Date format <mm/dd/yyyy>", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
						return;
					}

					if (Strings.Len(($"{txt_journal_category_end_date.Text}{modGlobalVars.cEmptyString}").Trim()) > 0 && !Information.IsDate(txt_journal_category_end_date.Text))
					{
						MessageBox.Show("End Date for Query must be in Date format <mm/dd/yyyy>", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
						return;
					}

					if (Strings.Len(($"{txt_journal_category_start_date.Text}{modGlobalVars.cEmptyString}").Trim()) > 0 && Strings.Len(($"{txt_journal_category_end_date.Text}{modGlobalVars.cEmptyString}").Trim()) > 0)
					{
						Query = $"{Query}AND (journ_date BETWEEN '{DateTime.Parse(txt_journal_category_start_date.Text).ToString("d")}' AND '{DateTime.Parse(txt_journal_category_end_date.Text).ToString("d")}') ";
					}

					if (Strings.Len(($"{txt_journal_category_start_date.Text}{modGlobalVars.cEmptyString}").Trim()) > 0 && Strings.Len(($"{txt_journal_category_end_date.Text}{modGlobalVars.cEmptyString}").Trim()) == 0)
					{
						Query = $"{Query}AND (journ_date >= '{DateTime.Parse(txt_journal_category_start_date.Text).ToString("d")}') ";
					}

					if (Strings.Len(($"{txt_journal_category_end_date.Text}{modGlobalVars.cEmptyString}").Trim()) > 0 && Strings.Len(($"{txt_journal_category_start_date.Text}{modGlobalVars.cEmptyString}").Trim()) == 0)
					{
						Query = $"{Query}AND (journ_date <= '{DateTime.Parse(txt_journal_category_end_date.Text).ToString("d")}') ";
					}

				} // If Len(Trim(txt_journal_category_start_date & cEmptyString)) > 0 Or Len(Trim(txt_journal_category_end_date & cEmptyString)) > 0 Then

				if (strJSubject != "")
				{
					Query = $"{Query}AND (";
					Query = $"{Query}       (journ_subject LIKE '%{StringsHelper.Replace(strJSubject, "'", "''", 1, -1, CompareMethod.Binary)}%') ";
					Query = $"{Query}    OR (journ_description LIKE '%{StringsHelper.Replace(strJSubject, "'", "''", 1, -1, CompareMethod.Binary)}%') ";
					Query = $"{Query} OR (user_first_name  like '%{strJSubject.Trim()}%') ";
					Query = $"{Query}    ) ";
				} // If strJSubject <> "" Then

				Query = $"{Query} and (jcat_subcategory_code <> 'HDPE') ";

				Query = $"{Query} {strJournalOrderBy}";

				errMsg = "rs check";

				errMsg = "rs set";
				snp_Journal = new ADORecordSetHelper();

				errMsg = "rs open";
				snp_Journal.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				errMsg = "rs eof";
				if (!snp_Journal.BOF && !snp_Journal.EOF)
				{

					errMsg = "rs read2";
					lCnt1 = 0;
					lRow1 = 0;

					do 
					{ // Loop Until snp_Journal.EOF = True

						lRow1++;
						grd_Aircraft_Journal.RowsCount = lRow1 + 1;
						grd_Aircraft_Journal.CurrentRowIndex = lRow1;

						//-------------------------------
						// Entry Date - Time
						//-------------------------------
						errCol = 0;
						grd_Aircraft_Journal.CurrentColumnIndex = 0;
						grd_Aircraft_Journal.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Aircraft_Journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
						grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = $"{Convert.ToDateTime(snp_Journal["journ_entry_date"]).ToString("d")} " +
						                                                                                                            $"{Convert.ToDateTime(snp_Journal["journ_entry_time"]).ToString("T")}";

						//-------------------------------
						// Event Date
						//-------------------------------
						errCol = 1;
						grd_Aircraft_Journal.CurrentColumnIndex = 1;
						grd_Aircraft_Journal.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Aircraft_Journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));

						acline = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_Journal["journ_date"]))
						{
							acline = $"{Convert.ToDateTime(snp_Journal["journ_date"]).ToString("d")} ";
						}
						grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = acline;

						//-------------------------------
						// User
						//-------------------------------
						errCol = 2;
						grd_Aircraft_Journal.CurrentColumnIndex = 2;
						grd_Aircraft_Journal.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Aircraft_Journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
						grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = $"{Convert.ToString(snp_Journal["journ_user_id"]).Trim()} ";

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_Journal["journ_user_id"]))
						{

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(snp_Journal["user_first_name"]))
							{

								if (Convert.ToString(snp_Journal["user_first_name"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = $"{Convert.ToString(snp_Journal["user_first_name"]).Trim()} {Convert.ToString(snp_Journal["user_last_name"]).Trim()}";
								}
								else
								{
									if (Convert.ToString(snp_Journal["journ_user_id"]).Trim() != modGlobalVars.cEmptyString)
									{
										grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = Convert.ToString(snp_Journal["journ_user_id"]).Trim();
									}
									else
									{
										if (Convert.ToString(snp_Journal["journ_user_id"]).Trim() == "adm")
										{
											grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "Admin";
										}
									}
								}

							}
							else
							{
								// If Not IsNull(snp_Journal!user_first_name) Then

								if (Convert.ToString(snp_Journal["journ_user_id"]).Trim() == "adm")
								{
									grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "Admin";
								}
								else
								{
									if (Convert.ToString(snp_Journal["journ_user_id"]).Trim() != modGlobalVars.cEmptyString)
									{
										grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = Convert.ToString(snp_Journal["journ_user_id"]).Trim();
									}
								}

							} // If Not IsNull(snp_Journal!user_first_name) Then

						} // If IsNull(snp_Journal!journ_user_id) = False Then

						//-------------------------------
						// Journal Subject
						//-------------------------------
						errCol = 3;
						grd_Aircraft_Journal.CurrentColumnIndex = 3;
						grd_Aircraft_Journal.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Aircraft_Journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
						grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = ($"{Convert.ToString(snp_Journal["journ_subject"])} ").Trim();

						if (Convert.ToString(snp_Journal["jcat_auto_subject_flag"]) == "Y")
						{
							if (($"{Convert.ToString(snp_Journal["jcat_subcategory_transtype"])} ").Trim() != modGlobalVars.cEmptyString)
							{
								grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = $"{($"{Convert.ToString(snp_Journal["jcat_subcategory_transtype"])} ").Trim()} - {($"{Convert.ToString(snp_Journal["journ_subject"])} ").Trim()}";
							}
						}

						//-------------------------------
						// Contact
						//-------------------------------
						errCol = 4;
						grd_Aircraft_Journal.CurrentColumnIndex = 4;
						grd_Aircraft_Journal.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Aircraft_Journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_Journal["journ_contact_id"]))
						{
							if (Convert.ToDouble(snp_Journal["journ_contact_id"]) > 0)
							{
								grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = modCommon.GetContactName(Convert.ToInt32(snp_Journal["journ_contact_id"]), 0);
							}
						}

						//-------------------------------
						// Internal Notes
						//-------------------------------
						errCol = 5;
						grd_Aircraft_Journal.CurrentColumnIndex = 5;
						grd_Aircraft_Journal.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Aircraft_Journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
						//added MSW - 2/2/23
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_Journal["journ_description"]))
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(snp_Journal["journ_description"]) && !Convert.IsDBNull(snp_Journal["journ_subject"]))
							{
								if (Convert.ToString(snp_Journal["journ_description"]).Trim() == Convert.ToString(snp_Journal["journ_subject"]).Trim())
								{
									grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = ""; // if they are equal then dont show it
								}
								else if (Convert.ToString(snp_Journal["journ_description"]).Trim() != modGlobalVars.cEmptyString)
								{ 
									grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "X";
								}
							}
							else if (Convert.ToString(snp_Journal["journ_description"]).Trim() != modGlobalVars.cEmptyString)
							{ 
								grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "X";
							}
						}
						// If Trim(snp_Journal!journ_description & " ") <> "" Then grd_Aircraft_Journal.Text = "X"

						//-------------------------------
						// Customer Notes
						//-------------------------------
						errCol = 6;
						grd_Aircraft_Journal.CurrentColumnIndex = 6;
						grd_Aircraft_Journal.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Aircraft_Journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
						if (($"{Convert.ToString(snp_Journal["journ_customer_note"])} ").Trim() != "")
						{
							grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "X";
						}

						//-------------------------------
						// Aircraft Documents
						//-------------------------------
						errCol = 7;
						grd_Aircraft_Journal.CurrentColumnIndex = 7;
						grd_Aircraft_Journal.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Aircraft_Journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
						if (HasDocument(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(snp_Journal["journ_id"])))
						{
							grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = "X";
						}

						//-------------------------------
						// Category Code
						//-------------------------------
						errCol = 8;
						grd_Aircraft_Journal.CurrentColumnIndex = 8;
						grd_Aircraft_Journal.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Aircraft_Journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));

						if (Convert.ToString(snp_Journal["jcat_auto_subject_flag"]) == "Y")
						{
							grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = $"{($"{Convert.ToString(snp_Journal["jcat_subcategory_code"])} ").Trim()} - " +
							                                                                                                            $"{($"{Convert.ToString(snp_Journal["jcat_subcategory_transtofrom"])} ").Trim()}";
						}
						else
						{
							grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = $"{($"{Convert.ToString(snp_Journal["jcat_subcategory_code"])} ").Trim()} - " +
							                                                                                                            $"{($"{Convert.ToString(snp_Journal["jcat_subcategory_transtype"])} ").Trim()}";
						}

						//-----------------------------
						//Journal ID
						//------------------------------
						errCol = 9;
						grd_Aircraft_Journal.CurrentColumnIndex = 9;
						grd_Aircraft_Journal.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Aircraft_Journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
						grd_Aircraft_Journal[grd_Aircraft_Journal.CurrentRowIndex, grd_Aircraft_Journal.CurrentColumnIndex].Value = Convert.ToString(snp_Journal["journ_id"]);
						grd_Aircraft_Journal.set_RowData(lRow1,Convert.ToInt32( snp_Journal.GetField("journ_id")));

						lCnt1++;
						if (lCnt1 == 18)
						{
							grd_Aircraft_Journal.Enabled = true;
							grd_Aircraft_Journal.Redraw = true;
							Application.DoEvents();
							grd_Aircraft_Journal.Enabled = false;
							grd_Aircraft_Journal.Redraw = false;
						}

						snp_Journal.MoveNext();

					}
					while(!snp_Journal.EOF);

				}
				else
				{
					grd_Aircraft_Journal[1, 0].Value = "None Found";
					errMsg = "rs empty";
				} // If (snp_Journal.BOF = False And snp_Journal.EOF = False) Then

				snp_Journal.Close();
				snp_Journal = null;

				grd_Aircraft_Journal.CurrentRowIndex = 1;
				grd_Aircraft_Journal.CurrentColumnIndex = 0;

				grd_Aircraft_Journal.Enabled = true;
				grd_Aircraft_Journal.Redraw = true;

				search_off();
			}
			catch (System.Exception excep)
			{

				if (excep.Message == "Object variable or With block variable not set")
				{
					modAdminCommon.Report_Error($"Fill_Aircraft_Journal_Grid_Error: {errMsg} {errCol.ToString()} {excep.Message}");
					search_off();
				}
				else
				{
					modAdminCommon.Report_Error($"Fill_Aircraft_Journal_Grid_Error: AC:{Conversion.Str(adoAircraftRecordset["ac_id"])} {errMsg} {errCol.ToString()} {excep.Message}");
					search_off();
				}
			}

		} // Fill_Aircraft_Journal_Grid

		public void Save_Certification()
		{
			try
			{
				StringBuilder Query = new StringBuilder();

				if (bCertificationsChanged)
				{
					Query = new StringBuilder($"Delete FROM Aircraft_Certified WHERE accert_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}");
					Query.Append($" AND accert_ac_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}");

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = Query.ToString();
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery(); //6/10/04 aey

					//check for empty dont insert empty

					int tempForEndVar = grd_Aircraft_Certified.RowsCount - 1;
					for (int I = 1; I <= tempForEndVar; I++)
					{
						Query = new StringBuilder("insert into Aircraft_Certified (accert_ac_id,");
						Query.Append("accert_ac_journ_id,");
						Query.Append("accert_name)");

						grd_Aircraft_Certified.CurrentRowIndex = I;
						grd_Aircraft_Certified.CurrentColumnIndex = 0;

						Query.Append($" values ({Convert.ToString(adoAircraftRecordset["ac_id"])},");
						Query.Append($"{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}, ");

						Query.Append($"'{modAdminCommon.Fix_Quote(grd_Aircraft_Certified[grd_Aircraft_Certified.CurrentRowIndex, grd_Aircraft_Certified.CurrentColumnIndex].FormattedValue.ToString().Trim())}')");

						DbCommand TempCommand_2 = null;
						TempCommand_2 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
						TempCommand_2.CommandText = Query.ToString();
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
						TempCommand_2.ExecuteNonQuery(); //6/10/04 aey

					}

				}

				bCertificationsChanged = false;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Report_Error($"Save_Certification_Error: {excep.Message}");
			}

		}

		private bool Save_KeyFeature()
		{
			//******************************************************************************************
			//
			// PURPOSE: THE PURPOSE OF THIS FUNCTION IS TO SAVE KEY FEATURES
			// THAT HAVE BEEN UPDATED IN THE GRID
			// NOTE THAT FEATURES THAT ARE AUTO GENERATED OR STANDARD WILL BE IGNORED
			// SINCE THEY WILL NOT HAVE THE WORD UPDATE IN THE CHANGE COLUMN
			//
			// RTW - LAST MODIFIED  - 4/15/2004
			//
			// ***********************************************************************
			bool result = false;
			try
			{
				string Query = "";
				string Tempflag = "";
				ADORecordSetHelper snpNewFeatures = new ADORecordSetHelper();
				string CurFeatureCode = "";
				ADORecordSetHelper ado_UpdateFeature = new ADORecordSetHelper();
				string strFCode = "";
				string strFStatus = "";
				string strMsg = "";
				System.DateTime dtStartDate = DateTime.FromOADate(0);
				System.DateTime dtEndDate = DateTime.FromOADate(0);
				int lACId = 0;
				int lJournId = 0;

				result = true;

				lACId = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
				lJournId = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);

				if (ModelChanged)
				{

					// RTW - HOLD - MAY NEED TO CHANGE THIS
					Query = "DELETE FROM Aircraft_Key_Feature ";
					Query = $"{Query}WHERE (afeat_ac_id={lACId.ToString()}) ";
					Query = $"{Query}AND (afeat_journ_id={lJournId.ToString()}) ";
					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) | ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery(); //aey 6/30/04

					Query = "SELECT * FROM Aircraft_Model_Key_Feature WITH (NOLOCK) ";
					Query = $"{Query}WHERE (amfeat_amod_id = {cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex).ToString()}) ";
					Query = $"{Query}AND (amfeat_inactive_date IS NULL) ";

					snpNewFeatures.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

					if (!(snpNewFeatures.BOF && snpNewFeatures.EOF))
					{


						while(!snpNewFeatures.EOF)
						{

							Query = "INSERT INTO Aircraft_Key_Feature (";
							Query = $"{Query}afeat_ac_id, ";
							Query = $"{Query}afeat_journ_id, ";
							Query = $"{Query}afeat_status_flag, ";
							Query = $"{Query}afeat_feature_code, ";
							Query = $"{Query}afeat_seq_no";
							Query = $"{Query}) VALUES (";
							Query = $"{Query}{lACId.ToString()}, ";
							Query = $"{Query}{lJournId.ToString()}, ";
							Tempflag = "U";

							//  If snpNewFeatures!amfeat_standard_equip = "Y" Then
							// Tempflag = "Y"
							//  End If

							Query = $"{Query}'{Tempflag}', ";
							Query = $"{Query}'{modAdminCommon.Fix_Quote(($"{modGlobalVars.cEmptyString}{Convert.ToString(snpNewFeatures["amfeat_feature_code"])}").Trim())}', ";
							Query = $"{Query}{($"{modGlobalVars.cEmptyString}{Convert.ToString(snpNewFeatures["amfeat_seq_no"])}").Trim()} ";
							Query = $"{Query})";

							DbCommand TempCommand_2 = null;
							TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
							TempCommand_2.CommandText = Query;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) | ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
							TempCommand_2.ExecuteNonQuery(); //aey 6/30/04

							snpNewFeatures.MoveNext();

						}; // Do While Not snpNewFeatures.EOF

					} // If Not (snpNewFeatures.BOF And snpNewFeatures.EOF) Then

					snpNewFeatures.Close();
					result = true;

				}
				else
				{

					// NO MODEL CHANGE
					int tempForEndVar = grd_AircraftKeyFeatures.RowsCount - 1;
					for (int I = 1; I <= tempForEndVar; I++)
					{
						grd_AircraftKeyFeatures.CurrentRowIndex = I;
						// DETERMINE IF THE FEATURE CODE STATUS CHANGED

						if (Convert.ToString(grd_AircraftKeyFeatures[I, 3].Value).Trim() == "UPDATE")
						{

							strFCode = Convert.ToString(grd_AircraftKeyFeatures[I, 2].Value).Trim();
							strFStatus = Convert.ToString(grd_AircraftKeyFeatures[I, 1].Value).Trim();

							Query = "SELECT * FROM Aircraft_Key_Feature ";
							Query = $"{Query}WHERE (afeat_ac_id = {lACId.ToString()}) ";
							if (bolRetrieveSpecs)
							{
								Query = $"{Query}AND (afeat_journ_id = {SpecsJournID.ToString()}";
							}
							else
							{
								Query = $"{Query}AND (afeat_journ_id = {lJournId.ToString()}) ";
							}
							Query = $"{Query}AND (afeat_feature_code = '{strFCode}')";

							ado_UpdateFeature.Open(Query, modAdminCommon.ADODB_Trans_conn, UpgradeHelpers.DB.LockTypeEnum.LockOptimistic);
							if (!(ado_UpdateFeature.BOF && ado_UpdateFeature.EOF))
							{

								ado_UpdateFeature.MoveFirst();
								grd_AircraftKeyFeatures.CurrentColumnIndex = 1;

								// IF THERE WAS A CHANGE TO THE ROW FROM THE DATABASE

								if (strFStatus == "Yes" && Convert.ToString(ado_UpdateFeature["afeat_status_flag"]) != "Y")
								{
									ado_UpdateFeature["afeat_status_flag"] = "Y";
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									ado_UpdateFeature["afeat_action_date"] = DBNull.Value;
									ado_UpdateFeature.Update();
								}

								if (strFStatus == "No" && Convert.ToString(ado_UpdateFeature["afeat_status_flag"]) != "N")
								{
									ado_UpdateFeature["afeat_status_flag"] = "N";
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									ado_UpdateFeature["afeat_action_date"] = DBNull.Value;
									ado_UpdateFeature.Update();
								}

								if (strFStatus == "Unknown" && Convert.ToString(ado_UpdateFeature["afeat_status_flag"]) != "U")
								{
									ado_UpdateFeature["afeat_status_flag"] = "U";
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									ado_UpdateFeature["afeat_action_date"] = DBNull.Value;
									ado_UpdateFeature.Update();
								}

								if (strFCode == "DAM")
								{
									if (strFStatus == "Incident" && Convert.ToString(ado_UpdateFeature["afeat_status_flag"]) != "I")
									{
										ado_UpdateFeature["afeat_status_flag"] = "I";
										//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
										ado_UpdateFeature["afeat_action_date"] = DBNull.Value;
										ado_UpdateFeature.Update();
									}
									if (strFStatus == "Accident" && Convert.ToString(ado_UpdateFeature["afeat_status_flag"]) != "A")
									{
										ado_UpdateFeature["afeat_status_flag"] = "A";
										//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
										ado_UpdateFeature["afeat_action_date"] = DBNull.Value;
										ado_UpdateFeature.Update();
									}
								}

								modCommon.Start_Activity_Monitor_Message("Aircraft Key Feature Updated", ref strMsg, ref dtStartDate, ref dtEndDate);
								strMsg = $" - {strFCode} = {strFStatus}";
								modCommon.End_Activity_Monitor_Message("Aircraft Key Feature Updated", ref strMsg, dtStartDate, ref dtEndDate, lACId, lJournId, 0, 0, 0);

								result = true;

							}
							else
							{
								// DID NOT FIND THE FEATURE CODE FROM THE GRID
								// IN THE DATABASE - RETURN WITH AN ERROR
								result = false;
							} // If Not (ado_UpdateFeature.BOF And ado_UpdateFeature.EOF) Then

							ado_UpdateFeature.Close();

						} // IF THE FEATURE CODE IN THE GRID REQUIRES UPDATE

					} // GET NEXT ROW OF FEATURE CODE GRID

				} // If ModelChanged = True Then

				snpNewFeatures = null;
				ado_UpdateFeature = null;
			}
			catch
			{


				result = false;
				modAdminCommon.Report_Error("Save_KeyFeature_Error:");
			}

			return result;
		} // Save_KeyFeature

		public void Fill_Aircraft_DamageInspection_Grid()
		{
			//******************************************************************************************
			//* Note: VBC id'd the following unreferenced items and handled them as described:         *
			//*                                                                                        *
			//* Local Variables (Removed)                                                              *
			//*  acline                        tempcomp                                                *
			//******************************************************************************************

			string strError = "";
			try
			{
				string Query = "";

				strError = "Setup";
				//    grd_AircraftInspection.Clear
				grd_aircraftdamage.Clear();
				//
				//    grd_AircraftInspection.Cols = 3
				//    grd_AircraftInspection.Rows = 2
				//    grd_AircraftInspection.FixedRows = 1
				//    grd_AircraftInspection.FixedCols = 0
				//
				//    grd_AircraftInspection.Row = 0
				//
				//    grd_AircraftInspection.Col = 0
				//    grd_AircraftInspection.CellBackColor = HeadingColor
				//    grd_AircraftInspection.ColWidth(grd_AircraftInspection.Col) = 2000
				//    grd_AircraftInspection.Text = "Date"
				//
				//    grd_AircraftInspection.Col = 1
				//    grd_AircraftInspection.CellBackColor = HeadingColor
				//    grd_AircraftInspection.ColWidth(grd_AircraftInspection.Col) = 600
				//    grd_AircraftInspection.Text = "ID"
				//
				//    grd_AircraftInspection.Col = 2
				//    grd_AircraftInspection.CellBackColor = HeadingColor
				//    grd_AircraftInspection.ColWidth(grd_AircraftInspection.Col) = 4850
				//    grd_AircraftInspection.Text = "Subject"

				//
				//    strError = "IN"
				//
				//    Query = "SELECT * FROM Journal WITH(NOLOCK) WHERE journ_ac_id = " & adoAircraftRecordset!AC_ID
				//    Query = Query & " and (journ_subcategory_code='IN') ORDER BY journ_date desc "
				//
				//    Set snp_Inspect_Journal = Nothing    'aey 6/10/04
				//    Set snp_Inspect_Journal = New ADODB.Recordset
				//    snp_Inspect_Journal.Open Query, LOCAL_ADO_DB, adOpenStatic, adLockReadOnly, adCmdText
				//
				//    If Not (snp_Inspect_Journal.BOF And snp_Inspect_Journal.EOF) Then
				//        snp_Inspect_Journal.MoveFirst
				//        grd_AircraftInspection.Row = 1
				//
				//        Do While Not snp_Inspect_Journal.EOF
				//
				//            grd_AircraftInspection.Col = 0
				//            grd_AircraftInspection.CellAlignment = flexAlignLeftTop
				//            grd_AircraftInspection.Text = Format(cEmptyString & snp_Inspect_Journal!journ_date, "mm/yyyy")
				//
				//            grd_AircraftInspection.Col = 1
				//            grd_AircraftInspection.CellAlignment = flexAlignLeftTop
				//            grd_AircraftInspection.Text = snp_Inspect_Journal!journ_user_id
				//
				//            grd_AircraftInspection.Col = 2
				//            grd_AircraftInspection.CellAlignment = flexAlignLeftTop
				//            grd_AircraftInspection.Text = snp_Inspect_Journal!journ_subject
				//
				//            grd_AircraftInspection.RowData(grd_AircraftInspection.Row) = Trim(cEmptyString & snp_Inspect_Journal!journ_id)
				//
				//            grd_AircraftInspection.Rows = grd_AircraftInspection.Rows + 1
				//            grd_AircraftInspection.Row = grd_AircraftInspection.Row + 1
				//
				//            snp_Inspect_Journal.MoveNext
				//        Loop
				//    End If
				//
				//    grd_AircraftInspection.Rows = grd_AircraftInspection.Rows - 1
				//
				//    If grd_AircraftInspection.Rows = 1 Then
				//        grd_AircraftInspection.Col = 0
				//
				//        grd_AircraftInspection.Row = 0
				//        grd_AircraftInspection.Text = "None Found"
				//
				//        grd_AircraftInspection.Col = 1
				//        grd_AircraftInspection.Text = cEmptyString
				//
				//        grd_AircraftInspection.Col = 2
				//        grd_AircraftInspection.Text = cEmptyString
				//
				//        grd_AircraftInspection.Rows = 1
				//
				//    End If
				//
				//    grd_AircraftInspection.Redraw = True


				grd_aircraftdamage.ColumnsCount = 3;
				grd_aircraftdamage.RowsCount = 2;
				grd_aircraftdamage.FixedRows = 1;
				grd_aircraftdamage.FixedColumns = 0;

				grd_aircraftdamage.CurrentRowIndex = 0;

				grd_aircraftdamage.CurrentColumnIndex = 0;
				grd_aircraftdamage.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_aircraftdamage.SetColumnWidth(grd_aircraftdamage.CurrentColumnIndex, 67);
				grd_aircraftdamage[grd_aircraftdamage.CurrentRowIndex, grd_aircraftdamage.CurrentColumnIndex].Value = "DATE";

				grd_aircraftdamage.CurrentColumnIndex = 1;
				grd_aircraftdamage.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_aircraftdamage.SetColumnWidth(grd_aircraftdamage.CurrentColumnIndex, 360);
				grd_aircraftdamage[grd_aircraftdamage.CurrentRowIndex, grd_aircraftdamage.CurrentColumnIndex].Value = "SUBJECT";

				grd_aircraftdamage.CurrentColumnIndex = 2;
				grd_aircraftdamage.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_aircraftdamage.SetColumnWidth(grd_aircraftdamage.CurrentColumnIndex, 47);
				grd_aircraftdamage[grd_aircraftdamage.CurrentRowIndex, grd_aircraftdamage.CurrentColumnIndex].Value = "USER";

				strError = "DM";
				Query = $"SELECT * FROM Journal WITH(NOLOCK) WHERE journ_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
				Query = $"{Query} and (journ_subcategory_code='DM') ORDER BY journ_date desc";

				snp_Damage_Journal = null; //aey 6/10/04
				snp_Damage_Journal = new ADORecordSetHelper();
				snp_Damage_Journal.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(snp_Damage_Journal.BOF && snp_Damage_Journal.EOF))
				{

					snp_Damage_Journal.MoveFirst();
					grd_aircraftdamage.CurrentRowIndex = 1;


					while(!snp_Damage_Journal.EOF)
					{

						grd_aircraftdamage.CurrentColumnIndex = 0;
						grd_aircraftdamage.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_aircraftdamage[grd_aircraftdamage.CurrentRowIndex, grd_aircraftdamage.CurrentColumnIndex].Value = Convert.ToDateTime(snp_Damage_Journal["journ_date"]).ToString("d");

						grd_aircraftdamage.CurrentColumnIndex = 1;
						grd_aircraftdamage.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_aircraftdamage[grd_aircraftdamage.CurrentRowIndex, grd_aircraftdamage.CurrentColumnIndex].Value = snp_Damage_Journal.GetField("journ_subject");

						grd_aircraftdamage.CurrentColumnIndex = 2;
						grd_aircraftdamage.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_aircraftdamage[grd_aircraftdamage.CurrentRowIndex, grd_aircraftdamage.CurrentColumnIndex].Value = snp_Damage_Journal.GetField("journ_user_id");

						grd_aircraftdamage.set_RowData(grd_aircraftdamage.CurrentRowIndex, Convert.ToInt32(snp_Damage_Journal["journ_id"].ToString().Trim()));

						grd_aircraftdamage.RowsCount++;
						grd_aircraftdamage.CurrentRowIndex++;

						snp_Damage_Journal.MoveNext();
					};

				}

				grd_aircraftdamage.RowsCount--;

				if (grd_aircraftdamage.RowsCount == 1)
				{

					grd_aircraftdamage.CurrentColumnIndex = 0;
					grd_aircraftdamage.CurrentRowIndex = 0;
					grd_aircraftdamage[grd_aircraftdamage.CurrentRowIndex, grd_aircraftdamage.CurrentColumnIndex].Value = "None Found";

					grd_aircraftdamage.CurrentColumnIndex = 1;
					grd_aircraftdamage[grd_aircraftdamage.CurrentRowIndex, grd_aircraftdamage.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

					grd_aircraftdamage.CurrentColumnIndex = 2;
					grd_aircraftdamage[grd_aircraftdamage.CurrentRowIndex, grd_aircraftdamage.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

					grd_aircraftdamage.RowsCount = 1;
				}

				tab_damage_loaded = true;
				grd_aircraftdamage.Redraw = true;
				grd_aircraftdamage.Visible = true;

				search_off();
			}
			catch (System.Exception excep)
			{


				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				strError = $"{Information.Err().Number.ToString()} {excep.Message} subcat:{strError}";
				search_off();
				modAdminCommon.Report_Error($"Fill_Aircraft_DamageInspection_Grid_Error: {Conversion.Str(adoAircraftRecordset["ac_id"])} {strError}");
				return;
			}

		}

		public void Fill_Aircraft_Maintenance_Grid()
		{
			//******************************************************************************************
			//* Note: VBC id'd the following unreferenced items and handled them as described:         *
			//*                                                                                        *
			//* Local Variables (Removed)                                                              *
			//*  acline                        tempcomp                                                *
			//******************************************************************************************

			string strError = "";
			try
			{
				string Query = "";
				string data_type = "";

				strError = "Setup";
				grd_maint.Clear();

				grd_maint.ColumnsCount = 6;
				grd_maint.RowsCount = 2;
				grd_maint.FixedRows = 1;
				grd_maint.FixedColumns = 0;
				grd_maint.BorderStyle = BorderStyle.None;

				grd_maint.CurrentRowIndex = 0;

				grd_maint.CurrentColumnIndex = 0;
				grd_maint.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_maint.SetColumnWidth(grd_maint.CurrentColumnIndex, 133);
				grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "ITEM";

				grd_maint.CurrentColumnIndex = 1;
				grd_maint.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_maint.SetColumnWidth(grd_maint.CurrentColumnIndex, 67);
				grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "C/W";

				grd_maint.CurrentColumnIndex = 2;
				grd_maint.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_maint.SetColumnWidth(grd_maint.CurrentColumnIndex, 50);
				grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "HRS";

				grd_maint.CurrentColumnIndex = 3;
				grd_maint.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_maint.SetColumnWidth(grd_maint.CurrentColumnIndex, 67);
				grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "DUE";

				grd_maint.CurrentColumnIndex = 4;
				grd_maint.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_maint.SetColumnWidth(grd_maint.CurrentColumnIndex, 50);
				grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "HRS";

				grd_maint.CurrentColumnIndex = 5;
				grd_maint.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_maint.SetColumnWidth(grd_maint.CurrentColumnIndex, 140);
				grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "NOTES";




				strError = "IN";

				Query = $"SELECT * from Aircraft_Maintenance with (NOLOCK) WHERE acmaint_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
				Query = $"{Query}  ORDER BY acmaint_complied_date asc  ";

				snp_Inspect_Journal = null; //aey 6/10/04
				snp_Inspect_Journal = new ADORecordSetHelper();
				snp_Inspect_Journal.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(snp_Inspect_Journal.BOF && snp_Inspect_Journal.EOF))
				{
					snp_Inspect_Journal.MoveFirst();
					grd_maint.CurrentRowIndex = 1;


					while(!snp_Inspect_Journal.EOF)
					{


						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_Inspect_Journal["acmaint_date_type"]))
						{
							data_type = Convert.ToString(snp_Inspect_Journal["acmaint_date_type"]);
						}
						else
						{
							data_type = "";
						}


						grd_maint.CurrentColumnIndex = 0;
						grd_maint.CellAlignment = DataGridViewContentAlignment.TopLeft;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_Inspect_Journal["acmaint_name"]))
						{
							grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = snp_Inspect_Journal.GetField("acmaint_name");
						}
						else
						{
							grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "";
						}


						grd_maint.CurrentColumnIndex = 1;
						grd_maint.CellAlignment = DataGridViewContentAlignment.TopLeft;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_Inspect_Journal["acmaint_complied_date"]))
						{
							grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = snp_Inspect_Journal.GetField("acmaint_complied_date");
							if (data_type.Trim() == "M")
							{
								grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = $"{Convert.ToDateTime(snp_Inspect_Journal["acmaint_complied_date"]).Month.ToString()}/{Convert.ToDateTime(snp_Inspect_Journal["acmaint_complied_date"]).Year.ToString()}";
							}
							else if (data_type.Trim() == "Y")
							{ 
								grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = Convert.ToDateTime(snp_Inspect_Journal["acmaint_complied_date"]).Year;
							}
						}
						else
						{
							grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "";
						}

						grd_maint.CurrentColumnIndex = 2;
						grd_maint.CellAlignment = DataGridViewContentAlignment.TopLeft;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_Inspect_Journal["acmaint_complied_hrs"]))
						{
							if (Convert.ToDouble(snp_Inspect_Journal["acmaint_complied_hrs"]) > 0)
							{
								grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = snp_Inspect_Journal.GetField("acmaint_complied_hrs");
							}
							else
							{
								grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "";
							}

						}
						else
						{
							grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "";
						}


						grd_maint.CurrentColumnIndex = 3;
						grd_maint.CellAlignment = DataGridViewContentAlignment.TopLeft;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_Inspect_Journal["acmaint_due_date"]))
						{
							grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = snp_Inspect_Journal.GetField("acmaint_due_date");

							if (data_type.Trim() == "M")
							{
								grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = $"{Convert.ToDateTime(snp_Inspect_Journal["acmaint_due_date"]).Month.ToString()}/{Convert.ToDateTime(snp_Inspect_Journal["acmaint_due_date"]).Year.ToString()}";
							}
							else if (data_type.Trim() == "Y")
							{ 
								grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = Convert.ToDateTime(snp_Inspect_Journal["acmaint_due_date"]).Year;
							}
						}
						else
						{
							grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "";
						}

						grd_maint.CurrentColumnIndex = 4;
						grd_maint.CellAlignment = DataGridViewContentAlignment.TopLeft;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_Inspect_Journal["acmaint_due_hrs"]))
						{
							if (Convert.ToDouble(snp_Inspect_Journal["acmaint_due_hrs"]) > 0)
							{
								grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = snp_Inspect_Journal.GetField("acmaint_due_hrs");
							}
							else
							{
								grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "";
							}
						}
						else
						{
							grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "";
						}

						grd_maint.CurrentColumnIndex = 5;
						grd_maint.CellAlignment = DataGridViewContentAlignment.TopLeft;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(snp_Inspect_Journal["acmaint_notes"]))
						{
							grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = snp_Inspect_Journal.GetField("acmaint_notes");
						}
						else
						{
							grd_maint[grd_maint.CurrentRowIndex, grd_maint.CurrentColumnIndex].Value = "";
						}

						// acmaint_date_type



						grd_maint.set_RowData(grd_maint.CurrentRowIndex, Convert.ToInt32(snp_Inspect_Journal["acmaint_id"].ToString().Trim()));

						grd_maint.RowsCount++;
						grd_maint.CurrentRowIndex++;

						snp_Inspect_Journal.MoveNext();
					};
				}

				grd_maint.RowsCount--;


				tab_damage_loaded = true;
				grd_aircraftdamage.Redraw = true;

				search_off();
			}
			catch (System.Exception excep)
			{


				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				strError = $"{Information.Err().Number.ToString()} {excep.Message} subcat:{strError}";
				search_off();
				modAdminCommon.Report_Error($"Fill_Aircraft_Maintenance_Grid_Error: {Conversion.Str(adoAircraftRecordset["ac_id"])} {strError}");
				return;
			}

		}
		private void txt_ac_engine_noise_rating_KeyPress(Object eventSender, KeyPressEventArgs eventArgs)
		{
			int KeyAscii = Convert.ToInt32(eventArgs.KeyChar);
			try
			{

				//limit input to numbers and space to clear
				if ((KeyAscii >= 48) && (KeyAscii <= 57))
				{
					if (KeyAscii == 0)
					{
						eventArgs.Handled = true;
					}
					return;
				}
				else if (KeyAscii == 32)
				{ 
					if (KeyAscii == 0)
					{
						eventArgs.Handled = true;
					}
					return;
				}
			}
			finally
			{
				if (KeyAscii == 0)
				{
					eventArgs.Handled = true;
				}
				eventArgs.KeyChar = Convert.ToChar(KeyAscii);
			}

		}


		private void txt_ac_engine_ser_no_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_engine_ser_no, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				if (Index < 3)
				{
					if (KeyCode == 40)
					{
						txt_ac_engine_ser_no[Index + 1].Focus();
					}
				}
				if (Index > 0)
				{
					if (KeyCode == 38)
					{
						txt_ac_engine_ser_no[Index - 1].Focus();
					}
				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		}

		private void txt_ac_engine_shi_hrs_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_engine_shi_hrs, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				if (Index < 3)
				{
					if (KeyCode == 40)
					{
						txt_ac_engine_shi_hrs[Index + 1].Focus();
					}
				}
				if (Index > 0)
				{
					if (KeyCode == 38)
					{
						txt_ac_engine_shi_hrs[Index - 1].Focus();
					}
				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		}

		private void txt_ac_engine_shs_cycles_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_engine_shs_cycles, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				if (Index < 3)
				{
					if (KeyCode == 40)
					{
						txt_ac_engine_shs_cycles[Index + 1].Focus();
					}
				}
				if (Index > 0)
				{
					if (KeyCode == 38)
					{
						txt_ac_engine_shs_cycles[Index - 1].Focus();
					}
				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		}

		private void txt_ac_engine_snew_cycles_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_engine_snew_cycles, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				if (Index < 3)
				{
					if (KeyCode == 40)
					{
						txt_ac_engine_snew_cycles[Index + 1].Focus();
					}
				}
				if (Index > 0)
				{
					if (KeyCode == 38)
					{
						txt_ac_engine_snew_cycles[Index - 1].Focus();
					}
				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		}

		private void txt_ac_engine_soh_cycles_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_engine_soh_cycles, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				if (Index < 3)
				{
					if (KeyCode == 40)
					{
						txt_ac_engine_soh_cycles[Index + 1].Focus();
					}
				}
				if (Index > 0)
				{
					if (KeyCode == 38)
					{
						txt_ac_engine_soh_cycles[Index - 1].Focus();
					}
				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		}

		private void txt_ac_engine_soh_hrs_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_engine_soh_hrs, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				if (Index < 3)
				{
					if (KeyCode == 40)
					{
						txt_ac_engine_soh_hrs[Index + 1].Focus();
					}
				}
				if (Index > 0)
				{
					if (KeyCode == 38)
					{
						txt_ac_engine_soh_hrs[Index - 1].Focus();
					}
				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		}

		private void txt_ac_engine_tbo_hrs_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_engine_tbo_hrs, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				if (Index < 3)
				{
					if (KeyCode == 40)
					{
						txt_ac_engine_tbo_hrs[Index + 1].Focus();
					}
				}
				if (Index > 0)
				{
					if (KeyCode == 38)
					{
						txt_ac_engine_tbo_hrs[Index - 1].Focus();
					}
				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		}

		private void txt_ac_engine_tot_hrs_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_engine_tot_hrs, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				if (Index < 3)
				{
					if (KeyCode == 40)
					{
						txt_ac_engine_tot_hrs[Index + 1].Focus();
					}
				}
				if (Index > 0)
				{
					if (KeyCode == 38)
					{
						txt_ac_engine_tot_hrs[Index - 1].Focus();
					}
				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		}

		private void txt_ac_id_Click(Object eventSender, EventArgs eventArgs) => ToolTipMain.SetToolTip(txt_ac_id, txt_ac_id.Text);


		private void txt_ac_prop_ser_no_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_prop_ser_no, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				if (Index < 3)
				{
					if (KeyCode == 40)
					{
						txt_ac_prop_ser_no[Index + 1].Focus();
					}
				}
				if (Index > 0)
				{
					if (KeyCode == 38)
					{
						txt_ac_prop_ser_no[Index - 1].Focus();
					}
				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		}

		private void txt_ac_prop_snew_hrs_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_prop_snew_hrs, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				if (Index < 3)
				{
					if (KeyCode == 40)
					{
						txt_ac_prop_snew_hrs[Index + 1].Focus();
					}
				}
				if (Index > 0)
				{
					if (KeyCode == 38)
					{
						txt_ac_prop_snew_hrs[Index - 1].Focus();
					}
				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		}

		private void txt_ac_prop_soh_hrs_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_prop_soh_hrs, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				if (Index < 3)
				{
					if (KeyCode == 40)
					{
						txt_ac_prop_soh_hrs[Index + 1].Focus();
					}
				}
				if (Index > 0)
				{
					if (KeyCode == 38)
					{
						txt_ac_prop_soh_hrs[Index - 1].Focus();
					}
				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		}

		private void txt_ac_prop_soh_mo_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_prop_soh_mo, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				if (Index < 3)
				{
					if (KeyCode == 40)
					{
						txt_ac_prop_soh_mo[Index + 1].Focus();
					}
				}
				if (Index > 0)
				{
					if (KeyCode == 38)
					{
						txt_ac_prop_soh_mo[Index - 1].Focus();
					}
				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		}

		private void txt_ac_prop_soh_year_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_prop_soh_year, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				if (Index < 3)
				{
					if (KeyCode == 40)
					{
						txt_ac_prop_soh_year[Index + 1].Focus();
					}
				}
				if (Index > 0)
				{
					if (KeyCode == 38)
					{
						txt_ac_prop_soh_year[Index - 1].Focus();
					}
				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}

		}

		private void txt_ac_purchase_date_Leave(Object eventSender, EventArgs eventArgs)
		{

			//date validation aey 8/12/04
			if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0 && txt_ac_purchase_date.Text != modGlobalVars.cEmptyString && Convert.ToString(adoAircraftRecordset["ac_purchase_date"]) != txt_ac_purchase_date.Text)
			{

				if (Convert.ToDateTime(txt_ac_purchase_date.Text) > Convert.ToDateTime(txtHistoryDate.Text))
				{

					MessageBox.Show("Historical Purchase Date cannot come before transaction date", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_ac_purchase_date.Text = $"{Convert.ToString(adoAircraftRecordset["ac_purchase_date"])}{modGlobalVars.cEmptyString}";
				}

			}

		}

		private void txt_ac_reg_no_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_reg_no, eventSender);

			ToolTipMain.SetToolTip(txt_ac_reg_no[Index], txt_ac_reg_no[Index].Text);

		}

		private void txt_ac_reg_no_DoubleClick(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_reg_no, eventSender);

			switch(Index)
			{
				case 0 :  // RegNbr 
					// Temp Hold - Need to Review With Jackie 
					//EMail_RegNbr_Request_To_FAA adoAircraftRecordset!AC_ID, txt_ac_reg_no(Index).Text 
					break;
			} // Case Index

		}

		private void txt_ac_sale_price_DoubleClick(Object eventSender, EventArgs eventArgs)
		{


			//UPGRADE_TODO: (1067) Member Clear_Search_Criteria is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_NEW].Clear_Search_Criteria(true, true, true);
			//UPGRADE_TODO: (1067) Member cmd_sale_source is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_NEW].cmd_sale_source.Visible = true;
			//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_NEW].Show();
			//UPGRADE_TODO: (1067) Member ZOrder is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_NEW].ZOrder(0);
			//UPGRADE_TODO: (1067) Member SetFocus is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_NEW].Focus();


		}


		private void txt_ac_ser_no_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_ac_ser_no, eventSender);
			ToolTipMain.SetToolTip(txt_ac_ser_no[Index], txt_ac_ser_no[Index].Text);
		}

		private void txt_ac_ser_no_KeyPress(Object eventSender, KeyPressEventArgs eventArgs)
		{
			int KeyAscii = Convert.ToInt32(eventArgs.KeyChar);
			try
			{

				//UPGRADE_ISSUE: (1058) Assignment not supported: KeyAscii to a non-positive constant More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-1058
				KeyAscii = Strings.Asc(Strings.Chr(KeyAscii).ToString().ToUpper()[0]);
			}
			finally
			{
				if (KeyAscii == 0)
				{
					eventArgs.Handled = true;
				}
				eventArgs.KeyChar = Convert.ToChar(KeyAscii);
			}

		}

		private void txt_amod_type_code_Click(Object eventSender, EventArgs eventArgs)
		{
			ToolTipMain.SetToolTip(txt_amod_type_code, txt_amod_type_code.Text);
			ToolTipMain.SetToolTip(lbl_gen[0], txt_amod_type_code.Text);
		}

		private void txt_customer_notes_MouseDown(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;
			if (Shift == 2)
			{
				modAdminCommon.gbl_Aircraft_ID = Convert.ToInt32(Double.Parse(txt_ac_id.Text));
				frm_Transaction_Documents.DefInstance.Journal_ID = tmp_ac_journ_id;
				frm_Transaction_Documents.DefInstance.Entry_Point = "Aircraft";
				frm_Transaction_Documents.DefInstance.Show();
				Unload_Aircraft_Form();
				this.Close();
			}
		}

		private void txt_exclusive_verify_date_Leave(Object eventSender, EventArgs eventArgs)
		{
			//aey 1/5/2005 check date range

			if (Information.IsDate(txt_exclusive_verify_date.Text))
			{
				if (((int) DateAndTime.DateDiff("D", DateTime.Parse(modAdminCommon.GetDateTime()), DateTime.Parse(txt_exclusive_verify_date.Text), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1)) < 0)
				{
					MessageBox.Show("Exclusive verify date preceeds today's date", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
				}
			}

		}

		private void txt_Edit_Heli_Leave(Object eventSender, EventArgs eventArgs)
		{

			if (RememberGridRow > 0 && bEdit_HelicopterGrid_Outstanding)
			{

				if (RememberGridCol > 2 && !modCommon.IsNumber(txt_edit_heli.Text.Trim()))
				{
					MessageBox.Show("Numeric Data Only", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					txt_edit_heli.Text = modGlobalVars.cEmptyString;
					txt_edit_heli.Focus();
					return;
				}

				modGridEditCommon.InPlace_Grid_Reset(GrdHelicopter, txt_edit_heli, RememberGridRow, RememberGridCol);
				bEdit_HelicopterGrid_Outstanding = false;

				GrdHelicopter.Redraw = true;

			}

		}

		public void Launch_To_Journal_If_Necessary()
		{

			if (HistoricalJournalID > 0)
			{
				frm_Journal.DefInstance.Reference_Journal_ID = HistoricalJournalID;
				modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
				frm_Journal.DefInstance.ShowDialog();
				HistoricalJournalID = 0;
			}

			if (For_Sale_Journ_ID > 0)
			{
				//Call Verify_Aircraft(adoAircraftRecordset!AC_ID, primary_comp_id, 0, 0)
				frm_Journal.DefInstance.Reference_Journal_ID = For_Sale_Journ_ID;
				modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
				frm_Journal.DefInstance.ShowDialog();
				// will not hit next line of code until the form closes
				// This function will call a stored procedure that will put the Verified status as not for sale 'VS' journ_subcategory_code into the Journal table
				// Changed to call the function after the user selects a company from the modal journal form
				// Tom 5/21/10
				modCommon.Verify_Aircraft(Convert.ToInt32(adoAircraftRecordset["ac_id"]), frm_Journal.DefInstance.Reference_Comp_Id, 0, 0);
				For_Sale_Journ_ID = 0;
			}

			if (Status_Change_Journ_ID > 0)
			{
				frm_Journal.DefInstance.Reference_Journal_ID = Status_Change_Journ_ID;
				modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
				frm_Journal.DefInstance.ShowDialog();
				Status_Change_Journ_ID = 0;
			}


			if (Serial_Number_Change_Journ_ID > 0)
			{
				frm_Journal.DefInstance.Reference_Journal_ID = Serial_Number_Change_Journ_ID;
				modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
				frm_Journal.DefInstance.ShowDialog();
				Serial_Number_Change_Journ_ID = 0;
			}

			if (Model_Change_Journ_ID > 0)
			{
				frm_Journal.DefInstance.Reference_Journal_ID = Model_Change_Journ_ID;
				modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
				frm_Journal.DefInstance.ShowDialog();
				Model_Change_Journ_ID = 0;
			}

			if (Remove_Exclusive_Journ_ID > 0)
			{
				frm_Journal.DefInstance.Reference_Journal_ID = Remove_Exclusive_Journ_ID;
				modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
				frm_Journal.DefInstance.ShowDialog();
				Remove_Exclusive_Journ_ID = 0;
			}

			this.Activate();
			search_off();

		}

		public void Add_To_Transmit_List(string inFieldName)
		{

			try
			{

				arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = inFieldName;
				arr_Transmit_Fields = ArraysHelper.RedimPreserve(arr_Transmit_Fields, new int[]{arr_Transmit_Fields.GetUpperBound(0) + 2});
			}
			catch
			{

				arr_Transmit_Fields = new string[]{""};
				arr_Transmit_Fields[arr_Transmit_Fields.GetUpperBound(0)] = inFieldName;
				return;
			}

		}

		public void Fill_FAA_Doc_Grid()
		{
			//******************************************************************************************
			//
			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO SELECT AND DISPLAY RECORDS
			//          TO THE FAA DOCUMENTS GRID LOCATED ON THE FAA DOCUMENTS TAB.

			// MODIFIED: RICK WANNER - 11/5/02 - CHANGED TO ADO
			//******************************************************************************************

			string errMsg = "";
			try
			{

				int TotFound = 0;
				string Query = "";
				string cellcolor = "";
				int lACId = 0;
				string strDocType = "";
				System.DateTime dtDocDate = DateTime.FromOADate(0);
				bool bPossibleDuplicateDoc = false;

				errMsg = "init";
				cellcolor = modAdminCommon.NoColor;
				search_on("Filling Document Grid...");
				TotFound = 0;

				grd_DocumentLog.Clear();
				grd_DocumentLog.Visible = false;

				cmdSaveDocNotes[0].Visible = false;
				cmdSaveDocNotes[2].Visible = false;
				cmdSaveDocNotes[3].Visible = false;

				cboAcctRep[0].Visible = false;

				txtDocNotes[0].Visible = false;
				txtDocNotes[2].Visible = false;
				txtDocNotes[3].Visible = false;

				lbl_gen[63].Visible = false;
				lbl_gen[93].Visible = false;
				lbl_gen[94].Visible = false;


				web_Browser.Visible = false;

				cmdViewDocumentInSeparateWindow.Visible = false;
				lbl_gen[122].Visible = false; // Open In Browser
				lbl_gen[124].Visible = false; // Attach Doc To Company

				grd_DocumentLog.ColumnsCount = 10;
				grd_DocumentLog.CurrentRowIndex = 0;
				grd_DocumentLog.CurrentColumnIndex = 0;
				grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = "Type";
				grd_DocumentLog.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_DocumentLog.SetColumnWidth(0, 47);

				grd_DocumentLog.CurrentColumnIndex = 1;
				grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = "Tape#";
				grd_DocumentLog.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_DocumentLog.SetColumnWidth(1, 47);

				grd_DocumentLog.CurrentColumnIndex = 2;
				grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = "Tape Date";
				grd_DocumentLog.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_DocumentLog.SetColumnWidth(2, 67);

				grd_DocumentLog.CurrentColumnIndex = 3;
				grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = "Doc Date";
				grd_DocumentLog.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_DocumentLog.SetColumnWidth(3, 67);

				grd_DocumentLog.CurrentColumnIndex = 4;
				grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = "Frame Start";
				grd_DocumentLog.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_DocumentLog.SetColumnWidth(4, 67);

				grd_DocumentLog.CurrentColumnIndex = 5;
				grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = "Frame Start";
				grd_DocumentLog.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_DocumentLog.SetColumnWidth(5, 67);

				grd_DocumentLog.CurrentColumnIndex = 6;
				grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = "Rolled By";
				grd_DocumentLog.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_DocumentLog.SetColumnWidth(6, 60);

				grd_DocumentLog.CurrentColumnIndex = 7;
				grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = "Assigned To";
				grd_DocumentLog.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_DocumentLog.SetColumnWidth(7, 67);

				grd_DocumentLog.CurrentColumnIndex = 8;
				grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = "Log ID";
				grd_DocumentLog.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_DocumentLog.SetColumnWidth(8, 60);

				grd_DocumentLog.CurrentColumnIndex = 9;
				grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = "Notes";
				grd_DocumentLog.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_DocumentLog.SetColumnWidth(9, 400);

				Query = "SELECT * FROM FAA_Document_Log WITH (NOLOCK) ";
				Query = $"{Query}WHERE (faalog_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}) ";
				Query = $"{Query}AND (faalog_journ_id = 0) ";
				Query = $"{Query}ORDER BY faalog_tape_no,faalog_tape_date,faalog_id ";

				errMsg = "open rc";
				// *************************************************
				// ENSURE RECORDSET IS PROPERLY CLOSES AND REOPENED
				if (ado_DocLog != null)
				{
					if (ado_DocLog.State == ConnectionState.Open)
					{
						ado_DocLog.Close();
					}
					ado_DocLog = null;
				}
				ado_DocLog = new ADORecordSetHelper();
				// ************************************************
				// OPEN RECORSET AND SELECT DATA
				errMsg = "open RC";

				ado_DocLog.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockOptimistic);
				errMsg = "open";
				if (!(ado_DocLog.BOF && ado_DocLog.EOF))
				{
					grd_DocumentLog.RowsCount = 1;

					grd_DocumentLog.RowsCount++;
					grd_DocumentLog.CurrentRowIndex = 1;
					errMsg = "do while";
					ToolTipMain.SetToolTip(grd_DocumentLog, "");


					while(!ado_DocLog.EOF)
					{

						lACId = Convert.ToInt32(ado_DocLog["faalog_ac_id"]);
						strDocType = ($"{Convert.ToString(ado_DocLog["faalog_doc_type"])} ").Trim();
						dtDocDate = DateTime.Parse("1/1/1900");
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_DocLog["faalog_document_date"]))
						{
							dtDocDate = Convert.ToDateTime(ado_DocLog["faalog_document_date"]);
							ToolTipMain.SetToolTip(grd_DocumentLog, "Grayed DocType Means Document Is A Possible Duplicate");
						}

						cellcolor = modAdminCommon.NoColor;
						bPossibleDuplicateDoc = modCommon.IsDocumentAPossibleDuplicate(lACId, strDocType, dtDocDate);

						//---------------------------------------------------
						// Used To Check If Document Is A Duplicate
						grd_DocumentLog.set_RowData(grd_DocumentLog.CurrentRowIndex, 0);

						// DOCUMENT TYPE
						grd_DocumentLog.CurrentColumnIndex = 0;
						grd_DocumentLog.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						if (bPossibleDuplicateDoc)
						{
							grd_DocumentLog.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.InactiveColor)));
							grd_DocumentLog.set_RowData(grd_DocumentLog.CurrentRowIndex, -1); // Set To -1 If Possible Duplicate
						}
						grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = $" {($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_doc_type"])}").Trim()}";

						// TAPE#
						grd_DocumentLog.CurrentColumnIndex = 1;
						grd_DocumentLog.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = $" {($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_tape_no"])}").Trim()}";

						// TAPE DATE
						grd_DocumentLog.CurrentColumnIndex = 2;
						grd_DocumentLog.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						System.DateTime TempDate2 = DateTime.FromOADate(0);
						grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = $" {((DateTime.TryParse(($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_tape_date"])}").Trim(), out TempDate2)) ? TempDate2.ToString("MM/dd/yyyy") : ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_tape_date"])}").Trim())}";

						// DOCUMENT DATE
						grd_DocumentLog.CurrentColumnIndex = 3;
						grd_DocumentLog.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						System.DateTime TempDate3 = DateTime.FromOADate(0);
						grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = $" {((DateTime.TryParse(($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_document_date"])}").Trim(), out TempDate3)) ? TempDate3.ToString("MM/dd/yyyy") : ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_document_date"])}").Trim())}";

						// FRAME# START
						grd_DocumentLog.CurrentColumnIndex = 4;
						grd_DocumentLog.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_starting_frame_no"])}").Trim();

						// FRAME# END
						grd_DocumentLog.CurrentColumnIndex = 5;
						grd_DocumentLog.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_ending_frame_no"])}").Trim();

						// USER
						grd_DocumentLog.CurrentColumnIndex = 6;
						grd_DocumentLog.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_rolled_by_user_id"])}").Trim();

						// user ID
						grd_DocumentLog.CurrentColumnIndex = 7;
						grd_DocumentLog.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_user_id"])}").Trim();
						grd_DocumentLog.CurrentColumnIndex++;

						// LOG ID
						grd_DocumentLog.CurrentColumnIndex = 8;
						grd_DocumentLog.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_id"])}").Trim();
						grd_DocumentLog.CurrentColumnIndex++;

						// NOTES
						grd_DocumentLog.CurrentColumnIndex = 9;
						grd_DocumentLog.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_DocumentLog[grd_DocumentLog.CurrentRowIndex, grd_DocumentLog.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_DocLog["faalog_general_note"])}").Trim();
						//grd_DocumentLog.Col = grd_DocumentLog.Col + 1

						TotFound++;
						ado_DocLog.MoveNext();
						grd_DocumentLog.RowsCount++;
						grd_DocumentLog.CurrentRowIndex++;
						grd_DocumentLog.CurrentColumnIndex = 0;

					};

					if (grd_DocumentLog.RowsCount > 2)
					{
						grd_DocumentLog.RemoveItem(grd_DocumentLog.RowsCount - 1);
					}

					grd_DocumentLog.Visible = true;
				}
				else
				{
					// no document log matches found
					grd_DocumentLog.Visible = false;

				}
				// if document log matches found
				errMsg = "close";

				grd_DocumentLog.CurrentRowIndex = 0;
				grd_DocumentLog.CurrentColumnIndex = 0;
				cmd_DocsInProcessRefresh.Visible = true;

				tab_faa_loaded = true;

				search_off();

				grd_DocumentLog.Redraw = true;
				Application.DoEvents();
			}
			catch (Exception e)
			{

				//UPGRADE_TODO: (1065) Error handling statement (Resume Next) could not be converted. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1065
				UpgradeHelpers.Helpers.NotUpgradedHelper.NotifyNotUpgradedElement("Resume Next Statement");

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				if (Information.Err().Number == 3146)
				{
					MessageBox.Show($"There are too many records to display.{Environment.NewLine}{Environment.NewLine}Please refine your search criteria and try again.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					search_off();
					return;
				}
				else
				{
					//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
					modAdminCommon.Report_Error($"Fill_FAA_Doc_Grid_Error: {errMsg} {Information.Err().Number.ToString()}{Environment.NewLine} {e.Message}");
					search_off();
					return;
				}
			}

		}

		public bool Take_Aircraft_Off_Lease(int inAircraft_ID)
		{
			bool result = false;
			string Query = "";

			try
			{
				result = false;

				// DELETE ALL OF THE LEASE REFERENCES ASSOCIATED WITH THE AIRCRAFT
				Query = $"DELETE FROM Aircraft_Reference WHERE cref_ac_id = {inAircraft_ID.ToString()}";
				Query = $"{Query} AND cref_journ_id = 0 and cref_contact_type in ('12','13','39','57')";
				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();

				// CHANGE THE STATUS OF THE AIRCRAFT TO NOT LEASED
				Query = "UPDATE Aircraft SET ac_lease_flag = 'N'";
				Query = $"{Query} WHERE ac_id = {inAircraft_ID.ToString()}";
				Query = $"{Query} AND ac_journ_id = 0";

				DbCommand TempCommand_2 = null;
				TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
				TempCommand_2.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
				TempCommand_2.ExecuteNonQuery();

				return true;
			}
			catch (System.Exception excep)
			{

				result = false;
				modAdminCommon.Report_Error($"Take_Aircraft_Off_Lease_Error: {excep.Message}", "Aircraft");
				search_off();
			}
			return result;
		}

		public int Get_Reference_ID(int inAircraft_ID, int inJournal_ID, string inContact_Type, int inCompany_ID, int inContact_ID)
		{
			int result = 0;
			string Query = "";
			try
			{
				ADORecordSetHelper snpCount = new ADORecordSetHelper();

				//  FIRST CHECK FOR A SPECIFIC REFERENCE RECORD MATCHING THIS CONTACT
				//  TYPE, COMPANY ID, AND CONTACT ID
				Query = "SELECT cref_id ";
				Query = $"{Query}FROM Aircraft_Reference WITH(NOLOCK)";
				Query = $"{Query} WHERE cref_ac_id = {inAircraft_ID.ToString()}";
				Query = $"{Query} AND cref_journ_id = {inJournal_ID.ToString()}";
				Query = $"{Query} AND cref_comp_id = {inCompany_ID.ToString()}";
				Query = $"{Query} AND cref_contact_id = {inContact_ID.ToString()}";
				Query = $"{Query} AND cref_contact_type = '{inContact_Type}'";
				snpCount.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(snpCount.BOF && snpCount.EOF))
				{
					result = Convert.ToInt32(snpCount["cref_id"]);
				}
				else
				{
					result = 0;
				}

				// IF NO MATCH AT THE CONTACT ID LEVEL THEN JUST MATCH ON THE
				// CONTACT TYPE AND COMPANY ID
				if (result == 0)
				{
					if (snpCount.State == ConnectionState.Open)
					{
						snpCount.Close();
					}

					Query = "SELECT cref_id ";
					Query = $"{Query}FROM Aircraft_Reference WITH(NOLOCK)";
					Query = $"{Query} WHERE cref_ac_id = {inAircraft_ID.ToString()}";
					Query = $"{Query} AND cref_journ_id = {inJournal_ID.ToString()}";
					Query = $"{Query} AND cref_comp_id = {inCompany_ID.ToString()}";
					Query = $"{Query} AND cref_contact_type = '{inContact_Type}'";
					snpCount.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

					if (!(snpCount.BOF && snpCount.EOF))
					{
						result = Convert.ToInt32(snpCount["cref_id"]);
					}
				}
				snpCount.Close();
				snpCount = null;
			}
			catch
			{

				modAdminCommon.Report_Error($"Get_Reference_ID_Error:{Query}");
			}
			return result;
		}

		public void Transaction_Save_Aircraft()
		{
			//******************************************************************************************
			//
			// Purpose:    The purpose of this procedure is to handle all activities necessary
			//             from a user choosing to save information.
			// Changed By: Rick Wanner
			// Modified:   10/8/2002
			//
			//******************************************************************************************
			string User_Message = "";
			string strError = "";
			int ErrCount = 0;
			try
			{
				 // message displayed to user for confirmations
				bool Clear_Specs_Flag = false; // flag for indicating user desired to clear specifications
				string OnOffMarketFlag = "";
				string OnOffMarketStart = "";
				int OnOffMarketHowLong = 0;
				int LifeCycleTemp = 0; //7/7/04 aey
				bool bHadChanges = false;
				bHadChanges = false;
				string old_reg_no = "";
				bool sold_Was_blank = false;
				int old_sold_price = 0;
				string Query = "";

				// RTW MODIFIED - 2/12/2012 - CHANGED TO USE ONE QUERY INSTEAD OF 4
				bool modelProductB = false;
				modelProductB = false;
				bool modelProductH = false;
				modelProductH = false;
				bool modelProductC = false;
				modelProductC = false;
				bool modelProductP = false;
				modelProductP = false;
				string reg_no_issue = "";

				ADORecordSetHelper ModelCodes = new ADORecordSetHelper();
				string strQuery = "";

				string strMsg = "";
				System.DateTime dtStartDate = DateTime.FromOADate(0);
				System.DateTime dtEndDate = DateTime.FromOADate(0);
				string strMaintained = "";
				string strStatus = "";
				string strQuery1 = "";
				string WhatChanged = "";
				string previous_source = "";
				string original_usage = "";
				bool insert_8week = false;
				string eo_type = "";
				bool has_eo = false;
				string ehsi_type = "";
				bool has_ehsi = false;
				bool has_eo_maint = false;
				bool has_ehsi_maint = false;
				string eo_month = "";
				string eo_year = "";
				string ehsi_month = "";
				string ehsi_year = "";
				string confidential_notes = "";
				eo_type = "M";
				ehsi_type = "M";
				has_eo = false;
				has_ehsi = false;
				has_eo_maint = false;
				has_ehsi_maint = false;

				sold_Was_blank = false;
				WhatChanged = "";
				insert_8week = false;
				old_reg_no = "";
				confidential_notes = "";
				strStatus = "Status #1";
				original_usage = "";
				old_sold_price = 0;
				previous_source = "";




				strQuery = "SELECT amod_product_business_flag,amod_product_helicopter_flag,amod_product_commercial_flag,amod_product_airbp_flag ";
				strQuery = $"{strQuery}FROM Aircraft_Model WITH (NOLOCK) ";
				strQuery = $"{strQuery}WHERE (amod_id = {Convert.ToString(adoAircraftRecordset["ac_amod_id"])}) ";

				ModelCodes.Open(strQuery, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if ((!ModelCodes.BOF) && (!ModelCodes.EOF))
				{
					//DLookUp = ModelCodes.fields(0).Value & ""
					modelProductB = Convert.ToString(ModelCodes["amod_product_business_flag"]) == "Y";
					modelProductH = Convert.ToString(ModelCodes["amod_product_helicopter_flag"]) == "Y";
					modelProductC = Convert.ToString(ModelCodes["amod_product_commercial_flag"]) == "Y";
					modelProductP = Convert.ToString(ModelCodes["amod_product_airbp_flag"]) == "Y";
				}

				ModelCodes.Close();
				ModelCodes = null;

				OnOffMarketFlag = modGlobalVars.cEmptyString;

				strError = "wanteds";
				ErrCount = 0;

				if (adoAircraftRecordset.State == ConnectionState.Closed)
				{ //2/16/05 aey
					strError = "aircraft recordset closed";
					throw new Exception();
				}

				//UPGRADE_ISSUE: (2064) ADODB.CursorOptionEnum property CursorOptionEnum.adResync was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_ISSUE: (2064) ADODB.Recordset method adoAircraftRecordset.Supports was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				if (adoAircraftRecordset.Supports(UpgradeStubs.ADODB_CursorOptionEnum.getadResync()))
				{ //aey 4/11/05 moved up
					strError = $"availability 2a-Requery {((int) adoAircraftRecordset.Status).ToString()}";
					// Temp Hold
					//adoAircraftRecordset.Resync    '(adAffectCurrent, adResyncUnderlyingValues)
					//adoAircraftRecordset.Resync adAffectCurrent, adResyncUnderlyingValues
					if (adoAircraftRecordset.State == ConnectionState.Open)
					{
						//UPGRADE_WARNING: (1068) adoAircraftRecordset.Source of type object is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
						strQuery1 = Convert.ToString(adoAircraftRecordset.Source);
						adoAircraftRecordset.CancelBatch(); // added in MSW - 1/20/17
						adoAircraftRecordset.CancelUpdate(); // added in MSW - 1/20/17
						adoAircraftRecordset.Close();
						adoAircraftRecordset.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockOptimistic);
					}
				}

				modAdminCommon.HasWanteds = CheckForWanteds(Convert.ToInt32(adoAircraftRecordset["ac_id"]));

				strError = "has wanteds";

				if (modAdminCommon.HasWanteds)
				{
					modAdminCommon.HasWanteds = tmp_ac_forsale_flag == CheckState.Checked && chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Unchecked;
				}

				strError = "excl";

				RemoveExclusive = false;
				search_on("Saving Aircraft Information...");

				TransmitRecordAction = "C";

				strError = "availability 1";
				//================================================
				// IF NOT FOR SALE, THEN CLEAR AVAILABILITY FIELDS
				if (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Unchecked)
				{
					cbo_ac_delivery.SelectedIndex = 0;
					cbo_ac_asking.SelectedIndex = 0;
					txt_ac_asking_price.Text = modGlobalVars.cEmptyString;
					txt_ac_list_date.Text = modGlobalVars.cEmptyString;
					txt_ac_delivery_date.Text = modGlobalVars.cEmptyString;
					cbo_ac_foreign_currency_name.SelectedIndex = -1;
					txt_ac_foreign_currency_price.Text = modGlobalVars.cEmptyString;
					// added MSW 7/8/13
					txt_ac_hidden_asking_price.Text = modGlobalVars.cEmptyString;
				}

				strError = "Check for Changes";
				// *********************************************
				// IF NO CHANGES THEN NO REASON TO SAVE - SO EXIT
				if (!Validate_Aircraft())
				{
					search_off();
					return;
				}

				// ------------- ADDED MSW ----------------------
				has_eo_maint = Check_If_Maint_Exists("Engine Overhaul", Reference_Aircraft_ID, ref eo_month, ref eo_year);
				has_ehsi_maint = Check_If_Maint_Exists("Engine Hot Section Inspection", Reference_Aircraft_ID, ref ehsi_month, ref ehsi_year);


				if (Strings.Len(($"{txt_ac_maint_eoh_mo.Text}{txt_ac_maint_eoh_year.Text}").Trim()) == 6 || Strings.Len(($"{txt_ac_maint_eoh_mo.Text}{txt_ac_maint_eoh_year.Text}").Trim()) == 5)
				{
					eo_type = "M";
					has_eo = true;
				}
				else if (Strings.Len(($"{txt_ac_maint_eoh_mo.Text}{txt_ac_maint_eoh_year.Text}").Trim()) == 4)
				{ 
					eo_type = "Y";
					has_eo = true;
				}

				if (Strings.Len(($"{txt_ac_maint_hots_mo.Text}{txt_ac_maint_hots_year.Text}").Trim()) == 6 || Strings.Len(($"{txt_ac_maint_hots_mo.Text}{txt_ac_maint_hots_year.Text}").Trim()) == 5)
				{
					ehsi_type = "M";
					has_ehsi = true;
				}
				else if (Strings.Len(($"{txt_ac_maint_hots_mo.Text}{txt_ac_maint_hots_year.Text}").Trim()) == 4)
				{ 
					ehsi_type = "Y";
					has_ehsi = true;
				}

				if (has_eo_maint && !has_eo)
				{
					txt_ac_maint_eoh_mo.Text = eo_month.Trim();
					txt_ac_maint_eoh_year.Text = eo_year.Trim();
				}

				if (has_ehsi_maint && !has_ehsi)
				{
					txt_ac_maint_hots_mo.Text = ehsi_month.Trim();
					txt_ac_maint_hots_year.Text = ehsi_year.Trim();
				}
				//-----------------------------------------------------------------------------------

				// MOVED TO HERE MSW - 4/6/18
				if (ASK_TO_CLEAR_NOTES)
				{
					if (frm_aircraft.DefInstance.txt_ac_confidential_notes.Text.Trim() != "")
					{
						if (Strings.Len(frm_aircraft.DefInstance.txt_ac_confidential_notes.Text.Trim()) > 2)
						{
							//   If MsgBox("Would You Like To Clear The Notes on this Aircraft?", vbYesNo) = vbYes Then
							confidential_notes = frm_aircraft.DefInstance.txt_ac_confidential_notes.Text;
							frm_aircraft.DefInstance.txt_ac_confidential_notes.Text = "";
							//  End If
						}
					}
				}


				// if the notes have been cleared, but they were not cleared before - 12/6/21
				if (confidential_notes.Trim() == "" && Convert.ToString(txt_ac_confidential_notes.Tag).Trim() != "")
				{
					confidential_notes = Convert.ToString(txt_ac_confidential_notes.Tag).Trim();
				}

				//if the status has changed and it is now written off or withdrawn from use then ask as well
				// added MSW - 5/2/19
				if ((Convert.ToInt32(Double.Parse((tmp_ac_status.Trim() != cbo_ac_status.Text.Trim()).ToString().Trim())) & ((cbo_ac_status.Text.StartsWith("Withdrawn From Use", StringComparison.Ordinal) || cbo_ac_status.Text.StartsWith("Written Off", StringComparison.Ordinal)) ? -1 : 0)) != 0)
				{
					if (MessageBox.Show("Would You Like To Clear The Maintained Field?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
					{
						cbo_ac_warranty_notes.SelectedIndex = 0;
					}

					// added MSW - 6/13/22    -  changed - 7/14/22 - just changed wording patty/kathyryn
					if (MessageBox.Show("Would You Like To Remove All Engine Serial Numbers?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
					{
						//If MsgBox("Would You Like To Clear The All Serial Number Fields?", vbYesNo) = vbYes Then
						clear_serials();
					}
				}





				// If ASK_TO_CLEAR_MAINT = True Then
				//  If chkArray(chkAvailableFlag_INDEX).Value = 0 Then   ' added/ changed MSW - 10/21/2020
				if ((Convert.ToInt32(Double.Parse((tmp_ac_status.Trim() != cbo_ac_status.Text.Trim()).ToString().Trim())) & ((cbo_ac_status.Text.StartsWith("Written Off", StringComparison.Ordinal)) ? -1 : 0)) != 0)
				{
					if (MessageBox.Show("Would You Like To Clear The Maintenance Data?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
					{

						cbo_ac_stage_SelectedIndexChanged(cbo_ac_stage, new EventArgs());
						//cbo_ac_engine_maint_prog.ListIndex = 70
						//cbo_ac_engine_management_prog_EMGP.ListIndex = 19
						//cbo_ac_airframe_maintenance_prog_AMP.ListIndex = 70
						//cbo_ac_airframe_maint_tracking_prog_AMTP.ListIndex = 37
					}
				}
				//    End If
				//  End If



				reg_no_issue = "";
				old_reg_no = "";
				original_usage = "";
				bHadChanges = CheckForAnyChanges(ref reg_no_issue, ref old_reg_no, ref WhatChanged, ref sold_Was_blank, ref old_sold_price, ref original_usage, ref insert_8week);

				// add the checks for product codes
				// only update if value has changed
				// also only update if the product code has been enabled for this aircraft

				int tempForEndVar = chk_ac_product.GetUpperBound(0);
				for (int I = 0; I <= tempForEndVar; I++)
				{


					switch((I))
					{
						case modGlobalVars.CHK_BUSINESS_IDX : 
							//UPGRADE_ISSUE: (2064) CheckBox property chk_ac_product.DataChanged was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
							if (chk_ac_product[I].CheckState == CheckState.Checked && chk_ac_product[I].getDataChanged())
							{
								//UPGRADE_WARNING: (1068) adoAircraftRecordset().OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
								if (Convert.ToString(adoAircraftRecordset.GetField("ac_product_business_flag").OriginalValue) != "Y")
								{
									adoAircraftRecordset["ac_product_business_flag"] = "Y";
									bHadChanges = true;
								}
							}
							else if (chk_ac_product[I].CheckState == CheckState.Unchecked && chk_ac_product[I].getDataChanged())
							{ 
								//UPGRADE_WARNING: (1068) adoAircraftRecordset().OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
								if (Convert.ToString(adoAircraftRecordset.GetField("ac_product_business_flag").OriginalValue) != "N")
								{
									adoAircraftRecordset["ac_product_business_flag"] = "N";
									bHadChanges = true;
								}
							} 
							break;
						case modGlobalVars.CHK_HELICOPTER_IDX : 
							//UPGRADE_ISSUE: (2064) CheckBox property chk_ac_product.DataChanged was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
							if (chk_ac_product[I].CheckState == CheckState.Checked && chk_ac_product[I].getDataChanged())
							{
								//UPGRADE_WARNING: (1068) adoAircraftRecordset().OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
								if (Convert.ToString(adoAircraftRecordset.GetField("ac_product_helicopter_flag").OriginalValue) != "Y")
								{
									adoAircraftRecordset["ac_product_helicopter_flag"] = "Y";
									bHadChanges = true;
								}
							}
							else if (chk_ac_product[I].CheckState == CheckState.Unchecked && chk_ac_product[I].getDataChanged())
							{ 
								//UPGRADE_WARNING: (1068) adoAircraftRecordset().OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
								if (Convert.ToString(adoAircraftRecordset.GetField("ac_product_helicopter_flag").OriginalValue) != "N")
								{
									adoAircraftRecordset["ac_product_helicopter_flag"] = "N";
									bHadChanges = true;
								}
							} 
							break;
						case modGlobalVars.CHK_COMMERCIAL_IDX : 
							// tom check this commercial 
							//UPGRADE_ISSUE: (2064) CheckBox property chk_ac_product.DataChanged was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
							if (chk_ac_product[I].CheckState == CheckState.Checked && chk_ac_product[I].getDataChanged())
							{
								//UPGRADE_WARNING: (1068) adoAircraftRecordset().OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
								if (Convert.ToString(adoAircraftRecordset.GetField("ac_product_commercial_flag").OriginalValue) != "Y")
								{
									if (modelProductC)
									{
										adoAircraftRecordset["ac_product_commercial_flag"] = "Y";
										bHadChanges = true;
									}
								}
							}
							else if (chk_ac_product[I].CheckState == CheckState.Unchecked && chk_ac_product[I].getDataChanged())
							{ 
								//UPGRADE_WARNING: (1068) adoAircraftRecordset().OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
								if (Convert.ToString(adoAircraftRecordset.GetField("ac_product_commercial_flag").OriginalValue) != "N")
								{
									//If modelProductC = True Then   ' if its a y then update it to an N, if its N
									adoAircraftRecordset["ac_product_commercial_flag"] = "N";
									bHadChanges = true;
									//  End If
								}
							} 
							break;
						case modGlobalVars.CHK_AIRBP_IDX : 
							//UPGRADE_ISSUE: (2064) CheckBox property chk_ac_product.DataChanged was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
							if (chk_ac_product[I].CheckState == CheckState.Checked && chk_ac_product[I].getDataChanged())
							{
								//UPGRADE_WARNING: (1068) adoAircraftRecordset().OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
								if (Convert.ToString(adoAircraftRecordset.GetField("ac_product_airbp_flag").OriginalValue) != "Y")
								{
									if (modelProductP)
									{
										adoAircraftRecordset["ac_product_airbp_flag"] = "Y";
										bHadChanges = true;
									}
								}
							}
							else if (chk_ac_product[I].CheckState == CheckState.Unchecked && chk_ac_product[I].getDataChanged())
							{ 
								//UPGRADE_WARNING: (1068) adoAircraftRecordset().OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
								if (Convert.ToString(adoAircraftRecordset.GetField("ac_product_airbp_flag").OriginalValue) != "N")
								{
									if (modelProductP)
									{
										adoAircraftRecordset["ac_product_airbp_flag"] = "N";
										bHadChanges = true;
									}
								}
							} 
							break;
						case modGlobalVars.CHK_ABI_IDX : 
							//  If chk_ac_product(i).Value = vbChecked And chk_ac_product(I).DataChanged Then 
							//    If adoAircraftRecordset("ac_product_abi_flag").OriginalValue <> "Y" Then 
							//      adoAircraftRecordset("ac_product_abi_flag").Value = "Y" 
							//    End If 
							//  ElseIf chk_ac_product(I).Value = vbUnchecked And chk_ac_product(I).DataChanged Then 
							//     If adoAircraftRecordset("ac_product_abi_flag").OriginalValue <> "N" Then 
							//       adoAircraftRecordset("ac_product_abi_flag").Value = "N" 
							//     End If 
							//  End If 
							break;
						case modGlobalVars.CHK_REGIONAL_IDX : 
							//  If chk_ac_product(i).Value = vbChecked And chk_ac_product(I).DataChanged Then 
							//    If adoAircraftRecordset("ac_product_regional_flag").OriginalValue <> "Y" Then 
							//      adoAircraftRecordset("ac_product_regional_flag").Value = "Y" 
							//    End If 
							//  ElseIf chk_ac_product(I).Value = vbUnchecked And chk_ac_product(I).DataChanged Then 
							//     If adoAircraftRecordset("ac_product_regional_flag").OriginalValue <> "N" Then 
							//       adoAircraftRecordset("ac_product_regional_flag").Value = "N" 
							//     End If 
							//  End If 
							 
							break;
						default:
							 
							goto exit_for; 
							 
							break;
					}

				}
				exit_for:

				// special case if there is no product codes selected warn the user that
				// until a product code is selected the aircraft will not be transmitted

				if (Convert.ToString(adoAircraftRecordset["ac_product_business_flag"]) == "N" && Convert.ToString(adoAircraftRecordset["ac_product_helicopter_flag"]) == "N" && Convert.ToString(adoAircraftRecordset["ac_product_commercial_flag"]) == "N" && Convert.ToString(adoAircraftRecordset["ac_product_airbp_flag"]) == "N" && !bHadChanges)
				{

					MessageBox.Show($"** NO PRODUCT CODE SELECTED **{Environment.NewLine}Aircraft will not be saved untill a PRODUCT CODE is chosen!", "NO PRODUCT CODE", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
					search_off();
					return;

				}

				if (!bHadChanges)
				{
					search_off();
					return;
				}
				else
				{
					search_on($"Saving Aircraft Information...{WhatChanged}");
				}

				// PUT IN TO MAKE SURE IF YOU CHANGE THIS TO A Y OR ACCIDENT OR INCIDENT
				if (cbo_dam.Text.Trim() == "Yes" || cbo_dam.Text.Trim() == "Accident" || cbo_dam.Text.Trim() == "Incident")
				{
					if (txt_ac_damage_history_notes.Text.Trim() == "")
					{
						MessageBox.Show("You Must Enter Damage Notes if you are entering damage.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
						search_off();
						return;
					}
				}

				// if we have an airport name - 6/9/21
				if (txtBaseAirportName.Text.Trim() != "")
				{
					if ((Convert.ToString(txtIATACode.Tag).Trim() == "" || Convert.ToString(txtIATACode.Tag) == "0") && txtFAAIDCode.Text == "")
					{ // added or there is an faa code - msw - based on task/patty - 12/3/21
						if (txtBaseAirportName.Text.Trim() != "Private" && txtBaseAirportName.Text.Trim() != "Transient")
						{
							MessageBox.Show("You Must Enter a Valid Airport ICAO/IATA or 'Private' or 'Transient'.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
							search_off();
							return;
						}
					}
				}


				//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_lifecycle_stage.OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				LifeCycleTemp = Convert.ToInt32(Conversion.Val($"{Convert.ToString(adoAircraftRecordset.GetField("ac_lifecycle_stage").OriginalValue)}{modGlobalVars.cEmptyString}"));
				if (LifeCycleTemp == 1 || LifeCycleTemp == 2)
				{
					if (Convert.ToDouble(adoAircraftRecordset["ac_lifecycle_stage"]) == 3)
					{
						if (txt_ac_year[1].Text.Trim() == modGlobalVars.cEmptyString)
						{
							MessageBox.Show("You Must Have a Year Delivered when changing lifecycle to 3", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
							search_off();
							return;
						}
					}
				}

				// commented out MSW - was creating issues and popping up when it really didnt need to
				// 'added MSW -5/1/19 per task
				// If ((txt_ac_damage_history_notes.Text <> "" Or grd_aircraftdamage.Rows > 1) And (cbo_dam.Text = "" Or cbo_dam.Text = "Unknown")) Then
				//             MsgBox "Damage Cannot Be Unknown or Blank when Information is in the Damage Notes Field"
				//             Call search_off
				//             Exit Sub
				// End If

				// added MSW -9/27/17
				if (cbo_ac_asking.Text == "Price")
				{
					if (txt_ac_asking_price.Text == "")
					{
						MessageBox.Show("You Must Have Price Entered If You Selected Price", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
						search_off();
						return;
					}
				}

				// ***************************************************
				// DETERMINE IF THE AIRCRAFT AVAILABILITY HAS CHANGED
				if (adoAircraftRecordset.GetField("ac_forsale_flag").OriginalValue != adoAircraftRecordset["ac_forsale_flag"])
				{

					// *******************************
					// IF AIRCRAFT IS GOING OFF MARKET
					if (Convert.ToString(adoAircraftRecordset["ac_forsale_flag"]) == "N")
					{
						User_Message = "Take This Aircraft Off-Market?";
						TransmitRecordAction = "D";
						OnOffMarket = "Off";
						if (WasExclusive)
						{ // EXPAND MESSAGE TO INCLUDE EXCLUSIVE
							RemoveExclusive = true;
							User_Message = $"{User_Message} And Remove Exclusive? ";
						}

					}
					else
					{
						// ********************************
						// IF AIRCRAFT IS GOING ON MARKET
						User_Message = "Put This Aircraft On-Market?";
						TransmitRecordAction = "A";
						OnOffMarket = "On";
					} // END IF GOING OFF MARKET

				}
				else
				{
					// ************************************************************************
					// NO AIRCRAFT AVAILABILITY CHANGE - JUST GET USER APPROVAL TO SAVE THE AIRCRAFT
					User_Message = "Update this Aircraft?";
				} // IF CHANGE TO AIRCRAFT AVAILABILITY

				strError = "mdl change";

				// *************************************************************
				// MODIFY/ADD TO THE USER MESSAGE IF THE MODEL HAS CHANGED.
				if (ModelChanged)
				{
					User_Message = "Change the Model of this Aircraft?";
				}

				// ************************************************************************
				// VERIFY THE USER WANTS TO COMPLETE THE UPDATE, ON MARKET, OR OFF MARKET

				// should only be set to true when doing transaction, ac_maintainted field
				if (!skip_question_ac_maintained)
				{
					if (MessageBox.Show($"Are You Sure You Want To {User_Message}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.No)
					{

						// ********************************************************
						// IF NO, THEN ROLLBACK ALL CHANGES AND RESELECT THE AIRCRAFT
						// RTW MODIFIED- 2/14/2012  - REMOVED TEH ROLLBACK SINCE WE ARE NOT IN A TRANSACTION
						//ADO_Transaction ("RollbackTrans")    ' for exclusive broker change

						search_off();
						Select_Aircraft();
						return;

					} // end if for user indicating desire to quit transaction
				}
				// ****************************************************************************
				// IF THE AIRCRAFT IS GOING ON MARKET, ASK THE USER IF THEY WISH TO CLEAR SPECS
				strError = "on/off mkt";


				if (WhatChanged.Trim().IndexOf(",for sale flag") >= 0)
				{
					if (MessageBox.Show("Would You Like To Set the 'Not Equipped With' Feature Codes to 'Unknown'?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
					{
						Query = "update Aircraft_Key_Feature set afeat_status_flag='U',afeat_action_date=null ";
						Query = $"{Query}where afeat_ac_id={Reference_Aircraft_ID.ToString()} ";
						Query = $"{Query}and afeat_journ_id=0 and afeat_status_flag='N' ";
						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery();
					}
				}

				cbo_ac_status.Visible = false;
				//added in because it was flashing with different results

				if (insert_8week)
				{
					InsertJournalNote_AC("Changed Lifecycle Stage 3(In Operation) to Lifecycle Stage 4(Retired) - 8 WEEK RE-CHECK", "");
				}

				if (OnOffMarket == "On")
				{ // IF ON MARKET
					// 11/11/2015 - By David D. Cruger; Per Jackie remove this question
					//If MsgBox("Do you want to clear all of the times-as-of, hours, & cycles on this aircraft?", vbYesNo) = vbYes Then
					//    Clear_Specs_Flag = True
					//Else
					Clear_Specs_Flag = false;
					//End If    ' IF USER WANTS TO CLEAR SPECS FOR THE ON MARKET
					//If cbo_ac_stage.Text = "4 - Retired" And cbo_ac_status.Text = "Withdrawn From Use - Stored" Then
					//Else
					OnOffMarketFlag = "On";
					OnOffMarketStart = DateTime.Parse(modAdminCommon.GetDateTime()).ToString("HH:mm:ss");
					//End If

					if (dont_do_events_journal)
					{
					}
					else
					{
						modAdminCommon.Record_Event("On Market", "Start On Market", Convert.ToInt32(adoAircraftRecordset["ac_id"]));
					}
				}
				else if (OnOffMarket == "Off")
				{ 

					OnOffMarketFlag = "Off";
					OnOffMarketStart = DateTime.Parse(modAdminCommon.GetDateTime()).ToString("HH:mm:ss");
					modAdminCommon.Record_Event("Off Market", "Start Off Market", Convert.ToInt32(adoAircraftRecordset["ac_id"]));


					Query = "UPDATE Aircraft_General_Dates SET agd_cc_asking_price_date = NULL ";
					Query = $"{Query}WHERE agd_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
					Query = $"{Query} AND agd_journ_id = 0 ";

					DbCommand TempCommand_2 = null;
					TempCommand_2 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
					TempCommand_2.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) | ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
					TempCommand_2.ExecuteNonQuery();

					// make sure u clear and put back - MSW = 7/15/20
					lbl_gen[9].ForeColor = Color.Black;
					cbo_ac_asking.BackColor = Color.White;



				} // IF GOING ON MARKET



				// ******************************************************
				// STORE THE INITIAL PRIMARY COMPANY IN ORDER TO DETERMINE
				// IF IT CHANGES AS PART OF SAVING THE AIRCRAFT
				// AND THEREFORE REQUIRES ACCOUNT REASSIGNMENTS
				int Initial_Primary_Company_ID = 0;
				Initial_Primary_Company_ID = primary_comp_id;

				// UPDATE ANY KEY FEATURES THAT ARE AUTOMATED ENTRY

				// *********************************
				// UPDATE THE AIRCRAFT - ABORT IF FAILURE
				strError = "update trans";

				if (!Transaction_Update_Aircraft(RemoveExclusive, Clear_Specs_Flag))
				{
					throw new Exception();
				}

				//MSW - 3/30/16
				if (WhatChanged.Trim().IndexOf("sale price") >= 0)
				{
					if (Convert.ToString(txt_ac_sale_price.Tag).Trim() != "")
					{
						if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0)
						{
							if (sold_Was_blank)
							{
								InsertJournalNote_AC($"Sale Price Entered for {txtHistoryDate.Text} Transaction", $"Price Entered: ${Double.Parse(txt_ac_sale_price.Text, NumberStyles.Any).ToString("N0")}", Convert.ToInt32(Double.Parse(Convert.ToString(txt_ac_sale_price.Tag))));
							}
							else
							{
								InsertJournalNote_AC($"Sale Price Changed for {txtHistoryDate.Text} Transaction", $"Sale Price Changed From $ {Double.Parse(old_sold_price.ToString(), NumberStyles.Any).ToString("N0")} to ${Double.Parse(txt_ac_sale_price.Text, NumberStyles.Any).ToString("N0")}", Convert.ToInt32(Double.Parse(Convert.ToString(txt_ac_sale_price.Tag))));
							}
						}
						else
						{
							if (sold_Was_blank)
							{
								InsertJournalNote_AC($"Sale Price Entered for {txtHistoryDate.Text} Transaction ({Convert.ToString(adoAircraftRecordset["ac_journ_id"])})", $"Price Entered: ${Double.Parse(txt_ac_sale_price.Text, NumberStyles.Any).ToString("N0")}", Convert.ToInt32(Double.Parse(Convert.ToString(txt_ac_sale_price.Tag))));
							}
							else
							{
								InsertJournalNote_AC($"Sale Price Changed for {txtHistoryDate.Text} Transaction ({Convert.ToString(adoAircraftRecordset["ac_journ_id"])})", $"Sale Price Changed From $ {Double.Parse(old_sold_price.ToString(), NumberStyles.Any).ToString("N0")} to ${Double.Parse(txt_ac_sale_price.Text, NumberStyles.Any).ToString("N0")}", Convert.ToInt32(Double.Parse(Convert.ToString(txt_ac_sale_price.Tag))));
							}
						}
					}
					else
					{
						if (sold_Was_blank)
						{
							InsertJournalNote_AC($"Sale Price Entered for {txtHistoryDate.Text} Transaction", $"Price Entered: ${Double.Parse(txt_ac_sale_price.Text, NumberStyles.Any).ToString("N0")}");
						}
						else
						{
							InsertJournalNote_AC($"Sale Price Changed for {txtHistoryDate.Text} Transaction", $"Sale Price Changed From $ {Double.Parse(old_sold_price.ToString(), NumberStyles.Any).ToString("N0")} to ${Double.Parse(txt_ac_sale_price.Text, NumberStyles.Any).ToString("N0")}");
						}
					}

				}

				// added MSW - 12/2/21
				if (WhatChanged.Trim().IndexOf("conf notes") >= 0)
				{
					// if the notes are currently blank, is the only time we will set them to blank
					if (frm_aircraft.DefInstance.txt_ac_confidential_notes.Text.Trim() == "")
					{
						InsertJournalNote_AC("Status Notes Cleared", $"Were Previously: {confidential_notes}");
					}
				}

				if (WhatChanged.Trim().IndexOf("maintained") >= 0)
				{
					if (cbo_ac_warranty_notes.Text.Trim() == "")
					{
						InsertJournalNote_AC("Maintained Field changed to Blank", "Maintained Field changed to Blank");
					}
					else
					{
						InsertJournalNote_AC($"Maintained Field changed to {cbo_ac_warranty_notes.Text}", $"Maintained Field changed to {cbo_ac_warranty_notes.Text}");
					}
				}


				// - --- ADDED MSW  - 4/7/20 - adding all journal notes where they have changed

				if (cbo_ac_engine_maint_prog.Text.Trim() != Convert.ToString(cbo_ac_engine_maint_prog.Tag).Trim())
				{
					InsertJournalNote_AC($"Engine Maintenance Program Changed from {Convert.ToString(cbo_ac_engine_maint_prog.Tag).Trim()} to {cbo_ac_engine_maint_prog.Text.Trim()}", "", 0);
				}

				if (cbo_ac_engine_management_prog_EMGP.Text.Trim() != Convert.ToString(cbo_ac_engine_management_prog_EMGP.Tag).Trim())
				{
					InsertJournalNote_AC($"Engine Management Program Changed from {Convert.ToString(cbo_ac_engine_management_prog_EMGP.Tag).Trim()} to {cbo_ac_engine_management_prog_EMGP.Text.Trim()}", "", 0);
				}

				if (cbo_ac_airframe_maintenance_prog_AMP.Text.Trim() != Convert.ToString(cbo_ac_airframe_maintenance_prog_AMP.Tag).Trim())
				{
					InsertJournalNote_AC($"Airframe Maintenance Program Changed from {Convert.ToString(cbo_ac_airframe_maintenance_prog_AMP.Tag).Trim()} to {cbo_ac_airframe_maintenance_prog_AMP.Text.Trim()}", "", 0);
				}

				if (cbo_ac_airframe_maint_tracking_prog_AMTP.Text.Trim() != Convert.ToString(cbo_ac_airframe_maint_tracking_prog_AMTP.Tag).Trim())
				{
					InsertJournalNote_AC($"Airframe Maintenance Tracking Program Changed from {Convert.ToString(cbo_ac_airframe_maint_tracking_prog_AMTP.Tag).Trim()} to {cbo_ac_airframe_maint_tracking_prog_AMTP.Text.Trim()}", "", 0);
				}

				// - --- ADDED MSW  - 4/7/20 - adding all journal notes where they have changed





				// ADDED MSW -- 10/29/18
				if (txtBaseAirportName.Text.Trim() != Convert.ToString(txtBaseAirportName.Tag).Trim())
				{
					if (Convert.ToString(txtBaseAirportName.Tag).Trim() != "")
					{
						InsertJournalNote_AC($"Base Changed from {Convert.ToString(txtBaseAirportName.Tag).Trim()} to {txtBaseAirportName.Text.Trim()}", $"Base Changed from {Convert.ToString(txtBaseAirportName.Tag).Trim()} to {txtBaseAirportName.Text.Trim()}", 0);
						lbl_gen_DoubleClick(lbl_gen[66], new EventArgs()); // Also verify this - added msw - 2/14/19
					}
					else
					{
						InsertJournalNote_AC($"Base Added: {txtBaseAirportName.Text.Trim()}", $"Base Added: {txtBaseAirportName.Text.Trim()}", 0);
						lbl_gen_DoubleClick(lbl_gen[66], new EventArgs()); // Also verify this - added msw - 2/14/19
					}
				}

				//MSW - 4/25/16
				if (WhatChanged.Trim().IndexOf("sale price display flag") >= 0)
				{
					// Display Sale Price
					if (chkArray[chkDisplaySalePrice_INDEX].CheckState == CheckState.Unchecked)
					{
						InsertJournalNote_AC("Sale Price Changed from Viewable to Non-Viewable", "");
					}
					else
					{
						InsertJournalNote_AC("Sale Price Changed from Non-Viewable to Viewable", "");
					}
				}

				if (WhatChanged.Trim().IndexOf(",E Maint") >= 0)
				{
					skip_question_EMP = true;
					grd_Features_DoubleClick(grd_Features[4], new EventArgs());
					skip_question_EMP = false;
				}

				//MSW - 11/02/16
				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0)
				{
					if (WhatChanged.Trim().IndexOf("use code") >= 0)
					{
						if (Strings.Len(original_usage.Trim()) == 1)
						{
							return_usage_full(ref original_usage);
						}
						InsertJournalNote_AC($"Usage Changed From {original_usage} to {cbo_ac_use_code.Text}", ""); // adoAircraftRecordset!ac_use_code
					}
				}

				// 02/28/2017 - Added by David D. Cruger
				if (WhatChanged.Trim().IndexOf("times as of") >= 0)
				{
					modAdminCommon.Record_Event("Aircraft Times Current", $"Times Current Has Changed To [{txt_ac_times_as_of_date.Text}]", Reference_Aircraft_ID, Reference_Journal_ID, 0, false, 0, 0);
				}



				//MSW - 4/25/16
				if (ToolTipMain.GetToolTip(lbl_gen[98]).IndexOf("Source Cleared") >= 0)
				{
					previous_source = ToolTipMain.GetToolTip(lbl_gen[98]).Trim();
					if (previous_source.Trim() != "")
					{
						if (previous_source.Trim().IndexOf("Previous Source") >= 0)
						{
							previous_source = previous_source.Trim().Substring(Math.Max(previous_source.Trim().Length - (Strings.Len(previous_source.Trim()) - (previous_source.Trim().IndexOf("Previous Source") + 1) - 16), 0)); // 16 to cover text from previous source
						}
					}
					InsertJournalNote_AC("Source of Sale Price Removed", $"Source of Sale Price as {previous_source} Removed");
				}

				//---- ADDING CHANGES FOR ENGINE AND APU SERIAL NUMBER----------------- MSW - 3/29/19---------
				if (WhatChanged.Trim().IndexOf("eng1 ser no") >= 0)
				{
					InsertJournalNote_AC("Engine Serial Number 1 Changed", $" Changed from {($"{modGlobalVars.cEmptyString}{Convert.ToString(txt_ac_engine_ser_no[0].Tag)}").Trim()} to {($"{modGlobalVars.cEmptyString}{txt_ac_engine_ser_no[0].Text}").Trim()}");
				}

				if (WhatChanged.Trim().IndexOf("eng2 ser no") >= 0)
				{
					InsertJournalNote_AC("Engine Serial Number 2 Changed", $" Changed from {($"{modGlobalVars.cEmptyString}{Convert.ToString(txt_ac_engine_ser_no[1].Tag)}").Trim()} to {($"{modGlobalVars.cEmptyString}{txt_ac_engine_ser_no[1].Text}").Trim()}");
				}

				if (WhatChanged.Trim().IndexOf("eng3 ser no") >= 0)
				{
					InsertJournalNote_AC("Engine Serial Number 3 Changed", $" Changed from {($"{modGlobalVars.cEmptyString}{Convert.ToString(txt_ac_engine_ser_no[2].Tag)}").Trim()} to {($"{modGlobalVars.cEmptyString}{txt_ac_engine_ser_no[2].Text}").Trim()}");
				}

				if (WhatChanged.Trim().IndexOf("eng4 ser no") >= 0)
				{
					InsertJournalNote_AC("Engine Serial Number 4 Changed", $" Changed from {($"{modGlobalVars.cEmptyString}{Convert.ToString(txt_ac_engine_ser_no[3].Tag)}").Trim()} to {($"{modGlobalVars.cEmptyString}{txt_ac_engine_ser_no[3].Text}").Trim()}");
				}

				if (WhatChanged.Trim().IndexOf("apu ser no") >= 0)
				{
					InsertJournalNote_AC("APU Serial Number", $" Changed from {Convert.ToString(txt_ac_apu[0].Tag).Trim()} to {txt_ac_apu[0].Text.Trim()}");
				}
				//
				if (WhatChanged.Trim().IndexOf("prop1 ser no") >= 0)
				{
					InsertJournalNote_AC("Prop Serial Number 1 Changed", $" Changed from {($"{modGlobalVars.cEmptyString}{Convert.ToString(txt_ac_prop_ser_no[0].Tag)}").Trim()} to {($"{modGlobalVars.cEmptyString}{txt_ac_prop_ser_no[0].Text}").Trim()}");
				}

				if (WhatChanged.Trim().IndexOf("prop2 ser no") >= 0)
				{
					InsertJournalNote_AC("Prop Serial Number 2 Changed", $" Changed from {($"{modGlobalVars.cEmptyString}{Convert.ToString(txt_ac_prop_ser_no[1].Tag)}").Trim()} to {($"{modGlobalVars.cEmptyString}{txt_ac_prop_ser_no[1].Text}").Trim()}");
				}

				if (WhatChanged.Trim().IndexOf("prop3 ser no") >= 0)
				{
					InsertJournalNote_AC("Prop Serial Number 3 Changed", $" Changed from {($"{modGlobalVars.cEmptyString}{Convert.ToString(txt_ac_prop_ser_no[2].Tag)}").Trim()} to {($"{modGlobalVars.cEmptyString}{txt_ac_prop_ser_no[2].Text}").Trim()}");
				}

				if (WhatChanged.Trim().IndexOf("prop4 ser no") >= 0)
				{
					InsertJournalNote_AC("Prop Serial Number 4 Changed", $" Changed from {($"{modGlobalVars.cEmptyString}{Convert.ToString(txt_ac_prop_ser_no[3].Tag)}").Trim()} to {($"{modGlobalVars.cEmptyString}{txt_ac_prop_ser_no[3].Text}").Trim()}");
				}
				//---- ADDING CHANGES FOR ENGINE AND APU SERIAL NUMBER----------------- MSW - 3/29/19---------

				if (!has_eo_maint && has_eo)
				{ // then it needs maintenance
					InsertMaintenance_Reocrd(Reference_Aircraft_ID, "Engine Overhaul", eo_type.Trim(), $"{txt_ac_maint_eoh_mo.Text.Trim()}{txt_ac_maint_eoh_year.Text.Trim()}", txt_ac_maint_eoh_by_name.Text);
				}


				// MSW - 4/5/18

				if (!has_ehsi_maint && has_ehsi)
				{
					InsertMaintenance_Reocrd(Reference_Aircraft_ID, "Engine Hot Section Inspection", eo_type.Trim(), $"{txt_ac_maint_hots_mo.Text.Trim()}{txt_ac_maint_hots_year.Text.Trim()}", txt_ac_maint_hots_by_name.Text);
				}

				// MSW - 4/19/19
				if (WhatChanged.Trim().IndexOf("HIDE PRICE") >= 0)
				{
					InsertJournalNote_AC("Hidden Asking Price Changed", $" Hidden Asking Price Changed from {($"{modGlobalVars.cEmptyString}{Convert.ToString(txt_ac_hidden_asking_price.Tag)}").Trim()} to {($"{modGlobalVars.cEmptyString}{txt_ac_hidden_asking_price.Text}").Trim()}");
				}

				// added MSW - 12/6/22
				modCommon.Create_Restricted_Record(Reference_Aircraft_ID, ((int) chkArray[7].CheckState).ToString(), txt_ac_reg_no[0].Text, txt_ac_ser_no[1].Text, cbo_amod_make_name.Text, "");




				if (LifeCycleTemp != 4)
				{

					//aey 4/18/05
					primary_comp_id = Convert.ToInt32(Double.Parse(modCommon.DLookUp("cref_comp_id", "aircraft_reference WITH(NOLOCK)", $"cref_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} and cref_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}")));
					//Call Mark_Company_for_Stats_Update(primary_comp_id)
					modCommon.Company_Stats_Update(primary_comp_id); //aey 6/15/05

				}

				// *************************************************
				// PRESENT THE USER WITH A MODAL JOURNAL FORM TO ENTER A DESCRIPTION OF
				// ACTION IF CHANGING A HISTORICAL AIRCRAFT RECORD
				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0)
				{

					frm_Journal.DefInstance.Reference_Ac_Id = modAdminCommon.gbl_Aircraft_ID;
					frm_Journal.DefInstance.Reference_Comp_Id = 0;
					frm_Journal.DefInstance.Reference_Contact_Id = 0;
					frm_Journal.DefInstance.Reference_Subject = modGlobalVars.cEmptyString;
					frm_Journal.DefInstance.Reference_SubCategory_Code = "RN";
					frm_Journal.DefInstance.Reference_Journal_ID = 0;

					modAdminCommon.Rec_Journal_Info.journ_subject = modGlobalVars.cEmptyString;
					modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
					modAdminCommon.Rec_Journal_Info.journ_ac_id = modAdminCommon.gbl_Aircraft_ID;

					modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
					modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
					modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
					modAdminCommon.Rec_Journal_Info.journ_user_id = $"'{modAdminCommon.gbl_User_ID}'";
					modAdminCommon.Rec_Journal_Info.journ_account_id = " ";
					modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
					modAdminCommon.Rec_Journal_Info.journ_status = "A";

					frm_Journal.DefInstance.ShowDialog();

					this.Activate();
					search_off();

				}

				search_off();

				if (dont_do_events_journal)
				{
				}
				else if (OnOffMarketFlag == "On")
				{ 
					OnOffMarketHowLong = (int) DateAndTime.DateDiff("s", DateTime.Parse(OnOffMarketStart), DateTime.Parse(DateTime.Parse(modAdminCommon.GetDateTime()).ToString("HH:mm:ss")), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1);
					modAdminCommon.Record_Event("On Market", $"Finished On Market [Time Elapsed: {OnOffMarketHowLong.ToString()}]", Convert.ToInt32(adoAircraftRecordset["ac_id"]));
				}
				else if (OnOffMarketFlag == "Off")
				{ 
					OnOffMarketHowLong = (int) DateAndTime.DateDiff("s", DateTime.Parse(OnOffMarketStart), DateTime.Parse(DateTime.Parse(modAdminCommon.GetDateTime()).ToString("HH:mm:ss")), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1);
					modAdminCommon.Record_Event("Off Market", $"Finished Off Market [Time Elapsed: {OnOffMarketHowLong.ToString()}]", Convert.ToInt32(adoAircraftRecordset["ac_id"]));
				}


				// IF AIRCRAFT UPDATE IS SUCCESSFUL
				// BRING UP A JOURNAL ENTRY AND RESELECT THE AIRCRAFT
				Launch_To_Journal_If_Necessary(); // Launch to Journal Form if Necessary
				Select_Aircraft(); // Get the latest version of the aircraft again

				// ***********************************************************
				// IF THE PRIMARY COMPANY HAS CHANGED THEN PERFORM ACCOUNT REASSIGNMENTS
				Application.DoEvents();
				if (Initial_Primary_Company_ID != primary_comp_id)
				{
					search_on("Checking for Account Reassignments...");
					Application.DoEvents();
					modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), primary_comp_id, "reassign");
					Application.DoEvents();
					// CHANGED - MSW _ 7/5/23 - added new field to stored procedure
					modCommon.Check_For_Account_Reassignment(Initial_Primary_Company_ID, primary_comp_id, Convert.ToInt32(adoAircraftRecordset["ac_id"]), "N");
					Application.DoEvents();
					modAdminCommon.ADO_Transaction("CommitTrans");
					Application.DoEvents();
					search_off();
				}

				Application.DoEvents();
				// COMMENTED OUT MSW - 10/22/18 - PER REQUEST
				//   If LCase$(Trim$(cbo_ac_status.Text)) = LCase$("Unconfirmed") And primary_comp_id > 0 Then
				//       Call modCompany.update_company_callback_date(primary_comp_id, "Unconfirmed")
				//   End If

				Application.DoEvents();
				// RTW - 10/4/2004 - ONLY DO KEY FEATURE AUTO UPDATES IF AN ACTIVE AIRCRAFT
				strError = "key feat";
				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) == 0)
				{
					Key_Feature_Auto_Update();
					Fill_Feature_Grid("InteriorExterior");
					Fill_Feature_Grid("Maintenance");
					Fill_Feature_Grid("Equipment");
					Fill_Feature_Grid("Avionics");
					Fill_Feature_Grid("Main");
				}
				Application.DoEvents();
				modAircraft.SetOperatorFlag(modAdminCommon.gbl_Aircraft_ID, modAdminCommon.gbl_Aircraft_Journal_ID);

				search_off();
				Application.DoEvents();
				if (modAdminCommon.HasWanteds)
				{
					RemindUserAboutWanteds();
				}
				Application.DoEvents();
			}
			catch (Exception e)
			{

				// If it's the "Optimistic Concurrency Check", just resume  - retry 5 times
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				if (Information.Err().Number == -2147217864 && ErrCount < 4)
				{ //7/2/04 aey
					//adoAircraftRecordset.Resync adAffectCurrent, adResyncUnderlyingValues
					//  strError = strError & " ec:" & errcount
					ErrCount++;
					search_off();
					//UPGRADE_TODO: (1065) Error handling statement (Resume) could not be converted. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1065
					UpgradeHelpers.Helpers.NotUpgradedHelper.NotifyNotUpgradedElement("Resume Statement");
				}
				else
				{

					//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
					strError = $"ACID={modAdminCommon.gbl_Aircraft_ID.ToString()} {Information.Err().Number.ToString()} {e.Message} {strError} {User_Message}";
					// ********************************************
					// ROLLBACK ACTIVITY IF AIRCRAFT UPDATE FAILED
					modAdminCommon.ADO_Transaction("RollbackTrans");
					modCommon.Aircraft_History_Close_Recordsets();
					search_off();

					modAdminCommon.Report_Error($"Transaction_Save_Aircraft_Error: {strError}");
				}
			}
		}


		private void InsertJournalNote_AC(string strSubject, string desc_text, int comp_id = 0)
		{

			string strInsert1 = "";
			System.DateTime dtSystemDateTime = DateTime.FromOADate(0);

			try
			{

				if (strSubject != "")
				{

					dtSystemDateTime = DateTime.Parse(modAdminCommon.GetSystemDateTime());

					strInsert1 = "INSERT INTO Journal (";
					strInsert1 = $"{strInsert1}journ_date, ";
					strInsert1 = $"{strInsert1}journ_subcategory_code, ";
					strInsert1 = $"{strInsert1}journ_subject, ";
					strInsert1 = $"{strInsert1}journ_description, ";
					strInsert1 = $"{strInsert1}journ_ac_id, ";
					strInsert1 = $"{strInsert1}journ_comp_id, ";
					strInsert1 = $"{strInsert1}journ_contact_id, ";
					strInsert1 = $"{strInsert1}journ_user_id, ";
					strInsert1 = $"{strInsert1}journ_entry_date, ";
					strInsert1 = $"{strInsert1}journ_entry_time, ";
					strInsert1 = $"{strInsert1}journ_account_id, ";
					strInsert1 = $"{strInsert1}journ_prior_account_id, ";
					strInsert1 = $"{strInsert1}journ_status, ";
					strInsert1 = $"{strInsert1}journ_customer_note, ";
					strInsert1 = $"{strInsert1}journ_action_date ";

					strInsert1 = $"{strInsert1}) VALUES (";
					strInsert1 = $"{strInsert1}'{DateTime.Now.ToString("MM/dd/yyyy")}', ";
					strInsert1 = $"{strInsert1}'RN', ";
					strInsert1 = $"{strInsert1}'{StringsHelper.Replace(($"{strSubject} ").Trim(), "'", "''", 1, -1, CompareMethod.Binary)}', ";
					strInsert1 = $"{strInsert1}'{StringsHelper.Replace(desc_text.Trim(), "'", "''", 1, -1, CompareMethod.Binary)}', ";
					strInsert1 = $"{strInsert1}{txt_ac_id.Text}, ";
					strInsert1 = $"{strInsert1}{comp_id.ToString()}, ";
					strInsert1 = $"{strInsert1}0, ";
					strInsert1 = $"{strInsert1}'{modAdminCommon.gbl_User_ID}', ";
					strInsert1 = $"{strInsert1}'{dtSystemDateTime.ToString("MM/dd/yyyy")}', ";
					strInsert1 = $"{strInsert1}'{dtSystemDateTime.ToString("HH:mm:ss")}', ";
					strInsert1 = $"{strInsert1}'{modAdminCommon.gbl_Account_ID}', ";
					strInsert1 = $"{strInsert1}'', ";
					strInsert1 = $"{strInsert1}'A', ";
					strInsert1 = $"{strInsert1}'', ";
					strInsert1 = $"{strInsert1}'{DateTime.Now.ToString("MM/dd/yyyy HH:mm:ss")}'";
					strInsert1 = $"{strInsert1})";

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = strInsert1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();

				} // If strSubject <> "" Then
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Record_Error("InsertJournalNote_AC_Error: ", excep.Message);
			}

		} // InsertJournalNote

		private void InsertMaintenance_Reocrd(int ac_id, string maint_type, string data_type, string cw_date, string by_company)
		{

			string strInsert1 = "";
			System.DateTime dtSystemDateTime = DateTime.FromOADate(0);

			try
			{

				// added MSW - 6/5/19
				if (!if_record_exists($"select * from Aircraft_Maintenance with (NOLOCK) where acmaint_ac_id = {ac_id.ToString()} and acmaint_journ_id = 0 and acmaint_name = '{maint_type}' "))
				{


					strInsert1 = "INSERT INTO Aircraft_Maintenance (";
					strInsert1 = $"{strInsert1} acmaint_ac_id";
					strInsert1 = $"{strInsert1} ,acmaint_journ_id";
					strInsert1 = $"{strInsert1} ,acmaint_name";
					strInsert1 = $"{strInsert1} ,acmaint_complied_date";
					strInsert1 = $"{strInsert1} ,acmaint_complied_hrs";
					strInsert1 = $"{strInsert1} ,acmaint_due_date";
					strInsert1 = $"{strInsert1} ,acmaint_due_hrs";
					strInsert1 = $"{strInsert1} ,acmaint_notes";
					strInsert1 = $"{strInsert1} ,acmaint_date_type";

					strInsert1 = $"{strInsert1}) VALUES (";
					strInsert1 = $"{strInsert1}{ac_id.ToString()}, ";
					strInsert1 = $"{strInsert1}0, ";
					strInsert1 = $"{strInsert1}'{maint_type.Trim()}', ";

					if (Strings.Len(cw_date.Trim()) == 6)
					{
						cw_date = $"{cw_date.Trim().Substring(0, Math.Min(2, cw_date.Trim().Length))}/01/{cw_date.Trim().Substring(Math.Max(cw_date.Trim().Length - 4, 0))}";
					}
					else if (Strings.Len(cw_date.Trim()) == 5)
					{ 
						cw_date = $"0{cw_date.Trim().Substring(0, Math.Min(1, cw_date.Trim().Length))}/01/{cw_date.Trim().Substring(Math.Max(cw_date.Trim().Length - 4, 0))}";
					}
					else if (Strings.Len(cw_date.Trim()) == 4)
					{ 
						cw_date = $"01/01/{cw_date.Trim()}";
					}
					strInsert1 = $"{strInsert1}'{cw_date.Trim()}', ";

					strInsert1 = $"{strInsert1}0, ";
					strInsert1 = $"{strInsert1}NULL, ";
					strInsert1 = $"{strInsert1}0, ";
					if (by_company.Trim() != "")
					{
						strInsert1 = $"{strInsert1}'By {StringsHelper.Replace(by_company, "'", "''", 1, -1, CompareMethod.Binary)}.', ";
					}
					else
					{
						strInsert1 = $"{strInsert1}'', ";
					}


					strInsert1 = $"{strInsert1}'{data_type}' ";
					strInsert1 = $"{strInsert1})";

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = strInsert1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();


				}
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Record_Error("InsertMaintenance_Reocrd_Error: ", excep.Message);
			}



		} // InsertJournalNote


		private bool if_record_exists(string selection)
		{

			ADORecordSetHelper snp_CompFound = new ADORecordSetHelper();
			string strQuery1 = "";
			bool bResults = false;

			try
			{

				bResults = false;

				strQuery1 = selection;

				snp_CompFound.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(snp_CompFound.BOF && snp_CompFound.EOF))
				{
					bResults = true;
				}

				snp_CompFound.Close();


				snp_CompFound = null;




				return bResults;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Record_Error("Does_User_Activity_Report_Record_Exists_Error", excep.Message);
			}
			return false;
		} // Does_User_Activity_Report_Record_Exists

		public bool Transaction_Update_Aircraft(bool in_RemoveExclusive_Flag, bool in_ClearSpecs_Flag)
		{

			//******************************************************************************************
			//
			// Purpose: The purpose of this function is to update an aircraft record and
			//          all related files based on the specific changes made by the user.
			//
			// LAST MODIFIED - RTW - 2/3/2011 - CHANGED ISSUES WITH GETTING RECORDSETS PRIOR TO SAVING FOR NO REASON AND LOOKING UP OWNERSHIP TYPE FOR NO REASON
			// By: Rick Wanner - Modified: 10/10/02
			//
			//******************************************************************************************
			bool result = false;
			string tmpErrDesc = "";
			int ErrCount = 0;
			try
			{

				// 02/02/2012 - By David D. Cruger
				// For Monitoring

				string strMsg = "";
				System.DateTime dtStartDate = DateTime.FromOADate(0);
				System.DateTime dtEndDate = DateTime.FromOADate(0);

				tmpErrDesc = "init";
				string Query = "";
				ErrCount = 0;
				int comp_id = 0;
				comp_id = primary_comp_id; //aey 4/18/05
				bool bSentBaseEvent = false;
				bSentBaseEvent = false;

				int lACId = 0;
				int lJournId = 0;
				int lOwrCompId = 0;
				int lOWRContactId = 0;
				int lEXBCompId = 0;
				int lEXBContactId = 0;
				int Remove_Exclusive_Journ_ID = 0;

				lACId = Convert.ToInt32(adoAircraftRecordset["ac_id"]);
				lJournId = Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]);

				Query = "SELECT amod_serno_hyphen_flag FROM Aircraft_Model WITH(NOLOCK)";
				Query = $"{Query} WHERE amod_id = {cbo_amod_make_name.GetItemData(cbo_amod_make_name.SelectedIndex).ToString()}";
				Query = $"{Query} AND amod_serno_hyphen_flag = 'Y'";
				if (modAdminCommon.Exist(Query))
				{
					Hyphen = modGlobalVars.cHyphen;
				}
				else
				{
					Hyphen = modGlobalVars.cEmptyString;
				}

				result = true;

				// *******************************************
				// GET A COMPLETE SNAPSHOT OF ALL AIRCRAFT INFORMATION
				// RTW - HOLD - 2/3/2011 - NOT SURE WHY THIS RUNS ON EVERY UPDATE - VERY INEFFICIENT
				// WILL TRY ONLY RUNNING ON A STATUS CHANGE
				if (tmp_ac_status != cbo_ac_status.Text)
				{
					tmpErrDesc = "get recordsets";
					if (!modCommon.Aircraft_History_Get_Recordsets(modAdminCommon.gbl_Aircraft_ID, modGlobalVars.cEmptyString, "0"))
					{
						modAdminCommon.Record_Error("Transaction", $"Transaction_Update_Aircraft Save Cancelled - Invalid or Missing Data {tmpErrDesc}");
						return result;
					}
				}

				// RTW - MODIFIED - 2/3/2011 - CHANGED TO USE THE FIELD ON THE AIRCRAFT RECORDSET WITHOUT HAVING TO LOOK IT UP
				//frm_Journal.tmpOwnershipType = GetOwnershipType(gbl_Aircraft_ID, 0)
				frm_Journal.DefInstance.tmpOwnershipType = Convert.ToString(adoAircraftRecordset["ac_ownership_type"]);

				// 02/16/2016 - By David D. Cruger
				// This IS Already Done In the Transaction_Save_Aircraft procedures
				//tmpErrDesc = "validate"
				//' ********************************************************************
				//' VERIFY THAT THE DATA ENTERED TO THE SCREEN FIELDS IS VALID
				//If Not Validate_Aircraft Then
				//    MsgBox ("Save Cancelled - Invalid or Missing Data")
				//    Call Record_Error("Transaction", "Transaction_Update_Aircraft Save Cancelled - Invalid or Missing Data " & tmpErrDesc)
				//    Transaction_Update_Aircraft = False
				//    Exit Function
				//End If

				modCommon.Start_Activity_Monitor_Message("Save Aircraft", ref strMsg, ref dtStartDate, ref dtEndDate);

				tmpErrDesc = "Start Trans";
				// ******************************
				// BEGIN THE TRANSACTION
				modAdminCommon.ADO_Transaction("BeginTrans");

				if (in_ClearSpecs_Flag)
				{
					// **********************************************
					// CLEAR THE SPECS IF THE USER RESPONDS WITH YES
					ClearSpecsFromRecord();
				}

				// ***********************************************************
				// CHECK FOR CHANGES TO THE AIRCRAFT STATUS AND AVAILABILITY
				// THIS ALSO STORES THE JOURNAL ENTRY
				// BLOCK ADDED MSW - 2/6/17 - for re-load of AC status block, do not re-do this section
				if (dont_do_events_journal)
				{
				}
				else
				{
					if (!modAircraft.Transaction_Check_for_Status_Change(tmp_ac_status, cbo_ac_status.Text, tmp_ac_forsale_flag, chkArray[chkAvailableFlag_INDEX].CheckState, OldAskingPrice, NewAskingPrice, cbo_ac_asking.Text, txt_ac_asking_price.Text, cbo_ac_delivery.Text, adoAircraftRecordset, ref arr_Transmit_Fields, ref Status_Change_Journ_ID, ref For_Sale_Journ_ID, ref AskingPriceChanged))
					{

						modAdminCommon.Record_Error("Transaction", $"Transaction_Update_Aircraft check for status change {tmpErrDesc}");
						modAdminCommon.ADO_Transaction("RollbackTrans");
						return false;
					}
				}



				tmpErrDesc = "Maint Grid";
				if (MaintenanceGridChanged)
				{
					SaveDetailGrid("Maintenance", grd_Maintenance);
					MaintenanceGridChanged = false;
				}
				if (InteriorGridChanged)
				{
					SaveDetailGrid("Interior", grd_Interior);
					InteriorGridChanged = false;
				}
				if (ExteriorGridChanged)
				{
					SaveDetailGrid("Exterior", grd_Exterior);
					ExteriorGridChanged = false;
				}
				if (EquipmentGridChanged)
				{
					SaveDetailGrid("Equipment", grd_Equipment);
					EquipmentGridChanged = false;
				}
				if (CockpitGridChanged)
				{
					SaveDetailGrid("Addl Cockpit Equipment", grd_Cockpit);
					CockpitGridChanged = false;
				}

				if (SerialNumberChanged)
				{
					HandleSerialNumberChange();
					SerialNumberChanged = false;
				}

				string[] arrTransmitData = new string[]{"", "", "", "", "", "", "", ""};

				if (pnl_LeaseEntry.Visible)
				{
					tmpErrDesc = "save lease";
					search_on("Saving Lease Info...");
					Save_Lease();
				}

				search_on("Saving Feature Codes...");
				// RTW - 4/15/2004 - MODIFED TO USE NEW KEY FEATURE UPDATE APPROACH
				if (!Save_KeyFeature())
				{
					modAdminCommon.Record_Error("Transaction", $"Transaction_Update_Aircraft Save KeyFeature {tmpErrDesc}");
					throw new Exception();
				}

				if (ModelChanged)
				{
					HandleModelChange();
					ModelChanged = false;
					MakeChanged = false;
				}

				if (tmpBaseCodeChanged)
				{
					if (tmpOldBaseName.Trim() == modGlobalVars.cEmptyString)
					{
						tmpOldBaseName = "N/A";
					}

					// send an event if iata changed
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_aport_iata_code"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_aport_iata_code"]).Trim() != modGlobalVars.cEmptyString)
						{
							modCommon.InsertPriorityEvent("CBASE", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"To {Convert.ToString(adoAircraftRecordset["ac_aport_iata_code"]).Trim()} - {($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_name"])}").Trim()}", 0, 0, "Y");
							bSentBaseEvent = true;
						}
						else
						{
							modCommon.InsertPriorityEvent("CBASE", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"From {tmpOldBaseName} To N/A", 0, 0, "Y");
							bSentBaseEvent = true;
						}
					}
					else
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (Convert.IsDBNull(adoAircraftRecordset["ac_aport_icao_code"]))
						{
							modCommon.InsertPriorityEvent("CBASE", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"From {tmpOldBaseName} To N/A", 0, 0, "Y");
							bSentBaseEvent = true;
						}
					}

					// if we did not send an event for iata, check icao code for change
					if (!bSentBaseEvent)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset["ac_aport_icao_code"]))
						{
							if (Convert.ToString(adoAircraftRecordset["ac_aport_icao_code"]).Trim() != modGlobalVars.cEmptyString)
							{
								modCommon.InsertPriorityEvent("CBASE", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"To {Convert.ToString(adoAircraftRecordset["ac_aport_icao_code"]).Trim()} - {($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_name"])}").Trim()}", 0, 0, "Y");
							}
							else
							{
								modCommon.InsertPriorityEvent("CBASE", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"From {tmpOldBaseName} To N/A", 0, 0, "Y");
							}
						}
						else
						{
							modCommon.InsertPriorityEvent("CBASE", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"From {tmpOldBaseName} To N/A", 0, 0, "Y");
						}
					}

					// if we did not send an event for iata or icao, check faaid code for change
					if (!bSentBaseEvent)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoAircraftRecordset["ac_aport_faaid_code"]))
						{
							if (Convert.ToString(adoAircraftRecordset["ac_aport_faaid_code"]).Trim() != modGlobalVars.cEmptyString)
							{
								modCommon.InsertPriorityEvent("CBASE", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"To {Convert.ToString(adoAircraftRecordset["ac_aport_faaid_code"]).Trim()} - {($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_aport_name"])}").Trim()}", 0, 0, "Y");
							}
							else
							{
								modCommon.InsertPriorityEvent("CBASE", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"From {tmpOldBaseName} To N/A", 0, 0, "Y");
							}
						}
						else
						{
							if (tmpOldBaseName != "N/A")
							{
								modCommon.InsertPriorityEvent("CBASE", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"From {tmpOldBaseName} To N/A", 0, 0, "Y");
							}
						}
					}

					// added MSW - 8/4/15 if there is a change, make sure you update the ac_aport_id field as well
					if (bSentBaseEvent)
					{
						if (Convert.ToString(txtIATACode.Tag).Trim() != "")
						{
							adoAircraftRecordset["ac_aport_id"] = Convert.ToString(txtIATACode.Tag);
						}
					}

				}

				if (tmpRegNbrChanged)
				{
					if (tmpOldRegNbr.Trim() == modGlobalVars.cEmptyString)
					{
						tmpOldRegNbr = "N/A";
					}

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_reg_no"]))
					{
						if (Convert.ToString(adoAircraftRecordset["ac_reg_no"]).Trim() != modGlobalVars.cEmptyString)
						{
							modCommon.InsertPriorityEvent("CREG", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"From {tmpOldRegNbr} To {Convert.ToString(adoAircraftRecordset["ac_reg_no"]).Trim()}", 0, 0, "Y");

							if (tmpOldRegNbr.Trim() == modGlobalVars.cEmptyString)
							{
								InsertJournalNote_AC($"Added Registration Number, {Convert.ToString(adoAircraftRecordset["ac_reg_no"]).Trim()}", "");
							}
							else
							{
								InsertJournalNote_AC($"Changed Registration Number From {tmpOldRegNbr} To {Convert.ToString(adoAircraftRecordset["ac_reg_no"]).Trim()}", "");
							}


						}
						else
						{
							modCommon.InsertPriorityEvent("CREG", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"From {tmpOldRegNbr} To N/A", 0, 0, "Y");
							InsertJournalNote_AC($"Removed Registration Number, Previously Was {tmpOldRegNbr}", "");
						}
					}
					else
					{
						modCommon.InsertPriorityEvent("CREG", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"From {tmpOldRegNbr} To N/A", 0, 0, "Y");
					}


				}

				if (tmpAFTTChanged)
				{
					if (tmpOldAFTT.Trim() == modGlobalVars.cEmptyString)
					{
						tmpOldAFTT = "N/A";
					}
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoAircraftRecordset["ac_airframe_tot_hrs"]))
					{
						// Pending Jackie, how is AFTT field clear 0 or ""
						if (Convert.ToDouble(adoAircraftRecordset["ac_airframe_tot_hrs"]) > 0)
						{
							modCommon.InsertPriorityEvent("CAFTT", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"From {tmpOldAFTT} To {Convert.ToString(adoAircraftRecordset["ac_airframe_tot_hrs"]).Trim()}", 0, 0, "Y");
						}
						else
						{
							modCommon.InsertPriorityEvent("CAFTT", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"From {tmpOldAFTT} To N/A", 0, 0, "Y");
						}
					}
					else
					{
						modCommon.InsertPriorityEvent("CAFTT", Convert.ToInt32(adoAircraftRecordset["AC_ID"]), Convert.ToInt32(adoAircraftRecordset["AC_Journ_id"]), $"From {tmpOldAFTT} To N/A", 0, 0, "Y");
					}
				}

				tmpErrDesc = "transmit flag";
				if (Transmit_Change_Flag && !GetSubcategoryCode(Convert.ToInt32(adoAircraftRecordset["ac_journ_id"])).StartsWith("MS", StringComparison.Ordinal))
				{
					//these 4 are currently hardcoded - code will be needed to do actual determination of values
					arrTransmitData[0] = "1";
					arrTransmitData[1] = TransmitRecordAction;
					arrTransmitData[2] = "1";
					arrTransmitData[3] = "1";
					arrTransmitData[4] = Convert.ToString(adoAircraftRecordset["ac_id"]);
					arrTransmitData[5] = Convert.ToString(adoAircraftRecordset["ac_amod_id"]);
					arrTransmitData[6] = "0";
					arrTransmitData[7] = "0";

					if (StringsHelper.ToDoubleSafe(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}").Trim()) == 0)
					{
						modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Change", ref arr_Transmit_Fields);

						if (OnOffMarket == "On")
						{
							arr_Transmit_Fields = new string[]{""};
							modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Add", ref arr_Transmit_Fields);
							OnOffMarket = modGlobalVars.cEmptyString;
						}
						else if (OnOffMarket == "Off")
						{ 
							arr_Transmit_Fields = new string[]{""};
							modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Delete", ref arr_Transmit_Fields);
							OnOffMarket = modGlobalVars.cEmptyString;
						}

					}
					else
					{
						//-----------------------------------------------------------------------------------------------
						// 06/27/2007 - By David D. Cruger
						// If a Transaction Record has any information changed a 2C transmit record must be generated
						//-----------------------------------------------------------------------------------------------
						modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Transaction", "Change", ref arr_Transmit_Fields);
					} //aey 2/10/05 moved below onoff market (does not apply to historical)


					bool tempBool = false;
					string auxVar = ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_forsale_flag"])}" == "Y").ToString().Trim();
					if ((Boolean.TryParse(auxVar, out tempBool)) ? tempBool : Convert.ToBoolean(Double.Parse(auxVar)))
					{
						if (StringsHelper.ToDoubleSafe(($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}").Trim()) == 0)
						{
							modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Change", ref arr_Transmit_Fields);
						}
						else
						{
							modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Transaction", "Change", ref arr_Transmit_Fields);
						}
					}
				}

				this.Cursor = Cursors.WaitCursor;

				adoAircraftRecordset["ac_use_code"] = cbo_ac_use_code.Text.Substring(0, Math.Min(1, cbo_ac_use_code.Text.Length)).Trim().ToUpper(); //aey 1/12/05

				adoAircraftRecordset["ac_upd_user_id"] = modAdminCommon.gbl_User_ID;
				//changed MSW - 11/9/22
				// adoAircraftRecordset!ac_upd_date = FormatDateTime(DateToday, vbGeneralDate)
				adoAircraftRecordset["ac_upd_date"] = modAdminCommon.GetDateTime();




				int tempForEndVar = adoAircraftRecordset.FieldsMetadata.Count - 1;
				for (int I = 0; I <= tempForEndVar; I++)
				{
					if (($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset[I])}").Trim() == modGlobalVars.cEmptyString)
					{
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						adoAircraftRecordset[I] = DBNull.Value;
					}
				}


				// ADDED IN MSW - 8/11/16 - remove the sales company/contact
				if (adoAircraftRecordset.GetField("ac_forsale_flag").OriginalValue != adoAircraftRecordset["ac_forsale_flag"])
				{
					//UPGRADE_WARNING: (1068) adoAircraftRecordset!ac_forsale_flag.OriginalValue of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
					if (Convert.ToString(adoAircraftRecordset.GetField("ac_forsale_flag").OriginalValue) == "Y")
					{
						//    If OnOffMarket = "Off" Then
						Query = "DELETE FROM Aircraft_Reference ";
						Query = $"{Query}WHERE cref_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
						Query = $"{Query} AND cref_journ_id = 0";
						Query = $"{Query} AND cref_contact_type IN ('38','2X')"; // added in 2X - 10/4/17
						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery(); //aey 6/30/04
						// End If
					}
				}

				// *********************************************************************
				// DO ALL THIS STUFF IF THE UPDATE ALSO IS REMOVING THE EXCLUSIVE STATUS
				tmpErrDesc = "exclusive";
				if (in_RemoveExclusive_Flag)
				{

					modAircraft.Return_Aircraft_Exclusive_Broker_CompName_CompId_ContactId(Convert.ToInt32(adoAircraftRecordset["ac_id"]), ref tmpExclusiveBroker, ref lEXBCompId, ref lEXBContactId);

					adoAircraftRecordset["ac_exclusive_flag"] = "N";

					Query = "UPDATE Aircraft_Reference SET cref_primary_poc_flag = 'N' ";
					Query = $"{Query}WHERE cref_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} ";
					Query = $"{Query}AND cref_journ_id = 0 ";
					Query = $"{Query}AND cref_primary_poc_flag = 'Y' ";

					DbCommand TempCommand_2 = null;
					TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
					TempCommand_2.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
					TempCommand_2.ExecuteNonQuery(); //aey 6/30/04

					tmpErrDesc = "exclusive D";

					// ***************************************************************
					// RESET THE PRIMARY CONTACT TO THE PREVIOUS EXCLUSIVE CONTACT - TYPICALLY THE OWNER
					Query = "UPDATE Aircraft_Reference SET cref_primary_poc_flag = 'Y' ";
					Query = $"{Query}WHERE cref_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} ";
					Query = $"{Query}AND cref_journ_id = 0 ";
					Query = $"{Query}AND cref_primary_poc_flag = 'X'";
					DbCommand TempCommand_3 = null;
					TempCommand_3 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_3);
					TempCommand_3.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_3.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_3);
					TempCommand_3.ExecuteNonQuery(); //aey 6/30/04

					// ****************************************
					// DELETE THE EXCLUSIVE BROKER AND EXCLUSIVE REPRESENTATIVE
					Query = "DELETE FROM Aircraft_Reference ";
					Query = $"{Query}WHERE cref_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
					Query = $"{Query} AND cref_journ_id = 0";
					Query = $"{Query} AND cref_contact_type IN ('99','93')";
					DbCommand TempCommand_4 = null;
					TempCommand_4 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_4);
					TempCommand_4.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_4.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_4);
					TempCommand_4.ExecuteNonQuery(); //aey 6/30/04

					tmpErrDesc = "exclusive I";
					// *************************************************
					// INSERT TRANSMITS
					modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Change", ref arr_Transmit_Fields);
					if (Convert.ToString(adoAircraftRecordset["ac_forsale_flag"]) == "Y")
					{
						modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Change", ref arr_Transmit_Fields);
					}

					tmpErrDesc = "exclusive J";
					// ******************************************
					// INSERT A JOURNAL ENTRY INDICATING THAT THE AIRCRAFT CAME OFF EXCLUSIVE
					modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(modAdminCommon.DateToday);
					modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "EXOFF";
					modAdminCommon.Rec_Journal_Info.journ_subject = $"Off Exclusive - Previously With {tmpExclusiveBroker}";
					modAdminCommon.Rec_Journal_Info.journ_description = " ";
					modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(adoAircraftRecordset["ac_id"]);

					// 09/28/2016 - Per Jackie this is to be blank so they can select "Who" told them it's off exclusive
					modAdminCommon.Rec_Journal_Info.journ_comp_id = 0;
					modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;

					modAdminCommon.Rec_Journal_Info.journ_account_id = Aircraft_Account_Rep;
					modAdminCommon.Rec_Journal_Info.journ_prior_account_id = " ";
					modAdminCommon.Rec_Journal_Info.journ_status = "A";
					Remove_Exclusive_Journ_ID = frm_Journal.DefInstance.Commit_Journal_Entry();

					// 09/28/2016 - By David D. Cruger
					// Record an Event so EMail Event Listener
					// Can determine who the Exc Broker was

					modAdminCommon.Record_Event("Homebase-EXOFF", "EXOFF - Off Exclusive", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Remove_Exclusive_Journ_ID, lEXBCompId, false, 0, lEXBContactId);

				} // END OF REMOVE EXCLUSIVE STUFF

				// UPDATE THE AIRCRAFT RECORD
				Application.DoEvents();
				adoAircraftRecordset.Update();
				Application.DoEvents();
				Application.DoEvents();

				search_on("Updating FAA Documents... ");
				Update_Aircraft_FAA_Document();

				search_on("Saving Certifications...");
				Save_Certification();

				search_on("Saving Avionics...");
				Save_Avionics();

				// ********************************************
				// COMMIT THE TRANSACTION
				Application.DoEvents();
				tmpErrDesc = "commit";
				Application.DoEvents();
				modAdminCommon.ADO_Transaction("CommitTrans");
				Application.DoEvents();

				//---------------------------------------------------------------

				modCommon.Aircraft_History_Close_Recordsets();

				if (in_RemoveExclusive_Flag)
				{ //aey 4/18/05
					modCommon.Company_Stats_Update(comp_id); //aey 6/15/05
				}

				modCommon.End_Activity_Monitor_Message("Save Aircraft", ref strMsg, dtStartDate, ref dtEndDate, lACId, lJournId, 0, 0, 0);

				//---------------------------------------------------------------

				if (cbo_ac_warranty_notes.Text != Convert.ToString(cbo_ac_warranty_notes.Tag))
				{

					if (cbo_ac_warranty_notes.Text != "" && Convert.ToString(cbo_ac_warranty_notes.Tag) == "")
					{
						modCommon.Start_Activity_Monitor_Message("Aircraft Maintained Added", ref strMsg, ref dtStartDate, ref dtEndDate);
						strMsg = $" - {cbo_ac_warranty_notes.Text}";
						modCommon.End_Activity_Monitor_Message("Aircraft Maintained Added", ref strMsg, dtStartDate, ref dtEndDate, lACId, lJournId, 0, 0, 0);
					}
					else
					{
						modCommon.Start_Activity_Monitor_Message("Aircraft Maintained Updated", ref strMsg, ref dtStartDate, ref dtEndDate);
						strMsg = $" - {cbo_ac_warranty_notes.Text}";
						modCommon.End_Activity_Monitor_Message("Aircraft Maintained Updated", ref strMsg, dtStartDate, ref dtEndDate, lACId, lJournId, 0, 0, 0);
					}

				} // If cbo_ac_warranty_notes.Text <> cbo_ac_warranty_notes.Tag Then

				cbo_ac_warranty_notes.Tag = cbo_ac_warranty_notes.Text;

				//---------------------------------------------------------------

				if (cbo_ac_use_code.Text != Convert.ToString(cbo_ac_use_code.Tag))
				{

					modCommon.Start_Activity_Monitor_Message("Aircraft Usage Updated", ref strMsg, ref dtStartDate, ref dtEndDate);
					strMsg = $" - {cbo_ac_use_code.Text}";
					modCommon.End_Activity_Monitor_Message("Aircraft Usage Updated", ref strMsg, dtStartDate, ref dtEndDate, lACId, lJournId, 0, 0, 0);

				} // If cbo_ac_use_code.Text <> cbo_ac_use_code.Tag Then

				cbo_ac_use_code.Tag = cbo_ac_use_code.Text;

				//---------------------------------------------------------------

				if (txt_ac_year[2].Text != Convert.ToString(txt_ac_year[2].Tag))
				{

					if (txt_ac_year[2].Text != "" && Convert.ToString(txt_ac_year[2].Tag) == "")
					{
						modCommon.Start_Activity_Monitor_Message("Aircraft RegDate Added", ref strMsg, ref dtStartDate, ref dtEndDate);
						strMsg = $" - {txt_ac_year[2].Text}";
						modCommon.End_Activity_Monitor_Message("Aircraft RegDate Added", ref strMsg, dtStartDate, ref dtEndDate, lACId, lJournId, 0, 0, 0);
					}
					else
					{
						modCommon.Start_Activity_Monitor_Message("Aircraft RegDate Updated", ref strMsg, ref dtStartDate, ref dtEndDate);
						strMsg = $" - {txt_ac_year[2].Text}";
						modCommon.End_Activity_Monitor_Message("Aircraft RegDate Updated", ref strMsg, dtStartDate, ref dtEndDate, lACId, lJournId, 0, 0, 0);
					}

				} // If txt_ac_year(2).Text <> txt_ac_year(2).Tag Then


				// MSW - 7/15/20
				if (OldAskingPrice != NewAskingPrice && Convert.ToString(adoAircraftRecordset["ac_forsale_flag"]) == "Y")
				{
					// then this is new on the market, if there is a asking price, verify the asking automatically
					if (cbo_ac_asking.Text == "Price")
					{
						VERIFY_ASKING_AND_ADD_NOTE(lACId, true);
					}
				}

				txt_ac_year[2].Tag = txt_ac_year[2].Text;

				search_off();
				return result;
			}
			catch (Exception e)
			{

				ErrCount++;

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				if (Information.Err().Number == -2147217864)
				{ //optimistic concurrency  aey 8/10/04
					if (ErrCount < 3)
					{
						//UPGRADE_TODO: (1065) Error handling statement (Resume) could not be converted. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1065
						UpgradeHelpers.Helpers.NotUpgradedHelper.NotifyNotUpgradedElement("Resume Statement");
					}
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				tmpErrDesc = $"{e.Message} {Information.Err().Number.ToString()} {tmpErrDesc} {e.Source}";

				modAdminCommon.ADO_Transaction("RollbackTrans");
				modCommon.Aircraft_History_Close_Recordsets();
				result = false;
				modAdminCommon.Report_Error($"Transaction_Update_Aircraft_Error:ACID={modAdminCommon.gbl_Aircraft_ID.ToString()}->{tmpErrDesc}");
				return result;
			}
		}

		private bool Delete_History_Record()
		{
			//******************************************************************************************
			//
			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO DELETE ALL RECORDS ASSOCIATED WITH A HISTORY
			//          (TRANSACTION) RECORD.
			//
			// LAST MODIFIED: Keith Humpf, 9/3/03
			//  3/2/2006 - RTW - changed to function and removed message box on error

			bool result = false;
			string[] arrDeleteRecords = null;
			string Msg = ""; // USED TO HOLD MESSAGE STRING
			string Query = ""; // string used to hold current query
			int tmpPCRecKey = 0;
			int ADComp_ID = 0;
			ADORecordSetHelper snp_CompFound = new ADORecordSetHelper();


			try
			{ //aey 6/21/04

				search_on("Deleting Aircraft History Record");
				// ******************************************************
				// DETERMINE IF THE USER IS TRYING TO REMOVE INFORMATION
				// RELATED TO A HISTORY RECORD OR A CURRENT AIRCRAFT
				if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0)
				{
					Msg = $"This will remove all references to this historical Aircraft.{Environment.NewLine}{Environment.NewLine}Are you sure you want to delete this record?";
				}
				else
				{
					Msg = $"This will remove all references to this Aircraft.{Environment.NewLine}{Environment.NewLine}Are you sure you want to delete this aircraft?";
				}

				// *********************************************************
				// IF THERE ARE DOCUMENTS IN THE FAA LOG FOR THIS AIRCRAFT
				// AND JOURNAL ID, THEN ABORT THE ACTION ... OTHERWISE PROCEED

				Query = $"select * from FAA_Document_Log WITH(NOLOCK) where faalog_ac_id={Convert.ToString(adoAircraftRecordset["ac_id"])} and faalog_journ_id={Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";
				if (modAdminCommon.Exist(Query))
				{ // determine if there are documents attached to the transaction being deleted.
					modAdminCommon.Report_Error("Warning: Cannot Delete This Historical Record Because There Are Documents Attached - Remove Documents First");
					MessageBox.Show("Warning: Cannot Delete This Historical Record Because There Are Documents Attached - Remove Documents First", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					return result;
				} // IF FAA DOCUMENTS

				// ******************************************************************************
				// IF TRYING TO DELETE A TRANSACTION WITH A DEPENDENT SUBLEASE, THEN MESSAGE AND EXIT
				if (!modAircraft.CanBeExpired(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"])))
				{
					modAdminCommon.Report_Error("Unable to delete this transaction due to a dependent sublease(s). You must delete or expire the dependent sublease(s) first.");
					MessageBox.Show("Unable to delete this transaction due to a dependent sublease(s). You must delete or expire the dependent sublease(s) first.", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
					return result;
				} // IF LEASE CANNOT BE EXPIRED

				ADComp_ID = modCommon.GetAwaitingDocsCompID(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]));

				Insert_EventLog_On_Add_Delete_AC("DeleteAC", Convert.ToInt32(adoAircraftRecordset["ac_id"]));

				// ***********************************************
				// DISPLAY ACTION MESSAGE AND GET AUTHORIZATION
				// FROM THE USER TO PROCEED

				if (MessageBox.Show(Msg, AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
				{

					modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), ADComp_ID, "Delete Hist");
					//************************************************
					// DELETE DEPENDENT LEASE RECORDS IF THERE ARE ANY
					Delete_Lease(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]));

					arrDeleteRecords = new string[]{""};

					if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) > 0)
					{ // DELETING A HISTORICAL TRANSACTION
						if (!(snp_History.BOF && snp_History.EOF))
						{
							snp_History.MoveLast();
							snp_History.MoveFirst();
							// MOVE THROUGH THE HISTORY RECORDSET IS ON THE MATCHING AIRCRAFT RECORD
							int tempForEndVar = snp_History.RecordCount;
							for (int I = 1; I <= tempForEndVar; I++)
							{
								if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_History["journ_id"])}").Trim() == ($"{modGlobalVars.cEmptyString}{Convert.ToString(adoAircraftRecordset["ac_journ_id"])}").Trim())
								{
									break;
								}
								snp_History.MoveNext();
							}
						}

						// IF THE TRANSACTION IS NOT:
						// - MADE AVAILABLE
						// - FSPEND
						// - CORRECTION
						// THEN SEND A DELETE TRANSMIT
						if (($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_History["journ_subcategory_code"])}").Trim().Substring(0, Math.Min(2, ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_History["journ_subcategory_code"])}").Trim().Length)).ToUpper() != "MA" && ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_History["journ_subcategory_code"])}").Trim().Substring(0, Math.Min(5, ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_History["journ_subcategory_code"])}").Trim().Length)).ToUpper() != "FSPEND" && ($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_History["journ_subcategory_code"])}").Trim().Substring(Math.Max(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_History["journ_subcategory_code"])}").Trim().Length - 4, 0)).ToUpper() != "CORR")
						{

							tmpPCRecKey = Convert.ToInt32(Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(snp_History["journ_pcreckey"])}").Trim()));

							modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), tmpPCRecKey, Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Transaction", "Delete", ref arrDeleteRecords);
						}

					}
					else
					{
						// DELETING THE CURRENT AIRCRAFT
						modAdminCommon.Record_Transmit($"{Convert.ToString(adoAircraftRecordset["ac_ser_no_full"])}{modGlobalVars.cEmptyString}", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Delete", ref arrDeleteRecords);

						if (Convert.ToString(adoAircraftRecordset["ac_forsale_flag"]).Trim().ToUpper() == "Y")
						{
							// RECORD A TRANSMIT FOR AVAILABLES
							modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Delete", ref arrDeleteRecords);
						} // IF FOR SALE

						modAdminCommon.Record_Event("Aircraft Delete", $"Deleted Serial Number{Convert.ToString(adoAircraftRecordset["ac_ser_no_full"])}", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, ADComp_ID);

						modAdminCommon.Record_Delete_Log_Entry("Aircraft", Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0);

					} // adoAircraftRecordset!AC_Journ_id > 0

					if (modCommon.Delete_Aircraft_History(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"])))
					{

						modAdminCommon.ADO_Transaction("CommitTrans");
						// IF THE RESULT OF THIS REMOVES THE PRIMARY CONTACT THEN ASSIGN ONE
						if (modAircraft.NoPrimaryPOC(Convert.ToInt32(adoAircraftRecordset["AC_ID"])))
						{
							modAircraft.AssignPrimaryPOC(Convert.ToInt32(adoAircraftRecordset["AC_ID"]), primary_comp_id);
						}

						if (ADComp_ID > 0)
						{
							Query = $"EXEC HomebaseDoesCompanyHaveAnyReferencesWithJournalId {ADComp_ID.ToString()}, 0";
							snp_CompFound.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

							if (!(snp_CompFound.BOF && snp_CompFound.EOF))
							{
								if (Convert.ToDouble(snp_CompFound["LinkFound"]) != 1)
								{
									// *******************************************
									//  REMOVE THE AWAITING DOCUMENTATION COMPANY
									Query = $"EXEC HomebaseDeleteAllCompanyRecordsBasedCompId {ADComp_ID.ToString()}, 0";
									DbCommand TempCommand = null;
									TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
									UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
									TempCommand.CommandText = Query;
									//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
									//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
									TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
									UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
									TempCommand.ExecuteNonQuery();
								}
							}

							snp_CompFound.Close();

						} // ADComp_ID > 0

						snp_CompFound = null;

						MessageBox.Show("Delete Successfull", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
						DeletedHistory = true;

						if (Convert.ToDouble(adoAircraftRecordset["ac_journ_id"]) != 0)
						{
							cmd_Active.Text = "View Current Aircraft Record";
							cmd_Active_Click(cmd_Active, new EventArgs());
							Fill_Aircraft_History_Grid();
							search_off();
						}
						else
						{
							result = true;
							modAdminCommon.gbl_Aircraft_ID = 0;
							Unload_Aircraft_Form();
							this.Close();
						} // adoAircraftRecordset!AC_Journ_id <> 0

					}
					else
					{

						modAdminCommon.ADO_Transaction("RollbackTrans");
						return false;

					} // Delete_Aircraft_History(adoAircraftRecordset!AC_ID, adoAircraftRecordset!AC_Journ_id)

				} // MsgBox(Msg, vbYesNo) = vbYes

				return true;
			}
			catch
			{

				result = false;
				search_off();
			}
			return result;
		}

		public void Insert_EventLog_On_Add_Delete_AC(string type_of, int ac_id)
		{

			ADORecordSetHelper snpACSelect = new ADORecordSetHelper();
			string temp_make_name = "";
			string temp_model_name = "";
			string temp_ac_amod_id = "";
			string temp_ser_no = "";




			// SELECT WHAT IS NEEDED FROM THE AIRCRAFT THAT WAS JUST INSERTED
			string Query = "SELECT amod_make_name, amod_model_name, ac_amod_id, ac_ser_no_full";
			Query = $"{Query} FROM Aircraft WITH(NOLOCK) ";
			Query = $"{Query} INNER JOIN Aircraft_Model WITH(NOLOCK) ON  amod_id = ac_amod_id";
			Query = $"{Query} WHERE ac_id = {ac_id.ToString()}";

			snpACSelect.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpACSelect.BOF && snpACSelect.EOF))
			{
				temp_make_name = ($"{Convert.ToString(snpACSelect["amod_make_name"])} ").Trim();
				temp_model_name = ($"{Convert.ToString(snpACSelect["amod_model_name"])} ").Trim();
				temp_ac_amod_id = Convert.ToString(snpACSelect["ac_amod_id"]);
				temp_ser_no = ($"{Convert.ToString(snpACSelect["ac_ser_no_full"])} ").Trim();
			}

			snpACSelect.Close();
			snpACSelect = null;


			string Query2 = "INSERT INTO Eventlog ";
			Query2 = $"{Query2} ( ";
			Query2 = $"{Query2}evtl_date, evtl_user_id, evtl_type, evtl_message, evtl_ac_id, evtl_journ_id";
			Query2 = $"{Query2} ) VALUES (";
			Query2 = $"{Query2}'{DateTimeHelper.ToString(DateTime.Today)} {DateTimeHelper.ToString(DateTimeHelper.Time)}',"; // date
			Query2 = $"{Query2}'{modAdminCommon.gbl_User_ID}',"; // user id
			Query2 = $"{Query2}'{type_of}',"; // type
			Query2 = $"{Query2}'Model: {StringsHelper.Replace(temp_make_name, "'", "", 1, -1, CompareMethod.Binary)} {StringsHelper.Replace(temp_model_name, "'", "", 1, -1, CompareMethod.Binary)}- Ser No: {temp_ser_no}',"; // message
			Query2 = $"{Query2}{ac_id.ToString()},"; // ac_id
			Query2 = $"{Query2}0"; // journ_id
			Query2 = $"{Query2} ) ";

			DbCommand TempCommand = null;
			TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
			TempCommand.CommandText = Query2;
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
			TempCommand.ExecuteNonQuery();


		}
		public void Key_Feature_Auto_Update()
		{
			//
			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO AUTOMATICALLY
			// UPDATE KEY FEATURES FOR A SPECIFIC AIRCRAFT BASED ON
			// WHAT FEATURES HAVE BEEN FLAGGED FOR AUTOMATIC GENERATION AND
			// WHAT FEATURES APPLY TO A GIVEN MODEL
			//
			//  RTW - 4/14/2004
			//
			// *************************************************************

			try
			{
				string Query = ""; // String used to store query

				// LOOP THROUGH ALL OF THE FEATURES IN THE GRID
				int tempForEndVar = grd_AircraftKeyFeatures.RowsCount - 1;
				for (int I = 1; I <= tempForEndVar; I++)
				{
					grd_AircraftKeyFeatures.CurrentRowIndex = I;
					grd_AircraftKeyFeatures.CurrentColumnIndex = 3;
					if (grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim() == "AUTO")
					{
						grd_AircraftKeyFeatures.CurrentColumnIndex = 2;
						if (!modAdminCommon.Key_Feature_Standard(Convert.ToInt32(adoAircraftRecordset["ac_id"]), grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim()))
						{
							// IF THE KEY FEATURE IS NOT STANDARD, THEN CHECK
							// FOR THE RULES TO APPLY
							if (modAdminCommon.Key_Feature_Auto_Set(Convert.ToInt32(adoAircraftRecordset["ac_id"]), grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim()))
							{
								grd_AircraftKeyFeatures.CurrentColumnIndex = 1;
								if (grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim() != "Yes")
								{
									modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "KeyFeat");
									grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Yes";
									Query = "update Aircraft_Key_Feature set afeat_status_flag='Y',afeat_action_date=null ";
									Query = $"{Query}where afeat_ac_id={Convert.ToString(adoAircraftRecordset["ac_id"])} ";
									Query = $"{Query}and afeat_journ_id={Convert.ToString(adoAircraftRecordset["ac_journ_id"])} ";
									grd_AircraftKeyFeatures.CurrentColumnIndex = 2;
									Query = $"{Query}and afeat_feature_code='{grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim()}' ";
									DbCommand TempCommand = null;
									TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
									UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
									TempCommand.CommandText = Query;
									//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
									//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
									TempCommand.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
									UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
									TempCommand.ExecuteNonQuery();
									// TRANSMIT THE FEATURE CODE IF APPROPRIATE
									if (grd_AircraftKeyFeatures.CurrentRowIndex <= 6)
									{
										Add_To_Transmit_List($"afeat_feature_status{grd_AircraftKeyFeatures.CurrentRowIndex.ToString()}");
										modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Change", ref arr_Transmit_Fields);
										if (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked)
										{
											modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Change", ref arr_Transmit_Fields);
										}
									}
									modAdminCommon.ADO_Transaction("CommitTrans");
								}
							}
							else
							{
								grd_AircraftKeyFeatures.CurrentColumnIndex = 1;
								if (grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim() == "Yes")
								{
									modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "keyfeat2");

									// if its emp and no then make it auto no, not unknown

									grd_AircraftKeyFeatures.CurrentColumnIndex = 2;
									if (grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim() == "EMP")
									{
										if (cbo_ac_engine_maint_prog.Text.Trim().StartsWith("N", StringComparison.Ordinal))
										{
											grd_AircraftKeyFeatures.CurrentColumnIndex = 1;
											Application.DoEvents();
											Application.DoEvents();
											Application.DoEvents();
											grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "No";
											Application.DoEvents();
											Application.DoEvents();
											Application.DoEvents();
											Query = "update Aircraft_Key_Feature set afeat_status_flag='N',afeat_action_date=null ";
										}
										else
										{
											grd_AircraftKeyFeatures.CurrentColumnIndex = 1;
											Application.DoEvents();
											Application.DoEvents();
											Application.DoEvents();
											grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Unknown";
											Application.DoEvents();
											Application.DoEvents();
											Application.DoEvents();
											Query = "update Aircraft_Key_Feature set afeat_status_flag='U',afeat_action_date=null ";
										}
									}
									else
									{
										grd_AircraftKeyFeatures.CurrentColumnIndex = 1;
										Application.DoEvents();
										Application.DoEvents();
										Application.DoEvents();
										grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Unknown";
										Application.DoEvents();
										Application.DoEvents();
										Application.DoEvents();
										Query = "update Aircraft_Key_Feature set afeat_status_flag='U',afeat_action_date=null ";
									}

									Query = $"{Query}where afeat_ac_id={Convert.ToString(adoAircraftRecordset["ac_id"])} ";
									Query = $"{Query}and afeat_journ_id={Convert.ToString(adoAircraftRecordset["ac_journ_id"])} ";
									grd_AircraftKeyFeatures.CurrentColumnIndex = 2;
									Query = $"{Query}and afeat_feature_code='{grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim()}' ";
									DbCommand TempCommand_2 = null;
									TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
									UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
									TempCommand_2.CommandText = Query;
									//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
									//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
									TempCommand_2.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
									UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
									TempCommand_2.ExecuteNonQuery();
									// TRANSMIT THE FEATURE CODE IF APPROPRIATE
									if (grd_AircraftKeyFeatures.CurrentRowIndex <= 6)
									{
										Add_To_Transmit_List($"afeat_feature_status{grd_AircraftKeyFeatures.CurrentRowIndex.ToString()}");
										modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Change", ref arr_Transmit_Fields);
										if (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked)
										{
											modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Change", ref arr_Transmit_Fields);
										}
									}
									modAdminCommon.ADO_Transaction("CommitTrans");
								}

							}
						}
						else
						{
							// SHOULD BE A STANDARD EQUIPMENT FOR THIS AIRCRAFT
							// SO MAKE SURE THAT IT IS
							grd_AircraftKeyFeatures.CurrentColumnIndex = 1;
							if (grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim() != "Yes")
							{
								modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "KeyFeat3");
								grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].Value = "Yes";
								Query = "update Aircraft_Key_Feature set afeat_status_flag='Y',afeat_action_date=null ";
								Query = $"{Query}where afeat_ac_id={Convert.ToString(adoAircraftRecordset["ac_id"])} ";
								Query = $"{Query}and afeat_journ_id={Convert.ToString(adoAircraftRecordset["ac_journ_id"])} ";
								grd_AircraftKeyFeatures.CurrentColumnIndex = 2;
								Query = $"{Query}and afeat_feature_code='{grd_AircraftKeyFeatures[grd_AircraftKeyFeatures.CurrentRowIndex, grd_AircraftKeyFeatures.CurrentColumnIndex].FormattedValue.ToString().Trim()}' ";
								DbCommand TempCommand_3 = null;
								TempCommand_3 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
								UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_3);
								TempCommand_3.CommandText = Query;
								//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
								TempCommand_3.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
								UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_3);
								TempCommand_3.ExecuteNonQuery();
								// TRANSMIT THE FEATURE CODE IF APPROPRIATE
								if (grd_AircraftKeyFeatures.CurrentRowIndex <= 6)
								{
									Add_To_Transmit_List($"afeat_feature_status{grd_AircraftKeyFeatures.CurrentRowIndex.ToString()}");
									modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Aircraft", "Change", ref arr_Transmit_Fields);
									if (chkArray[chkAvailableFlag_INDEX].CheckState == CheckState.Checked)
									{
										modAdminCommon.Record_Transmit(Convert.ToString(adoAircraftRecordset["ac_ser_no_full"]), Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), Convert.ToInt32(adoAircraftRecordset["ac_amod_id"]), "Available", "Change", ref arr_Transmit_Fields);
									}
								}
								modAdminCommon.ADO_Transaction("CommitTrans");
							}
						}

					}


				} // get the next FEATURE FROM THE GRID

				// ***************************************************************************************************************
				// HANDLE NON-AUTOMATED FEATURE UPDATES
				// ADDED BY RTW ON 3/22/2018

				ADORecordSetHelper adoNonModelFeaturesRecordset = new ADORecordSetHelper();

				Query = "select * from Key_Feature with (NOLOCK) where kfeat_model_dependent_flag='N' and kfeat_inactive_date is NULL and kfeat_auto_generate_flag='Y' ";

				adoNonModelFeaturesRecordset.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
				if (!(adoNonModelFeaturesRecordset.BOF && adoNonModelFeaturesRecordset.EOF))
				{


					while(!adoNonModelFeaturesRecordset.EOF)
					{

						if (modAdminCommon.Key_Feature_Auto_Set(Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToString(adoNonModelFeaturesRecordset["kfeat_code"]).Trim()))
						{
							// check to see if we already have a key feature record with Y
							if (modAdminCommon.Exist($"select afeat_feature_code from Aircraft_Key_Feature with (NOLOCK) where afeat_journ_id = 0 and afeat_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} and afeat_feature_code='{Convert.ToString(adoNonModelFeaturesRecordset["kfeat_code"]).Trim()}' and afeat_status_flag='Y'"))
							{

								// IF YES THEN IGNORE
							}
							else
							{
								// IF WE HAVE THIS FEATURE BUT NOT AS A Y THEN MAKE IT A Y
								if (modAdminCommon.Exist($"select afeat_feature_code from Aircraft_Key_Feature with (NOLOCK) where afeat_journ_id = 0 and afeat_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} and afeat_feature_code='{Convert.ToString(adoNonModelFeaturesRecordset["kfeat_code"]).Trim()}' "))
								{
									Query = "update Aircraft_Key_Feature set afeat_status_flag='Y',afeat_action_date=null ";
									Query = $"{Query}where afeat_ac_id={Convert.ToString(adoAircraftRecordset["ac_id"])} ";
									Query = $"{Query}and afeat_journ_id={Convert.ToString(adoAircraftRecordset["ac_journ_id"])} ";
									Query = $"{Query}and afeat_feature_code='{Convert.ToString(adoNonModelFeaturesRecordset["kfeat_code"]).Trim()}' ";
									DbCommand TempCommand_4 = null;
									TempCommand_4 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
									UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_4);
									TempCommand_4.CommandText = Query;
									//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
									//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
									TempCommand_4.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
									UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_4);
									TempCommand_4.ExecuteNonQuery();
								}
								else
								{
									//IF WE DO NOT HAVE THE FEATURE AT ALL THEN ENTER AS A Y
									Query = "insert into Aircraft_Key_Feature (afeat_feature_code, afeat_ac_id, afeat_journ_id, afeat_status_flag, afeat_seq_no, afeat_action_date) ";
									Query = $"{Query}values ('{Convert.ToString(adoNonModelFeaturesRecordset["kfeat_code"]).Trim()}',{Convert.ToString(adoAircraftRecordset["ac_id"])},{Convert.ToString(adoAircraftRecordset["ac_journ_id"])},'Y',99,NULL) ";
									modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "KeyFeat4");
									DbCommand TempCommand_5 = null;
									TempCommand_5 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
									UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_5);
									TempCommand_5.CommandText = Query;
									//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
									//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
									TempCommand_5.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
									UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_5);
									TempCommand_5.ExecuteNonQuery();
									modAdminCommon.ADO_Transaction("CommitTrans");

									string tempRefParam = "Key Feature Updated";
									System.DateTime tempRefParam2 = DateTime.Today;
									System.DateTime tempRefParam3 = DateTime.Today;
									modCommon.Start_Activity_Monitor_Message("Aircraft Key Feature Updated", ref tempRefParam, ref tempRefParam2, ref tempRefParam3);
									string tempRefParam4 = "Key Feature Updated";
									System.DateTime tempRefParam5 = DateTime.Today;
									modCommon.End_Activity_Monitor_Message("Aircraft Key Feature Updated", ref tempRefParam4, DateTime.Today, ref tempRefParam5, Convert.ToInt32(adoAircraftRecordset["ac_id"]), 0, 0, 0, 0);
								}

							}

						}
						else
						{
							// FEATURE NOT FOUND SO MAKE SURE NO Y RECORD.  IF Y RECORD THEN DELETE
							if (modAdminCommon.Exist($"select afeat_feature_code from Aircraft_Key_Feature with (NOLOCK) where afeat_journ_id = 0 and afeat_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} and afeat_feature_code='{Convert.ToString(adoNonModelFeaturesRecordset["kfeat_code"]).Trim()}' and afeat_status_flag='Y'"))
							{

								// SHOULD MOST LIKELY BE RUNNING THIS HERE INSTEAD OF THE DELETE
								// Query = "update Aircraft_Key_Feature set afeat_status_flag='Y',afeat_action_date=null "
								//   Query = Query & "where afeat_ac_id=" & adoAircraftRecordset!AC_ID & " "
								//    Query = Query & "and afeat_journ_id=" & adoAircraftRecordset!AC_Journ_id & " "
								//  Query = Query & "and afeat_feature_code='" & Trim(adoNonModelFeaturesRecordset!kfeat_code) & "' "
								//afeat_inactive_date


								Query = "delete from Aircraft_Key_Feature ";
								Query = $"{Query}where afeat_ac_id={Convert.ToString(adoAircraftRecordset["ac_id"])} ";
								Query = $"{Query}and afeat_journ_id={Convert.ToString(adoAircraftRecordset["ac_journ_id"])} ";
								Query = $"{Query}and afeat_feature_code='{Convert.ToString(adoNonModelFeaturesRecordset["kfeat_code"]).Trim()}' ";

								modAdminCommon.ADO_Transaction("BeginTrans", Convert.ToInt32(adoAircraftRecordset["ac_id"]), Convert.ToInt32(adoAircraftRecordset["ac_journ_id"]), 0, "KeyFeat4");
								DbCommand TempCommand_6 = null;
								TempCommand_6 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
								UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_6);
								TempCommand_6.CommandText = Query;
								//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								//UPGRADE_WARNING: (6021) Casting 'ADODB.ExecuteOptionEnum' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
								TempCommand_6.CommandType = (CommandType) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords();
								UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_6);
								TempCommand_6.ExecuteNonQuery();
								modAdminCommon.ADO_Transaction("CommitTrans");
							}

						}


						adoNonModelFeaturesRecordset.MoveNext();
					};

				}
				// CLOSE RECORSET
				adoNonModelFeaturesRecordset.Close();
				adoNonModelFeaturesRecordset = null;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.ADO_Transaction("Rollback");
				modAdminCommon.Report_Error($"Key_Feature_Auto_Update_Error: {excep.Message}");
			}



		}

		private int Get_Exipiring_LesseeLessor(string inType)
		{
			//
			//   Purpose: The purpose return the appropriate to lease reference record that needs deleting
			//   Last Modified On: 5/24/2002
			//   Last Modified By: Rick Wanner
			//
			int result = 0;
			ADORecordSetHelper snpAllLeaseInfo = new ADORecordSetHelper();


			// GET THE AIRCRAFT REFERENCE RECORDS DIRECTLY ASSOCIATED WITH
			// THE SELECTED LEASE TRANSACTION
			string Query = "SELECT cref_contact_type,cref_comp_id,cref_contact_id ";
			Query = $"{Query}FROM Aircraft_Reference WITH(NOLOCK) inner join Aircraft_Lease WITH(NOLOCK) ON aclease_ac_id = cref_ac_id and aclease_journ_id = cref_journ_id ";
			Query = $"{Query}WHERE cref_ac_id = {Convert.ToString(snpLease["aclease_ac_id"])}";
			Query = $"{Query} AND cref_journ_id = {Convert.ToString(snpLease["aclease_journ_id"])}";
			if (inType == "Lessee")
			{
				Query = $"{Query} and cref_contact_type in ('12','39')"; //'Lessee, Lessor, Lessee-Sublessor, Sublessee
			}
			else
			{
				Query = $"{Query} and cref_contact_type in ('13','57','39')"; //'Lessee, Lessor, Lessee-Sublessor, Sublessee
			}
			Query = $"{Query} order by cref_contact_type desc";

			snpAllLeaseInfo.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (!(snpAllLeaseInfo.BOF && snpAllLeaseInfo.EOF))
			{
				result = Get_Reference_ID(Convert.ToInt32(snpLease["aclease_ac_id"]), 0, Convert.ToString(snpAllLeaseInfo["cref_contact_type"]), Convert.ToInt32(snpAllLeaseInfo["cref_comp_id"]), Convert.ToInt32(snpAllLeaseInfo["cref_contact_id"]));
				snpAllLeaseInfo.Close();
			}

			snpAllLeaseInfo = null;

			return result;



			modAdminCommon.ADO_Transaction("RollbackTrans");
			search_off();
			modAdminCommon.Report_Error($"Expire Lease Error: {Query}");
			return result;
		}

		public void check_for_Commercial_mapping()
		{

			//  If b_InCommercialDB Then
			//
			//   lbl_gen(110).Visible = True
			//    lbl_gen(110).Caption = get_homebase_Reference(gbl_Aircraft_ID)
			//
			//    Call enable_ac_mapingID
			//
			//    lbl_gen(111).Visible = True
			//    ac_mapping_id.Visible = True
			//    cmd_set_mapping_flag.Visible = True
			//    ac_mapping_list.Visible = True
			//
			//  Else
			//
			//    lbl_gen(110).Visible = True
			//    lbl_gen(110).Caption = " Commercial to Hombase Aircraft Mapping : Aircraft Details" & vbCrLf
			//    lbl_gen(110).Caption = lbl_gen(110).Caption & "  Are only availalable from Commericial Database"
			//
			//    lbl_gen(111).Visible = False
			//    ac_mapping_id.Visible = False
			//    cmd_set_mapping_flag.Visible = False
			//    ac_mapping_list.Visible = False
			//
			//  End If

		}

		private void chk_ac_aport_private_CheckStateChanged(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.chk_ac_aport_private, eventSender);

			if (Index == 0)
			{
				if (chk_ac_aport_private[0].CheckState == CheckState.Checked && chk_ac_aport_private[2].CheckState == CheckState.Checked)
				{
					// then they are both checked, and we cant have both checked, uncheck transient
					MessageBox.Show("You Must Un-Check 'Transient' Before Checking 'Private'", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
					chk_ac_aport_private[0].CheckState = CheckState.Unchecked;
				}
				else if (chk_ac_aport_private[0].CheckState == CheckState.Checked)
				{ 
					txtIATACode.Text = modGlobalVars.cEmptyString;
					txtIATACode.Tag = "0";
					txtICAOCode.Text = modGlobalVars.cEmptyString;
					txtFAAIDCode.Text = modGlobalVars.cEmptyString;
					txtBaseAirportName.Text = "Private";

					txtIATACode.Text = "";
					txtIATACode.Enabled = false;
					txtICAOCode.Text = "";
					txtICAOCode.Enabled = false;
					txtFAAIDCode.Text = "";
					txtFAAIDCode.Enabled = false;
					cboBaseCountry.Enabled = true;

					//if there is no cuntry, dont allow state to be picked, and dont allow city typed
					if (cboBaseCountry.Text == "")
					{
						cboBaseState.SelectedIndex = 0;
						cboBaseState.Enabled = false;
						txtBaseCity.Enabled = false;
					}
					else if (cboBaseCountry.Text != "" && ((cboBaseState.Items.Count > 1 && cboBaseState.Text != "") || cboBaseState.Items.Count <= 1))
					{ 
						// if there is a country picked and there is a state picked or no state, then turn on city
						txtBaseCity.Enabled = true;
					}
				}
				else if (chk_ac_aport_private[0].CheckState == CheckState.Unchecked)
				{ 
					if (txtBaseAirportName.Text != "Transient")
					{
						txtBaseAirportName.Text = "";
					}
					txtIATACode.Enabled = true;
					txtICAOCode.Enabled = true;
					txtFAAIDCode.Enabled = true;
				}
			}
			else if (Index == 2)
			{ 

				if (chk_ac_aport_private[0].CheckState == CheckState.Checked && chk_ac_aport_private[2].CheckState == CheckState.Checked)
				{
					// then they are both checked, and we cant have both checked, uncheck transient
					MessageBox.Show("You Must Un-Check 'Private' Before Checking 'Transient'", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
					chk_ac_aport_private[2].CheckState = CheckState.Unchecked;
				}
				else if (chk_ac_aport_private[2].CheckState == CheckState.Checked)
				{  // transient
					txtIATACode.Text = modGlobalVars.cEmptyString;
					txtIATACode.Tag = "0";
					txtICAOCode.Text = modGlobalVars.cEmptyString;
					txtFAAIDCode.Text = modGlobalVars.cEmptyString;
					txtBaseAirportName.Text = "Transient";
					cboBaseState.SelectedIndex = 0;
					cboBaseState.Enabled = false;
					txtBaseCity.Text = "";
					txtBaseCity.Enabled = false;
					cboBaseCountry.Enabled = true;
					txtIATACode.Enabled = false;
					txtICAOCode.Enabled = false;
					txtFAAIDCode.Enabled = false;
				}
				else if (chk_ac_aport_private[0].CheckState == CheckState.Unchecked)
				{ 
					if (txtBaseAirportName.Text != "Private")
					{
						txtBaseAirportName.Text = "";
					}
					cboBaseState.Enabled = true;
					txtBaseCity.Enabled = true;
					txtIATACode.Enabled = true;
					txtICAOCode.Enabled = true;
					txtFAAIDCode.Enabled = true;
				}
			}

			// if they are both un-checked - and either one is enabled,make them both enabled
			if (chk_ac_aport_private[0].CheckState == CheckState.Unchecked && chk_ac_aport_private[2].CheckState == CheckState.Unchecked)
			{
				if (chk_ac_aport_private[0].Enabled && !chk_ac_aport_private[2].Enabled)
				{
					chk_ac_aport_private[2].Enabled = true;
				}
				else if (chk_ac_aport_private[2].Enabled && !chk_ac_aport_private[0].Enabled)
				{ 
					chk_ac_aport_private[0].Enabled = true;
				}
			}



		}

		private object handleBase_lostFocus(string inValue, int inIndex)
		{





			if (inValue.Trim() == modGlobalVars.cEmptyString || bInFillBase)
			{ //  Or bBaseControlLostFocus
				// previously had an "exit company" here
				inValue = inValue;
			}
			else
			{
				enable_or_unenable_aport(true); // make them not editable, until locked - MSW - 6/9/21
				if (nBaseControlThatLostFocus != inIndex || inIndex == 0 || inIndex == 1 || inIndex == 7)
				{ // added or = 7, so that if you keep clicking on faa id itll work

					GetBaseCodeInformation(inIndex, inValue.Trim());

					bBaseControlLostFocus = true;
					nBaseControlThatLostFocus = inIndex;

					if (inIndex == 0 || inIndex == 1 || inIndex == 7)
					{
						Application.DoEvents();
						enable_or_unenable_aport(false);
						Application.DoEvents();
					}

					if (inIndex == 4)
					{
						if (cboBaseState.Text != "" && cboBaseCountry.Text != "")
						{
							txtBaseCity.Enabled = true; // if state and country city enabled
						}
						else if (cboBaseState.Items.Count == 1 && cboBaseCountry.Text != "")
						{ 
							txtBaseCity.Enabled = true; // if no states but a country - city enabled
						}
						else if (cboBaseState.Items.Count > 1 && cboBaseState.Text.Trim() == "" && cboBaseCountry.Text.Trim() != "")
						{ 
							txtBaseCity.Enabled = false; // else if there is a country and no state
						}
					}


					// if there is a base country, and no states, then make sure states is un-enabled
					if (cboBaseCountry.Text != "" && cboBaseState.Items.Count <= 2 && Convert.ToString(txtIATACode.Tag) == "0")
					{
						Application.DoEvents();
						Application.DoEvents();
						txtBaseCity.Enabled = true;
						Application.DoEvents();
						Application.DoEvents();
						cboBaseState.Enabled = false;
						Application.DoEvents();
						Application.DoEvents();
					}

				}
				else if (inIndex == 4)
				{ 
					// added this section MSW - 7/10/23 - so to keep city enabled or not if state is picked or not

					// if there is states and state is picked.. then city
					if (cboBaseState.Items.Count > 1 && cboBaseState.Text != "")
					{
						txtBaseCity.Enabled = true;
					}
					else if (cboBaseState.Items.Count > 1 && cboBaseState.Text == "")
					{  // if states and nothing picked
						txtBaseCity.Enabled = false; // then dont allow city
					}
					else if (cboBaseState.Items.Count <= 1)
					{  // then there is no states
						txtBaseCity.Enabled = cboBaseCountry.Text != "";
					}

				}
			}




			return null;
		}

		private object handleBase_gotFocus(string inValue, int inIndex)
		{

			if (inValue.Trim() == modGlobalVars.cEmptyString || bInFillBase)
			{
				return null;
			}

			if (bBaseControlLostFocus)
			{
				bBaseControlLostFocus = false;
			}

			nBaseControlThatLostFocus = -1;

			return null;
		}

		private void txtACJournalSearch_KeyPress(Object eventSender, KeyPressEventArgs eventArgs)
		{
			int KeyAscii = Convert.ToInt32(eventArgs.KeyChar);
			try
			{

				if (KeyAscii == Strings.Asc("\r"[0]))
				{
					if (txtACJournalSearch.Text != "")
					{
						Fill_Aircraft_Journal_Grid();
					}
				}
			}
			finally
			{
				if (KeyAscii == 0)
				{
					eventArgs.Handled = true;
				}
				eventArgs.KeyChar = Convert.ToChar(KeyAscii);
			}

		} // txtACJournalSearch_KeyPress

		private void txtBaseAirportName_DoubleClick(Object eventSender, EventArgs eventArgs)
		{
			if (txtBaseAirportName.Text.Trim() == modGlobalVars.cEmptyString || bInFillBase)
			{
				return;
			}
			GetBaseCodeInformation(modGlobalVars.txtBaseAirportName_INDEX, txtBaseAirportName.Text.Trim());
		}

		private void txtBaseCity_DoubleClick(Object eventSender, EventArgs eventArgs)
		{
			if (txtBaseCity.Text.Trim() == modGlobalVars.cEmptyString || bInFillBase)
			{
				return;
			}
			GetBaseCodeInformation(modGlobalVars.txtBaseCity_INDEX, txtBaseCity.Text.Trim());
		}

		private void txtIATACode_Enter(Object eventSender, EventArgs eventArgs) => handleBase_gotFocus(txtIATACode.Text, modGlobalVars.txtIATACode_INDEX);


		private void txtIATACode_KeyPress(Object eventSender, KeyPressEventArgs eventArgs)
		{
			int KeyAscii = Convert.ToInt32(eventArgs.KeyChar);
			try
			{
				//UPGRADE_ISSUE: (1058) Assignment not supported: KeyAscii to a non-positive constant More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-1058
				KeyAscii = Strings.Asc(Strings.Chr(KeyAscii).ToString().ToUpper()[0]); // uppercase IATA code
			}
			finally
			{
				if (KeyAscii == 0)
				{
					eventArgs.Handled = true;
				}
				eventArgs.KeyChar = Convert.ToChar(KeyAscii);
			}
		}

		private void txtIATACode_Leave(Object eventSender, EventArgs eventArgs) => handleBase_lostFocus(txtIATACode.Text, modGlobalVars.txtIATACode_INDEX);


		private void txtICAOCode_Enter(Object eventSender, EventArgs eventArgs) => handleBase_gotFocus(txtICAOCode.Text, modGlobalVars.txtICAOCode_INDEX);


		private void txtICAOCode_KeyPress(Object eventSender, KeyPressEventArgs eventArgs)
		{
			int KeyAscii = Convert.ToInt32(eventArgs.KeyChar);
			try
			{
				//UPGRADE_ISSUE: (1058) Assignment not supported: KeyAscii to a non-positive constant More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-1058
				KeyAscii = Strings.Asc(Strings.Chr(KeyAscii).ToString().ToUpper()[0]); // uppercase ICAO code
			}
			finally
			{
				if (KeyAscii == 0)
				{
					eventArgs.Handled = true;
				}
				eventArgs.KeyChar = Convert.ToChar(KeyAscii);
			}
		}

		private void txtICAOCode_Leave(Object eventSender, EventArgs eventArgs) => handleBase_lostFocus(txtICAOCode.Text, modGlobalVars.txtICAOCode_INDEX);


		private void txtFAAIDCode_Enter(Object eventSender, EventArgs eventArgs) => handleBase_gotFocus(txtFAAIDCode.Text, modGlobalVars.txtFAAIDCode_INDEX);


		private void txtFAAIDCode_KeyPress(Object eventSender, KeyPressEventArgs eventArgs)
		{
			int KeyAscii = Convert.ToInt32(eventArgs.KeyChar);
			try
			{
				//UPGRADE_ISSUE: (1058) Assignment not supported: KeyAscii to a non-positive constant More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-1058
				KeyAscii = Strings.Asc(Strings.Chr(KeyAscii).ToString().ToUpper()[0]); // uppercase IATA code
			}
			finally
			{
				if (KeyAscii == 0)
				{
					eventArgs.Handled = true;
				}
				eventArgs.KeyChar = Convert.ToChar(KeyAscii);
			}
		}

		private void txtFAAIDCode_Leave(Object eventSender, EventArgs eventArgs) => handleBase_lostFocus(txtFAAIDCode.Text, modGlobalVars.txtFAAIDCode_INDEX);


		private void cboBaseState_Enter(Object eventSender, EventArgs eventArgs) => handleBase_gotFocus(cboBaseState.Text, modGlobalVars.cboBaseState_INDEX);


		private void cboBaseState_Leave(Object eventSender, EventArgs eventArgs) => handleBase_lostFocus(cboBaseState.Text, modGlobalVars.cboBaseState_INDEX);


		private void cboBaseCountry_Enter(Object eventSender, EventArgs eventArgs) => handleBase_gotFocus(cboBaseCountry.Text, modGlobalVars.cboBaseCountry_INDEX);


		private void cboBaseCountry_Leave(Object eventSender, EventArgs eventArgs) => handleBase_lostFocus(cboBaseCountry.Text, modGlobalVars.cboBaseCountry_INDEX);


		private void cboBaseCountry_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			string temp_state = "";


			if (cboBaseState.Text.Trim() != "")
			{
				temp_state = cboBaseState.Text.Trim();
			}

			cboBaseState.Enabled = true;

			if (cboBaseCountry.Enabled)
			{

				if (bInFillBase)
				{
					return;
				}
				modFillCompConControls.Check_If_Country_HasState(cboBaseState, cboBaseCountry);

				// Always Refill State Combo Based on Country
				modFillCompConControls.fill_state_FromArray(cboBaseState, true, false, false, cboBaseCountry.Text);


				if (cboBaseCountry.Text.Trim() != "")
				{

					if (temp_state.Trim() != "" && cboBaseState.Items.Count > 1)
					{


						txtBaseCity.Enabled = false; // un anable the city - because country has states - MSW - 7/10/23

						int tempForEndVar = cboBaseState.Items.Count;
						for (int I = 0; I <= tempForEndVar; I++)
						{
							cboBaseState.SelectedIndex = I;
							if (cboBaseState.Text == temp_state)
							{
								cboBaseState.Text = temp_state;
								I = cboBaseState.Items.Count + 1;
							}
						}
					}
					else if (cboBaseState.Items.Count > 1)
					{ 
						// txtBaseCity.Text = "" '  this would clear .. dont think we wamt
						txtBaseCity.Enabled = false; // un anable the city - because country has states - MSW - 7/10/23
					}
					else if (cboBaseState.Items.Count <= 1)
					{ 
						cboBaseState.Enabled = false; // added so state is un-editable if no states for that country
						txtBaseCity.Enabled = true; // enable the city - because country has no states - MSW - 7/10/23
					} // If Trim(temp_state) <> "" And cboBaseState.ListCount > 1 Then

				} // If Trim(cboBaseCountry.Text) <> "" Then

			} // If cboBaseCountry.Enabled = True Then

			// if we ar transient, dont allow city of state, just ocuntry
			if (chk_ac_aport_private[2].CheckState == CheckState.Checked)
			{
				cboBaseState.SelectedIndex = 0;
				cboBaseState.Enabled = false;
				txtBaseCity.Text = "";
				txtBaseCity.Enabled = false;
			}

		} // cboBaseCountry_Click

		private void cboBaseState_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (bInFillBase)
			{
				return;
			}

			if (cboBaseCountry.Text.Trim() == "")
			{
				modFillCompConControls.Select_Unknown_Country(cboBaseState, cboBaseCountry);
			}

			if (cboBaseState.Text.Trim() != "" && cboBaseState.Enabled)
			{
				txtBaseCity.Enabled = true; // if we have picked a state, and can click on state, city is always enabled
			}
			else if (cboBaseState.Text.Trim() == "" && cboBaseState.Enabled)
			{ 
				txtBaseCity.Enabled = false;
			}

		}

		private void GetBaseCodeInformation(int nPassedIndex, string sPassedValue, string strCalledFrom = "")
		{

			string Query = "";
			string sWhere = "";
			string Msg = "";
			bool NeedAnd = false;
			ADORecordSetHelper snpBase = new ADORecordSetHelper(); //9/24/04 aey converted to ado
			int NCount = 0;
			bool bOnlyCountry = false;

			try
			{

				bInFillBase = true;
				bOnlyCountry = true;

				Query = "SELECT * FROM Airport WITH(NOLOCK) ";
				Query = $"{Query}WHERE (aport_id > 0) ";
				Query = $"{Query}AND (aport_active_flag = 'Y') ";
				Query = $"{Query}AND (aport_name <> '') ";
				Query = $"{Query}AND (aport_name IS NOT NULL) ";


				switch(nPassedIndex)
				{
					case modGlobalVars.txtIATACode_INDEX : 
						Query = $"{Query}AND (aport_iata_code = '{sPassedValue.Trim()}') "; 
						bOnlyCountry = false; 
						break;
					case modGlobalVars.txtICAOCode_INDEX : 
						Query = $"{Query}AND (aport_icao_code = '{sPassedValue.Trim()}') "; 
						bOnlyCountry = false; 
						break;
					case modGlobalVars.txtBaseCity_INDEX : 
						Query = $"{Query}AND (aport_city LIKE '{modAdminCommon.Fix_Quote(sPassedValue)}%') "; 
						bOnlyCountry = false; 
						break;
					case modGlobalVars.cboBaseState_INDEX : 
						Query = $"{Query}AND (aport_state LIKE '{sPassedValue.Trim().ToUpper()}%') "; 
						bOnlyCountry = false; 
						break;
					case modGlobalVars.cboBaseCountry_INDEX : 
						Query = $"{Query}AND (aport_country LIKE '{modAdminCommon.Fix_Quote(sPassedValue)}%') "; 
						break;
					case modGlobalVars.txtBaseAirportName_INDEX : 
						Query = $"{Query}AND (aport_name LIKE '{modAdminCommon.Fix_Quote(sPassedValue)}%') "; 
						bOnlyCountry = false; 
						break;
					case modGlobalVars.txtFAAIDCode_INDEX : 
						Query = $"{Query}AND (aport_faaid_code = '{sPassedValue.Trim()}') "; 
						bOnlyCountry = false; 
						break;
				}

				sWhere = "";
				if (nPassedIndex == modGlobalVars.chkShowAirportList_INDEX)
				{

					// use this query to pick up any entered info and use it for airport list fill
					if (txtIATACode.Text.Trim() != modGlobalVars.cEmptyString)
					{
						sWhere = $"{sWhere}AND (aport_iata_code = '{txtIATACode.Text.Trim()}') ";
					}

					if (txtICAOCode.Text.Trim() != modGlobalVars.cEmptyString)
					{
						sWhere = $"{sWhere}AND (aport_icao_code = '{txtICAOCode.Text.Trim()}') ";
					}

					if (txtFAAIDCode.Text.Trim() != modGlobalVars.cEmptyString)
					{
						sWhere = $"{sWhere}AND (aport_faaid_code = '{txtFAAIDCode.Text.Trim()}') ";
					}

					if (txtBaseAirportName.Text.Trim() != modGlobalVars.cEmptyString)
					{
						sWhere = $"{sWhere}AND (aport_name LIKE '{modAdminCommon.Fix_Quote(txtBaseAirportName.Text.Trim())}%') ";
					}

					if (cboBaseState.Text.Trim() != modGlobalVars.cEmptyString)
					{
						sWhere = $"{sWhere}AND (aport_state LIKE '{cboBaseState.Text.Trim().ToUpper()}%') ";
					}

					if (cboBaseCountry.Text.Trim() != modGlobalVars.cEmptyString)
					{
						sWhere = $"{sWhere}AND (aport_country LIKE '{modAdminCommon.Fix_Quote(cboBaseCountry.Text.Trim())}%') ";
					}

					if (txtBaseCity.Text.Trim() != modGlobalVars.cEmptyString)
					{
						sWhere = $"{sWhere}AND (aport_city LIKE '{txtBaseCity.Text.Trim()}%') ";
					}

					if (sWhere.Trim() == "")
					{
						MessageBox.Show("This will return to many results! Please enter critera and try again", "Aircrft : Airport List", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
						bInFillBase = false;
						return;
					}

				} // If nPassedIndex = chkShowAirportList_INDEX  Then

				Query = $"{Query}{sWhere}";
				Query = $"{Query}ORDER BY aport_country, aport_state, aport_name";

				aport_country_temp = "";
				aport_state_temp = "";

				snpBase.CursorLocation = CursorLocationEnum.adUseClient;
				snpBase.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!snpBase.BOF && !snpBase.EOF)
				{


					switch(snpBase.RecordCount)
					{
						case 1 : 
							 
							// 04/04/2016 - Per Jackie 
							// If Search is ONLY Country 
							// Do NOT Return Find Results 
							if (!bOnlyCountry || strCalledFrom == "Show Airport List")
							{

								if (nPassedIndex == modGlobalVars.chkShowAirportList_INDEX)
								{
									frm_JournalListPopUp.DefInstance.inEntryPoint = "Aircraft";
									frm_JournalListPopUp.DefInstance.inQuery = Query;
									frm_JournalListPopUp.DefInstance.ShowDialog();
									this.Activate();
								}
								else
								{

									txtIATACode.Text = ($"{Convert.ToString(snpBase["aport_iata_code"])} ").Trim();
									txtIATACode.Tag = Convert.ToString(snpBase["aport_id"]);

									txtICAOCode.Text = ($"{Convert.ToString(snpBase["aport_icao_code"])} ").Trim();
									txtFAAIDCode.Text = ($"{Convert.ToString(snpBase["aport_faaid_code"])} ").Trim();

									txtBaseCity.Text = ($"{Convert.ToString(snpBase["Aport_city"])} ").Trim();
									txtBaseAirportName.Text = ($"{Convert.ToString(snpBase["aport_name"])} ").Trim();

									// added MSW - 9/17/21
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(snpBase["aport_state"]))
									{
										if (Convert.ToString(snpBase["aport_state"]).Trim() != modGlobalVars.cEmptyString)
										{
											aport_state_temp = Convert.ToString(snpBase["aport_state"]).Trim();
										}
									}


									cboBaseCountry.SelectedIndex = -1;
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(snpBase["aport_country"]))
									{
										if (Convert.ToString(snpBase["aport_country"]).Trim() != modGlobalVars.cEmptyString)
										{
											aport_country_temp = Convert.ToString(snpBase["aport_country"]).Trim();
											int tempForEndVar = cboBaseCountry.Items.Count - 1;
											for (int I = 0; I <= tempForEndVar; I++)
											{
												if (cboBaseCountry.GetListItem(I).ToLower() == Convert.ToString(snpBase["aport_country"]).Trim().ToLower())
												{
													cboBaseCountry.SelectedIndex = I;
													break;
												}
											}
										}
									} // If Not IsNull(snpBase("aport_country")) Then

									Application.DoEvents();
									Application.DoEvents();
									modFillCompConControls.fill_state_FromArray(cboBaseState, true, false, false, Convert.ToString(snpBase["aport_country"]).Trim());

									Application.DoEvents();
									Application.DoEvents();

									cboBaseState.SelectedIndex = -1;
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(snpBase["aport_state"]))
									{
										if (Convert.ToString(snpBase["aport_state"]).Trim() != modGlobalVars.cEmptyString)
										{
											int tempForEndVar2 = cboBaseState.Items.Count - 1;
											for (int I = 0; I <= tempForEndVar2; I++)
											{
												if (cboBaseState.GetListItem(I).ToLower() == Convert.ToString(snpBase["aport_state"]).Trim().ToLower())
												{
													cboBaseState.SelectedIndex = I;
													break;
												}
											}
										}
									} // If Not IsNull(snpBase("aport_state")) Then

									enable_or_unenable_aport(false); // make them not editable - MSW - 6/9/21

									//set the checkboxes to un enabled -
									chk_ac_aport_private[0].Enabled = false;
									chk_ac_aport_private[2].Enabled = false;

								} // If nPassedIndex = chkShowAirportList_INDEX Then

							}  // If bOnlyCountry = False Then 
							 
							break;
						default:
							 
							// 01/12/2016 - By David D. Cruger 
							// Per Transaction Team meeting do NOT show an airport list. 
							if (nPassedIndex == modGlobalVars.cboBaseState_INDEX || nPassedIndex == modGlobalVars.cboBaseCountry_INDEX)
							{
								//        If MsgBox("Show Airport list?", vbQuestion + vbYesNo, "Aircrft : Airport List") = vbYes Then
								//            frm_JournalListPopUp.inEntryPoint = "Aircraft"
								//            frm_JournalListPopUp.inQuery = Query
								//            frm_JournalListPopUp.Show vbModal
								//            Me.SetFocus
								//        End If
							}
							else
							{
								frm_JournalListPopUp.DefInstance.inEntryPoint = "Aircraft";
								frm_JournalListPopUp.DefInstance.inQuery = Query;
								frm_JournalListPopUp.DefInstance.ShowDialog();
								this.Activate();
							}  // If nPassedIndex = cboBaseState_INDEX Or nPassedIndex = cboBaseCountry_INDEX Then 
							 
							break;
					} // Select Case snpBase.RecordCount

					lbl_gen[121].Tag = "";

				}
				else
				{


					switch(nPassedIndex)
					{
						case modGlobalVars.txtIATACode_INDEX : 
							Msg = " for the entered IATA Code"; 
							break;
						case modGlobalVars.txtICAOCode_INDEX : 
							Msg = " for the entered ICAO Code"; 
							break;
						case modGlobalVars.txtBaseCity_INDEX : 
							Msg = " for the entered City"; 
							break;
						case modGlobalVars.cboBaseState_INDEX : 
							Msg = " for the entered State"; 
							break;
						case modGlobalVars.cboBaseCountry_INDEX : 
							Msg = " for the entered Country"; 
							break;
						case modGlobalVars.txtBaseAirportName_INDEX : 
							Msg = " for the entered Base Name"; 
							break;
						case modGlobalVars.chkShowAirportList_INDEX : 
							Msg = " for the entered Base Information"; 
							break;
						case modGlobalVars.txtFAAIDCode_INDEX : 
							Msg = " for the entered FAAID Code"; 
							break;
					}

					// changed to do this note every timemsw - 8/16/23
					//  If lbl_gen(121).Tag = "1" Then
					lbl_gen[121].Tag = "0";
					MessageBox.Show($"Cannot find any Airport{Msg} Please review the information entered and, if correct, follow the procedures for adding an airport. These procedures are located in the 'Aircraft Base Discrepancies' section of the Research Manual.", "Aircraft : Airport Lookup", MessageBoxButtons.OK, MessageBoxIcon.Information);
					//  Else
					//      lbl_gen(121).Tag = "1"
					//     Call MsgBox("Cannot find any Airport" & Msg, vbInformation + vbOKOnly, "Aircraft : Airport Lookup")
					//   End If


					if (chk_ac_aport_private[0].CheckState == CheckState.Unchecked)
					{ // if this is not a private airport remove the IATA,ICAO,FAAID
						txtIATACode.Text = modGlobalVars.cEmptyString;
						txtIATACode.Tag = "0";
						txtICAOCode.Text = modGlobalVars.cEmptyString;
						txtFAAIDCode.Text = modGlobalVars.cEmptyString;
					}

				} // If (snpBase.BOF = False And snpBase.EOF = False) Then

				snpBase.Close();
				snpBase = null;

				bInFillBase = false;
			}
			catch (System.Exception excep)
			{

				snpBase = null;
				bInFillBase = false;
				modAdminCommon.Report_Error($"GetBaseCodeInfo_Error: {excep.Message}");
				return;
			}

		}

		public void Fill_Aircraft_Details()
		{

			// FILL ALL OF THE DATA GRIDS ASSOCIATED WITH THE AIRCRAFT FORM AT ONCE INCLUDING:
			//  -> INTERIOR
			//  -> EXTERIOR
			//  - EQUIPMENT
			//  - MAINTENANCE
			//  - ADDITIONAL COCKPIT DETAILS
			//
			// MODIFED ON 9/27/2010 BY RTW TO REPLACE 5 OTHER PROCEDURES

			string Error_String = "";
			try
			{
				string Query = "";
				ADORecordSetHelper ado_Details = new ADORecordSetHelper(); // used to store position within the procedures
				string tmp_text = "";

				// ********************************************************************************
				// RUN THE MAIN QUERY AND GET THE DATA SET FOR ALL DETAILS FOR THIS AIRCRAFT
				Error_String = "Aircraft Details Query";

				Query = "SELECT adet_id, adet_data_type, adet_data_name, adet_data_description, adt_data_length";
				Query = $"{Query} FROM Aircraft_Details WITH(NOLOCK), Aircraft_Data_Type WITH(NOLOCK)";
				Query = $"{Query} WHERE adet_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])}";
				//Query = Query & " AND adet_data_type='Interior'"
				if (bolRetrieveSpecs)
				{
					Query = $"{Query} AND adet_journ_id = {SpecsJournID.ToString()}";
				}
				else
				{
					Query = $"{Query} AND adet_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";
				}
				Query = $"{Query} AND adet_data_type = adt_data_type AND adet_data_name = adt_data_name";
				Query = $"{Query} ORDER BY adt_seq_no, adet_data_name, adet_id";

				ado_Details.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				// ********************************************************************************
				// LOAD THE INTERIOR GRID
				Error_String = "Aircraft Interior Grid";
				bInteriorGridLoaded = true;

				grd_Interior.BorderStyle = BorderStyle.None;

				grd_Interior.Clear();
				grd_Interior.RowsCount = 2;
				grd_Interior.ColumnsCount = 2;
				grd_Interior.FixedRows = 1;
				grd_Interior.FixedColumns = 0;

				grd_Interior.CurrentRowIndex = 0;

				grd_Interior.CurrentColumnIndex = 0;
				grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].Value = "INTERIOR DETAIL";
				grd_Interior.SetColumnWidth(grd_Interior.CurrentColumnIndex, 133);

				grd_Interior.CurrentColumnIndex = 1;
				grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].Value = "DESCRIPTION";
				grd_Interior.SetColumnWidth(grd_Interior.CurrentColumnIndex, 427);

				// FILTER FOR JUST INTERIOR DETAILS
				ado_Details.Filter = "adet_data_type='Interior'";

				if (!(ado_Details.BOF && ado_Details.EOF))
				{
					grd_Interior.CurrentRowIndex = 1;

					while(!ado_Details.EOF)
					{

						grd_Interior.SetRowHeight(grd_Interior.CurrentRowIndex, 33);

						grd_Interior.CurrentColumnIndex = 0;
						grd_Interior.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adet_data_name"])}").Trim();

						grd_Interior.CurrentColumnIndex = 1;
						grd_Interior.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adet_data_description"])}").Trim();
						if (Strings.Len(grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].FormattedValue.ToString()) > Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adt_data_length"])}").Trim()))
						{
							grd_Interior.CellBackColor = Color.FromArgb(255, 255, 185);
						}
						else
						{
							grd_Interior.CellBackColor = Color.White;
						}

						tmp_text = grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].FormattedValue.ToString();
						if (Strings.Len(tmp_text) > 500)
						{
							grd_Interior.SetRowHeight(grd_Interior.RowsCount - 1, 100);
						}
						else if (Strings.Len(tmp_text) > 350)
						{ 
							grd_Interior.SetRowHeight(grd_Interior.RowsCount - 1, 83);
						}
						else if (Strings.Len(tmp_text) > 280)
						{ 
							grd_Interior.SetRowHeight(grd_Interior.RowsCount - 1, 67);
						}
						else if (Strings.Len(tmp_text) > 140)
						{ 
							grd_Interior.SetRowHeight(grd_Interior.RowsCount - 1, 50);
						}
						else if (Strings.Len(tmp_text) > 70)
						{ 
							grd_Interior.SetRowHeight(grd_Interior.RowsCount - 1, 33);
						}
						else
						{
							grd_Interior.SetRowHeight(grd_Interior.RowsCount - 1, 18);
						}

						grd_Interior.set_RowData(grd_Interior.CurrentRowIndex, Convert.ToInt32(ado_Details["adet_id"].ToString().Trim()));

						grd_Interior.RowsCount++;
						grd_Interior.CurrentRowIndex++;

						ado_Details.MoveNext();

					};

				}

				grd_Interior.RowsCount--;

				if (grd_Interior.RowsCount == 1)
				{
					grd_Interior.CurrentColumnIndex = 0;
					grd_Interior.CurrentRowIndex = 0;
					grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].Value = "None Found";
					grd_Interior.CurrentColumnIndex = 1;
					grd_Interior[grd_Interior.CurrentRowIndex, grd_Interior.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
					grd_Interior.RowsCount = 1;
				}

				grd_Interior.Redraw = true;
				ado_Details.Filter = "";


				// ********************************************************************************
				// LOAD THE EXTERIOR GRID
				Error_String = "Aircraft Exterior Grid";
				bExteriorGridLoaded = true;
				grd_Exterior.BorderStyle = BorderStyle.None;

				grd_Exterior.Clear();
				grd_Exterior.RowsCount = 2;
				grd_Exterior.ColumnsCount = 2;
				grd_Exterior.FixedRows = 1;
				grd_Exterior.FixedColumns = 0;

				grd_Exterior.CurrentRowIndex = 0;

				grd_Exterior.CurrentColumnIndex = 0;
				grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].Value = "EXTERIOR DETAIL";
				grd_Exterior.SetColumnWidth(grd_Exterior.CurrentColumnIndex, 133);

				grd_Exterior.CurrentColumnIndex = 1;
				grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].Value = "DESCRIPTION";
				grd_Exterior.SetColumnWidth(grd_Exterior.CurrentColumnIndex, 427);


				// FILTER FOR JUST EXTERIOR DETAILS
				ado_Details.Filter = "adet_data_type='Exterior'";

				if (!(ado_Details.BOF && ado_Details.EOF))
				{

					grd_Exterior.CurrentRowIndex = 1;


					while(!ado_Details.EOF)
					{

						grd_Exterior.SetRowHeight(grd_Exterior.CurrentRowIndex, 33);

						grd_Exterior.CurrentColumnIndex = 0;
						grd_Exterior.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adet_data_name"])}").Trim();

						grd_Exterior.CurrentColumnIndex = 1;
						grd_Exterior.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adet_data_description"])}").Trim();
						if (Strings.Len(grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].FormattedValue.ToString()) > Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adt_data_length"])}").Trim()))
						{
							grd_Exterior.CellBackColor = Color.FromArgb(255, 255, 185);
						}
						else
						{
							grd_Exterior.CellBackColor = Color.White;
						}


						tmp_text = grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].FormattedValue.ToString();

						if (Strings.Len(tmp_text) > 500)
						{
							grd_Exterior.SetRowHeight(grd_Exterior.RowsCount - 1, 80);
						}
						else if (Strings.Len(tmp_text) > 350)
						{ 
							grd_Exterior.SetRowHeight(grd_Exterior.RowsCount - 1, 67);
						}
						else if (Strings.Len(tmp_text) > 180)
						{ 
							grd_Exterior.SetRowHeight(grd_Exterior.RowsCount - 1, 48);
						}
						else if (Strings.Len(tmp_text) > 70)
						{ 
							grd_Exterior.SetRowHeight(grd_Exterior.RowsCount - 1, 32);
						}
						else
						{
							grd_Exterior.SetRowHeight(grd_Exterior.RowsCount - 1, 18);
						}

						grd_Exterior.set_RowData(grd_Exterior.CurrentRowIndex, Convert.ToInt32(ado_Details["adet_id"].ToString().Trim()));

						grd_Exterior.RowsCount++;
						grd_Exterior.CurrentRowIndex++;

						ado_Details.MoveNext();

					};

				}

				grd_Exterior.RowsCount--;

				if (grd_Exterior.RowsCount == 1)
				{
					grd_Exterior.CurrentColumnIndex = 0;
					grd_Exterior.CurrentRowIndex = 0;
					grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].Value = "None Found";
					grd_Exterior.CurrentColumnIndex = 1;
					grd_Exterior[grd_Exterior.CurrentRowIndex, grd_Exterior.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
					grd_Exterior.RowsCount = 1;
				}

				grd_Exterior.Redraw = true;
				ado_Details.Filter = "";


				// ********************************************************************************
				// LOAD THE COCKPIT GRID
				Error_String = "Aircraft Cockpit Grid";
				grd_Cockpit.Clear();
				grd_Cockpit.RowsCount = 2;
				grd_Cockpit.ColumnsCount = 2;
				grd_Cockpit.FixedRows = 1;
				grd_Cockpit.FixedColumns = 0;
				grd_Cockpit.BorderStyle = BorderStyle.None;

				grd_Cockpit.CurrentRowIndex = 0;

				grd_Cockpit.CurrentColumnIndex = 0;
				grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].Value = "Name";
				grd_Cockpit.SetColumnWidth(grd_Cockpit.CurrentColumnIndex, 133);

				grd_Cockpit.CurrentColumnIndex = 1;
				grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].Value = "Description";
				grd_Cockpit.SetColumnWidth(grd_Cockpit.CurrentColumnIndex, 800);

				// FILTER FOR JUST COCKPIT DETAILS
				ado_Details.Filter = "adet_data_type='Addl Cockpit Equipment'";

				if (!(ado_Details.BOF && ado_Details.EOF))
				{

					grd_Cockpit.CurrentRowIndex = 1;


					while(!ado_Details.EOF)
					{

						grd_Cockpit.SetRowHeight(grd_Cockpit.CurrentRowIndex, 33);

						grd_Cockpit.CurrentColumnIndex = 0;
						grd_Cockpit.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adet_data_name"])}").Trim();

						grd_Cockpit.CurrentColumnIndex = 1;
						grd_Cockpit.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adet_data_description"])}").Trim();
						if (Strings.Len(grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].FormattedValue.ToString()) > Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adt_data_length"])}").Trim()))
						{
							grd_Cockpit.CellBackColor = Color.FromArgb(255, 255, 185);
						}
						else
						{
							grd_Cockpit.CellBackColor = Color.White;
						}


						tmp_text = grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].FormattedValue.ToString();

						if (Strings.Len(tmp_text) > 640)
						{
							grd_Cockpit.SetRowHeight(grd_Cockpit.RowsCount - 1, 80);
						}
						else if (Strings.Len(tmp_text) > 490)
						{ 
							grd_Cockpit.SetRowHeight(grd_Cockpit.RowsCount - 1, 67);
						}
						else if (Strings.Len(tmp_text) > 325)
						{ 
							grd_Cockpit.SetRowHeight(grd_Cockpit.RowsCount - 1, 48);
						}
						else if (Strings.Len(tmp_text) > 160)
						{ 
							grd_Cockpit.SetRowHeight(grd_Cockpit.RowsCount - 1, 32);
						}
						else
						{
							grd_Cockpit.SetRowHeight(grd_Cockpit.RowsCount - 1, 18);
						}




						grd_Cockpit.set_RowData(grd_Cockpit.CurrentRowIndex, Convert.ToInt32(ado_Details["adet_id"].ToString().Trim()));

						grd_Cockpit.RowsCount++;
						grd_Cockpit.CurrentRowIndex++;

						ado_Details.MoveNext();

					};

				}

				grd_Cockpit.RowsCount--;

				if (grd_Cockpit.RowsCount == 1)
				{
					grd_Cockpit.CurrentColumnIndex = 0;
					grd_Cockpit.CurrentRowIndex = 0;
					grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].Value = "None Found";
					grd_Cockpit.CurrentColumnIndex = 1;
					grd_Cockpit[grd_Cockpit.CurrentRowIndex, grd_Cockpit.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
					grd_Cockpit.RowsCount = 1;
				}

				grd_Cockpit.Redraw = true;
				ado_Details.Filter = "";

				// ********************************************************************************
				// LOAD THE EQUIPMENT DETAILS GRID
				Error_String = "Aircraft Equipment Grid";
				bEquipmentGridLoaded = true;

				grd_Equipment.Clear();
				grd_Equipment.RowsCount = 2;
				grd_Equipment.ColumnsCount = 2;
				grd_Equipment.FixedRows = 1;
				grd_Equipment.FixedColumns = 0;
				grd_Equipment.BorderStyle = BorderStyle.None;

				grd_Equipment.CurrentRowIndex = 0;

				grd_Equipment.CurrentColumnIndex = 0;
				grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].Value = "Name";
				grd_Equipment.SetColumnWidth(grd_Equipment.CurrentColumnIndex, 133);

				grd_Equipment.CurrentColumnIndex = 1;
				grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].Value = "Description";
				grd_Equipment.SetColumnWidth(grd_Equipment.CurrentColumnIndex, 367);


				// FILTER FOR JUST EQUIPMENT DETAILS
				ado_Details.Filter = "adet_data_type='Equipment'";

				if (!(ado_Details.BOF && ado_Details.EOF))
				{
					grd_Equipment.CurrentRowIndex = 1;


					while(!ado_Details.EOF)
					{

						grd_Equipment.SetRowHeight(grd_Equipment.CurrentRowIndex, 33);

						grd_Equipment.CurrentColumnIndex = 0;
						grd_Equipment.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adet_data_name"])}").Trim();

						grd_Equipment.CurrentColumnIndex = 1;
						grd_Equipment.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adet_data_description"])}").Trim();
						if (Strings.Len(grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].FormattedValue.ToString()) > Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adt_data_length"])}").Trim()))
						{
							grd_Equipment.CellBackColor = Color.FromArgb(255, 255, 185);
						}
						else
						{
							grd_Equipment.CellBackColor = Color.White;
						}


						tmp_text = grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].FormattedValue.ToString();

						if (Strings.Len(tmp_text) > 500)
						{
							grd_Equipment.SetRowHeight(grd_Equipment.RowsCount - 1, 107);
						}
						else if (Strings.Len(tmp_text) > 350)
						{ 
							grd_Equipment.SetRowHeight(grd_Equipment.RowsCount - 1, 80);
						}
						else if (Strings.Len(tmp_text) > 280)
						{ 
							grd_Equipment.SetRowHeight(grd_Equipment.RowsCount - 1, 67);
						}
						else if (Strings.Len(tmp_text) > 140)
						{ 
							grd_Equipment.SetRowHeight(grd_Equipment.RowsCount - 1, 48);
						}
						else if (Strings.Len(tmp_text) > 70)
						{ 
							grd_Equipment.SetRowHeight(grd_Equipment.RowsCount - 1, 32);
						}
						else
						{
							grd_Equipment.SetRowHeight(grd_Equipment.RowsCount - 1, 18);
						}

						grd_Equipment.set_RowData(grd_Equipment.CurrentRowIndex, Convert.ToInt32(ado_Details["adet_id"].ToString().Trim()));
						grd_Equipment.RowsCount++;
						grd_Equipment.CurrentRowIndex++;

						ado_Details.MoveNext();

					};

				}

				grd_Equipment.RowsCount--;

				if (grd_Equipment.RowsCount == 1)
				{
					grd_Equipment.CurrentColumnIndex = 0;
					grd_Equipment.CurrentRowIndex = 0;
					grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].Value = "None Found";
					grd_Equipment.CurrentColumnIndex = 1;
					grd_Equipment[grd_Equipment.CurrentRowIndex, grd_Equipment.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
					grd_Equipment.RowsCount = 1;
				}

				grd_Equipment.Redraw = true;
				ado_Details.Filter = "";

				// ********************************************************************************
				// LOAD THE MAINTENANCE GRID
				Error_String = "Aircraft Maintenance Grid";
				bMaintenanceGridLoaded = true;

				grd_Maintenance.Clear();
				grd_Maintenance.RowsCount = 2;
				grd_Maintenance.ColumnsCount = 2;
				grd_Maintenance.FixedRows = 1;
				grd_Maintenance.FixedColumns = 0;
				grd_Maintenance.BorderStyle = BorderStyle.None;

				grd_Maintenance.CurrentRowIndex = 0;

				grd_Maintenance.CurrentColumnIndex = 0;
				grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].Value = "NAME";
				grd_Maintenance.SetColumnWidth(grd_Maintenance.CurrentColumnIndex, 133);

				grd_Maintenance.CurrentColumnIndex = 1;
				grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].Value = "DESCRIPTION";
				grd_Maintenance.SetColumnWidth(grd_Maintenance.CurrentColumnIndex, 433);

				// FILTER FOR JUST MAINTENANCE DETAILS
				ado_Details.Filter = "adet_data_type='Maintenance'";

				if (!(ado_Details.BOF && ado_Details.EOF))
				{
					grd_Maintenance.CurrentRowIndex = 1;


					while(!ado_Details.EOF)
					{

						grd_Maintenance.SetRowHeight(grd_Maintenance.CurrentRowIndex, 33);

						grd_Maintenance.CurrentColumnIndex = 0;
						grd_Maintenance.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adet_data_name"])}").Trim();

						grd_Maintenance.CurrentColumnIndex = 1;
						grd_Maintenance.CellAlignment = DataGridViewContentAlignment.TopLeft;
						grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adet_data_description"])}").Trim();

						if (Strings.Len(grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].FormattedValue.ToString()) > Conversion.Val(($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Details["adt_data_length"])}").Trim()))
						{
							grd_Maintenance.CellBackColor = Color.FromArgb(255, 255, 185);
						}
						else
						{
							grd_Maintenance.CellBackColor = Color.White;
						}


						tmp_text = grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].FormattedValue.ToString();
						if (Strings.Len(tmp_text) > 610)
						{
							grd_Maintenance.SetRowHeight(grd_Maintenance.RowsCount - 1, 107);
						}
						else if (Strings.Len(tmp_text) > 525)
						{ 
							grd_Maintenance.SetRowHeight(grd_Maintenance.RowsCount - 1, 93);
						}
						else if (Strings.Len(tmp_text) > 340)
						{ 
							grd_Maintenance.SetRowHeight(grd_Maintenance.RowsCount - 1, 80);
						}
						else if (Strings.Len(tmp_text) > 255)
						{ 
							grd_Maintenance.SetRowHeight(grd_Maintenance.RowsCount - 1, 67);
						}
						else if (Strings.Len(tmp_text) > 170)
						{ 
							grd_Maintenance.SetRowHeight(grd_Maintenance.RowsCount - 1, 48);
						}
						else if (Strings.Len(tmp_text) > 85)
						{ 
							grd_Maintenance.SetRowHeight(grd_Maintenance.RowsCount - 1, 32);
						}
						else
						{
							// 1 line
							grd_Maintenance.SetRowHeight(grd_Maintenance.RowsCount - 1, 18);
						}

						grd_Maintenance.set_RowData(grd_Maintenance.CurrentRowIndex, Convert.ToInt32(ado_Details["adet_id"].ToString().Trim()));

						grd_Maintenance.RowsCount++;
						grd_Maintenance.CurrentRowIndex++;

						ado_Details.MoveNext();
					};

				}

				grd_Maintenance.RowsCount--;

				if (grd_Maintenance.RowsCount == 1)
				{
					grd_Maintenance.CurrentColumnIndex = 0;
					grd_Maintenance.CurrentRowIndex = 0;
					grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].Value = "None Found";
					grd_Maintenance.CurrentColumnIndex = 1;
					grd_Maintenance[grd_Maintenance.CurrentRowIndex, grd_Maintenance.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
					grd_Maintenance.RowsCount = 1;
				}

				grd_Maintenance.Redraw = true;
				ado_Details.Filter = "";

				search_off();

				// CLOSE RECORSET
				ado_Details.Close();
				ado_Details = null;

				Fill_Feature_Grid("InteriorExterior");
				Fill_Feature_Grid("Maintenance");
				Fill_Feature_Grid("Equipment");
				Fill_Feature_Grid("Avionics");
				Fill_Feature_Grid("Main");
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Fill_Aircraft_Details_Error: {Error_String}-{Information.Err().Number.ToString()} {excep.Message}");
				search_off();
			}


		}


		public int Get_Exclusive_Reference_ID(int inAircraft_ID, int inJournal_ID)
		{
			int result = 0;
			string Query = "";
			try
			{
				ADORecordSetHelper snpCount = new ADORecordSetHelper();

				//  FIRST CHECK FOR A SPECIFIC REFERENCE RECORD MATCHING THIS CONTACT
				//  TYPE, COMPANY ID, AND CONTACT ID
				Query = "SELECT cref_id ";
				Query = $"{Query}FROM Aircraft_Reference WITH(NOLOCK)";
				Query = $"{Query} WHERE cref_ac_id = {inAircraft_ID.ToString()}";
				Query = $"{Query} AND cref_journ_id = {inJournal_ID.ToString()}";
				Query = $"{Query} AND cref_primary_poc_flag = 'X'";
				snpCount.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(snpCount.BOF && snpCount.EOF))
				{
					result = Convert.ToInt32(snpCount["cref_id"]);
				}
				else
				{
					result = 0;
				}

				snpCount.Close();
				snpCount = null;
			}
			catch
			{

				modAdminCommon.Report_Error($"Get_Exclusive_Reference_ID_Error:{Query}");
			}
			return result;
		}

		public bool RegNoDuplicate_Check(string PassedRegNo, string PassedACID)
		{

			bool result = false;
			string Query = "";


			if (PassedACID != "")
			{
				Query = $"SELECT ac_id FROM Aircraft WHERE ac_reg_no = '{PassedRegNo}' AND ac_id <> {PassedACID} AND ac_journ_id=0";
				if (modAdminCommon.Exist(Query))
				{
					result = true;
				}
			}
			else
			{
				Query = $"SELECT ac_id FROM Aircraft WHERE ac_reg_no = '{PassedRegNo}' AND ac_journ_id = 0";
				if (modAdminCommon.Exist(Query))
				{
					result = true;
				}
			}

			return result;
		}

		public string Get_Sale_Price_Source(int inValID)
		{

			string result = "";
			string Query = "";
			ADORecordSetHelper snpCount = new ADORecordSetHelper();
			string tmpDescription = "";

			try
			{

				//  SELECT THE DATA FROM THE AIRCRAFT VALUE RECORD AND USE IT TO FILL IN THE SOURCE
				//  OF THE RECORD
				tmpDescription = "";
				Query = "SELECT * FROM Aircraft_Value WITH (NOLOCK) ";
				Query = $"{Query}INNER JOIN Subscription with (NOLOCK) on acval_sub_id = sub_id ";
				Query = $"{Query}inner join company with (NOLOCK) on sub_comp_id = comp_id and comp_journ_id=0 ";
				Query = $"{Query} WHERE acval_id = {inValID.ToString()}";
				snpCount.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(snpCount.BOF && snpCount.EOF))
				{
					tmpDescription = $"Provided by {Convert.ToString(snpCount["comp_name"])} ({Convert.ToString(snpCount["acval_contact_name"])}) ";
					tmpDescription = $"{tmpDescription} on {Convert.ToDateTime(snpCount["acval_entry_date"]).ToString("MM/dd/yyyy")}";
				}
				else
				{
					tmpDescription = "No Value Source Found";
				}


				snpCount.Close();

				if (inValID > 0 && tmpDescription == "No Value Source Found")
				{
					tmpDescription = "";
					Query = "SELECT * FROM Aircraft_Value WITH (NOLOCK) ";
					Query = $"{Query}inner join company with (NOLOCK) on acval_comp_id = comp_id and comp_journ_id=0 ";
					Query = $"{Query} WHERE acval_id = {inValID.ToString()}";
					snpCount.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

					if (!(snpCount.BOF && snpCount.EOF))
					{
						tmpDescription = $"Provided by {Convert.ToString(snpCount["comp_name"])} ({Convert.ToString(snpCount["acval_contact_name"])}) ";
						tmpDescription = $"{tmpDescription} on {Convert.ToDateTime(snpCount["acval_entry_date"]).ToString("MM/dd/yyyy")}";
					}
					else
					{
						tmpDescription = "No Value Source Found";
					}

					snpCount.Close();
				}

				result = tmpDescription;


				snpCount = null;
			}
			catch
			{

				modAdminCommon.Report_Error($"Get_Sale_Price_Source_Error:{Query}");
			}
			return result;
		}


		public string Apply_Aircraft_Rules(string inText, string inArea, string inBlock)
		{
			//
			// THE PURPOSE OF THIS FUNCTION IS TO APPLY ANY RULES TO TEXT ENTERED IN A GIVEN AREA OF HOMEBASE THAT CAN BE DEFINED
			// SUCH RULES MAY INVOLVE REPLACING TEXT OR ISSUING MESSAGES TO USERS.
			// CREATED BY: RICK WANNER
			// DATE: 2/27/2018
			//
			// inArea = tab that the text is being validated from - example = Interior
			// inBlock = specific block that the text applies to (if any) - example = Lavatory
			string txtToFix = "";
			string RuleQuery = "";
			string first_letter = "";

			ADORecordSetHelper ado_ACRule = new ADORecordSetHelper();

			try
			{

				if (inText.Trim() != "")
				{
					first_letter = inText.Trim().Substring(0, Math.Min(1, inText.Trim().Length)).ToLower();
					inText = inText.Trim().Substring(Math.Max(inText.Trim().Length - (Strings.Len(inText.Trim()) - 1), 0));
					inText = $"{first_letter}{inText}";
				}


				txtToFix = $" {inText} ";

				RuleQuery = "select * from Aircraft_Rules with (NOLOCK) ";

				if (inArea.Trim() != "")
				{
					RuleQuery = $"{RuleQuery}where acrule_area in ('All','{inArea}') ";
				}
				else
				{
					RuleQuery = $"{RuleQuery}where acrule_area = 'All' ";
				}

				if (Strings.Len(inBlock.Trim()) > 0)
				{
					RuleQuery = $"{RuleQuery}and acrule_block in ('All','{inBlock}') ";
				}

				RuleQuery = $"{RuleQuery}order by acrule_type, acrule_area, acrule_order ";


				ado_ACRule.Open(RuleQuery, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(ado_ACRule.BOF && ado_ACRule.EOF))
				{



					while(!ado_ACRule.EOF)
					{

						if (Convert.ToString(ado_ACRule["acrule_type"]) == "REPLACE")
						{

							// If InStr(1, txtToFix, " " & ado_ACRule("acrule_find") & " ", vbTextCompare) > 0 Then
							//   txtToFix = txtToFix
							// End If
							// may need to run to run this more than one if we are finding multiple instances
							txtToFix = StringsHelper.Replace(txtToFix, $" {Convert.ToString(ado_ACRule["acrule_find"])} ", $" {Convert.ToString(ado_ACRule["acrule_action"])} ", 1, 1, CompareMethod.Text);
						}
						else
						{
							if (Convert.ToString(ado_ACRule["acrule_type"]) == "WARNING")
							{
								if (txtToFix.IndexOf($" {Convert.ToString(ado_ACRule["acrule_find"])} ") >= 0)
								{
									MessageBox.Show($"WARNING: {Convert.ToString(ado_ACRule["acrule_action"])}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
								}
							}
						}
						ado_ACRule.MoveNext();
					};

				}
				else
				{

					// NO RULES OR WARNINGS FOR THIS SITUATION

				} // If Not (ado_ACRule.BOF) Then


				// CLOSE RECORDSET
				ado_ACRule.Close();

				txtToFix = txtToFix.Trim();

				if (txtToFix.Trim() != "")
				{
					first_letter = txtToFix.Trim().Substring(0, Math.Min(1, txtToFix.Trim().Length)).ToUpper();
					txtToFix = txtToFix.Trim().Substring(Math.Max(txtToFix.Trim().Length - (Strings.Len(txtToFix.Trim()) - 1), 0));
					txtToFix = $"{first_letter}{txtToFix}";
				}




				return txtToFix.Trim();
			}
			catch
			{

				MessageBox.Show($"Issue applying aircraft rules to [{inArea}], [{inBlock}]{txtToFix}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
			}
			return "";
		}

		public void Fill_Feature_Grid(string inDetail)
		{


			// TEMP HOLD - RTW - LOAD OF EATURES GRIDS
			ADORecordSetHelper ado_IntExtFeatures = new ADORecordSetHelper();

			bool color_red = false;



			UpgradeHelpers.DataGridViewFlex grd_AC_Features = null;
			// INTERIOR/EXTERIOR
			if (inDetail == "InteriorExterior")
			{
				grd_AC_Features = grd_Features[1];
			}
			else
			{
				// MAINTENANCE
				if (inDetail == "Maintenance")
				{
					grd_AC_Features = grd_Features[0];
				}
				else
				{
					// EQUIPMENT
					if (inDetail == "Equipment")
					{
						grd_AC_Features = grd_Features[2];
					}
					else
					{
						// AVIONICS
						if (inDetail == "Avionics")
						{
							grd_AC_Features = grd_Features[3];
						}
						else
						{
							// MAIN/ENGINE
							if (inDetail == "Main")
							{
								grd_AC_Features = grd_Features[4];
							}
							else if (Information.IsNumeric(inDetail))
							{ 
								grd_AC_Features = grd_Features[Convert.ToInt32(Double.Parse(inDetail))];
							}
						}
					}
				}
			}

			// ********************************************************************************
			// SELECT FEATURES
			string Error_String = "Features";

			grd_AC_Features.BorderStyle = BorderStyle.None;

			grd_AC_Features.Clear();
			grd_AC_Features.RowsCount = 1;
			grd_AC_Features.ColumnsCount = 4;
			grd_AC_Features.CurrentColumnIndex = 0;
			grd_AC_Features.CellAlignment = DataGridViewContentAlignment.TopCenter;
			grd_AC_Features.SetColumnWidth(grd_AC_Features.CurrentColumnIndex, 400);
			string FeatureType = "";

			string Query = "select case when amfeat_standard_equip = 'Y' then 'STANDARD' when afeat_status_flag = 'Y' then 'EQUIPPED WITH'   when afeat_status_flag='N' then 'NOT EQUIPPED WITH' when afeat_status_flag='U' then 'UNKNOWN FEATURES' end as FeatureType, kfeat_name, ";
			Query = $"{Query}afeat_status_flag, kfeat_auto_generate_flag,kfeat_model_dependent_flag,kfeat_code,amfeat_standard_equip from Aircraft_Key_Feature with (NOLOCK) ";
			Query = $"{Query}INNER JOIN Key_Feature with (NOLOCK) on afeat_feature_code=kfeat_code ";
			Query = $"{Query}INNER JOIN Aircraft with (NOLOCK) on ac_id = afeat_ac_id and ac_journ_id = afeat_journ_id ";
			Query = $"{Query}INNER JOIN Aircraft_model with (NOLOCK) on ac_amod_id = amod_id ";
			Query = $"{Query}LEFT OUTER JOIN Aircraft_Model_Key_Feature with (NOLOCK) on amfeat_feature_code=kfeat_code and amfeat_amod_id=amod_id ";
			if (inDetail == "InteriorExterior")
			{
				Query = $"{Query}where kfeat_area in ('Interior','Exterior') ";
			}
			else
			{
				if (inDetail == "Maintenance")
				{
					Query = $"{Query}where kfeat_area in ('Maintenance','Inspection') ";
				}
				else
				{
					if (inDetail == "Equipment")
					{
						Query = $"{Query}where kfeat_area in ('Equipment') ";
					}
					else
					{
						if (inDetail == "Avionics")
						{
							Query = $"{Query}where kfeat_area in ('Avionics') ";
						}
						else
						{
							if (inDetail == "Main")
							{
								Query = $"{Query}where kfeat_area in ('Engine','Maintenance') ";
							}
							else if (Information.IsNumeric(inDetail))
							{ 
								if (inDetail.Trim() == "1")
								{
									Query = $"{Query}where kfeat_area in ('Interior','Exterior') ";
								}
								else if (inDetail.Trim() == "0")
								{ 
									Query = $"{Query}where kfeat_area in ('Maintenance','Inspection') ";
								}
								else if (inDetail.Trim() == "2")
								{ 
									Query = $"{Query}where kfeat_area in ('Equipment') ";
								}
								else if (inDetail.Trim() == "3")
								{ 
									Query = $"{Query}where kfeat_area in ('Avionics') ";
								}
								else if (inDetail.Trim() == "4")
								{ 
									Query = $"{Query}where kfeat_area in ('Engine','Maintenance') ";
								}
							}
						}
					}
				}
			}

			Query = $"{Query}and afeat_ac_id = {Convert.ToString(adoAircraftRecordset["ac_id"])} ";

			if (bolRetrieveSpecs)
			{
				Query = $"{Query} AND afeat_journ_id = {SpecsJournID.ToString()}";
			}
			else
			{
				Query = $"{Query} AND afeat_journ_id = {Convert.ToString(adoAircraftRecordset["ac_journ_id"])}";
			}
			Query = $"{Query} order by afeat_status_flag desc, amfeat_standard_equip,kfeat_name";


			ado_IntExtFeatures.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
			if (!(ado_IntExtFeatures.BOF && ado_IntExtFeatures.EOF))
			{
				grd_AC_Features.CurrentRowIndex = 0;
				grd_AC_Features.CurrentColumnIndex = 0;
				grd_AC_Features.SetColumnWidth(grd_AC_Features.CurrentColumnIndex, 333);

				while(!ado_IntExtFeatures.EOF)
				{

					if (FeatureType != Convert.ToString(ado_IntExtFeatures["FeatureType"]))
					{
						// RECORD HEADER AS EQUIPPED WITH, STANDARD, NOT EQUIPPED WITH, OR UNKNOWN
						grd_AC_Features.CurrentColumnIndex = 0;
						grd_AC_Features[grd_AC_Features.CurrentRowIndex, grd_AC_Features.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_IntExtFeatures["FeatureType"])}").Trim();
						grd_AC_Features.SetRowHeight(grd_AC_Features.CurrentRowIndex, 27);
						grd_AC_Features.CellAlignment = DataGridViewContentAlignment.TopCenter;
						grd_AC_Features.CellFontBold = true;
						grd_AC_Features.CellFontUnderline = true;

						color_red = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_IntExtFeatures["FeatureType"])}").Trim() == "UNKNOWN FEATURES";

						grd_AC_Features.CurrentColumnIndex = 1;
						grd_AC_Features.SetColumnWidth(grd_AC_Features.CurrentColumnIndex, 0);
						grd_AC_Features[grd_AC_Features.CurrentRowIndex, grd_AC_Features.CurrentColumnIndex].Value = "INGNORE";


						grd_AC_Features.CurrentColumnIndex = 2;
						grd_AC_Features.SetColumnWidth(grd_AC_Features.CurrentColumnIndex, 0);
						grd_AC_Features[grd_AC_Features.CurrentRowIndex, grd_AC_Features.CurrentColumnIndex].Value = "IGNORE";

						grd_AC_Features.CurrentColumnIndex = 3;
						grd_AC_Features.SetColumnWidth(grd_AC_Features.CurrentColumnIndex, 0);
						grd_AC_Features[grd_AC_Features.CurrentRowIndex, grd_AC_Features.CurrentColumnIndex].Value = "IGNORE";

						grd_AC_Features.RowsCount++;
						grd_AC_Features.CurrentRowIndex++;

					}

					FeatureType = Convert.ToString(ado_IntExtFeatures["FeatureType"]);

					grd_AC_Features.CurrentColumnIndex = 0;
					grd_AC_Features.SetColumnWidth(grd_AC_Features.CurrentColumnIndex, 333);
					grd_AC_Features[grd_AC_Features.CurrentRowIndex, grd_AC_Features.CurrentColumnIndex].Value = ($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_IntExtFeatures["kfeat_name"])}").Trim();
					grd_AC_Features.SetRowHeight(grd_AC_Features.CurrentRowIndex, 27);
					grd_AC_Features.CellAlignment = DataGridViewContentAlignment.TopCenter;
					grd_AC_Features.CellFontBold = false;
					grd_AC_Features.CellFontUnderline = false;

					if (color_red)
					{
						//grd_AC_Features.CellForeColor = 12632319 ' pink
						grd_AC_Features.CellForeColor = Color.Red;
					}

					grd_AC_Features.CurrentColumnIndex = 1;
					grd_AC_Features.SetColumnWidth(grd_AC_Features.CurrentColumnIndex, 0);
					grd_AC_Features[grd_AC_Features.CurrentRowIndex, grd_AC_Features.CurrentColumnIndex].Value = ado_IntExtFeatures.GetField("FeatureType");

					grd_AC_Features.CurrentColumnIndex = 2;
					grd_AC_Features.SetColumnWidth(grd_AC_Features.CurrentColumnIndex, 0);
					grd_AC_Features[grd_AC_Features.CurrentRowIndex, grd_AC_Features.CurrentColumnIndex].Value = ado_IntExtFeatures.GetField("kfeat_auto_generate_flag");

					grd_AC_Features.CurrentColumnIndex = 3;
					grd_AC_Features.SetColumnWidth(grd_AC_Features.CurrentColumnIndex, 0);
					grd_AC_Features[grd_AC_Features.CurrentRowIndex, grd_AC_Features.CurrentColumnIndex].Value = ado_IntExtFeatures.GetField("kfeat_code");

					grd_AC_Features.RowsCount++;
					grd_AC_Features.CurrentRowIndex++;
					ado_IntExtFeatures.MoveNext();
				};



				grd_AC_Features.CurrentRowIndex--;
				grd_AC_Features.RowsCount--;
			}
			// CLOSE RECORSET
			ado_IntExtFeatures.Close();
			ado_IntExtFeatures = null;



			return;


			//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
			modAdminCommon.Report_Error($"Fill_Feature_Grid_Error: {Error_String}-{Information.Err().Number.ToString()} {Information.Err().Description}");
			search_off();
		}

		public void Turn_On_Engines()
		{

			// THIS PROCEDURE IS DESIGNED TO DISPLAY ONLY THE ENGINE FIELDS THAT ARE APPROPRIATE
			// BASED ON THE NUMBER OF ENGINES

			// TURN ON VISIBILITY OF ENGINE 2 FIELDS
			if (int_Num_Engines > 1)
			{
				lbl_gen[261].Visible = true;
				txt_ac_engine_ser_no[1].Visible = true;
				txt_ac_engine_tot_hrs[1].Visible = true;
				txt_ac_engine_soh_hrs[1].Visible = true;
				txt_ac_engine_shi_hrs[1].Visible = true;
				txt_ac_engine_tbo_hrs[1].Visible = true;
				txt_ac_engine_snew_cycles[1].Visible = true;
				txt_ac_engine_soh_cycles[1].Visible = true;
				txt_ac_engine_shs_cycles[1].Visible = true;
			}
			else
			{
				lbl_gen[261].Visible = false;
				txt_ac_engine_ser_no[1].Visible = false;
				txt_ac_engine_tot_hrs[1].Visible = false;
				txt_ac_engine_soh_hrs[1].Visible = false;
				txt_ac_engine_shi_hrs[1].Visible = false;
				txt_ac_engine_tbo_hrs[1].Visible = false;
				txt_ac_engine_snew_cycles[1].Visible = false;
				txt_ac_engine_soh_cycles[1].Visible = false;
				txt_ac_engine_shs_cycles[1].Visible = false;
			}


			// TURN ON VISIBILITY OF ENGINE 3 FIELDS
			if (int_Num_Engines > 2)
			{
				lbl_gen[262].Visible = true;
				txt_ac_engine_ser_no[2].Visible = true;
				txt_ac_engine_tot_hrs[2].Visible = true;
				txt_ac_engine_soh_hrs[2].Visible = true;
				txt_ac_engine_shi_hrs[2].Visible = true;
				txt_ac_engine_tbo_hrs[2].Visible = true;
				txt_ac_engine_snew_cycles[2].Visible = true;
				txt_ac_engine_soh_cycles[2].Visible = true;
				txt_ac_engine_shs_cycles[2].Visible = true;
			}
			else
			{
				lbl_gen[262].Visible = false;
				txt_ac_engine_ser_no[2].Visible = false;
				txt_ac_engine_tot_hrs[2].Visible = false;
				txt_ac_engine_soh_hrs[2].Visible = false;
				txt_ac_engine_shi_hrs[2].Visible = false;
				txt_ac_engine_tbo_hrs[2].Visible = false;
				txt_ac_engine_snew_cycles[2].Visible = false;
				txt_ac_engine_soh_cycles[2].Visible = false;
				txt_ac_engine_shs_cycles[2].Visible = false;
			}

			// TURN ON VISIBILITY OF ENGINE 4 FIELDS
			if (int_Num_Engines > 3)
			{
				lbl_gen[263].Visible = true;
				txt_ac_engine_ser_no[3].Visible = true;
				txt_ac_engine_tot_hrs[3].Visible = true;
				txt_ac_engine_soh_hrs[3].Visible = true;
				txt_ac_engine_shi_hrs[3].Visible = true;
				txt_ac_engine_tbo_hrs[3].Visible = true;
				txt_ac_engine_snew_cycles[3].Visible = true;
				txt_ac_engine_soh_cycles[3].Visible = true;
				txt_ac_engine_shs_cycles[3].Visible = true;
			}
			else
			{
				lbl_gen[263].Visible = false;
				txt_ac_engine_ser_no[3].Visible = false;
				txt_ac_engine_tot_hrs[3].Visible = false;
				txt_ac_engine_soh_hrs[3].Visible = false;
				txt_ac_engine_shi_hrs[3].Visible = false;
				txt_ac_engine_tbo_hrs[3].Visible = false;
				txt_ac_engine_snew_cycles[3].Visible = false;
				txt_ac_engine_soh_cycles[3].Visible = false;
				txt_ac_engine_shs_cycles[3].Visible = false;
			}

		}

		public void Turn_On_Props()
		{
			// THIS PROCEDURE IS DESIGNED TO DISPLAY ONLY THE PROPR FIELDS THAT ARE APPROPRIATE
			// BASED ON THE NUMBER OF PROPS FOR THE MODEL

			// TURN ON VISIBILITY OF PROPS TITLES IN ANY PROPS
			if (int_Num_Props > 0)
			{
				lbl_gen[72].Visible = true;
				lbl_gen[73].Visible = true;
				lbl_gen[40].Visible = true;
				lbl_gen[105].Visible = true;
				lbl_gen[58].Text = "PROP INFORMATION";
				lbl_gen[58].Visible = true;

				lbl_gen[103].Visible = true;
				txt_ac_prop_ser_no[0].Visible = true;
				txt_ac_prop_snew_hrs[0].Visible = true;
				txt_ac_prop_soh_hrs[0].Visible = true;
				txt_ac_prop_soh_mo[0].Visible = true;
				txt_ac_prop_soh_year[0].Visible = true;
				lbl_gen[59].Visible = true;
			}
			else
			{
				lbl_gen[72].Visible = false;
				lbl_gen[73].Visible = false;
				lbl_gen[40].Visible = false;
				lbl_gen[105].Visible = false;

				lbl_gen[103].Visible = false;
				txt_ac_prop_ser_no[0].Visible = false;
				txt_ac_prop_snew_hrs[0].Visible = false;
				txt_ac_prop_soh_hrs[0].Visible = false;
				txt_ac_prop_soh_mo[0].Visible = false;
				txt_ac_prop_soh_year[0].Visible = false;
				lbl_gen[59].Visible = false;
			}


			// 2 PROPS
			if (int_Num_Props > 1)
			{
				lbl_gen[104].Visible = true;
				txt_ac_prop_ser_no[1].Visible = true;
				txt_ac_prop_snew_hrs[1].Visible = true;
				txt_ac_prop_soh_hrs[1].Visible = true;
				txt_ac_prop_soh_mo[1].Visible = true;
				txt_ac_prop_soh_year[1].Visible = true;
				lbl_gen[60].Visible = true;
			}
			else
			{
				lbl_gen[104].Visible = false;
				txt_ac_prop_ser_no[1].Visible = false;
				txt_ac_prop_snew_hrs[1].Visible = false;
				txt_ac_prop_soh_hrs[1].Visible = false;
				txt_ac_prop_soh_mo[1].Visible = false;
				txt_ac_prop_soh_year[1].Visible = false;
				lbl_gen[60].Visible = false;
			}


			// 3 PROPS
			if (int_Num_Props > 2)
			{
				lbl_gen[107].Visible = true;
				txt_ac_prop_ser_no[2].Visible = true;
				txt_ac_prop_snew_hrs[2].Visible = true;
				txt_ac_prop_soh_hrs[2].Visible = true;
				txt_ac_prop_soh_mo[2].Visible = true;
				txt_ac_prop_soh_year[2].Visible = true;
				lbl_gen[61].Visible = true;
			}
			else
			{
				lbl_gen[107].Visible = false;
				txt_ac_prop_ser_no[2].Visible = false;
				txt_ac_prop_snew_hrs[2].Visible = false;
				txt_ac_prop_soh_hrs[2].Visible = false;
				txt_ac_prop_soh_mo[2].Visible = false;
				txt_ac_prop_soh_year[2].Visible = false;
				lbl_gen[61].Visible = false;
			}

			// 4 PROPS
			if (int_Num_Props > 3)
			{
				lbl_gen[106].Visible = true;
				txt_ac_prop_ser_no[3].Visible = true;
				txt_ac_prop_snew_hrs[3].Visible = true;
				txt_ac_prop_soh_hrs[3].Visible = true;
				txt_ac_prop_soh_mo[3].Visible = true;
				txt_ac_prop_soh_year[3].Visible = true;
				lbl_gen[62].Visible = true;
			}
			else
			{
				lbl_gen[106].Visible = false;
				txt_ac_prop_ser_no[3].Visible = false;
				txt_ac_prop_snew_hrs[3].Visible = false;
				txt_ac_prop_soh_hrs[3].Visible = false;
				txt_ac_prop_soh_mo[3].Visible = false;
				txt_ac_prop_soh_year[3].Visible = false;
				lbl_gen[62].Visible = false;
			}

		}
	}
}