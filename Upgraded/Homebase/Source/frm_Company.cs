using Microsoft.VisualBasic;
using Microsoft.VisualBasic.Compatibility.VB6;
using System;
using System.Data;
using System.Data.Common;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Text;
using System.Windows.Forms;
using UpgradeHelpers.DB.ADO;
using UpgradeHelpers.Gui;
using UpgradeHelpers.Gui.Controls;
using UpgradeHelpers.Gui.Utils;
using UpgradeHelpers.Helpers;
using UpgradeStubs;

namespace JETNET_Homebase
{
	public partial class frm_Company //gap-note Manual change to fix Inconsistent accessibility error
		: System.Windows.Forms.Form
	{


		// lbl_comp index const
		const int ACTIVE_AIRCRAFT_INDEX = 6;
		const int ACCOUNT_REP_INDEX = 8;
		const int WANT_MOD_BUILD_YR_INDEX = 9;
		const int LAST_CALLED_INDEX = 11;
		const int COMPANY_EMAIL_ADDRESS = 65;
		const int COMPANY_WEBSITE = 66;
		const int SHOW_WANTED_NOTE = 90;
		const int SHOW_MODEL_NOTE = 81;
		const int CONTACT_EMAIL_NOTICE = 91;
		const int ABIFLAG = 61;

		const int VERIFY_NOTETYPE_INDEX = 17;

		const int CITY_STATE_ZIP_INDEX = 23;
		const int GOVT_SUBCODE_INDEX = 28;

		const int JOURNAL_TYPELBL_INDEX = 37;

		const int LAST_ABI_CALLED_INDEX = 39;
		const int HISTORY_COUNT_INDEX = 42;

		const int VERIFY_ACLABEL_INDEX = 46;
		const int VERIFY_CONTACT_INDEX = 47;
		const int VERIFY_CONTACTLABEL_INDEX = 48;
		const int VERIFY_NOTELABEL_INDEX = 49;

		const int AIRCRAFT_CONTACT_INDEX = 51;
		const int HISTORY_JOURNID_INDEX = 56;

		const int ENTRY_USER_DATE_INDEX_NEW = 58; // added MSW
		const int UPDATE_USER_DATE_INDEX_NEW = 59; // added MSW
		const int YACHT_CALLBACK_DATE_INDEX = 60; // added MSW

		const int ADDRESS_INDEX = 63;
		const int EMAIL_ADDRESS_INDEX = 65;
		const int WEB_ADDRESS_INDEX = 66;
		const int CONTACT_EMAIL_ADDRESS_INDEX = 67;
		const int CONTACT_NAME_INDEX = 68;
		const int CONTACT_TITLE_INDEX = 69;

		const int JOURNAL_COUNT_INDEX = 70;

		const int COMP_YACHT_LABEL_INDEX = 71; // added MSW
		const int COMP_CALLBACK_DATE_INDEX = 72; // added MSW
		const int COMPANY_CERT_ID = 73;
		const int COMPANY_HIDE_RELATIONSHIP = 74;
		const int VERIFY_STATUS_INDEX = 75;
		const int HOTBOX_DETAIL_INDEX = 78;

		const int LEASE_COUNT_INDEX = 80;

		const int JOURNAL_ID_INDEX = 82;
		const int WANTED_COUNT_INDEX = 83;
		const int CONTACT_COUNT_INDEX = 85;

		//-- Company Check Boxs
		const int iCompActiveFlag = 0;
		const int iCompHideFlag = 1;

		//-- Company Text Box
		const int iCompAirportId = 3;
		static readonly Color NORMAL_TXT_BACKCOLOR = Color.White;
		static readonly Color NORMAL_TXT_FORCOLOR = Color.Black;
		const int DISABLED_DARK_BACKCOLOR = 0x808080;
		static readonly Color DISABLED_BACKCOLOR = SystemColors.Control; //grey

		const int CONFIRM_BACKCOLOR = 0xC0C0FF; //red
		const int SEQENCE_BACKCOLOR = 0x800080; //purple
		static readonly Color SEQENCE_FORECOLOR = Color.White;

		static readonly Color LOCKED_BACKCOLOR = Color.Yellow;
		static readonly Color NORMAL_CTRL_BACKCOLOR = SystemColors.Control;

		static readonly Color WANTED_NULL_VERIFY_DATE_BACKCOLOR = Color.Yellow; // yellow

		const int COMP_ACCOUNT_TYPE = 0;
		const int COMP_ACCOUNT_REP = 1;
		const int COMP_MARKETING_REP = 2;
		// Not Sure What/Who are 3,4,5
		const int COMP_LINE_ACCESS = 6;

		private bool bUser_Changed_Callback_Date = false; // flag indicating that the user clicked on the callback calendar
		private string strJournalOrderBy = "";
		private string WHICH_NOTE = ""; // flag to determine which note the user looked at last Wanted or Model

		private bool gb_time_cc_timerDoubleClick = false;
		private bool gb_time_cc_timerSingleClick = false;

		private bool gb_time_ac_timerDoubleClick = false;
		private bool gb_time_ac_timerSingleClick = false;

		private bool mvHasFocus = false;

		private modGlobalVars.e_find_form_entry_points tCompanyForm_EntryPoints = (modGlobalVars.e_find_form_entry_points) 0;
		private modGlobalVars.t_find_form_exit_record tCompanyForm_ExitValues = modGlobalVars.t_find_form_exit_record.CreateInstance();
		private modGlobalVars.e_first_start_form tStart_Form = (modGlobalVars.e_first_start_form) 0;

		private bool bEdit_PurchQuest_Outstanding = false;
		private bool bChk_CompRelationInternal_Outstanding = false;

		private bool bIsClearPhoneData = false;
		private bool bIsClearWantedData = false;
		private bool bIsClearContactData = false;
		private bool bIsClearCompanyData = false;
		private bool bBlockAirBp = false;

		private string sVerifyAircraftStatus = "";
		private string sVerifiedContactFields = "";
		private string sVerifiedCompanyFields = "";

		private string sCompanyActiveFlag = "";

		private int nRememberGridRow = 0;
		private int nRememberGridCol = 0;

		private int nReference_CompanyID = 0;
		private int nReference_CompanyJID = 0;
		private int nReference_AircraftID = 0;
		private int nReference_AircraftJID = 0;

		private string[] arrChangedFields = null; // array holding a list of company fields that have been changed
		private string[] arrTransmitFields = null; // array holding a list of company fields that need to be transmited
		private string[] arrVerifyFields = null; // array holding a list of company fields that need to be verified
		private string[] arrConfirmAircraft = null; // array holding a list of company aircraft that need to be confirmed
		private string[] arrConfirmWantedAC = null; // array holding a list of company wanted aircraft that need to be confirmed

		private int n_country_timezone_adjustment = 0;

		private int nSelectedAircraftID = 0;
		private string strSelectedAircraft = "";

		private int nSelectedYachtID = 0;
		private string strSelectedYacht = "";

		private int nSelectedContactID = 0;
		private string strSelectedContact = "";

		private int nSelVerifyJournSub = 0;
		private int nSelVerifyAircraft = 0;

		private modGlobalVars.t_company_save_wanted_info save_wanted_info = modGlobalVars.t_company_save_wanted_info.CreateInstance();
		private modGlobalVars.t_company_save_phone_info save_phone_info = modGlobalVars.t_company_save_phone_info.CreateInstance();
		private modGlobalVars.t_company_save_info exit_company_info = modGlobalVars.t_company_save_info.CreateInstance();
		private modGlobalVars.t_company_save_info enter_company_info = modGlobalVars.t_company_save_info.CreateInstance();

		private bool bisAirBPstart = false; // MSW for isairbp
		private bool bControlProductCodeMsg = false;
		private bool bIsClosingForm = false;
		private bool bCompany_active_record_Click = false;
		private bool bCompany_history_DblClick = false;
		private bool bCompany_relation_DblClick = false;
		private bool bCompany_Commercial_Records = false; // MSW for call fill_stats_grid 8/31
		private bool bCompany_BusorHel_Records = false; // MSW for call fill_stats_grid 8/31

		private bool view_crm = false;
		private bool IsAerodex = false;
		private string selected_bus_type = "";
		public string CRM_CONN = "";
		public string company_logo_path = ""; // MSW for the logo path 7/19/13
		public int yacht_to_company_id = 0;

		private bool bFormLoad = false;
		private bool bFormInitalize = false;
		private bool bFormActivate = false;
		private bool bForceReload = false;
		private string strPhoneGrid = "";
		private int ac_reload_spot = 0;
		private bool bSkipFormActivate = false;

		public bool has_other_companies_relationship = false;
		public bool keep_wanteds_items = false;
		public int yacht_owner_id = 0;
		private int clicked_note_type = 0;
		public bool is_dealer_broker = false;


		public string country_code = "";
		public string area_code = "";
		public string prefix_code = "";
		public string number_code = "";
		public bool company_has_office = false;
		public bool click_failed = false;
		public frm_Company()
			: base()
		{
			if (m_vb6FormDefInstance is null)
			{
				if (m_InitializingDefInstance)
				{
					m_vb6FormDefInstance = this;
				}
				else
				{
					try
					{
						//For the start-up form, the first instance created is the default instance.
						if (!(System.Reflection.Assembly.GetExecutingAssembly().EntryPoint is null) && System.Reflection.Assembly.GetExecutingAssembly().EntryPoint.DeclaringType == this.GetType())
						{
							m_vb6FormDefInstance = this;
						}
					}
					catch
					{
					}
				}
			}
			//This call is required by the Windows Form Designer.
			isInitializingComponent = true;
			InitializeComponent();
			isInitializingComponent = false;
			ReLoadForm(false);
		}


		public string build_city_select(object city)
		{

			string sQuery = "";
			sQuery = $"{sQuery}  and lower(zmap_city) in (";

			//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			city = Convert.ToString(city).ToLower();

			//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			sQuery = $"{sQuery} '{Convert.ToString(city)}' ";

			//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			if (Convert.ToString(city).ToLower().StartsWith("ft ", StringComparison.Ordinal))
			{
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "ft ", "fort ", 1, -1, CompareMethod.Binary)}'";
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "ft ", "ft. ", 1, -1, CompareMethod.Binary)}'";
			}
			else if (Convert.ToString(city).ToLower().StartsWith("ft. ", StringComparison.Ordinal))
			{ 
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "ft. ", "fort ", 1, -1, CompareMethod.Binary)}'";
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "ft. ", "ft ", 1, -1, CompareMethod.Binary)}'";
			}
			else if (Convert.ToString(city).ToLower().StartsWith("fort ", StringComparison.Ordinal))
			{ 
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "fort ", "ft ", 1, -1, CompareMethod.Binary)}'";
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "fort ", "ft. ", 1, -1, CompareMethod.Binary)}'";
			}


			//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			if (Convert.ToString(city).ToLower().StartsWith("mt ", StringComparison.Ordinal))
			{
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "mt ", "mount ", 1, -1, CompareMethod.Binary)}'";
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "mt ", "mt.", 1, -1, CompareMethod.Binary)}'";
			}
			else if (Convert.ToString(city).ToLower().StartsWith("mt. ", StringComparison.Ordinal))
			{ 
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "mt. ", "mount ", 1, -1, CompareMethod.Binary)}'";
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "mt. ", "mt ", 1, -1, CompareMethod.Binary)}'";
			}
			else if (Convert.ToString(city).ToLower().StartsWith("mount ", StringComparison.Ordinal))
			{ 
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "mount ", "mt ", 1, -1, CompareMethod.Binary)}'";
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "mount ", "mt. ", 1, -1, CompareMethod.Binary)}'";
			}

			//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			if (Convert.ToString(city).ToLower().StartsWith("st ", StringComparison.Ordinal))
			{
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "st ", "saint ", 1, -1, CompareMethod.Binary)}'";
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "st ", "st. ", 1, -1, CompareMethod.Binary)}'";
			}
			else if (Convert.ToString(city).ToLower().StartsWith("st. ", StringComparison.Ordinal))
			{ 
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "st. ", "saint ", 1, -1, CompareMethod.Binary)}'";
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "st. ", "st ", 1, -1, CompareMethod.Binary)}'";
			}
			else if (Convert.ToString(city).ToLower().StartsWith("saint ", StringComparison.Ordinal))
			{ 
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "saint ", "st ", 1, -1, CompareMethod.Binary)}'";
				//UPGRADE_WARNING: (1068) city of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				sQuery = $"{sQuery},'{StringsHelper.Replace(Convert.ToString(city), "saint ", "st. ", 1, -1, CompareMethod.Binary)}'";
			}

			sQuery = $"{sQuery} ";


			sQuery = $"{sQuery}) ";

			return sQuery;

		}

		public object build_sp_string(string string_field_name, string string_field_value)
		{

			object result = null;
			result = "";
			result = $"{string_field_name} = '{modAdminCommon.Fix_Quote(modCommon.CleanSpecial(string_field_value)).Trim()}'";

			// leave source last
			if (string_field_name.Trim() != "@inSource")
			{
				//UPGRADE_WARNING: (1068) build_sp_string of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				result = $"{Convert.ToString(result)},";
			}

			return result;
		}

		public void check_re_load_company_journal()
		{


			if (SSTabHelper.GetSelectedIndex(tab_company_details) == 2)
			{
				if (chk_limit_journal_list.CheckState == CheckState.Checked)
				{
					fill_company_journal_grid(grd_company_journal);
				}
			}


		}

		public void confirm_coy_reassign_procedure(int temp_ac_id = 0)
		{


			if (txt_comp_address1.Text.Trim() != modGlobalVars.cEmptyString)
			{
				lbl_comp[ADDRESS_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
				txt_comp_address1.BackColor = NORMAL_TXT_BACKCOLOR;
			}

			string Query = $"UPDATE company SET comp_abi_callback_date = '{DateTime.Now.ToString("d")}'";
			Query = $"{Query} WHERE comp_id = {nReference_CompanyID.ToString()} AND comp_journ_id = 0";

			modAdminCommon.ADO_Transaction("BeginTrans");
			DbCommand TempCommand = null;
			TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
			TempCommand.CommandText = Query;
			//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
			TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
			TempCommand.ExecuteNonQuery();

			Query = $"update Journal set journ_subcategory_code='AAV'  where journ_comp_id = {nReference_CompanyID.ToString()} and journ_subcategory_code='AA' ";
			DbCommand TempCommand_2 = null;
			TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
			TempCommand_2.CommandText = Query;
			//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
			TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
			TempCommand_2.ExecuteNonQuery();

			modAdminCommon.Rec_Journal_Info.journ_subject = "Confirm Reassign Procedures Done Date";

			modAdminCommon.Rec_Journal_Info.journ_description = "";
			if (temp_ac_id > 0)
			{
				modAdminCommon.Rec_Journal_Info.journ_ac_id = temp_ac_id;
			}
			else
			{
				modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
			}

			modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "AAC";
			modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
			modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;
			modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
			modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
			modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
			modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
			modAdminCommon.Rec_Journal_Info.journ_status = "A";
			modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

			frm_Journal.DefInstance.Commit_Journal_Entry();


			modAdminCommon.ADO_Transaction("CommitTrans");

			txt_company_field[1].Text = DateTime.Now.ToString("d");
			enter_company_info.s_comp_abi_callback_date = txt_company_field[1].Text;
			txt_company_field[1].BackColor = NORMAL_TXT_BACKCOLOR;
			lbl_comp[38].ForeColor = NORMAL_TXT_FORCOLOR;

		}

		public void fill_timezone_sp()
		{

			//Call select_state

		}

		public void run_company_update()
		{

			string temp_Comp_name = "";
			string tupdate = "";
			tupdate = " exec sp_UpdateCompany ";
			//  tupdate = " exec sp_UpdateCompany_New "   ' no longer using NEW - MSW - 5/31/23


			temp_Comp_name = modCompany.strip_spaces_from_companyname(txt_comp_name.Text);


			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inCompid", txt_comp_id.Text))}";
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inName", temp_Comp_name))}";
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inAddress1", txt_comp_address1.Text))}";
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inAddress2", txt_comp_address2.Text))}";
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inCity", txt_comp_city.Text))}";
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inState", cbo_comp_state.Text.Substring(0, Math.Min(2, cbo_comp_state.Text.Length))))}";
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inPostalCode", txt_comp_zip_code.Text))}";
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inCountry", cbo_comp_country.Text))}";
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inWebAddress", txt_comp_web_address.Text))}";
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inEmailAddress", txt_comp_email_address.Text))}";
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inUserID", modAdminCommon.gbl_User_ID))}";

			if (((int) chk_comp_product_code[modGlobalVars.CHK_BUSINESS_IDX].CheckState).ToString() == "1")
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inBusinessFlag", "Y"))}";
			}
			else
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inBusinessFlag", "N"))}";
			}

			if (((int) chk_comp_product_code[modGlobalVars.CHK_HELICOPTER_IDX].CheckState).ToString() == "1")
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inHelicopterFlag", "Y"))}";
			}
			else
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inHelicopterFlag", "N"))}";
			}

			if (((int) chk_comp_product_code[modGlobalVars.CHK_COMMERCIAL_IDX].CheckState).ToString() == "1")
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inCommercialFlag", "Y"))}";
			}
			else
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inCommercialFlag", "N"))}";
			}

			// the flag is 'inactive' so unchecked means active
			if (((int) chk_company_flag[iCompActiveFlag].CheckState).ToString() == "0")
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inActiveFlag", "Y"))}";
			}
			else
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inActiveFlag", "N"))}";
			}

			if (((int) chk_company_flag[iCompHideFlag].CheckState).ToString() == "1")
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inHideFlag", "Y"))}";
			}
			else
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inHideFlag", "N"))}";
			}

			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inAgencyType", cbo_comp_agency_type.Text))}";

			if (((int) chk_company_assign_flag.CheckState).ToString() == "1")
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inManualAccountFlag", "N"))}"; // automatic
			}
			else
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inManualAccountFlag", "Y"))}"; // manual
			}

			if (cbo_comp_account[COMP_ACCOUNT_TYPE].Text.Trim() == "Dealer Broker")
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inAccountType", "DB"))}";
			}
			else if (cbo_comp_account[COMP_ACCOUNT_TYPE].Text.Trim() == "End User")
			{ 
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inAccountType", "EU"))}";
			}
			else if (cbo_comp_account[COMP_ACCOUNT_TYPE].Text.Trim() == "Fractional Owner")
			{ 
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inAccountType", "FO"))}";
			}
			else if (cbo_comp_account[COMP_ACCOUNT_TYPE].Text.Trim() == "Unidentified")
			{ 
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inAccountType", "UN"))}";
			}
			else if (cbo_comp_account[COMP_ACCOUNT_TYPE].Text.Trim() == "Non-Aviation")
			{ 
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inAccountType", "NA"))}";
			}

			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inAccountRep", cbo_comp_account[COMP_ACCOUNT_REP].Text))}";
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inAltName", txt_comp_name_alt.Text))}";
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inAltType", cbo_comp_name_alt_type.Text))}";
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inPrimaryBusinessType", cbo_comp_business_type.Text.Trim().Substring(0, Math.Min(2, cbo_comp_business_type.Text.Trim().Length)).ToUpper()))}";
			//tupdate = tupdate & build_sp_string("@inBusinessTypeList", "")    ' need to do

			//lst_business_types - MSW
			string business_types = "";

			int tempForEndVar = lst_business_types.Items.Count - 1;
			for (int i = 0; i <= tempForEndVar; i++)
			{
				if (business_types.Trim() != "")
				{
					business_types = $"{business_types},";
				}

				business_types = $"{business_types}{lst_business_types.GetListItem(i).Substring(0, Math.Min(2, lst_business_types.GetListItem(i).Length))}";
			}

			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inBusinessTypeList", business_types))}";

			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inDescription", txt_comp_description.Text))}";


			if (enter_company_info.s_comp_name.Trim() != temp_Comp_name.Trim())
			{
				if (MessageBox.Show("Is This A Formal Name Change?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
				{
					//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
					tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inFormalNameChange", "Y"))}";
				}
				else
				{
					//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
					tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inFormalNameChange", "N"))}";
				}
			}
			else
			{
				//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inFormalNameChange", "N"))}";
			}

			// leave this one for last, so it goes in without a comma
			//UPGRADE_WARNING: (1068) build_sp_string() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tupdate = $"{tupdate}{Convert.ToString(build_sp_string("@inSource", "Homebase"))}";
			tupdate = tupdate;
			DbCommand TempCommand = null;
			TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
			TempCommand.CommandText = tupdate;
			//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
			TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
			TempCommand.ExecuteNonQuery();

		}
		public bool run_fields_to_check_to_exit(ref bool bEMailAdded, ref bool bEMailDeleted, ref string strEMail)
		{
			bool result = false;
			result = true;
			string temp_zip_field = "";
			string timezone_should_be = "";

			// added inMSW - 2/14/24 to make sure we have a product checked
			for (int i = 0; i <= 5; i++)
			{

				if (i == 0)
				{
					result = false;
				}

				if (chk_comp_product_code[i].CheckState == CheckState.Checked)
				{ // if we have any of them, make it true
					result = true;
				}

				// then we failed, put up message
				if (i == 5 && !result)
				{
					MessageBox.Show("Company Product Codes Blank! Please fix before saving!", "Company : Save Company", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
				}
			}


			// same code as vailidate company function
			if (txt_comp_name.Text.Trim() == modGlobalVars.cEmptyString || cbo_comp_business_type.Text.Trim() == modGlobalVars.cEmptyString || cbo_comp_agency_type.Text.Trim() == modGlobalVars.cEmptyString)
			{
				// If Nothing There Just Exit
				//Call MsgBox("Company Name AND Agency Type AND Business Type must be entered" & vbCrLf & "in order to have a valid company record! Please fix before saving!", vbExclamation + vbOKOnly, "Company : Save Company")
				result = false;
			}

			// ONLY CHECK FOR STATE IF this COMPANY IS NOT "Awaiting Documentation"
			if (txt_comp_name.Text.Trim().ToUpper() != ("Awaiting Documentation").ToUpper())
			{
				if ((cbo_comp_country.Text.Trim().ToUpper() == ("United States").ToUpper() || cbo_comp_country.Text.Trim().ToUpper() == ("Canada").ToUpper()) && cbo_comp_state.Text.Trim() == modGlobalVars.cEmptyString)
				{
					MessageBox.Show("You entered a country with no state. Please enter state if known. Company save will proceed.", "Company : Save Company", MessageBoxButtons.OK);
					// run_fields_to_check_to_exit = False
				}
			}

			// 8/21/03 - rtw - added code to not allow save when company has no account rep
			if (cbo_comp_account[COMP_ACCOUNT_REP].Text.Trim() == modGlobalVars.cEmptyString)
			{
				MessageBox.Show("Account Representative is blank! Please fix before saving!", "Company : Save Company", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
				result = false;
			}

			// check for in care of
			if (txt_comp_address1.Text.Trim().ToLower().IndexOf("c/o", StringComparison.CurrentCultureIgnoreCase) >= 0)
			{
				MessageBox.Show("Care Of information should NOT go in company address! Please fix before saving!", "Company : Save Company", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
				result = false;
			}

			if (bIsClosingForm)
			{
				//if we r closing, then dont check
				// check for zip code comparison MSW - 2/10/20
			}
			else if (txt_comp_zip_code.Text.Trim() != "")
			{ 
				if (cbo_comp_country.Text.Trim() == "United States")
				{
					if (cbo_comp_state.Text.Trim() != "")
					{
						string tempRefParam = cbo_comp_timezone.Text.Trim();
						temp_zip_field = Find_Zip_Mapping(txt_comp_city.Text.Trim(), cbo_comp_state.Text.Trim(), cbo_comp_country.Text.Trim(), txt_comp_zip_code.Text.Trim(), ref tempRefParam, ref timezone_should_be).ToString();
						if (StringsHelper.ToDoubleSafe(temp_zip_field) == 0)
						{
							MessageBox.Show("The Zip Code Does Not Appear In Our System, Please Double Check After Saving and Correct, If Needed.", "Company : Save Company", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
						}
					}
					else if (txt_comp_city.Text.Trim() != "")
					{ 
						string tempRefParam2 = cbo_comp_timezone.Text.Trim();
						temp_zip_field = Find_Zip_Mapping(txt_comp_city.Text.Trim(), cbo_comp_state.Text.Trim(), cbo_comp_country.Text.Trim(), txt_comp_zip_code.Text.Trim(), ref tempRefParam2, ref timezone_should_be).ToString();
						if (StringsHelper.ToDoubleSafe(temp_zip_field) == 0)
						{
							MessageBox.Show("The Zip Code Does Not Appear In Our System, Please Double Check After Saving and Correct, If Needed", "Company : Save Company", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
						}
					}
				}
			}

			// check for proper format of email address
			bEMailAdded = false;
			bEMailDeleted = false;
			strEMail = txt_comp_email_address.Text.Trim();
			if (strEMail != "")
			{
				if (Convert.ToString(txt_comp_email_address.Tag).Trim() == "")
				{
					bEMailAdded = true;
				}
			}
			else
			{
				if (Convert.ToString(txt_comp_email_address.Tag).Trim() != "")
				{
					bEMailDeleted = true;
				}
			}

			if (!modCommon.QuickCheckEmailAddress(strEMail))
			{
				MessageBox.Show("Company E-Mail address error! Please fix before saving!", "Company : Save Company", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
				enable_important_items();
				return result;
			}


			return result;
		}

		public void SetSkipFormActivate(bool bValue) => bSkipFormActivate = bValue;


		public void SetForceReloadOnInit(bool bValue) => bForceReload = bValue;


		private void fill_aircraft()
		{

			try
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				fill_company_aircraft_grid();
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_fill_aircraft_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		private void setup_company_update(ref string sqlUpdateStr, ref modGlobalVars.t_company_save_info exit_company_info, ref string where_current_blank, ref string tmpCompanyName, ref bool bStrippedSpacesFromCompName, ref string strMktRep, ref string sqlUpdateStr_Hist, ref string strWebSite, ref bool bWebSiteAdded, string strEMail, ref string strJIC, ref bool bJICAdded, ref bool bCheckedInactivateCompany, ref bool bCheckedHideCompany, ref bool bAtLeastOneProduct, bool bOverideForAirline, ref string strLineAccess)
		{

			// start building sqlUpdateStatement
			sqlUpdateStr = $"UPDATE Company SET comp_upd_date = '{DateTime.Now.ToString()}', comp_upd_user_id = '{modAdminCommon.gbl_User_ID.Trim()}";
			sqlUpdateStr = $"{sqlUpdateStr}' , comp_action_date = NULL";

			tmpCompanyName = modCompany.strip_spaces_from_companyname(txt_comp_name.Text.Trim());

			// run company rules added - 11/7/22
			if (String.Compare(tmpCompanyName.Trim(), txt_comp_name.Text.Trim(), true) > 0)
			{ // ok routine striped spaces out
				bStrippedSpacesFromCompName = true;
				txt_comp_name.Text = tmpCompanyName.Trim();
				sqlUpdateStr = $"{sqlUpdateStr} , comp_name = '{modAdminCommon.Run_Company_Rules(modAdminCommon.Fix_Quote(modCommon.CleanSpecial(txt_comp_name.Text)).Trim(), "Company", "Name")}'";
				sqlUpdateStr = $"{sqlUpdateStr} , comp_name_search = '{modAdminCommon.Run_Company_Rules(modCommon.Get_Name_Search_String(modCommon.CleanSpecial(txt_comp_name.Text).Trim()), "Company", "Name")}'";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_name = '{modAdminCommon.Run_Company_Rules(modAdminCommon.Fix_Quote(modCommon.CleanSpecial(txt_comp_name.Text)).Trim(), "Company", "Name")}'";
				sqlUpdateStr = $"{sqlUpdateStr} , comp_name_search = '{modAdminCommon.Run_Company_Rules(modCommon.Get_Name_Search_String(modCommon.CleanSpecial(txt_comp_name.Text).Trim()), "Company", "Name")}'";
			}

			// added MSw - 6/9/22
			if (Convert.ToString(txt_company_field[4].Tag) != "SUB" && Convert.ToString(txt_company_field[4].Tag).Trim() != "")
			{ // then its our ticker symbol
				exit_company_info.s_comp_ticker_symbol = txt_company_field[4].Text;
			}

			// added MSW - 6/14/22
			exit_company_info.s_comp_do_not_solicit = ((int) chk_array[6].CheckState).ToString();


			exit_company_info.s_comp_name = txt_comp_name.Text.Trim();

			if (cbo_comp_name_alt_type.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_name_alt_type = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_name_alt_type = '{modAdminCommon.Fix_Quote(cbo_comp_name_alt_type.Text).Trim()}'";
				exit_company_info.s_comp_name_alt_type = cbo_comp_name_alt_type.Text.Trim();
			}

			if (txt_comp_name_alt.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_name_alt = NULL";
				sqlUpdateStr = $"{sqlUpdateStr} , comp_altname_search = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_name_alt = '{modAdminCommon.Fix_Quote(modCommon.CleanSpecial(txt_comp_name_alt.Text)).Trim()}'";
				sqlUpdateStr = $"{sqlUpdateStr} , comp_altname_search = '{modCommon.LeaveOnlyAlphaAndNumeric(modCommon.CleanSpecial(txt_comp_name_alt.Text)).ToUpper()}'";
				exit_company_info.s_comp_name_alt = txt_comp_name_alt.Text.Trim();
			}

			if (txt_comp_address1.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_address1 = NULL";
				sqlUpdateStr = $"{sqlUpdateStr} , comp_address1_search = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_address1 = '{modAdminCommon.Run_Company_Rules(modAdminCommon.Fix_Quote(modCommon.CleanSpecial(txt_comp_address1.Text)).Trim(), "Company", "Address")}'";

				sqlUpdateStr = $"{sqlUpdateStr} , comp_address1_search = '{modAdminCommon.Run_Company_Rules(modCommon.CleanSpecial(modCommon.LeaveOnlyAlphaAndNumeric(txt_comp_address1.Text)).ToUpper(), "Company", "Address")}'";
				exit_company_info.s_comp_address1 = modAdminCommon.Run_Company_Rules(txt_comp_address1.Text.Trim(), "Company", "Address");


				// if its changed since we entered, then make sure it was blank
				if (enter_company_info.s_comp_address1.Trim() != exit_company_info.s_comp_address1.Trim())
				{
					where_current_blank = $"{where_current_blank} and (comp_address1 = '' or comp_address1 is null) ";
					// if the value changed, then make sure the current one is blank, otherwise, cant update

					// if we came in as blank, then also add to update string
					if (enter_company_info.s_comp_address1.Trim() == "")
					{
						sqlUpdateStr_Hist = $"{sqlUpdateStr_Hist} , comp_address1 = '{modAdminCommon.Run_Company_Rules(modAdminCommon.Fix_Quote(modCommon.CleanSpecial(txt_comp_address1.Text)).Trim(), "Company", "Address")}'";
					}

				}
			}

			if (txt_comp_address2.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_address2 = NULL";
				sqlUpdateStr = $"{sqlUpdateStr} , comp_address2_search = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_address2 = '{modAdminCommon.Run_Company_Rules(modAdminCommon.Fix_Quote(modCommon.CleanSpecial(txt_comp_address2.Text)).Trim(), "Company", "Address")}'";
				sqlUpdateStr = $"{sqlUpdateStr} , comp_address2_search = '{modAdminCommon.Run_Company_Rules(modCommon.LeaveOnlyAlphaAndNumeric(modCommon.CleanSpecial(txt_comp_address2.Text)).ToUpper(), "Company", "Address")}'";
				exit_company_info.s_comp_address2 = modAdminCommon.Run_Company_Rules(txt_comp_address2.Text.Trim(), "Company", "Address");

				if (enter_company_info.s_comp_address2.Trim() != exit_company_info.s_comp_address2.Trim())
				{
					where_current_blank = $"{where_current_blank} and (comp_address2 = '' or comp_address2 is null) ";

					if (enter_company_info.s_comp_address2.Trim() == "")
					{
						sqlUpdateStr_Hist = $"{sqlUpdateStr_Hist} , comp_address2 = '{modAdminCommon.Run_Company_Rules(modAdminCommon.Fix_Quote(modCommon.CleanSpecial(txt_comp_address2.Text)).Trim(), "Company", "Address")}'";
					}


				}
			}

			if (txt_comp_city.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_city = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_city = '{modAdminCommon.Fix_Quote(modCommon.CleanSpecial(txt_comp_city.Text)).Trim()}'";
				exit_company_info.s_comp_city = txt_comp_city.Text.Trim();

				if (enter_company_info.s_comp_city.Trim() != exit_company_info.s_comp_city.Trim())
				{
					where_current_blank = $"{where_current_blank} and (comp_city = '' or comp_city is null) ";
					if (enter_company_info.s_comp_city.Trim() == "")
					{
						sqlUpdateStr_Hist = $"{sqlUpdateStr_Hist} , comp_city = '{modAdminCommon.Fix_Quote(modCommon.CleanSpecial(txt_comp_city.Text)).Trim()}'";
					}
				}

			}

			if (cbo_comp_state.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_state = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_state = '{cbo_comp_state.Text.Trim().Substring(0, Math.Min(cbo_comp_state.Text.Trim().IndexOf(", "), cbo_comp_state.Text.Trim().Length)).ToUpper()}'";
				exit_company_info.s_comp_state = cbo_comp_state.Text.Trim().Substring(0, Math.Min(cbo_comp_state.Text.Trim().IndexOf(", "), cbo_comp_state.Text.Trim().Length)).ToUpper();

				if (enter_company_info.s_comp_state.Trim() != exit_company_info.s_comp_state.Trim())
				{
					where_current_blank = $"{where_current_blank} and (comp_state = '' or comp_state is null) ";

					if (enter_company_info.s_comp_state.Trim() == "")
					{
						sqlUpdateStr_Hist = $"{sqlUpdateStr_Hist} , comp_state = '{cbo_comp_state.Text.Trim().Substring(0, Math.Min(cbo_comp_state.Text.Trim().IndexOf(", "), cbo_comp_state.Text.Trim().Length)).ToUpper()}'";
					}
				}
			}

			if (cbo_comp_country.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_country = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_country = '{modAdminCommon.Fix_Quote(cbo_comp_country.Text).Trim()}'";
				exit_company_info.s_comp_country = cbo_comp_country.Text.Trim();

				if (enter_company_info.s_comp_country.Trim() != exit_company_info.s_comp_country.Trim())
				{
					where_current_blank = $"{where_current_blank} and (comp_country = '' or comp_country is null) ";
					if (enter_company_info.s_comp_country.Trim() == "")
					{
						sqlUpdateStr_Hist = $"{sqlUpdateStr_Hist} , comp_country = '{modAdminCommon.Fix_Quote(cbo_comp_country.Text).Trim()}'";
					}
				}

			}

			if (txt_comp_zip_code.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_zip_code = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_zip_code = '{txt_comp_zip_code.Text.Trim()}'";
				exit_company_info.s_comp_zip_code = txt_comp_zip_code.Text.Trim();

				if (enter_company_info.s_comp_zip_code.Trim() != exit_company_info.s_comp_zip_code.Trim())
				{
					where_current_blank = $"{where_current_blank} and (comp_zip_code = '' or comp_zip_code is null) ";

					if (enter_company_info.s_comp_zip_code.Trim() == "")
					{
						sqlUpdateStr_Hist = $"{sqlUpdateStr_Hist} , comp_zip_code = '{txt_comp_zip_code.Text.Trim()}'";
					}
				}

			}

			if (cbo_comp_timezone.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_timezone = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_timezone = '{cbo_comp_timezone.Text.Trim()}'";
				exit_company_info.s_comp_timezone = cbo_comp_timezone.Text.Trim();

				if (enter_company_info.s_comp_timezone.Trim() != exit_company_info.s_comp_timezone.Trim())
				{
					where_current_blank = $"{where_current_blank} and (comp_timezone = '' or comp_timezone is null) ";
					if (enter_company_info.s_comp_timezone.Trim() == "")
					{
						sqlUpdateStr_Hist = $"{sqlUpdateStr_Hist} , comp_timezone = '{modAdminCommon.Fix_Quote(cbo_comp_timezone.Text).Trim()}'";
					}
				}

			}

			if (cbo_comp_language.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_language = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_language = '{cbo_comp_language.Text.Trim()}'";
				exit_company_info.s_comp_language = cbo_comp_language.Text.Trim();
			}


			strWebSite = txt_comp_web_address.Text.Trim();
			if (strWebSite == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_web_address = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_web_address = '{modCommon.CleanSpecial(strWebSite)}'";
				exit_company_info.s_comp_web_address = modCommon.CleanSpecial(strWebSite);
				if (Convert.ToString(txt_comp_web_address.Tag) == "")
				{
					bWebSiteAdded = true;
				}
			}

			if (strEMail.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_email_address = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_email_address = '{modCommon.CleanSpecial(strEMail.Trim())}'";
				exit_company_info.s_comp_email_address = modCommon.CleanSpecial(strEMail.Trim());
			}


			strJIC = txt_comp_sic_code.Text.Trim();
			bJICAdded = false;
			if (txt_comp_sic_code.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_sic_code = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_sic_code = '{modCommon.CleanSpecial(txt_comp_sic_code.Text.Trim())}'";
				exit_company_info.s_comp_sic_code = modCommon.CleanSpecial(txt_comp_sic_code.Text.Trim());
				if (Convert.ToString(txt_comp_sic_code.Tag) == "")
				{
					bJICAdded = true;
				}
			}

			if (txt_comp_dunnandbrad.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_dunnandbrad = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_dunnandbrad = '{modCommon.CleanSpecial(txt_comp_dunnandbrad.Text.Trim())}'";
				exit_company_info.s_comp_dunnandbrad = modCommon.CleanSpecial(txt_comp_dunnandbrad.Text.Trim());
			}

			if (txt_comp_fractowr_id.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_fractowr_id = 0, comp_fractowr_contact_id = 0, comp_fractowr_notes = NULL";
			}
			else
			{
				// only save the fractional owner contact id if the fractional owner id > 0

				if (cbo_comp_fractowr_contact_id.Text.Trim().ToLower() == "no contact specified" || cbo_comp_fractowr_contact_id.Text.Trim() == modGlobalVars.cEmptyString)
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_fractowr_contact_id = 0";
				}
				else
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_fractowr_contact_id = {cbo_comp_fractowr_contact_id.GetItemData(cbo_comp_fractowr_contact_id.SelectedIndex).ToString()}";
					exit_company_info.s_comp_fractowr_contact_id = cbo_comp_fractowr_contact_id.GetItemData(cbo_comp_fractowr_contact_id.SelectedIndex);
				}

				if (txt_comp_fractowr_notes.Text.Trim() == modGlobalVars.cEmptyString)
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_fractowr_notes = NULL";
				}
				else
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_fractowr_notes = '{modAdminCommon.Fix_Quote(txt_comp_fractowr_notes.Text).Trim()}'";
					exit_company_info.s_comp_fractowr_notes = modAdminCommon.Fix_Quote(txt_comp_fractowr_notes.Text).Trim();
				}

				sqlUpdateStr = $"{sqlUpdateStr} , comp_fractowr_id = '{txt_comp_fractowr_id.Text.Trim()}'";
				exit_company_info.s_comp_fractowr_id = Convert.ToInt32(Double.Parse(txt_comp_fractowr_id.Text));
			}

			if (cbo_comp_agency_type.Text.Trim().Substring(0, Math.Min(1, cbo_comp_agency_type.Text.Trim().Length)).ToUpper() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_agency_type = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_agency_type = '{cbo_comp_agency_type.Text.Trim().Substring(0, Math.Min(1, cbo_comp_agency_type.Text.Trim().Length)).ToUpper()}'";
				exit_company_info.s_comp_agency_type = cbo_comp_agency_type.Text.Trim().Substring(0, Math.Min(1, cbo_comp_agency_type.Text.Trim().Length)).ToUpper();
			}

			if (cbo_comp_account[COMP_ACCOUNT_REP].Text.Trim() == modGlobalVars.cEmptyString || chk_company_assign_flag.CheckState == CheckState.Checked)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_assign_flag = 'A'";
				exit_company_info.s_comp_assign_flag = "A";

				if (cbo_comp_account[COMP_ACCOUNT_REP].Text.Trim() == modGlobalVars.cEmptyString)
				{
					modFillCompConControls.assign_account_rep(txt_comp_name.Text.Trim(), cbo_comp_account[COMP_ACCOUNT_TYPE], cbo_comp_account[COMP_ACCOUNT_REP]);
				}
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_assign_flag = 'M'";
				exit_company_info.s_comp_assign_flag = "M";
			}

			if (cbo_comp_account[COMP_ACCOUNT_REP].Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_account_id = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_account_id = '{cbo_comp_account[COMP_ACCOUNT_REP].Text.Trim()}'";
				exit_company_info.s_comp_account_id = cbo_comp_account[COMP_ACCOUNT_REP].Text.Trim();
			}

			// 10/23/2015 - By David D. Cruger; Added
			exit_company_info.s_comp_marketing_rep = "";
			if (($"{cbo_comp_account[COMP_MARKETING_REP].Text} ").Trim() == "")
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_marketing_rep = NULL";
			}
			else
			{
				strMktRep = ($"{cbo_comp_account[COMP_MARKETING_REP].Text} ").Trim();
				if (strMktRep.IndexOf(" -NA") >= 0)
				{
					strMktRep = StringsHelper.Replace(strMktRep, " -NA", "", 1, -1, CompareMethod.Binary);
				}
				strMktRep = modCommon.DLookUp("[user_id]", "[User]", $"(user_first_name + ' ' + user_last_name = '{strMktRep}')");
				if (($"{strMktRep} ").Trim() != "")
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_marketing_rep = '{strMktRep}'";
					exit_company_info.s_comp_marketing_rep = strMktRep;
				}
				else
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_marketing_rep = NULL";
				}
			}


			if (strLineAccess == "")
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_line_access_code = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_line_access_code = '{strLineAccess}'";
			}

			if (chk_include_on_ac_pros.CheckState == CheckState.Checked)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_acpros_flag = 'Y'";
				exit_company_info.s_comp_acpros_flag = "Y";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_acpros_flag = 'N'";
				exit_company_info.s_comp_acpros_flag = "N";
			}

			if (cbo_comp_govsub_code.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_government_id = 0";
				exit_company_info.s_comp_government_id = 0;
			}
			else
			{


				switch(cbo_comp_govsub_code.Text.Trim().Substring(0, Math.Min(1, cbo_comp_govsub_code.Text.Trim().Length)).ToUpper())
				{
					case "F" : 
						sqlUpdateStr = $"{sqlUpdateStr} , comp_government_id = 1"; 
						exit_company_info.s_comp_government_id = 1; 
						break;
					default:
						sqlUpdateStr = $"{sqlUpdateStr} , comp_government_id = 2"; 
						exit_company_info.s_comp_government_id = 2; 
						 
						break;
				}

				cmd_company_update_callback_date_Click(cmd_company_update_callback_date[0], new EventArgs());

			}

			//Select_Business_Type
			if (cbo_comp_business_type.Text.Trim() == modGlobalVars.cEmptyString && lst_business_types.Items.Count > 0)
			{
				cbo_comp_business_type.SelectedIndex = 0;
			}

			if (cbo_comp_business_type.Text.Trim().Substring(0, Math.Min(2, cbo_comp_business_type.Text.Trim().Length)).ToUpper() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_business_type = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_business_type = '{modCommon.CleanSpecial(cbo_comp_business_type.Text.Trim().Substring(0, Math.Min(2, cbo_comp_business_type.Text.Trim().Length)).ToUpper())}'";
				exit_company_info.s_comp_business_type = modCommon.CleanSpecial(cbo_comp_business_type.Text.Trim().Substring(0, Math.Min(2, cbo_comp_business_type.Text.Trim().Length)).ToUpper());
			}

			switch(cbo_comp_account[COMP_ACCOUNT_TYPE].Text.Trim().ToLower())
			{
				case "end user" : 
					sqlUpdateStr = $"{sqlUpdateStr} , comp_account_type = 'EU'"; 
					exit_company_info.s_comp_account_type = "EU"; 
					break;
				case "dealer broker" : 
					sqlUpdateStr = $"{sqlUpdateStr} , comp_account_type = 'DB'"; 
					exit_company_info.s_comp_account_type = "DB"; 
					break;
				case "unidentified" : 
					sqlUpdateStr = $"{sqlUpdateStr} , comp_account_type = 'UI'"; 
					exit_company_info.s_comp_account_type = "UI"; 
					break;
				case "fractional owner" : 
					sqlUpdateStr = $"{sqlUpdateStr} , comp_account_type = 'FO'"; 
					exit_company_info.s_comp_account_type = "FO"; 
					break;
				case "non-aviation" : 
					sqlUpdateStr = $"{sqlUpdateStr} , comp_account_type = 'NA'"; 
					exit_company_info.s_comp_account_type = "NA"; 
					 
					break;
				default:
					sqlUpdateStr = $"{sqlUpdateStr} , comp_account_type = NULL"; 
					break;
			}

			// TEMP HOLD MSW
			if (lbl_comp[COMP_CALLBACK_DATE_INDEX].Text.Trim() != modGlobalVars.cEmptyString)
			{
				if (Information.IsDate(lbl_comp[COMP_CALLBACK_DATE_INDEX].Text))
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_account_callback_date = '{DateTime.Parse(lbl_comp[COMP_CALLBACK_DATE_INDEX].Text.Trim()).ToString("d")}'";
					exit_company_info.s_comp_account_callback_date = DateTime.Parse(lbl_comp[COMP_CALLBACK_DATE_INDEX].Text.Trim()).ToString("d");
				}
				else
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_account_callback_date = NULL";
				}
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_account_callback_date = NULL";
			}


			if (txt_company_field[1].Text.Trim() != modGlobalVars.cEmptyString)
			{
				if (Information.IsDate(txt_company_field[1].Text))
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_abi_callback_date = '{DateTime.Parse(txt_company_field[1].Text.Trim()).ToString("d")}'";
					exit_company_info.s_comp_abi_callback_date = DateTime.Parse(txt_company_field[1].Text.Trim()).ToString("d");
				}
				else
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_abi_callback_date = NULL";
				}
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_abi_callback_date = NULL";
			}

			if (txt_company_field[0].Text.Trim() != modGlobalVars.cEmptyString)
			{
				if (Information.IsDate(txt_company_field[0].Text))
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_secondary_callback  = '{DateTime.Parse(txt_company_field[0].Text.Trim()).ToString("d")}'";
					exit_company_info.s_comp_secondary_callback = DateTime.Parse(txt_company_field[0].Text.Trim()).ToString("d");
				}
				else
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_secondary_callback  = NULL";
				}
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_secondary_callback  = NULL";
			}

			// 06/18/2019 - By David D. Cruger; Added
			if (($"{txt_company_field[iCompAirportId].Text} ").Trim() != "")
			{
				if (Information.IsNumeric(txt_company_field[iCompAirportId].Text))
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_aport_id = {txt_company_field[iCompAirportId].Text}";
					exit_company_info.s_comp_aport_id = Convert.ToInt32(Double.Parse(txt_company_field[iCompAirportId].Text));
				}
				else
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_aport_id = 0";
				}
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_aport_id = 0";
			}

			if (lbl_comp[LAST_CALLED_INDEX].Text.Trim() != modGlobalVars.cEmptyString)
			{
				if (Information.IsDate(lbl_comp[LAST_CALLED_INDEX].Text))
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_last_contact_date = '{DateTime.Parse(lbl_comp[LAST_CALLED_INDEX].Text.Trim()).ToString("d")}'";
					exit_company_info.s_comp_last_contact_date = DateTime.Parse(lbl_comp[LAST_CALLED_INDEX].Text.Trim()).ToString("d");
				}
				else
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_last_contact_date = NULL";
				}
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_last_contact_date = NULL";
			}

			if (lbl_comp[LAST_ABI_CALLED_INDEX].Text.Trim() != modGlobalVars.cEmptyString)
			{
				if (Information.IsDate(lbl_comp[LAST_ABI_CALLED_INDEX].Text))
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_abi_last_contact_date = '{DateTime.Parse(lbl_comp[LAST_ABI_CALLED_INDEX].Text.Trim()).ToString("d")}'";
					exit_company_info.s_comp_abi_last_contact_date = DateTime.Parse(lbl_comp[LAST_ABI_CALLED_INDEX].Text.Trim()).ToString("d");
				}
				else
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_abi_last_contact_date = NULL";
				}
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_abi_last_contact_date = NULL";
			}




			// 03/08/2005 - By David D. Cruger Converted to Use the
			// Array read from the Services_Used table
			int tempForEndVar = modGlobalVars.ServicesUsed_Array.GetUpperBound(0);
			for (int iCnt1 = 1; iCnt1 <= tempForEndVar; iCnt1++)
			{
				if (cbo_comp_services_used.Text.Trim().ToUpper() == ((string) modGlobalVars.ServicesUsed_Array.GetValue(iCnt1, modGlobalVars.SERVICE_DESCRIPTION)).Trim().ToUpper())
				{
					break;
				}
			}


			if (chk_company_flag[iCompActiveFlag].CheckState == CheckState.Checked)
			{
				bCheckedInactivateCompany = true;
				sqlUpdateStr = $"{sqlUpdateStr} , comp_active_flag = 'N'";
				exit_company_info.s_comp_active_flag = "N";
			}
			else
			{
				bCheckedInactivateCompany = false;
				sqlUpdateStr = $"{sqlUpdateStr} , comp_active_flag = 'Y'";
				exit_company_info.s_comp_active_flag = "Y";
			}

			if (chk_company_flag[iCompHideFlag].CheckState == CheckState.Checked)
			{
				bCheckedHideCompany = true;
				sqlUpdateStr = $"{sqlUpdateStr} , comp_hide_flag = 'Y'";
				exit_company_info.s_comp_hide_flag = "Y";
			}
			else
			{
				bCheckedHideCompany = false;
				sqlUpdateStr = $"{sqlUpdateStr} , comp_hide_flag = 'N'";
				exit_company_info.s_comp_hide_flag = "N";
			}

			//-----------------------------------
			// 02/19/2016 - By David D. Cruger

			if (chkCompContactAddressFlag.CheckState == CheckState.Checked)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_contact_address_flag = 'Y'";
				exit_company_info.s_comp_contact_address_flag = "Y";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_contact_address_flag = 'N'";
				exit_company_info.s_comp_contact_address_flag = "N";
			}

			if (chk_comp_product_code[modGlobalVars.CHK_BUSINESS_IDX].CheckState == CheckState.Checked)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_product_business_flag = 'Y'";
				exit_company_info.s_comp_product_business_flag = "Y";
				bAtLeastOneProduct = true;
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_product_business_flag = 'N'";
				exit_company_info.s_comp_product_business_flag = "N";
			}

			if ((chk_comp_product_code[modGlobalVars.CHK_COMMERCIAL_IDX].CheckState == CheckState.Checked) || bOverideForAirline)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_product_commercial_flag = 'Y'";
				exit_company_info.s_comp_product_commercial_flag = "Y";
				bAtLeastOneProduct = true;
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_product_commercial_flag = 'N'";
				exit_company_info.s_comp_product_commercial_flag = "N";
			}

			if (chk_comp_product_code[modGlobalVars.CHK_HELICOPTER_IDX].CheckState == CheckState.Checked)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_product_helicopter_flag = 'Y'";
				exit_company_info.s_comp_product_helicopter_flag = "Y";
				bAtLeastOneProduct = true;
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_product_helicopter_flag = 'N'";
				exit_company_info.s_comp_product_helicopter_flag = "N";
			}

			if ((chk_comp_product_code[modGlobalVars.CHK_AIRBP_IDX].CheckState == CheckState.Checked) || bOverideForAirline)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_product_airbp_flag = 'Y'";
				exit_company_info.s_comp_product_airbp_flag = "Y";
				bAtLeastOneProduct = true;
			}
			else
			{
				if (bisAirBPstart)
				{ // 5/20/2011 Added to correct the note in the Description MSW
					if (Strings.Len(txt_comp_description.Text) < 970)
					{ // MAKE SURE NOT FULL, and there is space
						txt_comp_description.Text = $"{txt_comp_description.Text} *** NOT AN AIRBP COMPANY *** ";
					}
				}
				sqlUpdateStr = $"{sqlUpdateStr} , comp_product_airbp_flag = 'N'";
				exit_company_info.s_comp_product_airbp_flag = "N";
			}


			if (txt_comp_description.Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_description = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_description = '{modAdminCommon.Fix_Quote(txt_comp_description.Text).Trim().Substring(0, Math.Min(2000, modAdminCommon.Fix_Quote(txt_comp_description.Text).Trim().Length))}'";
				exit_company_info.s_comp_description = modAdminCommon.Fix_Quote(txt_comp_description.Text).Trim();
			}



			if (txt_market_note[4].Text.Trim() == modGlobalVars.cEmptyString)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_marketing_notes = NULL";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_marketing_notes = '{modAdminCommon.Fix_Quote(txt_market_note[4].Text).Trim().Substring(0, Math.Min(2000, modAdminCommon.Fix_Quote(txt_market_note[4].Text).Trim().Length))}'";
				exit_company_info.s_comp_marketing_notes = modAdminCommon.Fix_Quote(txt_market_note[4].Text).Trim();
			}

			if (chk_comp_product_code[modGlobalVars.CHK_ABI_IDX].CheckState == CheckState.Checked)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_product_abi_flag = 'Y'";
				exit_company_info.s_comp_product_abi_flag = "Y";
				bAtLeastOneProduct = true;
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_product_abi_flag = 'N'";
				exit_company_info.s_comp_product_abi_flag = "N";
			}


			// added MSW - 6/16/22
			if (chk_array[6].CheckState == CheckState.Checked)
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_do_not_solicit = 'Y'";
				exit_company_info.s_comp_do_not_solicit = "Y";
			}
			else
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_do_not_solicit = 'N'";
				exit_company_info.s_comp_do_not_solicit = "N";
			}

			// no longer update the yacht product flag
			// ADDED 4/24/2012
			//  ' UPDATING OF YACHT INFORMATION
			//   If chk_comp_product_code(CHK_YACHT_IDX).Value = vbChecked Then
			//    sqlUpdateStr = sqlUpdateStr & " , comp_product_yacht_flag = 'Y'"
			//   exit_company_info.s_comp_product_yacht_flag = "Y"
			//    bAtLeastOneProduct = True
			//  Else
			//    sqlUpdateStr = sqlUpdateStr & " , comp_product_yacht_flag = 'N'"
			//    exit_company_info.s_comp_product_yacht_flag = "N"
			//  End If

			// 02/22/2018 - By David D. Cruger; Added
			// moved from below - MSW - 12/13/22
			strLineAccess = cbo_comp_account[COMP_LINE_ACCESS].Text.Substring(0, Math.Min(1, cbo_comp_account[COMP_LINE_ACCESS].Text.Length)).Trim();
			exit_company_info.s_comp_line_access_code = strLineAccess;

			// if there is not at least one product code then default to business and tell user

			if (!bAtLeastOneProduct)
			{
				if (!modAdminCommon.Exist($"select cac_id from Company_Aircraft_Count where cac_comp_id={nReference_CompanyID.ToString()} and cac_journ_id=0"))
				{
					sqlUpdateStr = $"{sqlUpdateStr} , comp_product_business_flag = 'Y'";
					exit_company_info.s_comp_product_business_flag = "Y";
					MessageBox.Show("NO Company Product Code! Defaulting to Business!", "Company : Save Company", MessageBoxButtons.OK, MessageBoxIcon.Information);
				}
			}

			exit_company_info.s_comp_id = nReference_CompanyID;

			//reset the awaiting doc flag when the name changes to anything other than awaiting documentation
			if (txt_comp_name.Text.Trim().ToUpper() != ("awaiting documentation").Trim().ToUpper() && enter_company_info.s_comp_awaitdoc_flag == "Y")
			{
				sqlUpdateStr = $"{sqlUpdateStr} , comp_awaitdoc_flag = 'N'";
				exit_company_info.s_comp_awaitdoc_flag = "N";
			}

			sqlUpdateStr = $"{sqlUpdateStr} WHERE comp_id = {nReference_CompanyID.ToString()} AND comp_journ_id = {nReference_CompanyJID.ToString()}";



		}

		public void Turn_On_Company_Timers()
		{

			time_cc_timer.Enabled = true;
			time_ac_timer.Enabled = true;
			time_at_company.Enabled = true;

		} // Turn_On_Company_Timers

		public void Turn_Off_Company_Timers()
		{

			time_cc_timer.Enabled = false;
			time_ac_timer.Enabled = false;
			time_at_company.Enabled = false;

		} // Turn_Off_Company_Timers

		public void cmd_wanted_cancel_Click()
		{

			try
			{

				clear_save_wanted_info(ref save_wanted_info);


				pnl_company_wanted.Visible = false;
				if (nReference_CompanyJID == 0)
				{
					cmd_wanted_add.Visible = true;
				}
				cmd_wanted_delete.Visible = false;
				pnl_company_wanted_notes.Visible = false;
				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
				lbl_comp[81].Visible = true;
				search_off();
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_wanted_cancel_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		public void cmd_wanted_verify_Click()
		{
			try
			{

				if (chk_amwant_date_is_verified.CheckState == CheckState.Unchecked)
				{

					chk_amwant_date_is_verified.CheckState = CheckState.Checked;
					txt_amwant_date_verified.Text = DateTime.Now.ToString("d");

					save_wanted_selection(ref save_wanted_info);
					modCompany.wanted_aircraft_update(nReference_CompanyID, nReference_CompanyJID, nSelectedContactID, save_wanted_info, ref arrConfirmWantedAC);
					fill_wanted_grid();

					MessageBox.Show("Wanted Verified!", "Company : Verify Company Wanted", MessageBoxButtons.OK, MessageBoxIcon.Information);
				}
				else
				{
					MessageBox.Show("UnCheck Verified by Research, to Verify Wanted!", "Company : Verify Company Wanted", MessageBoxButtons.OK, MessageBoxIcon.Information);
				}

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_wanted_verify_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}


		public modGlobalVars.e_find_form_entry_points CompanyEntryPoint
		{
			get => tCompanyForm_EntryPoints;
			set => tCompanyForm_EntryPoints = value;
		}
		 // delete_company_logo


		public int Reference_CompanyID
		{
			get => nReference_CompanyID;
			set => nReference_CompanyID = value;
		}



		public int Reference_CompanyJID
		{
			get => nReference_CompanyJID;
			set => nReference_CompanyJID = value;
		}



		public int Reference_AircraftID
		{
			get => nReference_AircraftID;
			set => nReference_AircraftID = value;
		}



		public int Reference_AircraftJID
		{
			get => nReference_AircraftJID;
			set => nReference_AircraftJID = value;
		}



		public modGlobalVars.e_first_start_form StartForm
		{
			get => tStart_Form;
			set => tStart_Form = value;
		}


		public void delete_company_logo()
		{

			Object fso = new Object();
			string strToFileName = "";
			string strUpdate1 = "";
			string strCompImageFlag = "";

			if (MessageBox.Show("Are You Sure You Want to Delete the Company Logo?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
			{

				strToFileName = $"{company_logo_path}{nReference_CompanyID.ToString()}.jpg";

				if (File.Exists(strToFileName))
				{
					//UPGRADE_WARNING: (2081) DeleteFile has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
					File.Delete(strToFileName);
				}

				strUpdate1 = "UPDATE Company SET comp_logo_flag = 'N', comp_action_date = NULL ";
				strUpdate1 = $"{strUpdate1}WHERE (comp_id = {nReference_CompanyID.ToString()}) ";
				strUpdate1 = $"{strUpdate1}AND (comp_journ_id = 0) ";

				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = strUpdate1;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();

				strCompImageFlag = "N";
				display_company_logo(nReference_CompanyID.ToString(), ref strCompImageFlag);

				modAdminCommon.Record_Event("User Action", "Delete Company Logo", 0, 0, nReference_CompanyID, false, 0, 0);

				MessageBox.Show("Your Company Logo Has Been Deleted Successfully", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);

			} // If MsgBox("Are You Sure You Want to Delete the Company Logo?", vbYesNo) = vbYes Then

		}

		public void confirm_all_company_phone_numbers()
		{

			// Function used to confirm all company phone numbers

			string Query = "";

			try
			{

				if (chk_dont_color_confirm.CheckState == CheckState.Unchecked)
				{

					Query = $"UPDATE Phone_Numbers SET pnum_confirm_date = '{DateTime.Now.ToString()}'";
					Query = $"{Query} WHERE pnum_comp_id = {nReference_CompanyID.ToString()}";
					Query = $"{Query} AND pnum_journ_id = 0 AND pnum_contact_id = 0";

					modAdminCommon.ADO_Transaction("BeginTrans");

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();

					int tempForEndVar = grd_company_phone.RowsCount - 1;
					for (int i = 1; i <= tempForEndVar; i++)
					{

						grd_company_phone.CurrentRowIndex = i;

						grd_company_phone.CurrentColumnIndex = 0;
						grd_company_phone.CellBackColor = Color.White;

						grd_company_phone.CurrentColumnIndex = 1;
						grd_company_phone.CellBackColor = Color.White;

						grd_company_phone.CurrentColumnIndex = 2;
						grd_company_phone.CellBackColor = Color.White;

						grd_company_phone.CurrentColumnIndex = 3;
						grd_company_phone.CellBackColor = Color.White;

						grd_company_phone.CurrentColumnIndex = 4;
						grd_company_phone.CellBackColor = Color.White;

						grd_company_phone.CurrentColumnIndex = 5;
						grd_company_phone.CellBackColor = Color.White;

						grd_company_phone.CurrentColumnIndex = 6;
						grd_company_phone.CellBackColor = Color.White;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = DateTime.Now.ToString("d");

					}

					fill_phone_company_grid();

					modAdminCommon.ADO_Transaction("CommitTrans");

				} // chk_dont_color_confirm.Value = vbUnchecked

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"confirm_all_company_phone_numbers_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();
				return;
			}

		}

		public void confirm_all_contact_phone_numbers()
		{

			// Function used to confirm all contact phone numbers

			string Full_Phone = "";
			string Full_Phone_Type = "";

			StringBuilder Query = new StringBuilder();

			try
			{

				if (chk_dont_color_confirm.CheckState == CheckState.Unchecked)
				{

					modAdminCommon.ADO_Transaction("BeginTrans");

					int tempForEndVar = grd_contact_phone_numbers.RowsCount - 1;
					for (int i = 1; i <= tempForEndVar; i++)
					{
						grd_contact_phone_numbers.CurrentRowIndex = i;

						Full_Phone = modGlobalVars.cEmptyString;
						Full_Phone_Type = modGlobalVars.cEmptyString;

						grd_contact_phone_numbers.CurrentColumnIndex = 0;
						if (grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
						{
							Full_Phone_Type = grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].FormattedValue.ToString().Trim();
						}

						grd_contact_phone_numbers.CurrentColumnIndex = 1;
						if (grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
						{
							Full_Phone = $"{Full_Phone}{grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].FormattedValue.ToString().Trim()}{modGlobalVars.cHyphen}";
						}

						grd_contact_phone_numbers.CurrentColumnIndex = 2;
						if (grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
						{
							Full_Phone = $"{Full_Phone}{grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].FormattedValue.ToString().Trim()}{modGlobalVars.cHyphen}";
						}

						grd_contact_phone_numbers.CurrentColumnIndex = 3;
						if (grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
						{
							Full_Phone = $"{Full_Phone}{grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].FormattedValue.ToString().Trim()}{modGlobalVars.cHyphen}";
						}

						grd_contact_phone_numbers.CurrentColumnIndex = 4;
						if (grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
						{
							Full_Phone = $"{Full_Phone}{grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].FormattedValue.ToString().Trim()}{modGlobalVars.cHyphen}";
						}

						if (Full_Phone.Trim() != modGlobalVars.cEmptyString)
						{
							Full_Phone = Full_Phone.Substring(Math.Min(0, Full_Phone.Length), Math.Min(Strings.Len(Full_Phone) - 1, Math.Max(0, Full_Phone.Length))); // strip off the last hyphen
						}

						if (Full_Phone.Trim() != modGlobalVars.cEmptyString)
						{ //aey 5/27/04

							Query = new StringBuilder($"UPDATE Phone_Numbers SET pnum_confirm_date = '{DateTime.Now.ToString()}'");

							if (MessageBox.Show($"Do You want to Confirm All Other Phone Numbers Matching {Full_Phone}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
							{
								Query.Append($" WHERE pnum_number_full_search = '{StringsHelper.Replace(StringsHelper.Replace(Full_Phone, " ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary), modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary).Trim()}' ");
								Query.Append($" AND pnum_journ_id = {nReference_CompanyJID.ToString()} ");
							}
							else
							{
								Query.Append($" WHERE pnum_comp_id = {nReference_CompanyID.ToString()}");
								Query.Append($" AND pnum_journ_id = {nReference_CompanyJID.ToString()}");
								Query.Append($" AND pnum_contact_id = {nSelectedContactID.ToString()}");
								Query.Append($" AND pnum_type = '{Full_Phone_Type.Trim()}'");
								Query.Append($" AND pnum_number_full_search = '{StringsHelper.Replace(StringsHelper.Replace(Full_Phone, " ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary), modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary).Trim()}'");
							}


							DbCommand TempCommand = null;
							TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
							TempCommand.CommandText = Query.ToString();
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
							TempCommand.ExecuteNonQuery();

							// INSERT A CONTACT CONFIRMATION JOURNAL ENTRY
							modAdminCommon.Rec_Journal_Info.journ_subject = $"Confirmed Contact Phone Number ({Full_Phone_Type.Trim()}) {Full_Phone}";
							modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CNCFM";
							modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
							modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;
							modAdminCommon.Rec_Journal_Info.journ_contact_id = nSelectedContactID;
							modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
							modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
							modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_status = "A";
							modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";
							frm_Journal.DefInstance.Commit_Journal_Entry();

						} // Trim$(Full_Phone) <> cEmptyString

						Full_Phone = modGlobalVars.cEmptyString;

					}

					modAdminCommon.ADO_Transaction("CommitTrans");

					fill_phone_contact_grid(nSelectedContactID);

				} // chk_dont_color_confirm.Value = vbUnchecked

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"confirm_all_contact_phone_numbers_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();
				return;
			}

		}

		public void fill_phone_company_grid()
		{

			try
			{

				string Query = "";
				Query = modGlobalVars.cEmptyString;
				string ConfirmColor = "";
				ConfirmColor = modAdminCommon.NoColor;
				ADORecordSetHelper ado_Phone = null;
				bool is_office = false;
				is_office = false;
				company_has_office = false;

				cmd_company_phone_confirm.Tag = "0";
				grd_company_phone.Enabled = false;
				grd_company_phone.Clear();

				grd_company_phone.ColumnsCount = 8;
				grd_company_phone.RowsCount = 2;

				grd_company_phone.FixedRows = 1;
				grd_company_phone.FixedColumns = 0;

				grd_company_phone.CurrentRowIndex = 0;
				grd_company_phone.CurrentColumnIndex = 0;

				grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 53);
				grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Type";

				grd_company_phone.CurrentColumnIndex = 1;
				grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 45);
				grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Country";

				grd_company_phone.CurrentColumnIndex = 2;
				grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 43);
				grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Area";

				grd_company_phone.CurrentColumnIndex = 3;
				grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 43);
				grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Prefix";

				grd_company_phone.CurrentColumnIndex = 4;
				grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 61);
				grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Phone";

				grd_company_phone.CurrentColumnIndex = 5;
				grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 30);
				grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Hide";

				grd_company_phone.CurrentColumnIndex = 6;
				grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 67);
				grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Confirmed";


				grd_company_phone.CurrentColumnIndex = 7;
				grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 0);
				grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "ID";

				// ADDED MSW - to clear these, to pass over to contact
				country_code = "";
				area_code = "";
				prefix_code = "";
				number_code = "";

				//extract fields from phone_numbers table
				// RTW - 2/28/2012 - CHANGED QUERY TO USE FULL INDEX
				// 10/07/2019 - By David D. Cruger; Removed INDEX HINT
				Query = "SELECT * FROM Phone_Numbers WITH (NOLOCK) ";
				Query = $"{Query}INNER JOIN Phone_Type ON pnum_type = ptype_name";
				Query = $"{Query} WHERE pnum_comp_id = {nReference_CompanyID.ToString()}";
				Query = $"{Query} AND pnum_journ_id = {nReference_CompanyJID.ToString()}";
				Query = $"{Query} AND pnum_contact_id = 0";
				Query = $"{Query} ORDER BY ptype_seq_no, pnum_number_full";

				ado_Phone = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(ado_Phone.Fields) && !(ado_Phone.BOF && ado_Phone.EOF))
				{

					grd_company_phone.CurrentRowIndex = 1;


					while(!ado_Phone.EOF)
					{

						is_office = false;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (Convert.IsDBNull(ado_Phone["pnum_confirm_date"]))
						{
							ConfirmColor = CONFIRM_BACKCOLOR.ToString();
						}
						else if (((int) DateAndTime.DateDiff("d", DateTime.Parse(Convert.ToString(ado_Phone["pnum_confirm_date"])), DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1)) > modAdminCommon.gbl_ColorConfirmDays && nReference_CompanyJID == 0)
						{  //aey 8/20/04
							ConfirmColor = CONFIRM_BACKCOLOR.ToString();
						}
						else
						{
							ConfirmColor = ColorTranslator.ToOle(NORMAL_TXT_BACKCOLOR).ToString();
						}

						grd_company_phone.CurrentColumnIndex = 0;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Phone["pnum_type"]))
						{
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = Convert.ToString(ado_Phone["pnum_type"]).Trim();
						}

						if (grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString() == "Office")
						{
							is_office = true;
							company_has_office = true;
						}

						grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

						grd_company_phone.CurrentColumnIndex = 1;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Phone["pnum_cntry_code"]))
						{
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = Convert.ToString(ado_Phone["pnum_cntry_code"]).Trim();
						}

						if (is_office)
						{
							country_code = grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString();
						}

						grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

						grd_company_phone.CurrentColumnIndex = 2;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Phone["pnum_area_code"]))
						{
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = Convert.ToString(ado_Phone["pnum_area_code"]).Trim();
						}

						if (is_office)
						{
							area_code = grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString();
						}

						grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

						grd_company_phone.CurrentColumnIndex = 3;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Phone["pnum_prefix"]))
						{
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = Convert.ToString(ado_Phone["pnum_prefix"]).Trim();
						}


						if (is_office)
						{
							prefix_code = grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString();
						}

						grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

						grd_company_phone.CurrentColumnIndex = 4;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Phone["pnum_number"]))
						{
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = Convert.ToString(ado_Phone["pnum_number"]).Trim();
						}

						if (is_office)
						{
							number_code = grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString();
						}

						grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

						grd_company_phone.CurrentColumnIndex = 5;
						
						grd_company_phone.ColAlignment[5] = DataGridViewContentAlignment.TopCenter;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Phone["pnum_hide_customer"]))
						{
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = Convert.ToString(ado_Phone["pnum_hide_customer"]).Trim();
						}
						else
						{
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "N";
						}

						grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

						grd_company_phone.CurrentColumnIndex = 6;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Phone["pnum_confirm_date"]))
						{
							if (Convert.ToDateTime(ado_Phone["pnum_confirm_date"]).ToOADate() != 0)
							{
								grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = DateTime.Parse(Convert.ToString(ado_Phone["pnum_confirm_date"]).Trim()).ToString("d");
							}
						}


						grd_company_phone.CurrentColumnIndex = 7;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Phone["pnum_id"]))
						{
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = ado_Phone.GetField("pnum_id");
						}
						else
						{
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "0";
						}


						grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

						ado_Phone.MoveNext();

						grd_company_phone.RowsCount++;
						grd_company_phone.CurrentRowIndex++;

					};

					grd_company_phone.RowsCount--;
					grd_company_phone.Enabled = true;
					ado_Phone.Close();

				}
				else
				{

					grd_company_phone.FixedRows = 0;
					grd_company_phone.RowsCount = 1;
					grd_company_phone.CurrentRowIndex = 0;

					grd_company_phone.Enabled = false;

				}

				ado_Phone = null;

				grd_company_phone.Redraw = true;
				grd_company_phone.CurrentColumnIndex = 0;

				frame_comp_phone.Visible = false;

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_phone_company_grid_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		public void fill_phone_contact_grid(int in_ContactID)
		{

			// Function used to fill contact phone grid

			try
			{

				string Query = "";
				string ConfirmColor = "";
				System.DateTime tempconfirmdate = DateTime.FromOADate(0);
				ADORecordSetHelper ado_Phone = null;

				grd_contact_phone_numbers.Visible = false;
				grd_contact_phone_numbers.Enabled = false;
				grd_contact_phone_numbers.Clear();

				grd_contact_phone_numbers.ColumnsCount = 8;
				grd_contact_phone_numbers.RowsCount = 2;

				//build grid headings
				grd_contact_phone_numbers.CurrentRowIndex = 0;
				grd_contact_phone_numbers.CurrentColumnIndex = 0;

				grd_contact_phone_numbers.SetColumnWidth(grd_contact_phone_numbers.CurrentColumnIndex, 60);
				grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = "Type";

				grd_contact_phone_numbers.CurrentColumnIndex = 1;
				grd_contact_phone_numbers.SetColumnWidth(grd_contact_phone_numbers.CurrentColumnIndex, 47);
				grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = "Country";

				grd_contact_phone_numbers.CurrentColumnIndex = 2;
				grd_contact_phone_numbers.SetColumnWidth(grd_contact_phone_numbers.CurrentColumnIndex, 47);
				grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = "Area";

				grd_contact_phone_numbers.CurrentColumnIndex = 3;
				grd_contact_phone_numbers.SetColumnWidth(grd_contact_phone_numbers.CurrentColumnIndex, 47);
				grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = "Prefix";

				grd_contact_phone_numbers.CurrentColumnIndex = 4;
				grd_contact_phone_numbers.SetColumnWidth(grd_contact_phone_numbers.CurrentColumnIndex, 47);
				grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = "Phone";

				grd_contact_phone_numbers.CurrentColumnIndex = 5;
				grd_contact_phone_numbers.SetColumnWidth(grd_contact_phone_numbers.CurrentColumnIndex, 33);
				grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = "Ext";

				grd_contact_phone_numbers.CurrentColumnIndex = 6;
				grd_contact_phone_numbers.SetColumnWidth(grd_contact_phone_numbers.CurrentColumnIndex, 30);
				grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = "Hide";

				grd_contact_phone_numbers.CurrentColumnIndex = 7;
				grd_contact_phone_numbers.SetColumnWidth(grd_contact_phone_numbers.CurrentColumnIndex, 67);
				grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = "Confirmed";

				//extract fields from phone_numbers table
				// RTW - 2/28/2012 - CHANGED QUERY TO USE FULL INDEX
				// 07/18/2019 - By David D. Cruger; Removed INDEX HINT
				//Query = "SELECT * FROM Phone_Numbers WITH(NOLOCK, index (ix_pnum_comp_id_contact_id_journ_id_key)) INNER JOIN Phone_Type ON pnum_type = ptype_name"
				Query = "SELECT * FROM Phone_Numbers WITH (NOLOCK) ";
				Query = $"{Query}INNER JOIN Phone_Type ON pnum_type = ptype_name ";
				Query = $"{Query} WHERE pnum_comp_id = {nReference_CompanyID.ToString()}";
				Query = $"{Query} AND pnum_contact_id = {in_ContactID.ToString()}";
				Query = $"{Query} AND pnum_journ_id = {nReference_CompanyJID.ToString()}";
				Query = $"{Query} ORDER BY ptype_seq_no, pnum_number_full";

				ado_Phone = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(ado_Phone.Fields) && !(ado_Phone.BOF && ado_Phone.EOF))
				{


					while(!ado_Phone.EOF)
					{

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Phone["pnum_type"]))
						{
							if (Convert.ToString(ado_Phone["pnum_type"]).Trim() != modGlobalVars.cEmptyString)
							{

								grd_contact_phone_numbers.CurrentRowIndex++;
								grd_contact_phone_numbers.RowsCount++;

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (Convert.IsDBNull(ado_Phone["pnum_confirm_date"]))
								{
									ConfirmColor = CONFIRM_BACKCOLOR.ToString();
								}
								else if (((int) DateAndTime.DateDiff("d", DateTime.Parse(Convert.ToString(ado_Phone["pnum_confirm_date"])), DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1)) > modAdminCommon.gbl_ColorConfirmDays && nReference_CompanyJID == 0)
								{  //aey 8/20/04
									ConfirmColor = CONFIRM_BACKCOLOR.ToString();
								}
								else
								{
									ConfirmColor = ColorTranslator.ToOle(NORMAL_TXT_BACKCOLOR).ToString();
								}

								grd_contact_phone_numbers.CurrentColumnIndex = 0;
								grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Phone["pnum_type"]))
								{
									grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = Convert.ToString(ado_Phone["pnum_type"]).Trim();
								}
								grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

								grd_contact_phone_numbers.CurrentColumnIndex = 1;
								grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Phone["pnum_cntry_code"]))
								{
									grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = Convert.ToString(ado_Phone["pnum_cntry_code"]).Trim();
								}
								grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

								grd_contact_phone_numbers.CurrentColumnIndex = 2;
								grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Phone["pnum_area_code"]))
								{
									grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = Convert.ToString(ado_Phone["pnum_area_code"]).Trim();
								}
								grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

								grd_contact_phone_numbers.CurrentColumnIndex = 3;
								grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Phone["pnum_prefix"]))
								{
									grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = Convert.ToString(ado_Phone["pnum_prefix"]).Trim();
								}
								grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

								grd_contact_phone_numbers.CurrentColumnIndex = 4;
								grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Phone["pnum_number"]))
								{
									grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = Convert.ToString(ado_Phone["pnum_number"]).Trim();
								}
								grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

								grd_contact_phone_numbers.CurrentColumnIndex = 5;
								grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Phone["pnum_ext"]))
								{
									grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = Convert.ToString(ado_Phone["pnum_ext"]).Trim();
								}
								grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

								grd_contact_phone_numbers.CurrentColumnIndex = 6;
								
								grd_contact_phone_numbers.ColAlignment[6] = DataGridViewContentAlignment.TopCenter;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Phone["pnum_hide_customer"]))
								{
									grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = Convert.ToString(ado_Phone["pnum_hide_customer"]).Trim();
								}
								else
								{
									grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = "N";
								}
								grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));



								grd_contact_phone_numbers.CurrentColumnIndex = 7;
								grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Phone["pnum_confirm_date"]))
								{
									if (Convert.ToDateTime(ado_Phone["pnum_confirm_date"]).ToOADate() != 0)
									{
										grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = DateTime.Parse(Convert.ToString(ado_Phone["pnum_confirm_date"]).Trim()).ToString("d");
									}
								}

								grd_contact_phone_numbers.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Phone["pnum_number_full"]))
								{
									if (Convert.ToString(ado_Phone["pnum_number_full"]).Trim() != modGlobalVars.cEmptyString)
									{
										lst_aircraft_contact.AddItem($"{($"{Convert.ToString(ado_Phone["pnum_type"])} ").Trim()} - {($"{Convert.ToString(ado_Phone["pnum_number_full"])} ").Trim()}");
									}
								}

								ado_Phone.MoveNext();

							}

						}

					};

					grd_contact_phone_numbers.RowsCount--;

					if (grd_contact_phone_numbers.RowsCount > 1)
					{

						grd_contact_phone_numbers.FixedRows = 1;
						grd_contact_phone_numbers.FixedColumns = 0;
						grd_contact_phone_numbers.CurrentRowIndex = 1;
						grd_contact_phone_numbers.CurrentColumnIndex = 0;
						grd_contact_phone_numbers.Enabled = true;

					}
					else
					{

						grd_contact_phone_numbers.RowsCount = 1;
						grd_contact_phone_numbers.CurrentRowIndex = 0;
						grd_contact_phone_numbers.CurrentColumnIndex = 0;
						grd_contact_phone_numbers.Enabled = false;

					}

					ado_Phone.Close();

				}
				else
				{

					grd_contact_phone_numbers.RowsCount = 1;
					grd_contact_phone_numbers.CurrentRowIndex = 0;
					grd_contact_phone_numbers.CurrentColumnIndex = 0;
					grd_contact_phone_numbers.Enabled = false;

				}

				ado_Phone = null;

				grd_contact_phone_numbers.Visible = true;
				grd_contact_phone_numbers.Redraw = true;

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_phone_contact_grid_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		private void fill_hotbox_list()
		{

			// Function used to fill reserch note list
			// RTW - MODIFIED ON 9/22/2010 - COMMENTED OUT THE EXISTS QUERY TO AVOID DOING 2 QUERIES

			try
			{
				string Query = "";
				ADORecordSetHelper ado_ResearchNotes = null;
				StringBuilder NoteLine = new StringBuilder();

				pnl_research_notes.Visible = false;
				lst_research_notes.Enabled = false;
				lst_research_notes.Items.Clear();

				search_on("Getting Hot Box Items....");

				//If Exist(Query) Then    'aey 5/3/05

				//-----------------------------------------------------
				// 06/25/2008 - By David D. Cruger
				// Per LF; Added ac_reg_no to the hotbox listing
				// Had to add the field to the Stored Procedure
				//-----------------------------------------------------
				// RTW - MODIFIED ON 2/14/2012 - CHANGED FROM STORED PROCEDURE TO DIRECT QUERY TO ACCESS NEW HOT BOX SUMMARY TABLE
				Query = "SELECT DISTINCT hbs_journ_id, hbs_make_name, hbs_model_name, hbs_subject, hbs_entry_date, hbs_ser_no_full, hbs_reg_no ";
				Query = $"{Query}, hbs_yacht_brand_name, hbs_yacht_model_name, hbs_yacht_name, hbs_yacht_id ";
				Query = $"{Query}FROM Hot_Box_Summary WITH (NOLOCK) ";
				Query = $"{Query}where hbs_comp_id = {nReference_CompanyID.ToString()} ";
				Query = $"{Query}and hbs_status='P' ";
				Query = $"{Query}order by hbs_subject";

				// Query = "EXEC HomebaseGetCompanyHotBoxList " & CStr(nReference_CompanyID)

				ado_ResearchNotes = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				if (!(ado_ResearchNotes.BOF && ado_ResearchNotes.EOF))
				{


					while(!ado_ResearchNotes.EOF)
					{

						NoteLine = new StringBuilder("");

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchNotes["hbs_entry_date"]))
						{
							if (Convert.ToString(ado_ResearchNotes["hbs_entry_date"]).Trim() != modGlobalVars.cEmptyString)
							{
								NoteLine.Append($"{Convert.ToDateTime(ado_ResearchNotes["hbs_entry_date"]).ToString("d")} - ");
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchNotes["hbs_make_name"]))
						{
							if (Convert.ToString(ado_ResearchNotes["hbs_make_name"]).Trim() != modGlobalVars.cEmptyString)
							{
								NoteLine.Append(($"{Convert.ToString(ado_ResearchNotes["hbs_make_name"])}/").Trim());
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchNotes["hbs_model_name"]))
						{
							if (Convert.ToString(ado_ResearchNotes["hbs_model_name"]).Trim() != modGlobalVars.cEmptyString)
							{
								NoteLine.Append($"{Convert.ToString(ado_ResearchNotes["hbs_model_name"]).Trim()} ");
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchNotes["hbs_ser_no_full"]))
						{
							if (Convert.ToString(ado_ResearchNotes["hbs_ser_no_full"]).Trim() != modGlobalVars.cEmptyString)
							{
								NoteLine.Append(($"[{Convert.ToString(ado_ResearchNotes["hbs_ser_no_full"])}]").Trim());
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchNotes["hbs_reg_no"]))
						{
							if (Convert.ToString(ado_ResearchNotes["hbs_reg_no"]).Trim() != modGlobalVars.cEmptyString)
							{
								NoteLine.Append($"{($"({Convert.ToString(ado_ResearchNotes["hbs_reg_no"])})").Trim()} ");
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchNotes["hbs_yacht_brand_name"]))
						{
							if (Convert.ToString(ado_ResearchNotes["hbs_yacht_brand_name"]).Trim() != modGlobalVars.cEmptyString)
							{
								NoteLine.Append(($"{Convert.ToString(ado_ResearchNotes["hbs_yacht_brand_name"])}/").Trim());
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchNotes["hbs_yacht_model_name"]))
						{
							if (Convert.ToString(ado_ResearchNotes["hbs_yacht_model_name"]).Trim() != modGlobalVars.cEmptyString)
							{
								NoteLine.Append($"{Convert.ToString(ado_ResearchNotes["hbs_yacht_model_name"]).Trim()} ");
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchNotes["hbs_yacht_name"]))
						{
							if (Convert.ToString(ado_ResearchNotes["hbs_yacht_name"]).Trim() != modGlobalVars.cEmptyString)
							{
								NoteLine.Append($"{($"({Convert.ToString(ado_ResearchNotes["hbs_yacht_name"])})").Trim()} ");
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchNotes["hbs_yacht_id"]))
						{
							if (Convert.ToString(ado_ResearchNotes["hbs_yacht_id"]).Trim() != modGlobalVars.cEmptyString)
							{
								if (Convert.ToString(ado_ResearchNotes["hbs_yacht_id"]).Trim() != "0")
								{
									NoteLine.Append($"{($"[{Convert.ToString(ado_ResearchNotes["hbs_yacht_id"])}]").Trim()} ");
								}
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchNotes["hbs_subject"]))
						{
							if (Convert.ToString(ado_ResearchNotes["hbs_subject"]).Trim() != modGlobalVars.cEmptyString)
							{
								NoteLine.Append(Convert.ToString(ado_ResearchNotes["hbs_subject"]).Trim());
							}
						}

						lst_research_notes.AddItem(NoteLine.ToString().Trim());
						lst_research_notes.SetItemData(lst_research_notes.GetNewIndex(), Convert.ToInt32(Convert.ToDouble(ado_ResearchNotes["hbs_journ_id"])));

						ado_ResearchNotes.MoveNext();

					};

					SSTabHelper.SetSelectedIndex(tab_company_admin, 2);

				}

				ado_ResearchNotes.Close();
				ado_ResearchNotes = null;

				// End If    'if exist

				lst_research_notes.Enabled = true;

				ado_ResearchNotes = null;
				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_hotbox_list_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}
		}

		private object find_research_action_item(int temp_id)
		{

			object result = null;
			try
			{
				string Query = "";
				ADORecordSetHelper ado_ResearchNotes = null;
				string NoteLine = "";


				result = "";

				Query = " select top 500 ralert_type  ";
				Query = $"{Query} from View_Research_Alerts with (NOLOCK) ";
				Query = $"{Query} Where ralert_comp_id = {nReference_CompanyID.ToString()} ";

				Query = $"{Query} and ralert_source_id = {temp_id.ToString()} ";

				// Query = "EXEC HomebaseGetCompanyHotBoxList " & CStr(nReference_CompanyID)

				ado_ResearchNotes = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				if (!(ado_ResearchNotes.BOF && ado_ResearchNotes.EOF))
				{


					while(!ado_ResearchNotes.EOF)
					{

						NoteLine = "";

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchNotes["ralert_type"]))
						{
							if (Convert.ToString(ado_ResearchNotes["ralert_type"]).Trim() != modGlobalVars.cEmptyString)
							{
								result = ado_ResearchNotes["ralert_type"];
							}
						}

						ado_ResearchNotes.MoveNext();

					};

					SSTabHelper.SetSelectedIndex(tab_company_admin, 2);

				}

				ado_ResearchNotes.Close();
				ado_ResearchNotes = null;

				// End If    'if exist
				ado_ResearchNotes = null;
				search_off();
				return result;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_hotbox_list_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return result;
			}
		}




		public void fill_wanted_grid()
		{

			try
			{

				string Query = "";
				string Query_Overdue = ""; //aey 6/16/04
				string cellcolor = "";
				ADORecordSetHelper ado_Wanted = null;

				search_on("Getting Company Wanted List....");

				lbl_comp[WANTED_COUNT_INDEX].Text = modGlobalVars.cEmptyString;

				pnl_company_wanted.Visible = false;
				grd_company_wanted.Visible = false;
				grd_company_wanted.Enabled = false;
				pnl_company_wanted_notes.Visible = false;

				grd_company_wanted.Clear();

				grd_company_wanted.ColumnsCount = 10;
				grd_company_wanted.RowsCount = 2;

				grd_company_wanted.FixedRows = 1;
				grd_company_wanted.FixedColumns = 0;

				//build grid headings
				grd_company_wanted.CurrentRowIndex = 0;

				grd_company_wanted.CurrentColumnIndex = 0; //pictures added 6/22/05 aey
				grd_company_wanted.SetColumnWidth(grd_company_wanted.CurrentColumnIndex, 23);
				grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = "AF";

				grd_company_wanted.CurrentColumnIndex = 1;
				grd_company_wanted.SetColumnWidth(grd_company_wanted.CurrentColumnIndex, 167);
				grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = "Make/Model";

				grd_company_wanted.CurrentColumnIndex = 2;
				grd_company_wanted.SetColumnWidth(grd_company_wanted.CurrentColumnIndex, 67);
				grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = "Date Listed";

				grd_company_wanted.CurrentColumnIndex = 3;
				grd_company_wanted.SetColumnWidth(grd_company_wanted.CurrentColumnIndex, 73);
				grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = "Year Range";

				grd_company_wanted.CurrentColumnIndex = 4;
				grd_company_wanted.SetColumnWidth(grd_company_wanted.CurrentColumnIndex, 80);
				grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = "Max Price";

				grd_company_wanted.CurrentColumnIndex = 5;
				grd_company_wanted.SetColumnWidth(grd_company_wanted.CurrentColumnIndex, 67);
				grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = "Max Aftt";

				grd_company_wanted.CurrentColumnIndex = 6;
				grd_company_wanted.SetColumnWidth(grd_company_wanted.CurrentColumnIndex, 87);
				grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = "Damage History";

				grd_company_wanted.CurrentColumnIndex = 7;
				grd_company_wanted.SetColumnWidth(grd_company_wanted.CurrentColumnIndex, 87);
				grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = "Current Damage";

				grd_company_wanted.CurrentColumnIndex = 8;
				grd_company_wanted.SetColumnWidth(grd_company_wanted.CurrentColumnIndex, 200);
				grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = "Notes";

				grd_company_wanted.CurrentColumnIndex = 9;
				grd_company_wanted.SetColumnWidth(grd_company_wanted.CurrentColumnIndex, 60);
				grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = "Id";

				Query = $"SELECT amwant_amod_id FROM aircraft_model_wanted WITH(NOLOCK) WHERE amwant_comp_id = {nReference_CompanyID.ToString()}";
				Query = $"{Query} AND amwant_journ_id = {nReference_CompanyJID.ToString()}";

				if (modAdminCommon.Exist(Query))
				{ //aey 5/3/05

					Query = "SELECT amod_make_name, amod_model_name, amod_airframe_type_code, amod_class_code, Aircraft_Model_Wanted.*";
					Query = $"{Query} FROM Aircraft_Model WITH (NOLOCK) ";
					Query = $"{Query} INNER JOIN Aircraft_Model_Wanted WITH (NOLOCK) ON amwant_amod_id = amod_id ";
					Query = $"{Query} WHERE (amwant_comp_id = {nReference_CompanyID.ToString()}) ";
					Query = $"{Query} AND (amwant_journ_id = {nReference_CompanyJID.ToString()}) ";

					if (chkShowAllWanted.CheckState == CheckState.Unchecked)
					{
						Query = $"{Query}AND (amod_customer_flag = 'Y') ";
					}
					Query_Overdue = $"{Query}AND (amwant_verified_date IS NULL OR DATEDIFF(day,amwant_verified_date,getdate()) > {modAdminCommon.gbl_ConfirmDays.ToString()}) ";

					Query = $"{Query}ORDER BY amod_make_name, amod_model_name ";

					ado_Wanted = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(ado_Wanted.Fields) && !(ado_Wanted.BOF && ado_Wanted.EOF))
					{

						if (modAdminCommon.Exist(Query_Overdue))
						{
							tab_company_details.ImageList.Images[3] = pic_verify_ac[0].Image;
						}
						else
						{
							tab_company_details.ImageList.Images[3] = null;
						}

						grd_company_wanted.CurrentRowIndex = 1;


						while(!ado_Wanted.EOF)
						{

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (Convert.IsDBNull(ado_Wanted["amwant_verified_date"]))
							{

								cellcolor = ColorTranslator.ToOle(WANTED_NULL_VERIFY_DATE_BACKCOLOR).ToString();

							}
							else if (Information.IsDate(ado_Wanted["amwant_verified_date"]))
							{ 

								if (((int) DateAndTime.DateDiff("d", DateTime.Parse(Convert.ToString(ado_Wanted["amwant_verified_date"])), DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1)) > modAdminCommon.gbl_ConfirmDays)
								{
									cellcolor = CONFIRM_BACKCOLOR.ToString();
								}
								else
								{
									cellcolor = ColorTranslator.ToOle(NORMAL_TXT_BACKCOLOR).ToString();
								}

							}

							//Fill the row, col by col.
							grd_company_wanted.CurrentColumnIndex = 0;
							grd_company_wanted.CellAlignment = DataGridViewContentAlignment.TopCenter;
							grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Wanted["amod_airframe_type_code"]))
							{
								if (Convert.ToString(ado_Wanted["amod_airframe_type_code"]).ToUpper() == "F")
								{
									grd_company_wanted.CellPicture = pic_verify_ac[1].Image;
								}
								else
								{
									grd_company_wanted.CellPicture = pic_verify_ac[2].Image;
								}
							}
							else
							{
								grd_company_wanted.CellPicture = pic_verify_ac[0].Image;
							}

							grd_company_wanted.CurrentColumnIndex = 1;
							grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Wanted["amod_make_name"]))
							{
								if (Convert.ToString(ado_Wanted["amod_make_name"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = Convert.ToString(ado_Wanted["amod_make_name"]).Trim();
								}
							}
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Wanted["amod_model_name"]))
							{
								if (Convert.ToString(ado_Wanted["amod_model_name"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = $"{grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].FormattedValue.ToString()}/{Convert.ToString(ado_Wanted["amod_model_name"]).Trim()}";
								}
							}

							grd_company_wanted.CurrentColumnIndex = 2;
							grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							grd_company_wanted.CellAlignment = DataGridViewContentAlignment.TopCenter;
							grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Wanted["amwant_listed_date"]))
							{
								if (Convert.ToString(ado_Wanted["amwant_listed_date"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = Convert.ToDateTime(ado_Wanted["amwant_listed_date"]).ToString("d");
								}
							}

							grd_company_wanted.CurrentColumnIndex = 3;
							grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							grd_company_wanted.CellAlignment = DataGridViewContentAlignment.TopCenter;
							grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Wanted["amwant_start_year"]))
							{
								if (Convert.ToString(ado_Wanted["amwant_start_year"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = Convert.ToString(ado_Wanted["amwant_start_year"]).Trim();
								}
							}

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Wanted["amwant_end_year"]))
							{
								if (Convert.ToString(ado_Wanted["amwant_end_year"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = $"{grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].FormattedValue.ToString()} - {Convert.ToString(ado_Wanted["amwant_end_year"]).Trim()}";
								}
							}

							grd_company_wanted.CurrentColumnIndex = 4;
							grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = "Unknown";
							grd_company_wanted.CellAlignment = DataGridViewContentAlignment.TopCenter;
							grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Wanted["amwant_max_price"]))
							{
								if (Convert.ToDouble(ado_Wanted["amwant_max_price"]) > 0)
								{
									grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = $" ${Strings.FormatNumber(ado_Wanted["amwant_max_price"], 2, TriState.False, TriState.False, TriState.True)}";
								}
							}

							grd_company_wanted.CurrentColumnIndex = 5;
							grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							grd_company_wanted.CellAlignment = DataGridViewContentAlignment.TopCenter;
							grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Wanted["amwant_max_aftt"]))
							{
								if (Convert.ToDouble(ado_Wanted["amwant_max_aftt"]) > 0)
								{
									grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = Strings.FormatNumber(ado_Wanted["amwant_max_aftt"], 0, TriState.False, TriState.False, TriState.True);
								}
							}

							grd_company_wanted.CurrentColumnIndex = 6;
							grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Wanted["amwant_accept_damage_hist"]))
							{
								if (Convert.ToString(ado_Wanted["amwant_accept_damage_hist"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = Convert.ToString(ado_Wanted["amwant_accept_damage_hist"]).Trim();
								}
							}

							grd_company_wanted.CurrentColumnIndex = 7;
							grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Wanted["amwant_accept_dam_cur"]))
							{
								if (Convert.ToString(ado_Wanted["amwant_accept_dam_cur"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = Convert.ToString(ado_Wanted["amwant_accept_dam_cur"]).Trim();
								}
							}

							grd_company_wanted.CurrentColumnIndex = 8;
							grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Wanted["amwant_notes"]))
							{
								if (Convert.ToString(ado_Wanted["amwant_notes"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = Convert.ToString(ado_Wanted["amwant_notes"]).Trim();
								}
							}

							grd_company_wanted.CurrentColumnIndex = 9;
							grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = Convert.ToString(ado_Wanted["amwant_id"]).Trim();
							grd_company_wanted.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

							grd_company_wanted.set_RowData(grd_company_wanted.CurrentRowIndex, Convert.ToInt32(ado_Wanted["amwant_id"]));
							//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_wanted.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							grd_company_wanted.setBandData(Convert.ToInt32(ado_Wanted["amwant_amod_id"]), grd_company_wanted.CurrentRowIndex);

							grd_company_wanted.RowsCount++;
							grd_company_wanted.CurrentRowIndex++;

							ado_Wanted.MoveNext();

						};

						grd_company_wanted.RowsCount--;
						grd_company_wanted.CurrentRowIndex = 1;
						grd_company_wanted.CurrentColumnIndex = 0;
						grd_company_wanted.Enabled = true;

						lbl_comp[WANTED_COUNT_INDEX].Text = (grd_company_wanted.RowsCount - 1).ToString();

						ado_Wanted.Close();

					}
					else
					{

						grd_company_wanted.CurrentRowIndex = 1;
						grd_company_wanted.CurrentColumnIndex = 1;
						grd_company_wanted[grd_company_wanted.CurrentRowIndex, grd_company_wanted.CurrentColumnIndex].Value = "No Wanted Aircraft Found";
						grd_company_wanted.Enabled = false;

					} // Not (ado_Wanted.BOF And ado_Wanted.EOF)

					cmd_wanted_add.Visible = nReference_CompanyJID == 0;

					cmd_wanted_delete.Visible = false;

					grd_company_wanted.Visible = true;
					grd_company_wanted.Redraw = true;

					pnl_company_wanted.Visible = false;
				}
				else
				{
					lbl_comp[WANTED_COUNT_INDEX].Text = "None";
				} // Exist(Query)

				ado_Wanted = null;

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_wanted_grid_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		public void fill_share_relationship_grid()
		{
			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO SELECT AND DISPLAY
			//          A LIST OF AIRCRAFT ASSOCIATED WITH THE CURRENT COMPANY.

			string Query = modGlobalVars.cEmptyString;
			string cellcolor = modGlobalVars.cEmptyString;
			int nTmpAcID = 0;
			string sContactPerson = modGlobalVars.cEmptyString;
			ADORecordSetHelper adoCompanyShares = null;

			try
			{

				search_on("Getting Company Share Relationships....");

				grd_company_shares.Visible = false;
				grd_company_shares.Enabled = false;

				grd_company_shares.Clear();
				grd_company_shares.ColumnsCount = 8;
				grd_company_shares.RowsCount = 2;

				grd_company_shares.FixedRows = 1;
				grd_company_shares.FixedColumns = 0;

				grd_company_shares.CurrentRowIndex = 0;
				grd_company_shares.CurrentColumnIndex = 0;
				grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_shares.SetColumnWidth(grd_company_shares.CurrentColumnIndex, 157);
				grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = "Make/Model";

				grd_company_shares.CurrentColumnIndex = 1;
				grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_shares.SetColumnWidth(grd_company_shares.CurrentColumnIndex, 73);
				
				grd_company_shares.ColAlignment[1] = DataGridViewContentAlignment.NotSet;
				grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = "Serial#";

				grd_company_shares.CurrentColumnIndex = 2;
				grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_shares.SetColumnWidth(grd_company_shares.CurrentColumnIndex, 30);
				grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = "Year";

				grd_company_shares.CurrentColumnIndex = 3;
				grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_shares.SetColumnWidth(grd_company_shares.CurrentColumnIndex, 73);
				grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = "Status";

				grd_company_shares.CurrentColumnIndex = 4;
				grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_shares.SetColumnWidth(grd_company_shares.CurrentColumnIndex, 140);
				grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = "Type";

				grd_company_shares.CurrentColumnIndex = 5;
				grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_shares.SetColumnWidth(grd_company_shares.CurrentColumnIndex, 433);
				grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = "Company - Contact";

				grd_company_shares.CurrentColumnIndex = 6;
				grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_shares.SetColumnWidth(grd_company_shares.CurrentColumnIndex, 67);
				grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = "Reg #";

				grd_company_shares.CurrentColumnIndex = 7;
				grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_shares.SetColumnWidth(grd_company_shares.CurrentColumnIndex, 60);
				grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = "Id";

				Query = $"EXEC HomebaseGetCompanyShareRelationships {nReference_CompanyID.ToString()}, {nReference_CompanyJID.ToString()}";

				adoCompanyShares = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(adoCompanyShares.Fields) && !(adoCompanyShares.BOF && adoCompanyShares.EOF))
				{

					grd_company_shares.CurrentRowIndex = 1;


					while(!adoCompanyShares.EOF)
					{

						cellcolor = modAdminCommon.NoColor;

						if (Convert.ToString(adoCompanyShares["ac_forsale_flag"]).Trim().ToUpper() == "Y")
						{
							cellcolor = modAdminCommon.ForSaleColor;
						}

						if (Convert.ToString(adoCompanyShares["ac_lifecycle_stage"]).Trim() == "4")
						{
							cellcolor = modAdminCommon.InactiveColor;
						}

						if (nTmpAcID != Convert.ToInt32(adoCompanyShares["ac_id"]))
						{

							// DETERMINE IF THE AIRCRAFT HAS BEEN REASSIGNED - IF SO, THEN BOLD
							grd_company_shares.CurrentColumnIndex = 0;
							Query = $"SELECT journ_id FROM Journal WITH(NOLOCK) WHERE journ_ac_id = {Convert.ToString(adoCompanyShares["ac_id"])}";
							Query = $"{Query} AND journ_subcategory_code = 'AA'";

							grd_company_shares.CellFontBold = modAdminCommon.Exist(Query);

							grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(adoCompanyShares["amod_make_name"]))
							{
								if (Convert.ToString(adoCompanyShares["amod_make_name"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = Convert.ToString(adoCompanyShares["amod_make_name"]).Trim();
								}
							}

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(adoCompanyShares["amod_model_name"]))
							{
								if (Convert.ToString(adoCompanyShares["amod_model_name"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = $"{grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].FormattedValue.ToString()}/{Convert.ToString(adoCompanyShares["amod_model_name"]).Trim()}";
								}
							}
							grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

							grd_company_shares.CurrentColumnIndex = 1;
							grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(adoCompanyShares["ac_ser_no_full"]))
							{
								if (Convert.ToString(adoCompanyShares["ac_ser_no_full"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = Convert.ToString(adoCompanyShares["ac_ser_no_full"]).Trim();
								}
							}
							grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

							grd_company_shares.CurrentColumnIndex = 2;
							grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(adoCompanyShares["ac_year"]))
							{
								if (Convert.ToString(adoCompanyShares["ac_year"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = Convert.ToString(adoCompanyShares["ac_year"]).Trim();
								}
							}
							grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

							// don't understand why this is done might change
							grd_company_shares.CurrentColumnIndex = 3;
							grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(adoCompanyShares["ac_forsale_flag"]))
							{
								if (Convert.ToString(adoCompanyShares["ac_forsale_flag"]).Trim() != modGlobalVars.cEmptyString)
								{

									if (Convert.ToString(adoCompanyShares["ac_forsale_flag"]).Trim().ToUpper() == "Y")
									{
										grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = Convert.ToString(adoCompanyShares["ac_status"]).Trim();
									}
									else
									{
										grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = Convert.ToString(adoCompanyShares["ac_status"]).Trim();
									}

								}
							}

							grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						} //nTmpAcID <> CLng(adoCompanyShares("ac_id").Value) Then

						grd_company_shares.CurrentColumnIndex = 4;
						grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoCompanyShares["cref_primary_poc_flag"]))
						{
							if (Convert.ToString(adoCompanyShares["cref_primary_poc_flag"]).Trim() != modGlobalVars.cEmptyString)
							{
								if (Convert.ToString(adoCompanyShares["cref_primary_poc_flag"]).Trim().ToUpper() == "Y")
								{
									grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.PrimaryColor)));
								}
								else if (Convert.ToString(adoCompanyShares["cref_primary_poc_flag"]).Trim().ToUpper() == "X")
								{ 
									grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.ExclusiveColor)));
									grd_company_shares.CurrentColumnIndex = 5;
								}
								else
								{
									grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
								}
							}
						}

						// GET THE CONTACT ABBREVIATION FOR THE REFERENCE
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoCompanyShares["sref_contact_type"]))
						{
							if (Convert.ToString(adoCompanyShares["sref_contact_type"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modCompany.get_aircraft_contact_type(Convert.ToString(adoCompanyShares["sref_contact_type"]));
							}
						}

						// IF FRACTIONAL AIRCRAFT THEN CHECK FOR RELATIONSHIPS TO DISPLAY
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoCompanyShares["ac_ownership_type"]))
						{
							if (Convert.ToString(adoCompanyShares["ac_ownership_type"]).Trim() != modGlobalVars.cEmptyString)
							{
								if (Convert.ToString(adoCompanyShares["ac_ownership_type"]).Trim().ToUpper() == "F")
								{
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(adoCompanyShares["cref_id"]))
									{
										if (Convert.ToInt32(adoCompanyShares["cref_id"]) > 0)
										{

											if (modCommon.GetImportantRelationships(Convert.ToInt32(adoCompanyShares["cref_id"])))
											{
												grd_company_shares.CellFontBold = true;
											}

										}
									}
								}
							}
						}

						// DISPLAY THE OWNERSHIP PERCENTAGE IF ANY
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoCompanyShares["cref_owner_percent"]))
						{
							if (Convert.ToInt32(adoCompanyShares["cref_owner_percent"]) > 0)
							{
								grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = $"{grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].FormattedValue.ToString()} ({Convert.ToString(adoCompanyShares["cref_owner_percent"]).Trim()}%)";
							}
						}

						// GET CONTACT INFORMATION FOR THE SPECIFIC REFERENCE SELECTED
						grd_company_shares.CurrentColumnIndex = 5;
						grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoCompanyShares["comp_id"]))
						{
							if (Convert.ToInt32(adoCompanyShares["comp_id"]) > 0)
							{
								grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modCompany.get_share_company_info(Convert.ToInt32(adoCompanyShares["comp_id"]));
							}
						}

						// dont like this calling function twice stuff
						sContactPerson = modCompany.get_company_contact_information(Convert.ToInt32(adoCompanyShares["sref_contact_id"]), Convert.ToInt32(adoCompanyShares["cref_journ_id"]));

						if (sContactPerson.Trim() != modGlobalVars.cEmptyString)
						{
							grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = $"{grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].FormattedValue.ToString()} Contact: {sContactPerson}";
						}

						if (Strings.Len(grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].FormattedValue.ToString().Trim()) > 70)
						{
							grd_company_shares.SetRowHeight(grd_company_shares.CurrentRowIndex, 27);
						}

						grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						if (nTmpAcID != Convert.ToInt32(adoCompanyShares["ac_id"]))
						{
							// display the registration number
							grd_company_shares.CurrentColumnIndex = 6;
							grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(adoCompanyShares["ac_reg_no_verify_date"]))
							{
								if (Convert.ToString(adoCompanyShares["ac_reg_no_verify_date"]).Trim() != modGlobalVars.cEmptyString)
								{
									if (modAircraft.RegNeedsConfirm(Convert.ToString(adoCompanyShares["ac_reg_no_verify_date"]).Trim()))
									{
										grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.ConfirmColor)));
									}
								}
							}

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(adoCompanyShares["ac_reg_no"]))
							{
								if (Convert.ToString(adoCompanyShares["ac_reg_no"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = Convert.ToString(adoCompanyShares["ac_reg_no"]).Trim();
								}
							}

						} // nTmpAcID <> CLng(adoCompanyShares("ac_id").Value) Then

						grd_company_shares.CurrentColumnIndex = 7;
						grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoCompanyShares["comp_id"]))
						{
							if (Convert.ToInt32(adoCompanyShares["comp_id"]) > 0)
							{
								grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = Convert.ToString(adoCompanyShares["comp_id"]).Trim();
							}
						}
						grd_company_shares.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						grd_company_shares.set_RowData(grd_company_shares.CurrentRowIndex, Convert.ToInt32(adoCompanyShares["ac_id"]));
						//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_shares.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						grd_company_shares.setBandData(Convert.ToInt32(adoCompanyShares["cref_id"]), grd_company_shares.CurrentRowIndex);

						grd_company_shares.RowsCount++;
						grd_company_shares.CurrentRowIndex++;

						nTmpAcID = Convert.ToInt32(adoCompanyShares["ac_id"]);
						adoCompanyShares.MoveNext();

					};

					grd_company_shares.RowsCount--;
					grd_company_shares.Enabled = true;

					adoCompanyShares.Close();

				}
				else
				{

					grd_company_shares.CurrentRowIndex = 1;
					grd_company_shares.CurrentColumnIndex = 0;

					Query = $"SELECT sref_id FROM Share_Reference WITH(NOLOCK) WHERE sref_comp_id = {nReference_CompanyID.ToString()}";

					if (modAdminCommon.Exist(Query))
					{
						//aey 1/25/2005 provide links to ac and other affiliate contact

						grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = "No Aircraft - Fractional Affiliate";

						Query = "SELECT ac_id, amod_make_name, amod_model_name, ac_ser_no_full, ac_reg_no, ac_year, cref_id, cref_comp_id";
						Query = $"{Query} FROM Aircraft WITH(NOLOCK) INNER JOIN Aircraft_Model ON ac_amod_id = amod_id";
						Query = $"{Query} INNER JOIN Aircraft_Reference WITH(NOLOCK) ON cref_ac_id = ac_id AND cref_journ_id = ac_journ_id";
						Query = $"{Query} INNER JOIN Share_Reference WITH(NOLOCK) ON cref_id = sref_cref_id";
						Query = $"{Query} INNER JOIN Company WITH(NOLOCK) ON comp_id = sref_comp_id and comp_journ_id = 0";
						Query = $"{Query} WHERE sref_comp_id = {nReference_CompanyID.ToString()}";

						adoCompanyShares = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(adoCompanyShares.Fields) && !(adoCompanyShares.BOF && adoCompanyShares.EOF))
						{


							while(!adoCompanyShares.EOF)
							{

								grd_company_shares.CurrentColumnIndex = 0;
								grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = "No Aircraft - Fractional Affiliate";

								grd_company_shares.CurrentColumnIndex = 1;
								grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(adoCompanyShares["ac_ser_no_full"]))
								{
									if (Convert.ToString(adoCompanyShares["ac_ser_no_full"]).Trim() != modGlobalVars.cEmptyString)
									{
										grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = Convert.ToString(adoCompanyShares["ac_ser_no_full"]).Trim();
									}
								}

								grd_company_shares.CurrentColumnIndex = 2;
								grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(adoCompanyShares["ac_year"]))
								{
									if (Convert.ToString(adoCompanyShares["ac_year"]).Trim() != modGlobalVars.cEmptyString)
									{
										grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = Convert.ToString(adoCompanyShares["ac_year"]).Trim();
									}
								}

								grd_company_shares.CurrentColumnIndex = 4;
								grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(adoCompanyShares["amod_make_name"]))
								{
									if (Convert.ToString(adoCompanyShares["amod_make_name"]).Trim() != modGlobalVars.cEmptyString)
									{
										grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = Convert.ToString(adoCompanyShares["amod_make_name"]).Trim();
									}
								}

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(adoCompanyShares["amod_model_name"]))
								{
									if (Convert.ToString(adoCompanyShares["amod_model_name"]).Trim() != modGlobalVars.cEmptyString)
									{
										grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = $"{grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].FormattedValue.ToString()}/{Convert.ToString(adoCompanyShares["amod_model_name"]).Trim()}";
									}
								}

								grd_company_shares.CurrentColumnIndex = 5;
								grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(adoCompanyShares["cref_comp_id"]))
								{
									if (Convert.ToInt32(adoCompanyShares["cref_comp_id"]) > 0)
									{
										grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modCompany.get_share_company_info(Convert.ToInt32(adoCompanyShares["cref_comp_id"]));
									}
								}

								grd_company_shares.CurrentColumnIndex = 6;
								grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(adoCompanyShares["ac_reg_no"]))
								{
									if (Convert.ToString(adoCompanyShares["ac_reg_no"]).Trim() != modGlobalVars.cEmptyString)
									{
										grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = Convert.ToString(adoCompanyShares["ac_reg_no"]).Trim();
									}
								}

								grd_company_shares.CurrentColumnIndex = 7;
								grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(adoCompanyShares["cref_comp_id"]))
								{
									if (Convert.ToInt32(adoCompanyShares["cref_comp_id"]) > 0)
									{
										grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = Convert.ToString(adoCompanyShares["cref_comp_id"]).Trim();
									}
								}

								grd_company_shares.set_RowData(grd_company_shares.CurrentRowIndex, Convert.ToInt32(adoCompanyShares["ac_id"]));
								//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_shares.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								grd_company_shares.setBandData(Convert.ToInt32(adoCompanyShares["cref_id"]), grd_company_shares.CurrentRowIndex);

								grd_company_shares.RowsCount++;
								grd_company_shares.CurrentRowIndex++;

								adoCompanyShares.MoveNext();
							};

							grd_company_shares.RowsCount--;

						}

						grd_company_shares.CurrentRowIndex = 1;
						grd_company_shares.Enabled = true;
						adoCompanyShares.Close();

					}
					else
					{

						grd_company_shares.CurrentRowIndex = 1;
						grd_company_shares.CurrentColumnIndex = 0;
						grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].Value = "No Share Relationships Found";
						grd_company_shares.Enabled = false;
					} //  Exist(Query)

				} //  Not IsNull(adoCompanyShares) And Not (adoCompanyShares.BOF And adoCompanyShares.EOF)

				adoCompanyShares = null;

				grd_company_shares.Visible = true;
				grd_company_shares.Redraw = true;

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_share_relationship_grid_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		private void fill_document_grid()
		{

			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO SELECT AND DISPLAY A LIST OF DOCUMENTS ASSOCIATED WITH THE CURRENT COMPANY.
			string Query = modGlobalVars.cEmptyString;
			string cellcolor = modAdminCommon.NoColor;
			int nTmpAcID = 0;
			ADORecordSetHelper ado_Company_Documents = null;
			int lCnt1 = 0;
			int lCol1 = 0;

			try
			{

				search_on("Getting Company Document Relationships....");
				cellcolor = modAdminCommon.HeadingColor;

				grd_company_documents.Visible = false;
				grd_company_documents.Enabled = false;
				grd_company_documents.Redraw = false;

				grd_company_documents.Clear();
				grd_company_documents.ColumnsCount = 8;
				grd_company_documents.RowsCount = 2;

				grd_company_documents.FixedRows = 1;
				grd_company_documents.FixedColumns = 0;

				grd_company_documents.CurrentRowIndex = 0;

				lCol1 = 0;
				grd_company_documents.CurrentColumnIndex = lCol1;
				grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_documents.SetColumnWidth(grd_company_documents.CurrentColumnIndex, 157);
				grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = "Make/Model";

				lCol1++;
				grd_company_documents.CurrentColumnIndex = 1;
				grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_documents.SetColumnWidth(grd_company_documents.CurrentColumnIndex, 73);
				
				grd_company_documents.ColAlignment[1] = DataGridViewContentAlignment.NotSet;
				grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = "Serial#";

				lCol1++;
				grd_company_documents.CurrentColumnIndex = lCol1;
				grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_documents.SetColumnWidth(grd_company_documents.CurrentColumnIndex, 33);
				grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = "Year";

				lCol1++;
				grd_company_documents.CurrentColumnIndex = lCol1;
				grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_documents.SetColumnWidth(grd_company_documents.CurrentColumnIndex, 120);
				grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = "Relationship";

				lCol1++;
				grd_company_documents.CurrentColumnIndex = lCol1;
				grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_documents.SetColumnWidth(grd_company_documents.CurrentColumnIndex, 140);
				grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = "Document Type";

				lCol1++;
				grd_company_documents.CurrentColumnIndex = lCol1;
				grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_documents.SetColumnWidth(grd_company_documents.CurrentColumnIndex, 50);
				grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = "User Id";

				lCol1++;
				grd_company_documents.CurrentColumnIndex = lCol1;
				grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_documents.SetColumnWidth(grd_company_documents.CurrentColumnIndex, 357);
				grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = "Subject";

				lCol1++;
				grd_company_documents.CurrentColumnIndex = lCol1;
				grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_documents.SetColumnWidth(grd_company_documents.CurrentColumnIndex, 60);
				grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = "Code";

				Query = $"EXEC HomebaseGetCompanyDocuments {nReference_CompanyID.ToString()}";

				ado_Company_Documents = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(ado_Company_Documents.Fields) && !(ado_Company_Documents.BOF && ado_Company_Documents.EOF))
				{

					grd_company_documents.CurrentRowIndex = 1;
					cellcolor = modAdminCommon.NoColor;

					lCnt1 = 0;

					while(!ado_Company_Documents.EOF)
					{

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Company_Documents["ac_id"]))
						{
							if (Convert.ToInt32(ado_Company_Documents["ac_id"]) > 0)
							{

								if (nTmpAcID != Convert.ToInt32(ado_Company_Documents["ac_id"]))
								{
									grd_company_aircraft.CellFontBold = true;
								}

							}
						}

						lCol1 = 0;
						grd_company_documents.CurrentColumnIndex = lCol1;
						grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Company_Documents["amod_make_name"]))
						{
							if (Convert.ToString(ado_Company_Documents["amod_make_name"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = Convert.ToString(ado_Company_Documents["amod_make_name"]).Trim();
							}
						}
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Company_Documents["amod_model_name"]))
						{
							if (Convert.ToString(ado_Company_Documents["amod_model_name"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = $"{grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].FormattedValue.ToString()}/{Convert.ToString(ado_Company_Documents["amod_model_name"]).Trim()}";
							}
						}
						grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						lCol1++;
						grd_company_documents.CurrentColumnIndex = lCol1;
						grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Company_Documents["ac_ser_no_full"]))
						{
							if (Convert.ToString(ado_Company_Documents["ac_ser_no_full"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = Convert.ToString(ado_Company_Documents["ac_ser_no_full"]).Trim();
							}
						}
						grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						lCol1++;
						grd_company_documents.CurrentColumnIndex = lCol1;
						grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Company_Documents["ac_year"]))
						{
							if (Convert.ToString(ado_Company_Documents["ac_year"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = Convert.ToString(ado_Company_Documents["ac_year"]).Trim();
							}
						}
						grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						lCol1++;
						grd_company_documents.CurrentColumnIndex = lCol1;
						grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Company_Documents["adoc_trustee_comp_id"]))
						{
							if (Convert.ToInt32(ado_Company_Documents["adoc_trustee_comp_id"]) > 0)
							{
								if (nReference_CompanyID == Convert.ToInt32(ado_Company_Documents["adoc_trustee_comp_id"]))
								{
									grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = "Trustee";
								}
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Company_Documents["adoc_sublease_comp_id"]))
						{
							if (Convert.ToInt32(ado_Company_Documents["adoc_sublease_comp_id"]) > 0)
							{
								if (nReference_CompanyID == Convert.ToInt32(ado_Company_Documents["adoc_sublease_comp_id"]))
								{
									grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = "Sublease";
								}
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Company_Documents["adoc_infavor_comp_id"]))
						{
							if (Convert.ToInt32(ado_Company_Documents["adoc_infavor_comp_id"]) > 0)
							{
								if (nReference_CompanyID == Convert.ToInt32(ado_Company_Documents["adoc_infavor_comp_id"]))
								{
									grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = "In Favor Of";
								}
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Company_Documents["adoc_onbehalf_comp_id"]))
						{
							if (Convert.ToInt32(ado_Company_Documents["adoc_onbehalf_comp_id"]) > 0)
							{
								if (nReference_CompanyID == Convert.ToInt32(ado_Company_Documents["adoc_onbehalf_comp_id"]))
								{
									grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = "On Behalf Of";
								}
							}
						}
						grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						lCol1++;
						grd_company_documents.CurrentColumnIndex = lCol1;
						grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Company_Documents["adoc_doc_type"]))
						{
							if (Convert.ToString(ado_Company_Documents["adoc_doc_type"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = Convert.ToString(ado_Company_Documents["adoc_doc_type"]).Trim();
							}
						}
						grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						lCol1++;
						grd_company_documents.CurrentColumnIndex = lCol1;
						grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Company_Documents["adoc_user_id"]))
						{
							if (Convert.ToString(ado_Company_Documents["adoc_user_id"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = Convert.ToString(ado_Company_Documents["adoc_user_id"]).Trim();
							}
						}
						grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						lCol1++;
						grd_company_documents.CurrentColumnIndex = lCol1;
						grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Company_Documents["journ_subject"]))
						{
							if (Convert.ToString(ado_Company_Documents["journ_subject"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = Convert.ToString(ado_Company_Documents["journ_subject"]).Trim();
							}
						}
						grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						lCol1++;
						grd_company_documents.CurrentColumnIndex = lCol1;
						grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Company_Documents["journ_subcategory_code"]))
						{
							if (Convert.ToString(ado_Company_Documents["journ_subcategory_code"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = Convert.ToString(ado_Company_Documents["journ_subcategory_code"]).Trim();
							}
						}
						grd_company_documents.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

						grd_company_documents.set_RowData(grd_company_documents.CurrentRowIndex, Convert.ToInt32(ado_Company_Documents["ac_id"]));

						grd_company_documents.RowsCount++;
						grd_company_documents.CurrentRowIndex++;

						nTmpAcID = Convert.ToInt32(ado_Company_Documents["ac_id"]);

						lCnt1++;
						if (lCnt1 == 15)
						{
							grd_company_documents.Visible = true;
							grd_company_documents.Enabled = true;
							grd_company_documents.Redraw = true;
							Application.DoEvents();
							grd_company_documents.Enabled = false;
							grd_company_documents.Redraw = false;
						}

						ado_Company_Documents.MoveNext();

					};

					grd_company_documents.RowsCount--;
					grd_company_documents.CurrentRowIndex = 1;
					grd_company_documents.Enabled = true;

				}
				else
				{
					grd_company_documents.CurrentRowIndex = 1;
					grd_company_documents.CurrentColumnIndex = 0;
					grd_company_documents[grd_company_documents.CurrentRowIndex, grd_company_documents.CurrentColumnIndex].Value = "No Documents Found";
					grd_company_documents.Enabled = false;
				} // If Not IsNull(ado_Company_Documents) And Not (ado_Company_Documents.BOF And ado_Company_Documents.EOF) Then

				ado_Company_Documents.Close();

				grd_company_documents.Visible = true;
				grd_company_documents.Redraw = true;

				ado_Company_Documents = null;

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_document_grid_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		private void fill_stats_grid()
		{
			// THE PURPOSE OF THIS PROCEDURE IS TO FILL A GRID WITH STATISTICS FOR A GIVEN
			// COMPANY

			try
			{

				string Query = "";
				Query = modGlobalVars.cEmptyString;
				string sProdtype = "";
				sProdtype = modGlobalVars.cEmptyString;
				string cellcolor = "";
				cellcolor = ColorTranslator.ToOle(NORMAL_TXT_BACKCOLOR).ToString();
				ADORecordSetHelper ado_Stats = null; // THIS RECORDSET WILL BE USED TO GET DATABASE DATA
				int nCurRow = 0;
				nCurRow = 0;

				search_on("Getting Company Stats ...");

				// CLEAR THE GRID

				grd_company_stats.Visible = false;
				grd_company_stats.Clear();

				// SET A STATIC NUMBER OF ROWS AND COLUMNS
				grd_company_stats.RowsCount = 2;
				grd_company_stats.ColumnsCount = 8;
				grd_company_stats.FixedRows = 1;

				// BUILD THE TOP ROW HEADINGS
				grd_company_stats.CurrentRowIndex = 0;

				grd_company_stats.CurrentColumnIndex = 0;
				grd_company_stats.SetColumnWidth(0, 67);
				grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "Product";

				grd_company_stats.CurrentColumnIndex = 1;
				grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "Tot Refs";

				grd_company_stats.CurrentColumnIndex = 2;
				grd_company_stats.SetColumnWidth(2, 67);
				grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "Owner Full";

				grd_company_stats.CurrentColumnIndex = 3;
				grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "Oper Full";
				grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_stats.SetColumnWidth(3, 67);

				grd_company_stats.CurrentColumnIndex = 4;
				grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "Owner Share";
				grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_stats.SetColumnWidth(4, 73);

				grd_company_stats.CurrentColumnIndex = 5;
				grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "Oper Share";
				grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_stats.SetColumnWidth(5, 73);

				grd_company_stats.CurrentColumnIndex = 6;
				grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "Owner Frac";
				grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_stats.SetColumnWidth(6, 67);
				grd_company_stats.CurrentColumnIndex = 7;
				grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "Oper Frac";
				grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_stats.SetColumnWidth(7, 67);

				// SELECT THE STATISTICS FROM THE COMPANY AIRCRAFT COUNT TABLE
				Query = "SELECT DISTINCT cac_product_type, cac_total_referenced, cac_fullsale_owner, cac_fullsale_operator, cac_sharesale_owner,";
				Query = $"{Query} cac_sharesale_operator, cac_fractionsale_owner, cac_fractionsale_operator FROM Company_Aircraft_Count WITH(NOLOCK) WHERE cac_comp_id = {nReference_CompanyID.ToString()}";
				Query = $"{Query} AND cac_journ_id = {nReference_CompanyJID.ToString()} ORDER by cac_product_type";

				ado_Stats = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(ado_Stats.Fields) && !(ado_Stats.BOF && ado_Stats.EOF))
				{

					grd_company_stats.CurrentRowIndex = 1;


					while(!ado_Stats.EOF)
					{

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Stats["cac_product_type"]))
						{
							if (Convert.ToString(ado_Stats["cac_product_type"]).Trim() != modGlobalVars.cEmptyString)
							{
								sProdtype = Convert.ToString(ado_Stats["cac_product_type"]).Trim().ToUpper();
							}
						}

						if (sProdtype == modGlobalVars.cEmptyString)
						{
							sProdtype = "B";
						}

						grd_company_stats.CurrentColumnIndex = 0;

						switch(sProdtype)
						{
							case "B" : 
								grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "Business"; 
								if (Conversion.Val(Convert.ToString(ado_Stats["cac_total_referenced"])) > 0)
								{
									bCompany_BusorHel_Records = true;
								} 
								break;
							case "C" : 
								grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "Commerical"; 
								if (Conversion.Val(Convert.ToString(ado_Stats["cac_total_referenced"])) > 0)
								{
									bCompany_Commercial_Records = true;
								} 
								break;
							case "H" : 
								grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "Helicopter"; 
								if (Conversion.Val(Convert.ToString(ado_Stats["cac_total_referenced"])) > 0)
								{
									bCompany_BusorHel_Records = true;
								} 
								break;
							case "R" : 
								grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "Regional"; 
								break;
							case "P" : 
								grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "AirBP"; 
								break;
						}

						// FILL IN THE WHOLE OWNER TOTAL
						grd_company_stats.CurrentColumnIndex = 1;
						grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "0";
						grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Stats["cac_total_referenced"]))
						{
							if (Conversion.Val(Convert.ToString(ado_Stats["cac_total_referenced"])) > 0)
							{
								grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = Convert.ToString(ado_Stats["cac_total_referenced"]);
							}
						}

						// FILL IN THE WHOLE Owner TOTAL
						grd_company_stats.CurrentColumnIndex = 2;
						grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "0";
						grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Stats["cac_fullsale_owner"]))
						{
							if (Conversion.Val(Convert.ToString(ado_Stats["cac_fullsale_owner"])) > 0)
							{
								grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = Convert.ToString(ado_Stats["cac_fullsale_owner"]);
							}
						}

						// FILL IN THE WHOLE OPERATOR TOTAL
						grd_company_stats.CurrentColumnIndex = 3;
						grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "0";
						grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Stats["cac_fullsale_operator"]))
						{
							if (Conversion.Val(Convert.ToString(ado_Stats["cac_fullsale_operator"])) > 0)
							{
								grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = Convert.ToString(ado_Stats["cac_fullsale_operator"]);
							}
						}

						// FILL IN THE SHARE OWNER TOTAL
						grd_company_stats.CurrentColumnIndex = 4;
						grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "0.00";
						grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Stats["cac_sharesale_owner"]))
						{
							if (Conversion.Val(Convert.ToString(ado_Stats["cac_sharesale_owner"])) > 0)
							{
								grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = Strings.FormatNumber(ado_Stats["cac_sharesale_owner"], 2, TriState.True, TriState.False, TriState.True);
							}
						}

						// FILL IN THE SHARE OPERATOR TOTAL
						grd_company_stats.CurrentColumnIndex = 5;
						grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "0.00";
						grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Stats["cac_sharesale_operator"]))
						{
							if (Conversion.Val(Convert.ToString(ado_Stats["cac_sharesale_operator"])) > 0)
							{
								grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = Strings.FormatNumber(ado_Stats["cac_sharesale_operator"], 2, TriState.True, TriState.False, TriState.True);
							}
						}

						// FILL IN THE frac OWNER TOTAL
						grd_company_stats.CurrentColumnIndex = 6;
						grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "0.00";
						grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Stats["cac_fractionsale_owner"]))
						{
							if (Conversion.Val(Convert.ToString(ado_Stats["cac_fractionsale_owner"])) > 0)
							{
								grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = Strings.FormatNumber(ado_Stats["cac_fractionsale_owner"], 2, TriState.True, TriState.False, TriState.True);
							}
						}

						// FILL IN THE frac OPERATOR TOTAL
						grd_company_stats.CurrentColumnIndex = 7;
						grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "0.00";
						grd_company_stats.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Stats["cac_fractionsale_operator"]))
						{
							if (Conversion.Val(Convert.ToString(ado_Stats["cac_fractionsale_operator"])) > 0)
							{
								grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = Strings.FormatNumber(ado_Stats["cac_fractionsale_operator"], 2, TriState.True, TriState.False, TriState.True);
							}
						}

						grd_company_stats.RowsCount++;
						grd_company_stats.CurrentRowIndex++;

						ado_Stats.MoveNext();

					};

					grd_company_stats.RowsCount--;
					grd_company_stats.CurrentRowIndex = 1;
					grd_company_stats.CurrentColumnIndex = 0;

					ado_Stats.Close();

				}
				else
				{

					grd_company_stats.CurrentRowIndex = 1;
					grd_company_stats.CurrentColumnIndex = 1;
					grd_company_stats[grd_company_stats.CurrentRowIndex, grd_company_stats.CurrentColumnIndex].Value = "No Company Stats Found";
					grd_company_stats.Enabled = false;

				}

				grd_company_stats.Visible = true;
				grd_company_stats.Enabled = true;
				grd_company_stats.Redraw = true;

				ado_Stats = null;

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_stats_grid_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		public void fill_expired_leases_grid()
		{

			//Function used to fill the Expired Aircraft Leases Grid

			try
			{

				string Query = "";
				Query = modGlobalVars.cEmptyString;
				string cellcolor = "";
				cellcolor = modGlobalVars.cEmptyString;
				ADORecordSetHelper ado_ExpLease = null;

				search_on("Getting Expired Leases....");
				cellcolor = modAdminCommon.HeadingColor;

				lbl_comp[LEASE_COUNT_INDEX].Text = modGlobalVars.cEmptyString;

				grd_company_expired_leases.Visible = false;
				grd_company_expired_leases.Enabled = false;

				grd_company_expired_leases.Clear();
				grd_company_expired_leases.ColumnsCount = 7;
				grd_company_expired_leases.RowsCount = 2;

				grd_company_expired_leases.FixedRows = 1;
				grd_company_expired_leases.FixedColumns = 0;

				grd_company_expired_leases.CurrentRowIndex = 0;
				grd_company_expired_leases.CurrentColumnIndex = 0;
				grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_expired_leases.SetColumnWidth(grd_company_expired_leases.CurrentColumnIndex, 187);
				grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = "Make/Model ";
				grd_company_expired_leases.CurrentColumnIndex = 1;
				grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_expired_leases.SetColumnWidth(grd_company_expired_leases.CurrentColumnIndex, 67);
				grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = "Serial #";
				grd_company_expired_leases.CurrentColumnIndex = 2;
				grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_expired_leases.SetColumnWidth(grd_company_expired_leases.CurrentColumnIndex, 87);
				grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = "Type";
				grd_company_expired_leases.CurrentColumnIndex = 3;
				grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_expired_leases.SetColumnWidth(grd_company_expired_leases.CurrentColumnIndex, 57);
				grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = "Term";
				grd_company_expired_leases.CurrentColumnIndex = 4;
				grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_expired_leases.SetColumnWidth(grd_company_expired_leases.CurrentColumnIndex, 100);
				grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = "Exp. Date";
				grd_company_expired_leases.CurrentColumnIndex = 5;
				grd_company_expired_leases.CellAlignment = DataGridViewContentAlignment.MiddleCenter;
				grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_expired_leases.SetColumnWidth(grd_company_expired_leases.CurrentColumnIndex, 23);
				grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = "%";
				grd_company_expired_leases.CurrentColumnIndex = 6;
				grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
				grd_company_expired_leases.SetColumnWidth(grd_company_expired_leases.CurrentColumnIndex, 480);
				grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = "Notes";

				Query = "SELECT L.aclease_type, L.aclease_term, L.aclease_expiration_date, L.aclease_percentage, L.aclease_note, a.ac_ser_no, a.ac_id,comp_id,c.comp_journ_id,c.comp_name,a.ac_amod_id ";
				Query = $"{Query}From Aircraft_Lease as L WITH(NOLOCK), Aircraft as A WITH(NOLOCK), Aircraft_Reference as R WITH(NOLOCK), Company as C WITH(NOLOCK) ";
				Query = $"{Query} Where (L.aclease_expiration_date <='{DateTime.Now.ToString("d")}' Or L.aclease_expiration_date Is Null)";
				Query = $"{Query} and (c.comp_ID={nReference_CompanyID.ToString()}) and (c.comp_journ_id={nReference_CompanyJID.ToString()})";
				Query = $"{Query} and (a.ac_id=L.aclease_ac_id and a.ac_journ_id=0) and L.aclease_expired <> 'Y'";
				Query = $"{Query} and (a.ac_id=r.cref_ac_id and a.ac_journ_id=r.cref_journ_id) and (r.cref_primary_poc_flag='Y' or r.cref_primary_poc_flag='X')";
				Query = $"{Query} and (c.comp_id=R.cref_comp_id and c.comp_journ_id=r.cref_journ_id)";
				Query = $"{Query} Order BY L.aclease_expiration_date ";

				cellcolor = modAdminCommon.NoColor;

				ado_ExpLease = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(ado_ExpLease.Fields) && !(ado_ExpLease.BOF && ado_ExpLease.EOF))
				{

					grd_company_expired_leases.CurrentRowIndex = 1;


					while(!ado_ExpLease.EOF)
					{

						grd_company_expired_leases.CurrentColumnIndex = 0;
						grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = modCompany.get_make_model(Convert.ToInt32(ado_ExpLease["ac_amod_id"]));

						grd_company_expired_leases.CurrentColumnIndex = 1;
						grd_company_expired_leases.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
						grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ExpLease["ac_ser_no"]))
						{
							if (Convert.ToString(ado_ExpLease["ac_ser_no"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = Convert.ToString(ado_ExpLease["ac_ser_no"]).Trim();
							}
						}

						grd_company_expired_leases.CurrentColumnIndex = 2;
						grd_company_expired_leases.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
						grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ExpLease["aclease_type"]))
						{
							if (Convert.ToString(ado_ExpLease["aclease_type"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = Convert.ToString(ado_ExpLease["aclease_type"]).Trim();
							}
						}

						grd_company_expired_leases.CurrentColumnIndex = 3;
						grd_company_expired_leases.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
						grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ExpLease["aclease_term"]))
						{
							if (Convert.ToString(ado_ExpLease["aclease_term"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = Convert.ToString(ado_ExpLease["aclease_term"]).Trim();
							}
						}

						grd_company_expired_leases.CurrentColumnIndex = 4;
						grd_company_expired_leases.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
						grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ExpLease["aclease_expiration_date"]))
						{
							if (Convert.ToString(ado_ExpLease["aclease_expiration_date"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = Convert.ToString(ado_ExpLease["aclease_expiration_date"]).Trim();
							}
						}

						grd_company_expired_leases.CurrentColumnIndex = 5;
						grd_company_expired_leases.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
						grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ExpLease["aclease_percentage"]))
						{
							if (Convert.ToString(ado_ExpLease["aclease_percentage"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = Convert.ToString(ado_ExpLease["aclease_percentage"]).Trim();
							}
						}

						grd_company_expired_leases.CurrentColumnIndex = 6;
						grd_company_expired_leases.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
						grd_company_expired_leases.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ExpLease["aclease_note"]))
						{
							if (Convert.ToString(ado_ExpLease["aclease_note"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = Convert.ToString(ado_ExpLease["aclease_note"]).Trim();
							}
						}

						grd_company_expired_leases.set_RowData(grd_company_expired_leases.CurrentRowIndex, Convert.ToInt32(ado_ExpLease["ac_id"]));

						grd_company_expired_leases.RowsCount++;
						grd_company_expired_leases.CurrentRowIndex++;

						ado_ExpLease.MoveNext();

					};

					grd_company_expired_leases.RowsCount--;
					grd_company_expired_leases.CurrentRowIndex = 1;
					grd_company_expired_leases.Enabled = true;
					ado_ExpLease.Close();

					lbl_comp[LEASE_COUNT_INDEX].Text = (grd_company_expired_leases.RowsCount - 1).ToString();

				}
				else
				{

					grd_company_expired_leases.CurrentRowIndex = 1;
					grd_company_expired_leases.CurrentColumnIndex = 0;
					grd_company_expired_leases[grd_company_expired_leases.CurrentRowIndex, grd_company_expired_leases.CurrentColumnIndex].Value = "No Expired Leases Found";
					grd_company_expired_leases.Enabled = false;

				}

				grd_company_expired_leases.Visible = true;
				grd_company_expired_leases.Redraw = true;

				ado_ExpLease = null;

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_expired_leases_grid_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}


		public object set_yacht_verify_date(object yacht_id)
		{

			string Query = modGlobalVars.cEmptyString;
			ADORecordSetHelper ado_Yacht = null;
			string strToday = DateTime.Now.ToString("d");
			StringBuilder temp_subject = new StringBuilder();
			string market_change = "";

			int time_frame_days = 84; // 8 weeks times 7 days = 56 days
			bool is_available = false;

			//UPGRADE_WARNING: (1068) yacht_id of type Variant is being forced to double. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			if (Convert.ToDouble(yacht_id) > 0)
			{

				Query = " select yt_forsale_flag, yt_for_charter_flag, yt_for_lease_flag, yt_yacht_name, yt_forsale_status ";
				Query = $"{Query}, comp_name, yt_hull_mfr_nbr ";
				Query = $"{Query} from yacht ";
				Query = $"{Query} inner join Yacht_Model on ym_model_id = yt_model_id ";
				Query = $"{Query} left outer join Company on comp_journ_id = 0 and comp_id = ym_mfr_comp_id ";
				//UPGRADE_WARNING: (1068) yacht_id of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				Query = $"{Query} where yt_id = {Convert.ToString(yacht_id)}  and yt_journ_id = 0 ";


				ado_Yacht = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(ado_Yacht.Fields) && !(ado_Yacht.BOF && ado_Yacht.EOF))
				{


					while(!ado_Yacht.EOF)
					{

						if (Convert.ToString(ado_Yacht["yt_forsale_flag"]).Trim() == "Y" || Convert.ToString(ado_Yacht["yt_for_lease_flag"]).Trim() == "Y" || Convert.ToString(ado_Yacht["yt_for_charter_flag"]).Trim() == "Y")
						{
							is_available = true;
						}


						if (Convert.ToString(ado_Yacht["yt_forsale_flag"]).Trim() == "Y" && Convert.ToString(ado_Yacht["yt_for_lease_flag"]).Trim() == "Y" && Convert.ToString(ado_Yacht["yt_for_charter_flag"]).Trim() == "Y")
						{
							market_change = "For Sale/Lease/Charter";
						}
						else if (Convert.ToString(ado_Yacht["yt_forsale_flag"]).Trim() == "Y" && Convert.ToString(ado_Yacht["yt_for_lease_flag"]).Trim() == "Y" && Convert.ToString(ado_Yacht["yt_for_charter_flag"]).Trim() == "N")
						{ 
							market_change = "For Sale/Lease";
						}
						else if (Convert.ToString(ado_Yacht["yt_forsale_flag"]).Trim() == "Y" && Convert.ToString(ado_Yacht["yt_for_lease_flag"]).Trim() == "N" && Convert.ToString(ado_Yacht["yt_for_charter_flag"]).Trim() == "Y")
						{ 
							market_change = "For Sale/Charter";
						}
						else if (Convert.ToString(ado_Yacht["yt_forsale_flag"]).Trim() == "N" && Convert.ToString(ado_Yacht["yt_for_lease_flag"]).Trim() == "Y" && Convert.ToString(ado_Yacht["yt_for_charter_flag"]).Trim() == "Y")
						{ 
							market_change = "For Lease/Charter";
						}
						else if (Convert.ToString(ado_Yacht["yt_forsale_flag"]).Trim() == "Y")
						{ 
							market_change = "For Sale";
						}
						else if (Convert.ToString(ado_Yacht["yt_for_lease_flag"]).Trim() == "Y")
						{ 
							market_change = "For Lease";
						}
						else if (Convert.ToString(ado_Yacht["yt_for_charter_flag"]).Trim() == "Y")
						{ 
							market_change = "For Charter";
						}
						else
						{
							market_change = "Not Available";
						}


						temp_subject = new StringBuilder("Verified Status as ");
						//If Trim(ado_Yacht("yt_forsale_status")) <> "" Then
						//    temp_subject = temp_subject & ado_Yacht("yt_forsale_status") & " "
						//End If
						temp_subject.Append($"{market_change} -> XCONTACTX");
						temp_subject.Append($" - Yacht {Convert.ToString(ado_Yacht["yt_yacht_name"]).Trim()}/");

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["comp_name"]))
						{
							temp_subject.Append(Convert.ToString(ado_Yacht["comp_name"]).Trim());
						}

						temp_subject.Append(", ");

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["yt_hull_mfr_nbr"]))
						{
							temp_subject.Append(Convert.ToString(ado_Yacht["yt_hull_mfr_nbr"]).Trim());
						}

						ado_Yacht.MoveNext();
					};

				}

				// SET THE YACHT CALLBACK DATES
				// MODIFIED BY RTW ON 12/23/2015 PER JACKIE - WERE 56 AND 182,
				if (is_available)
				{
					time_frame_days = 84;
				}
				else
				{
					time_frame_days = 182;
				}
				ado_Yacht.Close();




				//------------------------LAUNCH VERIFY CODE-----------------------------

				//UPGRADE_ISSUE: (2064) Threed.SSPanel property pnl_verify_aircraft_status.Caption was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				pnl_verify_aircraft_status.setCaption("Verify Yacht Status:");
				pnl_verify_aircraft_status.Visible = true;
				pnl_verify_aircraft_status.BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes

				frame_verify_pnl.Visible = false;

				cbo_verify_journal_subject.Visible = false;
				cbo_verify_aircraft.Visible = false;
				cbo_verify_note_type.Visible = false;

				chk_verify_contact.Visible = false;
				chk_verify_contact.CheckState = CheckState.Checked;

				opt_verify_aircraft[modGlobalVars.opt_verify_ac_NONE].Visible = false;
				opt_verify_aircraft[modGlobalVars.opt_verify_ac_ONE].Visible = false;
				opt_verify_aircraft[modGlobalVars.opt_verify_ac_ALL].Visible = false;
				opt_verify_aircraft[modGlobalVars.opt_verify_ac_PRIMARY].Visible = false;

				lbl_comp[VERIFY_NOTETYPE_INDEX].Visible = false;
				lbl_comp[VERIFY_ACLABEL_INDEX].Visible = false;
				lbl_comp[VERIFY_NOTELABEL_INDEX].Visible = false;
				lbl_comp[VERIFY_STATUS_INDEX].Visible = false;

				Shape1[0].Visible = false;
				Shape1[2].Visible = false;

				Shape1[1].Visible = true;
				lbl_comp[VERIFY_CONTACTLABEL_INDEX].Text = "Please Select A Contact To Verify Status:";
				lbl_comp[VERIFY_CONTACTLABEL_INDEX].Visible = true;

				sVerifyAircraftStatus = ("").ToUpper(); //in_sVerifyWhat

				modCompany.fill_verify_contact_list(nReference_CompanyID, nReference_CompanyJID, nSelectedContactID, cbo_verify_other_contacts);


				cbo_verify_other_contacts.Refresh();
				cbo_verify_other_contacts.Focus();
				cmd_verify_status_save.Visible = false;

				//---------------------------------------------------------------------------

				//  Call MsgBox("Please Select a Contact then Hit Enter", vbOKOnly)


				Query = $" Update Yacht set yt_next_call_date = '{DateTimeHelper.ToString(DateTime.Today.AddDays(time_frame_days))}' ";
				Query = $"{Query},  yt_last_call_date = '{DateTimeHelper.ToString(DateTime.Today.AddDays(0))}'"; // added in as today, MSW 2/16/16
				//UPGRADE_WARNING: (1068) yacht_id of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				Query = $"{Query} where yt_id = {Convert.ToString(yacht_id)}";

				modAdminCommon.ADO_Transaction("BeginTrans");

				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();

				modAdminCommon.ADO_Transaction("CommitTrans");

				cmd_verify_yacht[2].Visible = true;
				if (lbl_comp[49].Text.Trim() == "Add Note:")
				{
					lbl_comp[49].Text = "";
				}
				lbl_comp[49].Text = $"{lbl_comp[49].Text}{temp_subject.ToString()}XXX";

			}


			return null;
		}

		private object update_cb_date(int days)
		{

			string Query = "";
			ADORecordSetHelper adoPrimaryCallback = null;
			System.DateTime NextVerifyDate = DateTime.FromOADate(0);
			System.DateTime temp_date = DateTime.FromOADate(0);

			if (nReference_CompanyID > 0)
			{


				if (days == 0)
				{

					if (cbo_comp_govsub_code.Text.Trim() != modGlobalVars.cEmptyString)
					{

						switch(cbo_comp_govsub_code.Text.Trim().Substring(0, Math.Min(1, cbo_comp_govsub_code.Text.Trim().Length)).ToUpper())
						{
							case "F" : 
								temp_date = DateTime.Today.AddDays(365); 
								break;
							default:
								temp_date = DateTime.Today.AddDays(182); 
								break;
						}
						// adding in MSW - if the current date that is on the label, that was entered manually, is farther out then the typical
						// if its a governemnt type, then allow it, if shorter, then override
						if (DateTime.Parse(lbl_comp[COMP_CALLBACK_DATE_INDEX].Text) > temp_date)
						{
							Query = $"UPDATE Company SET comp_account_callback_date = '{lbl_comp[COMP_CALLBACK_DATE_INDEX].Text.Trim()}'";
							Query = $"{Query} WHERE comp_id = {nReference_CompanyID.ToString()} AND comp_journ_id = 0";

							modAdminCommon.ADO_Transaction("BeginTrans");
							DbCommand TempCommand = null;
							TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
							TempCommand.CommandText = Query;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
							TempCommand.ExecuteNonQuery();
							modAdminCommon.ADO_Transaction("CommitTrans");
							search_on("Updating Company Callback Date....");
						}
						else
						{
							Query = $"EXEC HomebaseUpdateCompanyCallbackDate {nReference_CompanyID.ToString()}";

							modAdminCommon.ADO_Transaction("BeginTrans");

							DbCommand TempCommand_2 = null;
							TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
							TempCommand_2.CommandText = Query;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
							TempCommand_2.ExecuteNonQuery();

							modAdminCommon.ADO_Transaction("CommitTrans");
						}

					}
					else
					{
						search_on("Updating Company Callback Date....");

						Query = $"EXEC HomebaseUpdateCompanyCallbackDate {nReference_CompanyID.ToString()}";

						modAdminCommon.ADO_Transaction("BeginTrans");

						DbCommand TempCommand_3 = null;
						TempCommand_3 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_3);
						TempCommand_3.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_3.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_3);
						TempCommand_3.ExecuteNonQuery();

						modAdminCommon.ADO_Transaction("CommitTrans");
					}


				}
				else
				{


					NextVerifyDate = DateTime.Today.AddDays(days);


					Query = $"UPDATE Company SET comp_account_callback_date = '{DateTimeHelper.ToString(NextVerifyDate).Trim()}'";
					Query = $"{Query} WHERE comp_id = {nReference_CompanyID.ToString()} AND comp_journ_id = 0";

					modAdminCommon.ADO_Transaction("BeginTrans");
					DbCommand TempCommand_4 = null;
					TempCommand_4 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_4);
					TempCommand_4.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_4.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_4);
					TempCommand_4.ExecuteNonQuery();
					modAdminCommon.ADO_Transaction("CommitTrans");

				}



				Query = $"SELECT comp_account_callback_date FROM Company with(NOLOCK) WHERE comp_id={nReference_CompanyID.ToString()}";
				Query = $"{Query} AND comp_journ_id={nReference_CompanyJID.ToString()}";

				adoPrimaryCallback = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				if (!(adoPrimaryCallback.EOF && adoPrimaryCallback.BOF))
				{
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(adoPrimaryCallback["comp_account_callback_date"]))
					{
						if (Information.IsDate(adoPrimaryCallback["comp_account_callback_date"]))
						{
							lbl_comp[COMP_CALLBACK_DATE_INDEX].Text = Convert.ToDateTime(adoPrimaryCallback["comp_account_callback_date"]).ToString("d");
							cal_comp_callback_date.SetDate(DateTime.Parse(Convert.ToString(adoPrimaryCallback["comp_account_callback_date"])));
							// txt_comp_account_callback_date.Text = FormatDateTime(adoPrimaryCallback("comp_account_callback_date").Value, vbShortDate)
							exit_company_info.s_comp_account_callback_date = DateTime.Parse(lbl_comp[COMP_CALLBACK_DATE_INDEX].Text.Trim()).ToString("d");
							enter_company_info.s_comp_account_callback_date = DateTime.Parse(lbl_comp[COMP_CALLBACK_DATE_INDEX].Text.Trim()).ToString("d");
						}
					}

					adoPrimaryCallback.Close();

				}

				adoPrimaryCallback = null;

			}

			search_off();

			if (mvHasFocus)
			{
				mvHasFocus = false;
			}



			return null;
		}

		private void btn_array_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.btn_array, eventSender);
			// CHANGED INTO ARRAY OF BUTTONS TO MAKE MORE ROOM ON THE FORM - MSW - 9-18-17


			StringBuilder Query = new StringBuilder();
			frm_CompanyContact new_frm_CompanyContact = null;
			if (Index == 0)
			{

				// CONFIRM BUTTON CODE
				try
				{

					search_on("Confirming all Selected Contact Info....");

					confirm_contact_field("contact_title");
					confirm_contact_field("contact_email");
					confirm_contact_field("contact_name");
					confirm_all_contact_phone_numbers();

					if (mvHasFocus)
					{
						mvHasFocus = false;
					}

					search_off();

					return;
				}
				catch (System.Exception excep)
				{

					//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
					modAdminCommon.Report_Error($"cmd_contact_confirm_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

					if (mvHasFocus)
					{
						mvHasFocus = false;
					}

					search_off();
				}
			}
			else if (Index == 1)
			{ 


				// EDIT BUTTON CODE
				try
				{

					grd_company_contacts_doubleClickBodyCode();

					if (mvHasFocus)
					{
						mvHasFocus = false;
					}

					return;
				}
				catch (System.Exception excep)
				{

					//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
					modAdminCommon.Report_Error($"cmd_contact_edit_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

					if (mvHasFocus)
					{
						mvHasFocus = false;
					}

					search_off();
				}
			}
			else if (Index == 2)
			{ 

				// SAVE SEQ CODE

				try
				{

					if (Convert.ToString(grd_company_contacts[1, 2].Value).Trim().ToLower() != ("No Contacts Found").ToLower())
					{

						search_on("Saving Contact Sequence ....");

						modAdminCommon.ADO_Transaction("BeginTrans");

						int tempForEndVar = grd_company_contacts.RowsCount - 1;
						for (int i = 1; i <= tempForEndVar; i++)
						{

							Query = new StringBuilder($"UPDATE Contact SET contact_acpros_seq_no = {i.ToString()}, contact_action_date = NULL");
							Query.Append($" WHERE contact_id = {grd_company_contacts.get_RowData(i).ToString()}");
							Query.Append($" AND contact_journ_id = {nReference_CompanyJID.ToString()}");

							DbCommand TempCommand = null;
							TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
							TempCommand.CommandText = Query.ToString();
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
							TempCommand.ExecuteNonQuery();

						}

						modAdminCommon.ADO_Transaction("CommitTrans");

						fill_company_contact_grid();

						search_off();

					}

					if (mvHasFocus)
					{
						mvHasFocus = false;
					}

					return;
				}
				catch (System.Exception excep)
				{

					//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
					modAdminCommon.Report_Error($"cmd_contact_save_seq_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

					if (mvHasFocus)
					{
						mvHasFocus = false;
					}

					modAdminCommon.ADO_Transaction("RollbackTrans");

					search_off();
				}
			}
			else if (Index == 3)
			{ 

				new_frm_CompanyContact = frm_CompanyContact.CreateInstance();

				try
				{

					clear_contact_controls();

					new_frm_CompanyContact.nContactID = -1;
					new_frm_CompanyContact.nCompanyID = nReference_CompanyID;
					new_frm_CompanyContact.nJournID = nReference_CompanyJID;
					new_frm_CompanyContact.CompanyName_Renamed = modCommon.GetCompanyName(nReference_CompanyID, nReference_CompanyJID);
					new_frm_CompanyContact.ServicesUsed = modCommon.GetCompanyServiceName(nReference_CompanyID, nReference_CompanyJID, modGlobalVars.ServicesUsed_Array);
					new_frm_CompanyContact.Add_Office_Number = false;
					new_frm_CompanyContact.chk_hidden_comp.CheckState = chk_company_flag[1].CheckState;

					// COMMENTED OUT MSW - 5/28/20 - per lee request
					//        If company_has_office = True Then
					//            If MsgBox("Would you like to Automatically Add the Company Office Number?", vbYesNo) = vbYes Then
					//                new_frm_CompanyContact.Add_Office_Number = True
					//                new_frm_CompanyContact.country_code = country_code
					//                new_frm_CompanyContact.area_code = area_code
					//                new_frm_CompanyContact.prefix_code = prefix_code
					//               new_frm_CompanyContact.number_code = number_code
					//             End If
					//         End If

					this.Cursor = Cursors.WaitCursor;

					new_frm_CompanyContact.Top = Convert.ToInt32(mdi_ResearchAssistant.DefInstance.Top + ((mdi_ResearchAssistant.DefInstance.Height - new_frm_CompanyContact.Height) / 2d));
					new_frm_CompanyContact.Left = Convert.ToInt32(mdi_ResearchAssistant.DefInstance.Left + ((mdi_ResearchAssistant.DefInstance.Width - new_frm_CompanyContact.Width) / 2d)); // mdi_ResearchAssistant

					new_frm_CompanyContact.ShowDialog();

					new_frm_CompanyContact.Add_Office_Number = false;

					fill_company_contact_grid();

					if (enter_company_info.s_comp_fractowr_id > 0 && new_frm_CompanyContact.nContactID > 0)
					{
						if (enter_company_info.s_comp_fractowr_contact_id != new_frm_CompanyContact.nContactID)
						{
							modCompany.fill_fractional_owner_contact_list(nReference_CompanyID, nReference_CompanyJID, enter_company_info.s_comp_fractowr_id, cbo_comp_fractowr_contact_id);
						}
						else
						{
							modCompany.fill_fractional_owner_contact_list(nReference_CompanyID, nReference_CompanyJID, new_frm_CompanyContact.nContactID, cbo_comp_fractowr_contact_id);
						}
					}

					select_company_contact(new_frm_CompanyContact.nContactID);




					new_frm_CompanyContact = null;

					if (mvHasFocus)
					{
						mvHasFocus = false;
					}

					grd_company_contacts.Redraw = true;

					this.Activate();

					search_off();

					return;
				}
				catch (System.Exception excep)
				{

					//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
					modAdminCommon.Report_Error($"cmd_contact_add_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

					if (mvHasFocus)
					{
						mvHasFocus = false;
					}

					search_off();
				}
			}

		}

		//UPGRADE_WARNING: (2050) MSComCtl2.MonthView Event cal_comp_yacht_callback_date.DateClick was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2050
		private void cal_comp_yacht_callback_date_DateClick(System.DateTime DateClicked)
		{


			if (!bFormLoad)
			{

				if (lbl_comp[YACHT_CALLBACK_DATE_INDEX].Text.Trim() != modGlobalVars.cEmptyString)
				{

					if (!Information.IsDate(lbl_comp[YACHT_CALLBACK_DATE_INDEX].Text.Trim()))
					{
						bUser_Changed_Callback_Date = false;
					}
					else if ((cal_comp_yacht_callback_date.SelectionRange.Start.ToString("d") != DateTime.Parse(lbl_comp[YACHT_CALLBACK_DATE_INDEX].Text.Trim()).ToString("d")))
					{ 
						bUser_Changed_Callback_Date = true;
					}
					else
					{
						bUser_Changed_Callback_Date = false;
					}

					lbl_comp[YACHT_CALLBACK_DATE_INDEX].Text = cal_comp_yacht_callback_date.SelectionRange.Start.ToString("d");

				}

			}



		}

		private void cbo_amwant_model_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				int modelID = 0;
				int a_row = 0;

				if (!bFormLoad)
				{

					if (cbo_amwant_model.SelectedIndex > -1)
					{
						lbl_comp[WANT_MOD_BUILD_YR_INDEX].Text = $"{modGlobalVars.WantedModel_Array[cbo_amwant_model.SelectedIndex, modGlobalVars.WANTED_START].Trim()} -> {modGlobalVars.WantedModel_Array[cbo_amwant_model.SelectedIndex, modGlobalVars.WANTED_END].Trim()}";
					}
					else
					{
						lbl_comp[WANT_MOD_BUILD_YR_INDEX].Text = modGlobalVars.cEmptyString;
					}

					ToolTipMain.SetToolTip(cbo_amwant_model, cbo_amwant_model.Text);

				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cbo_amwant_model_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		private void cbo_comp_account_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cbo_comp_account, eventSender);

			if (Index == 3)
			{

				if (cbo_comp_account[3].Text.IndexOf('/') >= 0)
				{
					cbo_comp_account[4].Items.Clear();
					cbo_comp_account[4].AddItem(cbo_comp_account[3].Text.Substring(0, Math.Min(cbo_comp_account[3].Text.IndexOf('/'), cbo_comp_account[3].Text.Length)));
					cbo_comp_account[4].AddItem(cbo_comp_account[3].Text.Substring(Math.Max(cbo_comp_account[3].Text.Length - (Strings.Len(cbo_comp_account[3].Text) - (cbo_comp_account[3].Text.IndexOf('/') + 1)), 0)));
					cbo_comp_account[4].SelectedIndex = -1;
				}
				else
				{
					cbo_comp_account[4].Items.Clear();
					cbo_comp_account[4].AddItem(cbo_comp_account[3].Text);
				}

			}
			else if (Index == 4)
			{ 

				if (cbo_comp_account[4].Visible)
				{
					lbl_comp[100].Visible = true;
				}
			}
			else if (Index == 5)
			{ 

				if (cbo_comp_account[5].Text.Trim() == "Create New Financial Group")
				{
					txt_company_field[2].Visible = true;
					txt_company_field[2].Text = txt_comp_name.Text;
				}
				else
				{
					txt_company_field[2].Visible = false;
				}

				if (cbo_comp_account[5].Text.Trim() != "None Selected")
				{
					cmdCertCommand[5].Visible = true;
				}

			}

			cmd_relationship_buttons[4].Visible = true;

		}

		private void cbo_comp_purchase_question_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			int tmpCrefID = 0;
			string Query = "";

			try
			{

				if (!bFormLoad)
				{
					if (nRememberGridRow > 0 && bEdit_PurchQuest_Outstanding)
					{

						//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_aircraft.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						tmpCrefID = grd_company_aircraft.BandData(nRememberGridRow);

						if (cbo_comp_purchase_question.SelectedIndex < 0)
						{
							cbo_comp_purchase_question.SelectedIndex = 0;
						}

						Query = $"UPDATE Aircraft_Reference SET cref_purchase_question = {cbo_comp_purchase_question.GetItemData(cbo_comp_purchase_question.SelectedIndex).ToString()}";
						Query = $"{Query} WHERE cref_id = {tmpCrefID.ToString()}";

						modAdminCommon.ADO_Transaction("BeginTrans");

						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery();

						Query = $"UPDATE Aircraft SET ac_action_date = NULL WHERE ac_id = {grd_company_aircraft.get_RowData(nRememberGridRow).ToString()}";
						Query = $"{Query} AND ac_journ_id = {nReference_CompanyJID.ToString()}";

						DbCommand TempCommand_2 = null;
						TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
						TempCommand_2.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
						TempCommand_2.ExecuteNonQuery();

						modGridEditCommon.InPlace_Grid_Reset(grd_company_aircraft, cbo_comp_purchase_question, nRememberGridRow, nRememberGridCol);
						bEdit_PurchQuest_Outstanding = false;
						grd_company_aircraft.Redraw = true;

						modAdminCommon.ADO_Transaction("CommitTrans");

					}
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cbo_comp_purchase_question_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");

				return;
			}

		}

		private void cbo_order_by_SelectionChangeCommitted(Object eventSender, EventArgs eventArgs) => fill_company_contact_grid();



		private void cbo_related_company_contact_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				// cmd_company_contact_relation_save.Visible = True ' not  positive msw
				cmd_relationship_buttons[4].Visible = true;
				ToolTipMain.SetToolTip(cbo_related_company_contact, cbo_related_company_contact.Text);
			}

		}

		private void cbo_verify_journal_auto_subject_SelectionChangeCommitted(Object eventSender, EventArgs eventArgs)
		{

			if (cbo_verify_journal_auto_subject.Visible)
			{

				cbo_verify_journal_auto_subject.Enabled = false;
				cbo_verify_journal_subject.Text = cbo_verify_journal_auto_subject.Text;
				cbo_verify_journal_auto_subject.Enabled = true;

			}

		}

		private void cbo_verify_note_type_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			// ADDED IN MSW - if we had the box up there and cleared, then clear the text
			if (cbo_verify_journal_auto_subject.Visible)
			{
				cbo_verify_journal_subject.Text = "";
			}


			frm_marketing_note.Visible = false;
			lbl_comp[104].Visible = true;
			txt_market_note[3].Visible = true;
			opt_verify_aircraft[2].Visible = true;

			if (!bFormLoad && cbo_verify_note_type.SelectedIndex > -1)
			{

				opt_verify_aircraft[0].Visible = false;
				opt_verify_aircraft[1].Visible = false;
				opt_verify_aircraft[2].Visible = false;
				opt_verify_aircraft[3].Visible = false;
				opt_verify_aircraft[4].Visible = false;
				opt_verify_aircraft[5].Visible = false;
				lbl_comp[VERIFY_ACLABEL_INDEX].Visible = false;
				Shape1[2].Visible = false;
				// cbo_yachts.Visible = False
				frm_marketing_note.Visible = false;
				cbo_verify_journal_auto_subject.Visible = false;
				cbo_verify_journal_subject.Visible = true;

				if (cbo_verify_note_type.Text.Substring(0, Math.Min(2, cbo_verify_note_type.Text.Length)).Trim() == "MN")
				{
					frm_marketing_note.Visible = true;
					lbl_comp[104].Visible = false;
					txt_market_note[3].Visible = false;


					// changed to also add the subject into the description
					if (cbo_verify_journal_subject.Text.Trim() != "")
					{
						if (cbo_verify_journal_subject.Text.Trim() != "")
						{
							txt_marketing_notes.Text = cbo_verify_journal_subject.Text.Trim();
						}
					}

					if (txt_market_note[3].Text.Trim() != "")
					{
						if (cbo_verify_journal_subject.Text.Trim() != "")
						{
							txt_marketing_notes.Text = $"{txt_marketing_notes.Text} - ";
						}

						txt_marketing_notes.Text = $"{txt_marketing_notes.Text}{txt_market_note[3].Text.Trim()}";
					}
				}

				if (grd_company_aircraft.CurrentRowIndex > 0 && Convert.ToString(grd_company_aircraft[1, 3].Value).Trim().ToUpper() != ("No Aircraft Found").ToUpper() || (SSTabHelper.GetTabVisible(tab_company_details, 8)))
				{
					opt_verify_aircraft[0].Visible = true;
					// added in MSW - so that it doesnt re-select
					if (clicked_note_type == 0)
					{
						opt_verify_aircraft[0].Checked = true;
					}
					opt_verify_aircraft[1].Visible = true;
					opt_verify_aircraft[2].Visible = true;
					opt_verify_aircraft[3].Visible = true;
					opt_verify_aircraft[4].Visible = true;
					opt_verify_aircraft[5].Visible = true;
					lbl_comp[VERIFY_ACLABEL_INDEX].Visible = true;
					Shape1[2].Visible = true;
				}

				if (cbo_verify_note_type.Text.StartsWith("YN", StringComparison.Ordinal))
				{ // Yacht
					opt_verify_aircraft[0].Visible = true;
					// added in MSW - so that it doesnt re-select
					if (clicked_note_type == 0)
					{
						opt_verify_aircraft[0].Checked = true;
					}
					opt_verify_aircraft[1].Visible = true;
					opt_verify_aircraft[2].Visible = true;
					opt_verify_aircraft[3].Visible = true;
					opt_verify_aircraft[4].Visible = true;
					opt_verify_aircraft[5].Visible = true;
					lbl_comp[VERIFY_ACLABEL_INDEX].Visible = true;
					Shape1[2].Visible = true;
					cbo_yachts.Visible = true;
				} // If InStr(cbo_verify_note_type.Text, "Yacht") > 0 Then

				if (cbo_verify_note_type.Text.ToUpper().StartsWith("IQ", StringComparison.Ordinal))
				{
					modFillCompConControls.fill_journ_auto_subject_List(cbo_verify_journal_auto_subject, cbo_verify_note_type.Text);
					cbo_verify_journal_subject.Visible = false;
					cbo_verify_journal_auto_subject.Visible = true;
					cbo_verify_journal_auto_subject.Text = modGlobalVars.cEmptyString;
					if (cbo_verify_journal_subject.Text != modGlobalVars.cEmptyString)
					{
						cbo_verify_journal_auto_subject.Text = cbo_verify_journal_subject.Text;
					}
					cbo_verify_journal_subject.Text = modGlobalVars.cEmptyString;

				} // If left(cbo_verify_note_type.Text, 2) = "iQ" Then

				if (cbo_verify_note_type.Text.StartsWith("ID", StringComparison.Ordinal))
				{
					cbo_verify_journal_subject.Visible = false;
					cbo_verify_journal_auto_subject.Visible = true;
					modFillCompConControls.fill_journ_auto_subject_List(cbo_verify_journal_auto_subject, cbo_verify_note_type.Text);
				}

				if (cbo_verify_note_type.Text.StartsWith("REGCHK", StringComparison.Ordinal))
				{
					cbo_verify_journal_subject.Visible = false;
					cbo_verify_journal_auto_subject.Visible = true;
					modFillCompConControls.fill_journ_auto_subject_List(cbo_verify_journal_auto_subject, cbo_verify_note_type.Text);
				}

				if (cbo_verify_note_type.Text.StartsWith("PBNOTE", StringComparison.Ordinal))
				{
					cbo_verify_journal_subject.Visible = false;
					cbo_verify_journal_auto_subject.Visible = true;
					modFillCompConControls.fill_journ_auto_subject_List(cbo_verify_journal_auto_subject, cbo_verify_note_type.Text);
					cbo_verify_journal_auto_subject.SelectedIndex = 1;
				}

				if (cbo_verify_note_type.Text.StartsWith("RAAT", StringComparison.Ordinal))
				{
					cbo_verify_journal_subject.Visible = false;
					cbo_verify_journal_auto_subject.Visible = true;
					modFillCompConControls.fill_journ_auto_subject_List(cbo_verify_journal_auto_subject, cbo_verify_note_type.Text);
					cbo_verify_journal_auto_subject.SelectedIndex = 1;
				}

				// 09/27/2017 - By David D. Cruger; Added
				if (cbo_verify_note_type.Text.StartsWith("RADN", StringComparison.Ordinal))
				{
					cbo_verify_journal_subject.Visible = false;
					cbo_verify_journal_auto_subject.Visible = true;
					modFillCompConControls.fill_journ_auto_subject_List(cbo_verify_journal_auto_subject, cbo_verify_note_type.Text);
					cbo_verify_journal_auto_subject.SelectedIndex = 1;
				}

				if (cbo_verify_note_type.Text.StartsWith("DOCAT", StringComparison.Ordinal))
				{
					cbo_verify_journal_subject.Visible = false;
					cbo_verify_journal_auto_subject.Visible = true;
					modFillCompConControls.fill_journ_auto_subject_List(cbo_verify_journal_auto_subject, cbo_verify_note_type.Text);
					cbo_verify_journal_auto_subject.SelectedIndex = 1;
				}

				// 09/27/2017 - By David D. Cruger; Added
				if (cbo_verify_note_type.Text.StartsWith("RVEAT", StringComparison.Ordinal))
				{
					opt_verify_aircraft[2].Visible = false; // added MSW - 11/12/19
					cbo_verify_journal_subject.Visible = false;
					cbo_verify_journal_auto_subject.Visible = true;
					modFillCompConControls.fill_journ_auto_subject_List(cbo_verify_journal_auto_subject, cbo_verify_note_type.Text);
					cbo_verify_journal_auto_subject.SelectedIndex = 1;
				}


				if (cbo_verify_note_type.Text.StartsWith("SPEC", StringComparison.Ordinal))
				{
					cbo_verify_journal_subject.Visible = false;
					cbo_verify_journal_auto_subject.Visible = true;
					modFillCompConControls.fill_journ_auto_subject_List(cbo_verify_journal_auto_subject, cbo_verify_note_type.Text);
					cbo_verify_journal_auto_subject.SelectedIndex = 1;
				}


				//added MSW - 3/18/19
				if (cbo_verify_note_type.Text.StartsWith("MEMO", StringComparison.Ordinal))
				{
					opt_verify_aircraft[2].Visible = false;
					cbo_verify_journal_subject.Visible = false;
					cbo_verify_journal_auto_subject.Visible = true;
					modFillCompConControls.fill_journ_auto_subject_List(cbo_verify_journal_auto_subject, cbo_verify_note_type.Text);
					cbo_verify_journal_auto_subject.SelectedIndex = 1;
				}

				if (cbo_verify_note_type.Text.StartsWith("MN", StringComparison.Ordinal))
				{
					opt_verify_aircraft[2].Visible = false;
					cbo_verify_journal_subject.Visible = false;
					cbo_verify_journal_auto_subject.Visible = true;
					modFillCompConControls.fill_journ_auto_subject_List(cbo_verify_journal_auto_subject, cbo_verify_note_type.Text);
					cbo_verify_journal_auto_subject.SelectedIndex = 1;
				}

				if (cbo_verify_note_type.Text.StartsWith("CS", StringComparison.Ordinal))
				{
					opt_verify_aircraft[2].Visible = false;
					cbo_verify_journal_subject.Visible = false;
					cbo_verify_journal_auto_subject.Visible = true;
					modFillCompConControls.fill_journ_auto_subject_List(cbo_verify_journal_auto_subject, cbo_verify_note_type.Text);
					cbo_verify_journal_auto_subject.SelectedIndex = 1;
				}


				ToolTipMain.SetToolTip(cbo_verify_note_type, cbo_verify_note_type.Text);

			} // If bFormLoad = False And cbo_verify_note_type.ListIndex > -1 Then

		}

		private void cbo_verify_other_contacts_SelectionChangeCommitted(Object eventSender, EventArgs eventArgs)
		{

			frm_CompanyContact new_frm_CompanyContact = frm_CompanyContact.CreateInstance();

			try
			{

				if (!bFormLoad && !bIsClearCompanyData && cbo_verify_other_contacts.SelectedIndex != -1)
				{

					if (cbo_verify_other_contacts.GetItemData(cbo_verify_other_contacts.SelectedIndex) == 0)
					{ // selected add new contact

						clear_contact_controls();

						new_frm_CompanyContact.nContactID = -1;
						new_frm_CompanyContact.nJournID = nReference_CompanyJID;
						new_frm_CompanyContact.nCompanyID = nReference_CompanyID;
						new_frm_CompanyContact.CompanyName_Renamed = modCommon.GetCompanyName(nReference_CompanyID, nReference_CompanyJID);
						new_frm_CompanyContact.ServicesUsed = modCommon.GetCompanyServiceName(nReference_CompanyID, nReference_CompanyJID, modGlobalVars.ServicesUsed_Array);

						this.Cursor = Cursors.WaitCursor;

						new_frm_CompanyContact.Top = Convert.ToInt32(mdi_ResearchAssistant.DefInstance.Top + ((mdi_ResearchAssistant.DefInstance.Height - new_frm_CompanyContact.Height) / 2d));
						new_frm_CompanyContact.Left = Convert.ToInt32(mdi_ResearchAssistant.DefInstance.Left + ((mdi_ResearchAssistant.DefInstance.Width - new_frm_CompanyContact.Width) / 2d)); // mdi_ResearchAssistant

						new_frm_CompanyContact.ShowDialog();

						fill_company_contact_grid();

						if (enter_company_info.s_comp_fractowr_id > 0 && new_frm_CompanyContact.nContactID > 0)
						{
							if (enter_company_info.s_comp_fractowr_contact_id != new_frm_CompanyContact.nContactID)
							{
								modCompany.fill_fractional_owner_contact_list(nReference_CompanyID, nReference_CompanyJID, enter_company_info.s_comp_fractowr_id, cbo_comp_fractowr_contact_id);
							}
							else
							{
								modCompany.fill_fractional_owner_contact_list(nReference_CompanyID, nReference_CompanyJID, new_frm_CompanyContact.nContactID, cbo_comp_fractowr_contact_id);
							}
						}

						modCompany.fill_verify_contact_list(nReference_CompanyID, nReference_CompanyJID, new_frm_CompanyContact.nContactID, cbo_verify_other_contacts);

						new_frm_CompanyContact = null;

						grd_company_contacts.Redraw = true;

						this.Activate();

						search_off();

					}

					ToolTipMain.SetToolTip(cbo_verify_other_contacts, cbo_verify_other_contacts.Text);

				} // If bFormLoad = False Then
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cbo_verify_other_contacts_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}


		public void fill_cert_category_drop_down(string selected_type, string re_load_box)
		{
			ADORecordSetHelper ado_cert_name = new ADORecordSetHelper();
			int CurRow = 0;
			int counter1 = 0;
			int row_selected = grd_company_cert.RowSel;
			int counter_for_selected = 0;

			string Query = " Select distinct ccerttype_category from Company_Certification_type WITH (NOLOCK) ";
			Query = $"{Query} where ccerttype_type = '{selected_type}' ";

			Query = $"{Query} order by ccerttype_category asc";

			ado_cert_name = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

			if (!(ado_cert_name.BOF && ado_cert_name.EOF))
			{

				cert_combo_drop_down[1].Items.Clear();


				while(!ado_cert_name.EOF)
				{

					cert_combo_drop_down[1].AddItem(Convert.ToString(ado_cert_name["ccerttype_category"]));
					counter_for_selected = counter1;
					counter1++;

					ado_cert_name.MoveNext();
				};

				if (counter_for_selected > -1)
				{
					cert_combo_drop_down[1].SelectedIndex = (counter_for_selected);
				}
				else
				{
					cert_combo_drop_down[1].SelectedIndex = 0;
				}

			}
			else
			{
			}

		}

		//UPGRADE_NOTE: (7001) The following declaration (cbo_yacht_contact_switch_Change) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cbo_yacht_contact_switch_Change(int Index)
		//{
			//
		//}

		private void cert_combo_drop_down_SelectionChangeCommitted(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cert_combo_drop_down, eventSender);


			if (Index == 0)
			{
				fill_cert_category_drop_down(cert_combo_drop_down[0].Text, "Y");

				cert_combo_drop_down[1].Visible = true;
			}

		}

		private void chk_amwant_date_is_verified_CheckStateChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				if (chk_amwant_date_is_verified.CheckState == CheckState.Checked)
				{
					if (save_wanted_info.save_amwant_id == -1)
					{
						txt_amwant_date_verified.Text = DateTime.Now.ToString("d");
						txt_amwant_date_verified.BackColor = NORMAL_TXT_BACKCOLOR;
					}
					else if (Information.IsDate(save_wanted_info.save_amwant_verified_date))
					{ 
						txt_amwant_date_verified.Text = DateTime.Parse(save_wanted_info.save_amwant_verified_date.Trim()).ToString("d");
					}
					else
					{
						txt_amwant_date_verified.Text = DateTime.Now.ToString("d");
						txt_amwant_date_verified.BackColor = NORMAL_TXT_BACKCOLOR;
					}

				}
				else
				{
					txt_amwant_date_verified.Text = modGlobalVars.cEmptyString;
					txt_amwant_date_verified.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.ConfirmColor)));
				}

			}

		}

		private void chk_array_CheckStateChanged(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.chk_array, eventSender);

			if (Index == 0)
			{
				if (!bFormLoad)
				{
					fill_company_contact_grid();
				}
			}

		}


		private void chk_company_flag_CheckStateChanged(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.chk_company_flag, eventSender);

			switch(Index)
			{
				case iCompActiveFlag : 
					chk_company_active_flag_Click(); 
					 
					break;
				case iCompHideFlag : 
					Application.DoEvents();  // Nothing Right Now 
					 
					break;
			} // Case Index

		} // chk_company_flag_Click

		private void chk_company_active_flag_Click()
		{
			string Query = "";

			if (!bFormLoad)
			{

				if (chk_company_flag[iCompActiveFlag].CheckState == CheckState.Checked && sCompanyActiveFlag == "Y")
				{ // keep an eye on this

					Query = "SELECT ac_id FROM Aircraft WITH(NOLOCK), Aircraft_Reference WITH(NOLOCK) WHERE cref_ac_id = ac_id";
					Query = $"{Query} AND cref_journ_id = ac_journ_id AND cref_journ_id = {nReference_CompanyJID.ToString()}";
					Query = $"{Query} AND cref_comp_id = {nReference_CompanyID.ToString()}";

					if (modAdminCommon.Exist(Query))
					{
						MessageBox.Show($"This company is attached to some aircraft in some way.{Environment.NewLine}{Environment.NewLine}You cannot make this company inactive at this time", "Company : Attached to other Aircraft", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
						chk_company_flag[iCompActiveFlag].CheckState = CheckState.Unchecked;
					} //Exist(Query)

					if (nReference_CompanyJID == 0)
					{

						Query = $"SELECT sub_id, sub_end_date FROM Subscription WITH(NOLOCK) WHERE (sub_comp_id = {nReference_CompanyID.ToString()})";
						Query = $"{Query} AND ((sub_end_date Is NULL) OR (sub_end_date > '{DateTime.Now.ToString("d")} 00:00:00'))";

						if (modAdminCommon.Exist(Query))
						{
							MessageBox.Show($"This Company has some Active Evolution Subscriptions Attached to it.{Environment.NewLine}{Environment.NewLine}You CAN NOT make this Company InActive at this time.", "Company : Active Subscriptions", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
							chk_company_flag[iCompActiveFlag].CheckState = CheckState.Unchecked;
							return;
						} // Exist(Query)
					} // nReference_CompanyJID = 0

					// ADDED IN MSW - 5/7/18
					fill_relationships_grid();
					if (has_other_companies_relationship)
					{
						MessageBox.Show($"This Company has some Other Company Relationships Attached to it.{Environment.NewLine}{Environment.NewLine}You CAN NOT make this Company InActive at this time.", "Company : Active Subscriptions", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
						chk_company_flag[iCompActiveFlag].CheckState = CheckState.Unchecked;
						return;
					}

				} // chk_company_flag(iCompActiveFlag).Value = vbChecked

			} // If bFormLoad = False Then

		} // chk_company_active_flag_Click

		private void chk_company_assign_flag_CheckStateChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				// added and gbl_journ_ID = 0 . if its historical, dont change
				if (chk_company_assign_flag.CheckState == CheckState.Checked && nReference_CompanyJID == 0)
				{
					select_automated_account_rep();
					cbo_comp_account[COMP_ACCOUNT_REP].Enabled = false;
				}
				else
				{
					cbo_comp_account[COMP_ACCOUNT_REP].Enabled = true;
				}

			} // If bFormLoad = False Then

		}

		private void chk_include_on_ac_pros_CheckStateChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				if ((chk_include_on_ac_pros.CheckState == CheckState.Unchecked) && (txt_comp_name.Text.Trim() != modGlobalVars.cEmptyString))
				{ // Remove From ACPros
					if (MessageBox.Show("Remove Company From ACPros?", "Company : Remove from ACPros", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.No)
					{
						chk_include_on_ac_pros.CheckState = CheckState.Checked;
					}
					else
					{
						modAdminCommon.Record_Event("Remove ACPros", "Removed Company From ACPros List");
					}
				}
			}

		}

		private void chk_internal_relation_CheckStateChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				if (nRememberGridRow > 0 && bChk_CompRelationInternal_Outstanding)
				{
					if (!modCompany.update_internal_flag(chk_internal_relation, grd_company_relationships.get_RowData(grd_company_relationships.CurrentRowIndex)))
					{
						MessageBox.Show("Update Internal : Failed", "Company : Internal Relation", MessageBoxButtons.OK, MessageBoxIcon.Information);
					}

					modGridEditCommon.InPlace_Grid_Reset(grd_company_relationships, chk_internal_relation, nRememberGridRow, nRememberGridCol);
					bChk_CompRelationInternal_Outstanding = false;
				}
			}

		}

		private void chk_limit_journal_list_CheckStateChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				fill_company_journal_grid(grd_company_journal);
			}

		}


		private void chk_verify_contact_CheckStateChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				if (chk_verify_contact.CheckState == CheckState.Checked)
				{
					cbo_verify_other_contacts.Visible = true;
					lbl_comp[VERIFY_CONTACT_INDEX].Visible = true;
				}
				else
				{
					cbo_verify_other_contacts.Visible = false;
					lbl_comp[VERIFY_CONTACT_INDEX].Visible = false;
				}
			}

		}

		private void chk_view_eu_CheckStateChanged(Object eventSender, EventArgs eventArgs) => fill_company_aircraft_grid();


		private void chkCompDoNotSendEMail_CheckStateChanged(Object eventSender, EventArgs eventArgs)
		{

			if (chkCompDoNotSendEMail.Enabled)
			{

				chkCompDoNotSendEMail.Enabled = false;


				CheckState switchVar = chkCompDoNotSendEMail.CheckState;
				// Add To Do Not Send EMail Table
				if (switchVar == CheckState.Checked)
				{

					if (MessageBox.Show($"Checking This Will Stop This Company From Receiving JETNET Mass EMails{Environment.NewLine}Are You Sure?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
					{
						chkCompDoNotSendEMail.CheckState = CheckState.Unchecked;
					}
					else
					{

						//---------------------------------
						// Is Contact On A Mailing List?
						if (modCommon.DLookUp("journ_id", "journal", $"(journ_subcategory_code LIKE 'ML%' AND journ_comp_id = {nReference_CompanyID.ToString()} AND journ_contact_id = 0)") != "")
						{
							MessageBox.Show($"This Company Is Also On A Mailing List{Environment.NewLine}Please Remember To Remove Them", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Information);
						}

					}

					// Remove From Do Not Send EMail Table
				}
				else if (switchVar == CheckState.Unchecked)
				{ 

					if (MessageBox.Show($"Unchecking This Will Remove This Company's EMail From The Do Not Send List{Environment.NewLine}Are You Sure?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
					{
						chkCompDoNotSendEMail.CheckState = CheckState.Checked;
					}

				} // Select Case chkCompDoNotSendEMail.Value

				chkCompDoNotSendEMail.Enabled = true;

			} // If chkCompDoNotSendEMail.Enabled = True Then

		}

		private void chkShowAllWanted_CheckStateChanged(Object eventSender, EventArgs eventArgs)
		{

			chkShowAllWanted.Enabled = false;
			if (chkShowAllWanted.CheckState == CheckState.Checked)
			{
				modGlobalVars.bWantedModel_IsLoaded = modFillCommonArrays.Fill_WantedModel_Array(true);
				modFillCompConControls.fill_wanted_model_list_FromArray(cbo_amwant_model);
			}
			else
			{
				modGlobalVars.bWantedModel_IsLoaded = modFillCommonArrays.Fill_WantedModel_Array(false);
				modFillCompConControls.fill_wanted_model_list_FromArray(cbo_amwant_model);
			}
			fill_wanted_grid();
			chkShowAllWanted.Enabled = true;

		}

		private void cmbContactEMail_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{


			// added MSW - 12/18/2020 -----
			if (cmbContactEMail.Text.Trim() != "")
			{
				txt_market_note[7].Visible = true;
			}

		}


		private void cmd_ac_verify_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmd_ac_verify, eventSender);

			// added in MSW 8/28/18 - so that the type combo box would not be visible
			cbo_verify_journal_auto_subject.Visible = false;

			ac_reload_spot = 0; // clear every click
			opt_verify_aircraft[5].Visible = false;


			switch(Index)
			{
				case 0 :  // Verify Aircraft 
					ac_reload_spot = grd_company_aircraft.CurrentRowIndex; 
					cmd_verify_aircraft_Click(); 

					 
					break;
				case 1 :  // Verify All Aircraft 
					opt_verify_aircraft[5].Checked = false; 
					opt_verify_aircraft[5].Visible = true; 
					lst_aircraft.Visible = false; 
					cmd_verify_all_aircraft_Click(); 
					 
					break;
				case 2 :  // Verify All Helicopters 
					cmd_verify_all_helicopters_Click(); 
					 
					break;
				case 3 :  // Verify All Fixed Wing 
					cmd_verify_all_fixed_wing_Click(); 
					 
					break;
				case 4 :  // Verify All Fixed Wing 
					cmd_verify_all_available_Click(); 
					break;
				case 5 : 
					fill_aircraft(); 
					break;
				case 6 : 
					modAdminCommon.gbl_bHomeClicked = false; 
					frm_Missing_Solds.DefInstance.Main_Comp_ID = 0; 
					frm_Missing_Solds.DefInstance.sold_model_ids = Convert.ToString(cmd_ac_verify[6].Tag); 
					frm_Missing_Solds.DefInstance.Height = 440; 
					frm_Missing_Solds.DefInstance.Show(); 
					break;
				case 7 : 
					display_verify_aircraft_status_pnl("Owner"); 

					 
					break;
			} // Case Index

		} // cmd_ac_verify_Click



		private void cmd_company_active_record_Click()
		{

			try
			{

				bCompany_active_record_Click = true;

				if (nReference_CompanyJID > 0)
				{

					cmd_company_save_Click(cmd_company_save, new EventArgs());
					cmd_company_fill_aircraft_Click(); // ADDED MSW - 6/5/15 - for refreshing ac list, it wasnt being done

				}
				else if (nReference_CompanyJID == 0)
				{ 

					grd_company_history_DoubleClick(grd_company_history, new EventArgs());

				}

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_active_record_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				search_off();
				return;
			}

		} // cmd_company_active_record_Click

		//UPGRADE_NOTE: (7001) The following declaration (cmd_company_active_record_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_company_active_record_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//cmd_company_active_record_Click();
			//}
			//
		//}

		private void cmd_company_add_note_Click(Object eventSender, EventArgs eventArgs)
		{

			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO ADD A JOURNAL NOTE TO HOME BASE
			// DEPENDING ON THE TYPE OF NOTE SELECTED AND THE RELATIONSHIP TO
			// COMPANY AIRCRAFT, THE JOURNAL NOTE MAY BE REPEATED FOR AIRCRAFT.

			try
			{

				clicked_note_type = 0;
				Shape1[0].Visible = true;
				Shape1[1].Visible = true;
				Shape1[2].Visible = true;

				// added MSW 5/16/2013
				cbo_yachts.Items.Clear();

				//turn off
				cmd_company_add_note.Visible = false;

				frame_verify_pnl.Visible = true;

				opt_journal_subject[0].Visible = false; // Share
				opt_journal_subject[4].Visible = false; // Confirmed info per
				if (cbo_comp_account[COMP_ACCOUNT_REP].Text.Trim().ToUpper().StartsWith("FO", StringComparison.Ordinal))
				{
					opt_journal_subject[0].Visible = true; // Share
					opt_journal_subject[4].Visible = true; // Confirmed info per
				}


				opt_journal_subject[1].Visible = true; // Letter
				opt_journal_subject[2].Visible = true; // Left Message
				opt_journal_subject[3].Visible = true; // Custom

				opt_verify_aircraft[5].Visible = true; // select aircraft

				// DEFAULT THE TYPE OF NOTE TO BE A RESEARCH NOTE
				modFillCompConControls.Fill_Journal_Note_Type(cbo_verify_note_type, false, false, false, false);

				cbo_verify_journal_subject.Visible = true;
				cbo_verify_journal_subject.Text = modGlobalVars.cEmptyString;
				cbo_verify_other_contacts.Visible = false;

				//UPGRADE_ISSUE: (2064) Threed.SSPanel property pnl_verify_aircraft_status.Caption was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				pnl_verify_aircraft_status.setCaption("Add Company Journal Note:");
				pnl_verify_aircraft_status.Visible = true;
				pnl_verify_aircraft_status.BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes

				lbl_comp[VERIFY_ACLABEL_INDEX].Visible = false;
				lbl_comp[VERIFY_CONTACT_INDEX].Visible = false;
				lbl_comp[VERIFY_STATUS_INDEX].Visible = false;
				lbl_comp[VERIFY_NOTELABEL_INDEX].Visible = true;
				lbl_comp[VERIFY_NOTETYPE_INDEX].Visible = true;

				lbl_comp[VERIFY_CONTACTLABEL_INDEX].Text = "Add this note to:";
				lbl_comp[VERIFY_CONTACTLABEL_INDEX].Visible = true;

				cbo_verify_note_type.Visible = true;

				chk_verify_contact.Visible = true;
				chk_verify_contact.CheckState = CheckState.Unchecked;

				modCompany.fill_verify_contact_list(nReference_CompanyID, nReference_CompanyJID, nSelectedContactID, cbo_verify_other_contacts);

				sVerifyAircraftStatus = "Note";

				// the yacht grd is added in here
				if (grd_company_aircraft.CurrentRowIndex > 0 && Convert.ToString(grd_company_aircraft[1, 3].Value).Trim().ToUpper() != ("No Aircraft Found").ToUpper())
				{ // Or grd_company_yachts.Row > 0
					opt_verify_aircraft[0].Visible = true;
					opt_verify_aircraft[0].Checked = true;
					opt_verify_aircraft[1].Visible = true;
					opt_verify_aircraft[2].Visible = true;
					opt_verify_aircraft[3].Visible = true;
					opt_verify_aircraft[4].Visible = true;
					opt_verify_aircraft[5].Visible = true;
					lbl_comp[VERIFY_ACLABEL_INDEX].Visible = true;
					Shape1[2].Visible = true;
				}
				else
				{

					if (cbo_verify_note_type.Text.IndexOf("Yacht") >= 0)
					{
						opt_verify_aircraft[0].Visible = true;
						opt_verify_aircraft[0].Checked = true;
						opt_verify_aircraft[1].Visible = true;
						opt_verify_aircraft[2].Visible = true;
						opt_verify_aircraft[3].Visible = true;
						opt_verify_aircraft[4].Visible = true;
						opt_verify_aircraft[5].Visible = true;
						lbl_comp[VERIFY_ACLABEL_INDEX].Visible = true;
						Shape1[2].Visible = true;
						cbo_yachts.Visible = true;
					}
					else
					{
						opt_verify_aircraft[0].Visible = false;
						opt_verify_aircraft[1].Visible = false;
						opt_verify_aircraft[2].Visible = false;
						opt_verify_aircraft[3].Visible = false;
						opt_verify_aircraft[4].Visible = false;
						opt_verify_aircraft[5].Visible = true;
						lbl_comp[VERIFY_ACLABEL_INDEX].Visible = false;
						Shape1[2].Visible = false;
					}

				}

				opt_journal_subject_CheckedChanged(opt_journal_subject[3], new EventArgs());

				disable_important_items();

				// if it is going to be changed to yacht, then put on the box
				if (modAdminCommon.gbl_Account_ID.StartsWith("Y", StringComparison.Ordinal) && modAdminCommon.gbl_Account_ID.Trim() != "YT03")
				{
					Shape1[2].Visible = true;
				}


				search_off();

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_add_note_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();
			}

		}

		private void cmd_company_add_note_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_company_add_note_Click(cmd_company_add_note, new EventArgs());
			}

		}

		private void cmd_aircraft_all_contact_change_Click(Object eventSender, EventArgs eventArgs)
		{

			int nOldNameID = 0;
			string sOldName = "";
			string sOldNameType = "";
			int nFractOwnID = 0;
			string sNewName = "";
			int nNewNameID = 0;
			string tmpMsg = "";
			bool bContactTypeOnly = false;
			int nClickedCol = 0;
			int instring_result = 0;
			string temp_name_string = "";

			try
			{

				int nlen = 0;
				if (grd_company_aircraft.CurrentRowIndex > 0 && Convert.ToString(grd_company_aircraft[1, 3].Value).Trim().ToUpper() != ("No Aircraft Found").ToUpper() && cbo_company_research_contact.SelectedIndex > -1)
				{

					nClickedCol = grd_company_aircraft.CurrentColumnIndex;
					grd_company_aircraft.CurrentColumnIndex = 8;
					if (grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
					{
						// take only the contact type not the [BUSTYPE]
						nlen = Strings.Len(grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString());
						sOldNameType = modCompany.get_aircraft_contact_code(grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Substring(0, Math.Min(nlen - 4, grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Length)).Trim());

						// ADDED IN 6/10/2011 MSW - to fix homebase error on not being able to change contacts on 100% owners
						// instring gets the position of the ( in the string so that if there is a (100%) for owner of frac owner
						// then send the string into same function to see if it can find a type code for the new string
						if (sOldNameType.Trim() == "")
						{
							instring_result = (grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim().IndexOf(" (") + 1);
							if (instring_result > 1)
							{
								temp_name_string = grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Substring(0, Math.Min(instring_result - 1, grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Length));
								sOldNameType = modCompany.get_aircraft_contact_code(temp_name_string);
							}
						}
					}
					grd_company_aircraft.CurrentColumnIndex = nClickedCol;

					sNewName = cbo_company_research_contact.Text.Trim();
					nNewNameID = cbo_company_research_contact.GetItemData(cbo_company_research_contact.SelectedIndex);

					if (txt_comp_fractowr_id.Text.Trim() != modGlobalVars.cEmptyString)
					{
						if (Convert.ToInt32(Conversion.Val(txt_comp_fractowr_id.Text)) > 0)
						{
							nFractOwnID = Convert.ToInt32(Conversion.Val(txt_comp_fractowr_id.Text));
						}
					}

					// If Trim$(sNewName) <> cEmptyString Then

					tmpMsg = $"Are you sure you want to change ALL Contacts for ALL aircraft to {sNewName}?";

					if (chk_change_same_ac_contact_type_only.CheckState == CheckState.Checked)
					{
						tmpMsg = $"Are you sure you want to change ALL Contacts for ALL aircraft FOR the selected Contact type to {sNewName}?";
						bContactTypeOnly = true;
					}

					if (MessageBox.Show(tmpMsg, (bContactTypeOnly) ? "Company : Change ALL Aircraft Contact of Same Type" : "Company : Change ALL Aircraft Contact", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
					{

						search_on("Changing ALL research contacts for ALL aircraft....");

						if (modCompany.update_aircraft_research_contact(nReference_CompanyID, nReference_CompanyJID, 0, sNewName, nNewNameID, sOldName, nOldNameID, sOldNameType, 0, nFractOwnID, bContactTypeOnly))
						{

							// REPAINT THE AIRCRAFT LIST AND JOURNAL LIST TO SHOW THE CHANGE
							fill_company_aircraft_grid();
						}

						search_off();

					} // MsgBox(tmpMsg, vbYesNo) = vbYes

					// End If    ' Trim$(sOldName) <> cEmptyString And Trim$(sNewName) <> cEmptyString

				} // grd_company_aircraft.Row > 0 And UCase$(Trim$(grd_company_aircraft.TextMatrix(1, 3))) <> UCase$("No Aircraft Found")

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_aircraft_all_contact_change_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();
			}

		}

		private void cmd_aircraft_all_contact_change_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_aircraft_all_contact_change_Click(cmd_aircraft_all_contact_change, new EventArgs());
			}

		}

		private void cmd_aircraft_contact_change_Click(Object eventSender, EventArgs eventArgs)
		{

			int nOldNameID = 0;
			string sOldName = "";
			string sOldNameType = "";
			int nOldNameSeq = 0;
			int nFractOwnID = 0;
			string sNewName = "";
			int nNewNameID = 0;
			int nAircraftID = 0;
			string tmpMsg = "";
			bool bContactTypeOnly = false;
			int nClickedCol = 0;
			int temp_row = 0;

			try
			{

				// 03/17/2015 - By David D. Cruger
				// Per Jackie; need to change a contact related to an aircraft to [Blank]

				int nlen = 0;
				if (grd_company_aircraft.CurrentRowIndex > 0 && Convert.ToString(grd_company_aircraft[1, 3].Value).Trim().ToUpper() != ("No Aircraft Found").ToUpper() && cbo_company_research_contact.SelectedIndex > -1)
				{

					temp_row = grd_company_aircraft.CurrentRowIndex;

					nClickedCol = grd_company_aircraft.CurrentColumnIndex;
					grd_company_aircraft.CurrentColumnIndex = 2;
					if (grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
					{
						nOldNameSeq = Convert.ToInt32(Conversion.Val(grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim()));
					}
					else
					{
						nOldNameSeq = 99; // if the old sequence was empty then seq = 99
					}

					grd_company_aircraft.CurrentColumnIndex = 8;
					if (grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
					{
						// take only the contact type not the [BUSTYPE]
						nlen = Strings.Len(grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString());
						sOldNameType = modCompany.get_aircraft_contact_code(grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Substring(0, Math.Min(nlen - 4, grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Length)).Trim());
					}
					grd_company_aircraft.CurrentColumnIndex = nClickedCol;

					//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_aircraft.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					sOldName = modCompany.get_contact_information_from_aircraft_reference(grd_company_aircraft.BandData(grd_company_aircraft.CurrentRowIndex), nReference_CompanyID, nReference_CompanyJID, ref nOldNameID);

					sNewName = cbo_company_research_contact.Text.Trim();
					nNewNameID = cbo_company_research_contact.GetItemData(cbo_company_research_contact.SelectedIndex);

					if (txt_comp_fractowr_id.Text.Trim() != modGlobalVars.cEmptyString)
					{
						if (Convert.ToInt32(Conversion.Val(txt_comp_fractowr_id.Text)) > 0)
						{
							nFractOwnID = Convert.ToInt32(Conversion.Val(txt_comp_fractowr_id.Text));
						}
					}

					nAircraftID = grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex);

					tmpMsg = $"Are you sure you want to change Contact from {((sOldName.Trim() != "") ? sOldName : "[Blank]")} to {((sNewName.Trim() != "") ? sNewName : "[Blank]")}?";

					if (chk_change_same_ac_contact_type_only.CheckState == CheckState.Checked)
					{
						tmpMsg = $"Are you sure you want to change Contact for the selected Contact type from {((sOldName.Trim() != "") ? sOldName : "[Blank]")} to {((sNewName.Trim() != "") ? sNewName : "[Blank]")}?";
						bContactTypeOnly = true;
					}

					if (MessageBox.Show(tmpMsg, (bContactTypeOnly) ? "Company : Change Aircraft Contact of Same Type" : "Company : Change Aircraft Contact", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
					{

						search_on("Changing research contact for selected aircraft....");

						if (modCompany.update_aircraft_research_contact(nReference_CompanyID, nReference_CompanyJID, nAircraftID, sNewName, nNewNameID, sOldName, nOldNameID, sOldNameType, nOldNameSeq, nFractOwnID, bContactTypeOnly))
						{

							fill_company_aircraft_grid(temp_row);
						}

						search_off();

					} // MsgBox(tmpMsg, vbYesNo) = vbYes

				} // grd_company_aircraft.Row > 0 And UCase$(Trim$(grd_company_aircraft.TextMatrix(1, 3))) <> UCase$("No Aircraft Found")

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_aircraft_contact_change_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();
			}

		}

		private void cmd_aircraft_contact_change_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_aircraft_contact_change_Click(cmd_aircraft_contact_change, new EventArgs());
			}

		}


		private void cmd_company_button_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmd_company_button, eventSender);


			string strInsert1 = "";
			System.DateTime strDateTime = DateTime.FromOADate(0);
			if (Index == 0)
			{ //No Inventory To Show Buttom


				strDateTime = DateTime.FromOADate(0);

				update_cb_date(56);
				strDateTime = DateTime.Now;

				strInsert1 = "INSERT INTO Journal (";
				strInsert1 = $"{strInsert1}journ_subcategory_code, journ_subject, journ_contact_id, journ_comp_id, ";
				strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date ";
				strInsert1 = $"{strInsert1}) VALUES ('VS', '";
				strInsert1 = $"{strInsert1}Verified Status - No active listings for this company to show";
				strInsert1 = $"{strInsert1}',0, {nReference_CompanyID.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
				strInsert1 = $"{strInsert1}'{strDateTime.ToString("d")}', ";
				strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(strDateTime, DateFormat.ShortTime)}', ";
				strInsert1 = $"{strInsert1}'{strDateTime.ToString()}', '{strDateTime.ToString("d")}'";
				strInsert1 = $"{strInsert1}) ";

				modAdminCommon.ADO_Transaction("BeginTrans");

				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = strInsert1;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();

				modAdminCommon.ADO_Transaction("CommitTrans");

				MessageBox.Show("Company Callback Date Moved Out 8 Weeks", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);


				cmd_company_button_Click(cmd_company_button[1], new EventArgs()); // CALL THis -- make sure its 1 not 0 - MSW - 1/6/2020

				check_re_load_company_journal();

			}
			else if (Index == 1)
			{  //attempted to contact

				try
				{

					update_last_contact_date(true);

					if (mvHasFocus)
					{
						mvHasFocus = false;
					}


					check_re_load_company_journal();

					return;
				}
				catch (System.Exception excep)
				{

					//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
					modAdminCommon.Report_Error($"cmd_company_called_no_status_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

					if (mvHasFocus)
					{
						mvHasFocus = false;
					}

					search_off();
				}
			}



		}


		private void cmd_company_button_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmd_company_button, eventSender);
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (Index == 0)
			{ //No Inventory To Show Buttom
				if (mvHasFocus)
				{
					mvHasFocus = false;
					cmd_company_button_Click(cmd_company_button[0], new EventArgs()); // formerly cmd_company_ABI_called_no_status_Click
				}

			}
			else if (Index == 1)
			{  // attempted to contact

				if (mvHasFocus)
				{
					mvHasFocus = false;
					cmd_company_button_Click(cmd_company_button[1], new EventArgs());
				}

			}


		}




		//UPGRADE_NOTE: (7001) The following declaration (cmd_company_cert_no_Click) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_company_cert_no_Click()
		//{
			//
			//cmdCertCommand[4].Visible = true;
			//cmdCertCommand[4].Enabled = true;
			////lbl_company_check_sure.Visible = False
			//
			//cmdCertCommand[0].Visible = true; // Update
			//cmdCertCommand[0].Enabled = true;
			//
			//cmdCertCommand[2].Visible = true; // Remove
			//cmdCertCommand[2].Enabled = true;
			//
		//}


		private void cmd_company_cancel_cert_Click() => 
			//6/2011 - MSW - turns frame off with editing information
			cert_edit_enter_frame.Visible = false;


		private void cmd_company_clear_research_note_Click(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				search_on("Clearing Research Action ....");


				clear_company_research_action();

				search_off();

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_clear_research_note_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();
			}

		}

		private void cmd_company_clear_research_note_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_company_clear_research_note_Click(cmd_company_clear_research_note, new EventArgs());
			}

		}

		private void cmd_company_contact_relation_confirm_Click() => confirm_contact_function();


		//UPGRADE_NOTE: (7001) The following declaration (cmd_company_contact_relation_confirm_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_company_contact_relation_confirm_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//cmd_company_contact_relation_confirm_Click();
			//}
			//
		//}

		private void cmd_company_contact_relation_save_Click() => save_relationship_function();




		public object add_relationship_function()
		{

			int lRow1 = 0;
			int lCol1 = 0;
			string strCompId = "";

			try
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (6021) Casting 'modGlobalVars.e_find_form_action_types' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				tCompanyForm_EntryPoints = (modGlobalVars.e_find_form_entry_points) modGlobalVars.e_find_form_action_types.geAssociateComp;

				if (modGlobalVars.bCallShowAndLoadOnlyOnce)
				{


					//UPGRADE_TODO: (1067) Member Clear_Search_Criteria is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].Clear_Search_Criteria(true, true, true);
					//UPGRADE_TODO: (1067) Member EntryPoint is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].EntryPoint = modGlobalVars.e_find_form_entry_points.geAddCompanyRelation;
					//UPGRADE_TODO: (1067) Member ActionTypes is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].ActionTypes = (modGlobalVars.e_find_form_action_types)tCompanyForm_EntryPoints;
					//UPGRADE_TODO: (1067) Member Reference_CompanyID is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].Reference_CompanyID = nReference_CompanyID;
					//UPGRADE_TODO: (1067) Member Reference_JournalID is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].Reference_JournalID = nReference_CompanyJID;
					//UPGRADE_TODO: (1067) Member from_company is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].from_company = true;
					//UPGRADE_TODO: (1067) Member fc_company_address1 is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_company_address1 = txt_comp_address1.Text;
					//UPGRADE_TODO: (1067) Member fc_company_address2 is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_company_address2 = txt_comp_address2.Text;
					//UPGRADE_TODO: (1067) Member fc_comp_email is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_email = txt_comp_email_address.Text;
					//UPGRADE_TODO: (1067) Member fc_comp_city is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_city = txt_comp_city.Text;
					//UPGRADE_TODO: (1067) Member fc_comp_agency is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_agency = cbo_comp_agency_type.Text;
					//UPGRADE_TODO: (1067) Member fc_comp_language is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_language = cbo_comp_language.Text;
					//UPGRADE_TODO: (1067) Member fc_comp_account_rep is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_account_rep = cbo_comp_account[1].Text;
					//UPGRADE_TODO: (1067) Member fc_comp_zip is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_zip = txt_comp_zip_code.Text;

					//UPGRADE_TODO: (1067) Member fc_comp_state is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_state = cbo_comp_state.SelectedIndex.ToString(); //gap-note tostring added
					//UPGRADE_TODO: (1067) Member fc_comp_country is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_country = cbo_comp_country.SelectedIndex.ToString(); //gap-note tostring added

					//UPGRADE_TODO: (1067) Member fc_comp_business_type is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_business_type = cbo_comp_business_type.Text;
					//UPGRADE_TODO: (1067) Member fc_comp_account_type is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_account_type = cbo_comp_account[0].Text;

					if (chk_comp_product_code[modGlobalVars.CHK_BUSINESS_IDX].CheckState == CheckState.Checked)
					{
						//UPGRADE_TODO: (1067) Member fc_comp_product is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
						modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_product = "1";
					}
					else if (chk_comp_product_code[modGlobalVars.CHK_HELICOPTER_IDX].CheckState == CheckState.Checked)
					{ 
						//UPGRADE_TODO: (1067) Member fc_comp_product is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
						modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_product = "2";
					}
					else if (chk_comp_product_code[modGlobalVars.CHK_COMMERCIAL_IDX].CheckState == CheckState.Checked)
					{ 
						//UPGRADE_TODO: (1067) Member fc_comp_product is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
						modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_product = "3";
					}
					else if (chk_comp_product_code[modGlobalVars.CHK_YACHT_IDX].CheckState == CheckState.Checked)
					{ 
						//UPGRADE_TODO: (1067) Member fc_comp_product is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
						modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_product = "6";
					}
					else
					{
						//UPGRADE_TODO: (1067) Member fc_comp_product is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
						modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].fc_comp_product = "Business";
					}

					//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].Show();
					modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes

					//-----------------------------
					// Check To See If On
					// Company Address Duplicate Tab
					// If So Feed Compid And Search

					if (SSTabHelper.GetSelectedIndex(tab_company_rel) == 2)
					{
						lRow1 = grdCompDupByAdd.CurrentRowIndex;
						if (lRow1 >= 1)
						{
							if (Convert.ToString(grdCompDupByAdd[1, 1].Value) != "No Records Found")
							{
								if (grdCompDupByAdd.RowSel == lRow1)
								{
									//UPGRADE_TODO: (1067) Member opt_companies is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
									modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].opt_companies.Checked = true;
									//UPGRADE_TODO: (1067) Member SetCompId is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
									modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].SetCompId(Convert.ToString(grdCompDupByAdd[lRow1, 0].Value));
									//UPGRADE_TODO: (1067) Member cmd_find_Click is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
									modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].cmd_find_Click(null,null);
								} // If grdCompDupByAdd.RowSel = lRow1 Then
							} // If grdCompDupByAdd.TextMatrix(1, 1) <> "No Records Found" Then
						} // If lRow1 >= 1 Then
					} // If tab_company_rel.Tab = 2 Then
				} // If bCallShowAndLoadOnlyOnce Then
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_relation_add_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();
			}

			return null;
		}




		public void remove_relationship_function()
		{

			try
			{
				string Query = "";
				Query = "";
				string journal_text = "";
				string strDateTime = "";
				int compid2 = 0;
				string strInsert1 = "";

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				if (grd_company_relationships.CurrentRowIndex > 0 && Convert.ToString(grd_company_relationships[1, 0].Value).ToLower() != ("No Relationships Found").ToLower())
				{
					if (MessageBox.Show("Are you sure you want to remove this relationship?", "Company : Remove Company Relationship", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
					{

						modAdminCommon.ADO_Transaction("BeginTrans");


						compid2 = grd_company_relationships.get_RowData(grd_company_relationships.CurrentRowIndex);
						journal_text = $"Deleted Relationship Between Companies: {StringsHelper.Replace(txt_comp_name.Text, "'", "''", 1, -1, CompareMethod.Binary)} ({nReference_CompanyID.ToString()}) ";
						grd_company_relationships.CurrentColumnIndex = 0;
						journal_text = $"{journal_text}{grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].FormattedValue.ToString()}";

						grd_company_relationships.CurrentColumnIndex = 1;
						journal_text = $"{journal_text} {grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].FormattedValue.ToString()} (";

						grd_company_relationships.CurrentColumnIndex = 8;
						//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						journal_text = $"{journal_text}{grd_company_relationships.BandData(grd_company_relationships.CurrentRowIndex).ToString()})";
						//

						grd_company_relationships.CurrentColumnIndex = 1;

						Query = $"DELETE FROM Company_Reference WHERE compref_key = {grd_company_relationships.get_RowData(grd_company_relationships.CurrentRowIndex).ToString()}";

						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery();
						Query = "";
						Query = "UPDATE Company SET comp_action_date = NULL";
						Query = $"{Query} WHERE comp_id = {nReference_CompanyID.ToString()} AND comp_journ_id = {nReference_CompanyJID.ToString()}";

						DbCommand TempCommand_2 = null;
						TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
						TempCommand_2.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
						TempCommand_2.ExecuteNonQuery();
						modAdminCommon.ADO_Transaction("CommitTrans");



						//-------------- INSERT INTO JOURNAL NOTES FOR DELETE---------------------------------------------------------------------------
						strDateTime = DateTimeHelper.ToString(DateTime.Now);
						strInsert1 = "INSERT INTO Journal (";
						strInsert1 = $"{strInsert1}journ_subcategory_code, journ_description, journ_subject, journ_contact_id, journ_comp_id, ";
						strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date ";
						strInsert1 = $"{strInsert1}) VALUES ('RN', '";

						strInsert1 = $"{strInsert1}{journal_text}', 'Deleted Company to Company Relationship'";
						strInsert1 = $"{strInsert1},0, {nReference_CompanyID.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
						strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
						strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
						strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
						strInsert1 = $"{strInsert1}) ";

						modAdminCommon.ADO_Transaction("BeginTrans");
						DbCommand TempCommand_3 = null;
						TempCommand_3 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_3);
						TempCommand_3.CommandText = strInsert1;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_3.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_3);
						TempCommand_3.ExecuteNonQuery();
						modAdminCommon.ADO_Transaction("CommitTrans");


						strDateTime = DateTimeHelper.ToString(DateTime.Now);
						strInsert1 = "INSERT INTO Journal (";
						strInsert1 = $"{strInsert1}journ_subcategory_code, journ_description,journ_subject, journ_contact_id, journ_comp_id, ";
						strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date ";
						strInsert1 = $"{strInsert1}) VALUES ('RN', '";

						strInsert1 = $"{strInsert1}{journal_text}', 'Deleted Company to Company Relationship'";
						//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						strInsert1 = $"{strInsert1},0, {grd_company_relationships.BandData(grd_company_relationships.CurrentRowIndex).ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
						strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
						strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
						strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
						strInsert1 = $"{strInsert1}) ";

						modAdminCommon.ADO_Transaction("BeginTrans");
						DbCommand TempCommand_4 = null;
						TempCommand_4 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_4);
						TempCommand_4.CommandText = strInsert1;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_4.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_4);
						TempCommand_4.ExecuteNonQuery();
						modAdminCommon.ADO_Transaction("CommitTrans");

						//-------------- INSERT INTO JOURNAL NOTES FOR DELETE---------------------------------------------------------------------------




						fill_relationships_grid();
					}
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_relation_remove_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				modAdminCommon.ADO_Transaction("RollbackTrans");

				search_off();
			}

		}




		public object confirm_company_function()
		{
			try
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				if (grd_company_relationships.CurrentRowIndex > 0 && Convert.ToString(grd_company_relationships[1, 0].Value).ToLower() != ("No Relationships Found").ToLower())
				{

					//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					if (grd_company_relationships.BandData(grd_company_relationships.CurrentRowIndex) > 0)
					{

						//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						modCommon.Confirm_Company(grd_company_relationships.BandData(grd_company_relationships.CurrentRowIndex));

						// INSERT A COMPANY CONFIRMATION JOURNAL ENTRY
						modAdminCommon.Rec_Journal_Info.journ_subject = $"Confirmed Related Company from (Comp_id:{nReference_CompanyID.ToString()}) {txt_comp_name.Text.Trim()}";
						modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
						modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CPCFM";
						modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
						//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						modAdminCommon.Rec_Journal_Info.journ_comp_id = grd_company_relationships.BandData(grd_company_relationships.CurrentRowIndex);
						modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
						modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
						modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
						modAdminCommon.Rec_Journal_Info.journ_status = "A";
						modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

						frm_Journal.DefInstance.Commit_Journal_Entry();
						fill_relationships_grid();

					}

				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_relation_confirm_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();
			}

			return null;
		}



		public object confirm_contact_function()
		{
			int nClickedColumn = 0;
			int tmpContactId = 0;

			try
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				if (grd_company_relationships.CurrentRowIndex > 0 && Convert.ToString(grd_company_relationships[1, 0].Value).ToLower() != ("No Relationships Found").ToLower())
				{

					nClickedColumn = grd_company_relationships.CurrentColumnIndex;
					//grd_company_relationships.Col = 6
					// moved over 1 , msw - 12/31/15
					grd_company_relationships.CurrentColumnIndex = 7;

					if (grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].FormattedValue.ToString().Trim() != "")
					{
						if (Convert.ToInt32(Conversion.Val(grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].FormattedValue.ToString().Trim())) > 0)
						{
							tmpContactId = Convert.ToInt32(Conversion.Val(grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].FormattedValue.ToString().Trim()));
						}
					}
					grd_company_relationships.CurrentColumnIndex = nClickedColumn;

					if (tmpContactId > 0)
					{

						modCommon.Confirm_Contact(tmpContactId, Convert.ToString(lst_related_contact.Tag));

						//added in MSW - using this for contact email address
						if (Convert.ToString(lst_related_contact.Tag).Trim() == "")
						{
							// INSERT A CONTACT CONFIRMATION JOURNAL ENTRY
							modAdminCommon.Rec_Journal_Info.journ_subject = $"Confirmed Related Company Contact Name, Title from (Comp_id: {nReference_CompanyID.ToString()}) {txt_comp_name.Text.Trim()}";
							modAdminCommon.Rec_Journal_Info.journ_description = " ";
							modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CNCFM";
							modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
							//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							modAdminCommon.Rec_Journal_Info.journ_comp_id = grd_company_relationships.BandData(grd_company_relationships.CurrentRowIndex);
							modAdminCommon.Rec_Journal_Info.journ_contact_id = tmpContactId;
							modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
							modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
							modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_status = "A";
							modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

							frm_Journal.DefInstance.Commit_Journal_Entry();
						}
						else
						{
							// INSERT A CONTACT CONFIRMATION JOURNAL ENTRY
							modAdminCommon.Rec_Journal_Info.journ_subject = $"Confirmed Related Company Contact Name, Title, eMail from (Comp_id: {nReference_CompanyID.ToString()}) {txt_comp_name.Text.Trim()}";
							modAdminCommon.Rec_Journal_Info.journ_description = " ";
							modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CNCFM";
							modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
							//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							modAdminCommon.Rec_Journal_Info.journ_comp_id = grd_company_relationships.BandData(grd_company_relationships.CurrentRowIndex);
							modAdminCommon.Rec_Journal_Info.journ_contact_id = tmpContactId;
							modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
							modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
							modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_status = "A";
							modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

							frm_Journal.DefInstance.Commit_Journal_Entry();
						}




						fill_relationships_grid();
					}

				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_contact_relation_confirm_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();
			}

			return null;
		}




		public object save_relationship_function()
		{
			string Query = "";
			string sWhichField = "";
			int nClickedColumn = 0;
			int i = 0;
			string temp_current_type = "";
			string type_selected = "";
			string type_not_selected = "";
			string name_selected = "";
			string name_not_selected = "";
			string journal_text = "";
			string journal_text2 = "";
			string type_1_name = "";
			string type_2_name = "";
			string strInsert1 = "";
			string temp_dropdown_select = "";
			string drop_option_1 = "";
			string drop_option_2 = "";
			string option_not_selected = "";
			string strDateTime = "";
			string temp_current_type_rel = "";
			string comp1_name = "";
			string comp2_name = "";
			int comp1_id = 0;
			int comp2_id = 0;
			bool is_main = false;

			try
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				string temp_subject = "";
				string temp_desc = "";
				if (cbo_comp_account[4].Text == "" && cbo_comp_account[4].Visible)
				{

					MessageBox.Show("You Need to Select a Relationship Sub Type", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);

				}
				else if (Convert.ToString(grd_company_relationships[1, 0].Value).ToLower() != ("No Relationships Found").ToLower())
				{ 

					nClickedColumn = grd_company_relationships.CurrentColumnIndex;

					//'grd_company_relationships.Col = 7

					// changed from column 7 to column 8, MSW 12/30/15, was another column just added in ?
					grd_company_relationships.CurrentColumnIndex = 8;
					if (grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].FormattedValue.ToString().Trim() != "")
					{
						if (nReference_CompanyID == Convert.ToInt32(Conversion.Val(grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].FormattedValue.ToString().Trim())))
						{
							sWhichField = "compref_rel_contact_id";
						}
						else
						{
							sWhichField = "compref_contact_id";
						}
					}
					grd_company_relationships.CurrentColumnIndex = nClickedColumn;

					modAdminCommon.ADO_Transaction("BeginTrans");

					Query = "UPDATE Company_Reference SET ";
					if (cbo_related_company_contact.SelectedIndex == -1)
					{
						Query = $"{Query}   {sWhichField} = 0 ";
					}
					else
					{
						Query = $"{Query}   {sWhichField} = {cbo_related_company_contact.GetItemData(cbo_related_company_contact.SelectedIndex).ToString()} ";
					}

					//---------- ADDED MSW - ADDING IN THE COMPANY TO COMPANY RELATIONSHIPS------------------------
					if (cbo_comp_account[3].Text.Trim() != "")
					{
						if (lbl_comp[100].Visible)
						{

							temp_current_type = Convert.ToString(grd_company_relationships[grd_company_relationships.CurrentRowIndex, 10].Value);



							cbo_comp_account[4].Visible = false;

							if (cbo_comp_account[4].SelectedIndex == 0)
							{
								name_selected = cbo_comp_account[4].Text.Trim();
								type_selected = modGlobalVars.ContactType_Array[cbo_comp_account[3].GetItemData(cbo_comp_account[3].SelectedIndex), 2];
								cbo_comp_account[4].SelectedIndex = 1;
								name_not_selected = cbo_comp_account[4].Text.Trim();
								type_not_selected = Find_Contact_Reference_ID(cbo_comp_account[4].Text.Trim(), name_selected);
								if (type_not_selected.Trim() == "")
								{
									type_not_selected = Find_Contact_Reference_ID(name_not_selected, "");
								}
								cbo_comp_account[4].SelectedIndex = 0;
								is_main = true;
							}
							else
							{
								name_selected = cbo_comp_account[4].Text.Trim();
								type_selected = Find_Contact_Reference_ID(cbo_comp_account[4].Text.Trim(), "");
								cbo_comp_account[4].SelectedIndex = 0;
								name_not_selected = cbo_comp_account[4].Text.Trim();
								type_not_selected = Find_Contact_Reference_ID(name_not_selected, name_selected);
								if (type_not_selected.Trim() == "")
								{
									type_not_selected = Find_Contact_Reference_ID(name_not_selected, "");
								}
								cbo_comp_account[4].SelectedIndex = 1;
								is_main = false;
							}

							cbo_comp_account[4].Visible = true;


							Find_Company_References(ref comp1_id, ref comp2_id, ref type_1_name, ref type_2_name, Convert.ToInt32(Double.Parse(grd_company_relationships.get_RowData(grd_company_relationships.CurrentRowIndex).ToString())), ref temp_current_type_rel);


							if (comp1_id > 0 && comp2_id > 0)
							{




								if (Convert.ToInt32(Double.Parse(txt_comp_id.Text)) == comp1_id)
								{ // IF COMPANY IS THE PRIMARY COMPANY----------------------
									//cbo_comp_account(3).Tag is the rel i was before, to the current things i am now
									if (temp_current_type.Trim() == name_selected.Trim() && temp_current_type_rel.Trim() == type_selected.Trim() && is_main)
									{ // and we selected the first relationship
										// THEN YOU DONT HAVE TO DO ANYTHING-----------
									}
									else if (is_main)
									{  // then you must have changed the type, but you are still the main
										Query = $"{Query}, compref_contact_type = '{type_selected}' ";

									}
									else if (temp_current_type.Trim() == name_not_selected.Trim() && temp_current_type_rel.Trim() == type_not_selected.Trim())
									{  // then we switched roles
										Query = $"{Query}, compref_comp_id = {comp2_id.ToString()} ";
										Query = $"{Query}, compref_rel_comp_id = {comp1_id.ToString()} ";
									}
									else
									{
										// then we switched roles and types
										Query = $"{Query}, compref_comp_id = {comp2_id.ToString()} ";
										Query = $"{Query}, compref_contact_type = '{type_not_selected}' "; // make it type not selected, since we selected 2nd line
										Query = $"{Query}, compref_rel_comp_id = {comp1_id.ToString()} ";
									}
								}
								else
								{
									//---------------- IF THE COMPANY IS NOT THE PRIMARY -----------------------
									//cbo_comp_account(4).Tag is the rel the other company was before

									if (temp_current_type.Trim() == name_selected.Trim() && temp_current_type_rel.Trim() == type_selected.Trim() && is_main)
									{ // and we selected the same relationship, then switched sub to main
										Query = $"{Query}, compref_comp_id = {comp2_id.ToString()} ";
										Query = $"{Query}, compref_rel_comp_id = {comp1_id.ToString()} ";
									}
									else if (is_main)
									{  // then you must have changed the type, and you are now the main
										Query = $"{Query}, compref_comp_id = {comp2_id.ToString()} ";
										Query = $"{Query}, compref_rel_comp_id = {comp1_id.ToString()} ";
										Query = $"{Query}, compref_contact_type = '{type_selected}' ";
									}
									else if (temp_current_type.Trim() == name_selected.Trim() && temp_current_type_rel.Trim() == type_not_selected.Trim())
									{  // then you didnt change type or rel
										// DO NOTHING
									}
									else
									{
										// we we were not the primary, and still arent, but rel changed
										Query = $"{Query}, compref_contact_type = '{type_not_selected} '"; // make it type not selected, since we selected 2nd line
									}
								}

								Application.DoEvents();
								Application.DoEvents();
								Application.DoEvents();
								Application.DoEvents();
								comp1_name = modCompany.Get_Company_Name(comp1_id, 0);
								comp2_name = modCompany.Get_Company_Name(comp2_id, 0);
								temp_dropdown_select = cbo_comp_account[4].Text;
								Application.DoEvents();
								Application.DoEvents();
								cbo_comp_account[4].SelectedIndex = 0;
								drop_option_1 = cbo_comp_account[4].Text;
								Application.DoEvents();
								Application.DoEvents();
								cbo_comp_account[4].SelectedIndex = 1;
								drop_option_2 = cbo_comp_account[4].Text;
								Application.DoEvents();
								Application.DoEvents();

								// if we picked option 1, then the note should reference option 2
								if (temp_dropdown_select.Trim() == drop_option_1.Trim())
								{
									option_not_selected = drop_option_2;
								}
								else
								{
									option_not_selected = drop_option_1;
								}


								// if comp1 is my company, then
								// journal_text goes in for company 1, journal_text2 goes in for company 2
								if (nReference_CompanyID == comp1_id)
								{
									journal_text = $"Updated relationship to {option_not_selected}, {comp2_name}";
									journal_text2 = $"Updated relationship to {temp_dropdown_select}, {comp1_name}";
								}
								else
								{
									journal_text = $"Updated relationship to {temp_dropdown_select}, {comp2_name}";
									journal_text2 = $"Updated relationship to {option_not_selected}, {comp1_name}";
								}

								lbl_comp[100].Visible = false;

							}



							//---------- ADDED MSW - ADDING IN THE COMPANY TO COMPANY RELATIONSHIPS------------------------

						}


						cbo_comp_account[3].Visible = false;
						cbo_comp_account[4].Visible = false;

						Query = $"{Query}WHERE compref_key = {grd_company_relationships.get_RowData(grd_company_relationships.CurrentRowIndex).ToString()}";


						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery();



						if (comp1_id == 0 && comp2_id == 0)
						{
							Find_Company_References(ref comp1_id, ref comp2_id, ref type_1_name, ref type_2_name, Convert.ToInt32(Double.Parse(grd_company_relationships.get_RowData(grd_company_relationships.CurrentRowIndex).ToString())), ref temp_current_type_rel);
						}

						//-------------- INSERT INTO JOURNAL NOTES FOR BOTH COMPANIES----------------------------------------------------------------------------
						if (journal_text.Trim() == "" && journal_text2.Trim() == "")
						{
							// dont add journal notes that are blank - added MSW - 10/14/22
						}
						else
						{

							strDateTime = DateTimeHelper.ToString(DateTime.Now);
							strInsert1 = "INSERT INTO Journal (";
							strInsert1 = $"{strInsert1}journ_subcategory_code, journ_subject, journ_contact_id, journ_comp_id, ";
							strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date ";
							strInsert1 = $"{strInsert1}) VALUES ('RN', '";

							if (Convert.ToInt32(Double.Parse(txt_comp_id.Text)) == comp1_id)
							{
								strInsert1 = $"{strInsert1}{journal_text}";
							}
							else
							{
								strInsert1 = $"{strInsert1}{journal_text2}";
							}

							strInsert1 = $"{strInsert1}',0, {comp1_id.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
							strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
							strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
							strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
							strInsert1 = $"{strInsert1}) ";


							DbCommand TempCommand_2 = null;
							TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
							TempCommand_2.CommandText = strInsert1;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
							TempCommand_2.ExecuteNonQuery();

							strDateTime = DateTimeHelper.ToString(DateTime.Now);
							strInsert1 = "INSERT INTO Journal (";
							strInsert1 = $"{strInsert1}journ_subcategory_code, journ_subject, journ_contact_id, journ_comp_id, ";
							strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date ";
							strInsert1 = $"{strInsert1}) VALUES ('RN', '";

							if (Convert.ToInt32(Double.Parse(txt_comp_id.Text)) == comp2_id)
							{
								strInsert1 = $"{strInsert1}{journal_text}";
							}
							else
							{
								strInsert1 = $"{strInsert1}{journal_text2}";
							}

							strInsert1 = $"{strInsert1}',0, {comp2_id.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
							strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
							strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
							strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
							strInsert1 = $"{strInsert1}) ";


							DbCommand TempCommand_3 = null;
							TempCommand_3 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_3);
							TempCommand_3.CommandText = strInsert1;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_3.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_3);
							TempCommand_3.ExecuteNonQuery();
						}
						//------------------------------------------------------------------------------------------

						// ADDED MSW - 9/27/21------------------------------------------------
						temp_subject = "Company Relationship Updated";
						temp_desc = journal_text;

						// if we are adding a
						if (temp_desc.Trim().IndexOf("relationship") >= 0)
						{
							modCommon.InsertPriorityEvent("CRU", 0, 0, temp_desc, comp1_id, 0, "N");


							temp_desc = journal_text2;
							modCommon.InsertPriorityEvent("CRU", 0, 0, temp_desc, comp2_id, 0, "N");
						}
						// ADDED MSW - 9/27/21------------------------------------------------


						Query = "";
						Query = "UPDATE Company SET comp_action_date = NULL";
						Query = $"{Query} WHERE comp_id = {nReference_CompanyID.ToString()} AND comp_journ_id = {nReference_CompanyJID.ToString()}";

						DbCommand TempCommand_4 = null;
						TempCommand_4 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_4);
						TempCommand_4.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_4.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_4);
						TempCommand_4.ExecuteNonQuery();
						modAdminCommon.ADO_Transaction("CommitTrans");

						fill_relationships_grid();
					}
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_contact_relation_save_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();

				modAdminCommon.ADO_Transaction("RollbackTrans");
			}

			return null;
		}





		public string Find_Contact_Reference_ID(string type_name, string sub_type_name)
		{

			string result = "";
			string sQuery = "";
			int nRecCount = 0;
			int nCounter = 0;
			ADORecordSetHelper ado_ContactType = new ADORecordSetHelper();

			try
			{

				result = "";

				sQuery = $"SELECT * FROM Aircraft_Contact_Type WITH(NOLOCK) where actype_name = '{type_name}' ";

				if (sub_type_name.Trim() != "")
				{
					sQuery = $"{sQuery} and actype_compref_name2 = '{sub_type_name}' ";
				}

				//UPGRADE_ISSUE: (2064) ADODB.Connection property LOCAL_ADO_DB.CursorLocation was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				modAdminCommon.LOCAL_ADO_DB.setCursorLocation(CursorLocationEnum.adUseClient);

				ado_ContactType.Open(sQuery, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(ado_ContactType.BOF && ado_ContactType.EOF))
				{



					while(!ado_ContactType.EOF)
					{

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactType["actype_code"]))
						{

							result = Convert.ToString(ado_ContactType["actype_code"]);

							nCounter++;
						}

						ado_ContactType.MoveNext();

					};

				}

				//UPGRADE_ISSUE: (2064) ADODB.Connection property LOCAL_ADO_DB.CursorLocation was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				modAdminCommon.LOCAL_ADO_DB.setCursorLocation(CursorLocationEnum.adUseServer);

				ado_ContactType.Close();
				ado_ContactType = null;

				return result;
			}
			catch (System.Exception excep)
			{

				result = "";
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Find_Contact_Reference_ID ({Information.Err().Number.ToString()}) {excep.Message}", "Find_Contact_Reference_ID(CONTACTTYPE)");
				return result;
			}
		}

		public void Find_Company_References(ref int comp1_id, ref int comp2_id, ref string comp1_type_name, ref string comp2_type_name, int ref_id, ref string rel_type)
		{

			string sQuery = "";
			int nRecCount = 0;
			int nCounter = 0;
			ADORecordSetHelper ado_ContactType = new ADORecordSetHelper();

			try
			{


				sQuery = "SELECT compref_comp_id, compref_rel_comp_id, actype_name, actype_compref_name2, compref_contact_type ";
				sQuery = $"{sQuery} FROM Company_Reference WITH (NOLOCK) ";
				sQuery = $"{sQuery} inner join Aircraft_Contact_Type WITH(NOLOCK) on actype_code = compref_contact_type  ";
				sQuery = $"{sQuery} where compref_key = {ref_id.ToString()} ";
				//UPGRADE_ISSUE: (2064) ADODB.Connection property LOCAL_ADO_DB.CursorLocation was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				modAdminCommon.LOCAL_ADO_DB.setCursorLocation(CursorLocationEnum.adUseClient);

				ado_ContactType.Open(sQuery, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(ado_ContactType.BOF && ado_ContactType.EOF))
				{



					while(!ado_ContactType.EOF)
					{

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactType["compref_comp_id"]))
						{
							comp1_id = Convert.ToInt32(ado_ContactType["compref_comp_id"]);
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactType["compref_rel_comp_id"]))
						{
							comp2_id = Convert.ToInt32(ado_ContactType["compref_rel_comp_id"]);
						}


						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactType["actype_name"]))
						{
							comp1_type_name = Convert.ToString(ado_ContactType["actype_name"]);
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactType["actype_compref_name2"]))
						{
							comp2_type_name = Convert.ToString(ado_ContactType["actype_compref_name2"]);
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactType["compref_contact_type"]))
						{
							rel_type = Convert.ToString(ado_ContactType["compref_contact_type"]);
						}



						ado_ContactType.MoveNext();

					};

				}

				//UPGRADE_ISSUE: (2064) ADODB.Connection property LOCAL_ADO_DB.CursorLocation was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				modAdminCommon.LOCAL_ADO_DB.setCursorLocation(CursorLocationEnum.adUseServer);

				ado_ContactType.Close();
				ado_ContactType = null;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Find_Company_References_Error ({Information.Err().Number.ToString()}) {excep.Message}", "Find_Contact_Reference_ID(CONTACTTYPE)");
				return;
			}

		}

		public int Find_Zip_Mapping(string city, string state, string country, string zip_code, ref string timezone, ref string timezone_should_be)
		{

			int result = 0;
			string sQuery = "";
			int nRecCount = 0;
			int nCounter = 0;
			ADORecordSetHelper ado_ContactType = new ADORecordSetHelper();
			string temp_timezone = "";


			try
			{

				temp_timezone = "";
				sQuery = "SELECT *  ";
				sQuery = $"{sQuery} FROM Zip_Mapping WITH (NOLOCK) ";
				sQuery = $"{sQuery}  inner join [state] with (NOLOCK) on state_code = zmap_state";
				sQuery = $"{sQuery} left outer join Timezone on tzone_id = state_timezone_id";
				sQuery = $"{sQuery} where zmap_zip_code = '{zip_code}' ";

				if (city.Trim() != "")
				{
					sQuery = $"{sQuery}{build_city_select(city)}";
				}

				//  If Trim(state) <> "" Then
				//      sQuery = sQuery & "  and zmap_state= '" & state & "' "
				//  End If

				if (country.Trim() != "")
				{
					sQuery = $"{sQuery}  and zmap_country = '{country}' ";
				}



				//UPGRADE_ISSUE: (2064) ADODB.Connection property LOCAL_ADO_DB.CursorLocation was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				modAdminCommon.LOCAL_ADO_DB.setCursorLocation(CursorLocationEnum.adUseClient);

				ado_ContactType.Open(sQuery, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!(ado_ContactType.BOF && ado_ContactType.EOF))
				{



					while(!ado_ContactType.EOF)
					{

						result = 1;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactType["tzone_name"]))
						{
							if (Convert.ToString(ado_ContactType["tzone_name"]).Trim() != modGlobalVars.cEmptyString)
							{
								temp_timezone = Convert.ToString(ado_ContactType["tzone_name"]).Trim();
							}
						}


						if (timezone.Trim() == "" && temp_timezone.Trim() != "")
						{
							timezone = temp_timezone.Trim(); // then automatically set it
						}
						else if (timezone.Trim() != temp_timezone.Trim())
						{ 
							result = 3; // the timezone is wrong
							timezone_should_be = temp_timezone;
						}

						ado_ContactType.MoveNext();

					};

				}

				//UPGRADE_ISSUE: (2064) ADODB.Connection property LOCAL_ADO_DB.CursorLocation was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				modAdminCommon.LOCAL_ADO_DB.setCursorLocation(CursorLocationEnum.adUseServer);

				ado_ContactType.Close();
				ado_ContactType = null;

				return result;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Find_Company_References_Error ({Information.Err().Number.ToString()}) {excep.Message}", "Find_Contact_Reference_ID(CONTACTTYPE)");
				return result;
			}
		}







		//UPGRADE_NOTE: (7001) The following declaration (cmd_company_contact_relation_save_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_company_contact_relation_save_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//cmd_company_contact_relation_save_Click();
			//}
			//
		//}



		private void cmd_company_insert_cert_Click()
		{
			// 6/2011 MSW

			string Query = "";
			ADORecordSetHelper ado_fortune = new ADORecordSetHelper();
			string strInsert1 = "";
			int cert_id = 0;
			string strMsg = "";
			System.DateTime dtStartDate = DateTime.FromOADate(0);
			System.DateTime dtEndDate = DateTime.FromOADate(0);

			try
			{

				cert_id = 0;
				strInsert1 = "";

				// looks in the combo drop down, finds the selected type variable and gets its code from the database
				Query = "SELECT ccerttype_id ";
				Query = $"{Query}FROM Company_Certification_type WITH (NOLOCK) ";
				Query = $"{Query}WHERE (ccerttype_type = '{cert_combo_drop_down[0].Text}')";

				ado_fortune.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!ado_fortune.BOF && !ado_fortune.EOF)
				{
					cert_id = Convert.ToInt32(Double.Parse($"{Convert.ToString(ado_fortune["ccerttype_id"])}{modGlobalVars.cEmptyString}"));
				}

				ado_fortune.Close();

				// as long as the code exists, which it always should, do an insert
				if (cert_id > 0)
				{

					strInsert1 = "INSERT INTO Company_Certification (";
					strInsert1 = $"{strInsert1}ccert_type_id, ccert_number, ccert_name, ccert_note, ccert_comp_id";
					strInsert1 = $"{strInsert1}) VALUES ('";
					strInsert1 = $"{strInsert1}{cert_id.ToString()}','";
					strInsert1 = $"{strInsert1}{StringsHelper.Replace(cert_number_textbox.Text, "'", "''", 1, -1, CompareMethod.Binary)}','";
					strInsert1 = $"{strInsert1}{StringsHelper.Replace(cert_name_textbox.Text, "'", "''", 1, -1, CompareMethod.Binary)}','";
					strInsert1 = $"{strInsert1}{StringsHelper.Replace(cert_note_textbox.Text, "'", "''", 1, -1, CompareMethod.Binary)}','";
					strInsert1 = $"{strInsert1}{nReference_CompanyID.ToString()}";
					strInsert1 = $"{strInsert1}')";

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = strInsert1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();

					modAdminCommon.ADO_Transaction("BeginTrans");
					// RTW/MSW , this updates the action date to Null so that it is sent to evolution
					Query = "UPDATE Company SET comp_action_date = NULL";
					Query = $"{Query} WHERE comp_id = {nReference_CompanyID.ToString()} AND comp_journ_id = {nReference_CompanyJID.ToString()}";

					DbCommand TempCommand_2 = null;
					TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
					TempCommand_2.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
					TempCommand_2.ExecuteNonQuery();
					modAdminCommon.ADO_Transaction("CommitTrans");

					modCommon.Start_Activity_Monitor_Message("Company Certification Added", ref strMsg, ref dtStartDate, ref dtEndDate);
					strMsg = $" - {cert_combo_drop_down[0].Text} - {cert_number_textbox.Text}";
					modCommon.End_Activity_Monitor_Message("Company Certification Added", ref strMsg, dtStartDate, ref dtEndDate, 0, 0, nReference_CompanyID, 0, 0);

				} // If cert_id > 0 Then

				fill_cert_grid();

				ado_fortune = null;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_insert_cert_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
			}

		}

		private void cmd_company_name_change_cancel_Click(Object eventSender, EventArgs eventArgs)
		{
			try
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				pnl_company_name_change.Visible = false;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_name_change_cancel_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();
			}

		}

		private void cmd_company_name_change_cancel_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_company_name_change_cancel_Click(cmd_company_name_change_cancel, new EventArgs());
			}

		}

		private void cmd_company_relation_add_Click() => add_relationship_function();


		//UPGRADE_NOTE: (7001) The following declaration (cmd_company_relation_add_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_company_relation_add_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//cmd_company_relation_add_Click();
			//}
			//
		//}


		private void cmd_company_relation_remove_Click() => remove_relationship_function();


		//UPGRADE_NOTE: (7001) The following declaration (cmd_company_relation_remove_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_company_relation_remove_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//cmd_company_relation_remove_Click();
			//}
			//
		//}

		private void cmd_company_remove_cert_Click()
		{

			// MSW - 6/2011

			try
			{


				string Remove_Query = "";
				ADORecordSetHelper ado_fortune = null;
				string cert_id = "";
				if (MessageBox.Show("Are you sure you want to Remove this Certificate?", "Company : Remove Company Certificate", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
				{
					// check to see if they want to remove the certification

					ado_fortune = new ADORecordSetHelper();
					cert_id = "0";


					cert_id = lbl_comp[COMPANY_CERT_ID].Text;

					// if they do, make sure that there is an id in the caption to delete
					if (StringsHelper.ToDoubleSafe(cert_id) > 0)
					{

						Remove_Query = $"Delete From Company_Certification where ccert_id='{cert_id}'";


						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Remove_Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery();

					}

					// fill grid with updated information
					fill_cert_grid();

				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_remove_cert_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
			}

		}

		private void cmd_company_update_cert_Click()
		{

			//MSW 6/2011 - check to make sure they want to remove the company certificate
			string strUpdate1 = "";
			string Query = "";
			int cert_id = 0;
			ADORecordSetHelper ado_fortune = null;
			if (MessageBox.Show("Are you sure you want to Update this Certificate?", "Company : Update Company Certificate", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
			{

				cert_id = 0;
				ado_fortune = new ADORecordSetHelper();
				strUpdate1 = "";

				// get the text from the drop down full of types and gets the type code from the database
				Query = $"Select ccerttype_id from Company_Certification_type where ccerttype_type='{cert_combo_drop_down[0].Text}'";



				ado_fortune = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				if (!(ado_fortune.BOF && ado_fortune.EOF))
				{

					cert_id = Convert.ToInt32(Double.Parse($"{Convert.ToString(ado_fortune["ccerttype_id"])}{modGlobalVars.cEmptyString}"));

				}

				// as long as there is a type code, which there always should be, it does an update, replacing ' characters with spaces
				if (cert_id > 0)
				{

					strUpdate1 = "Update Company_Certification set ";
					strUpdate1 = $"{strUpdate1}ccert_type_id='{cert_id.ToString()}',";
					strUpdate1 = $"{strUpdate1}ccert_number='{StringsHelper.Replace(cert_number_textbox.Text, "'", "''", 1, -1, CompareMethod.Binary)}',";
					strUpdate1 = $"{strUpdate1}ccert_name='{StringsHelper.Replace(cert_name_textbox.Text, "'", "''", 1, -1, CompareMethod.Binary)}',";
					strUpdate1 = $"{strUpdate1}ccert_note='{StringsHelper.Replace(cert_note_textbox.Text, "'", "''", 1, -1, CompareMethod.Binary)}";
					strUpdate1 = $"{strUpdate1}' Where ccert_id ={lbl_comp[COMPANY_CERT_ID].Text}";

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = strUpdate1;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();

					modAdminCommon.ADO_Transaction("BeginTrans");

					// sets the company action date to null for update to evo. MSW/RTW
					Query = "UPDATE Company SET comp_action_date = NULL";
					Query = $"{Query} WHERE comp_id = {nReference_CompanyID.ToString()} AND comp_journ_id = {nReference_CompanyJID.ToString()}";

					DbCommand TempCommand_2 = null;
					TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
					TempCommand_2.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
					TempCommand_2.ExecuteNonQuery();
					modAdminCommon.ADO_Transaction("CommitTrans");
				}
				// refills the grid with new information
				fill_cert_grid();

			}

		}


		//UPGRADE_NOTE: (7001) The following declaration (cmd_contact_confirm_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_contact_confirm_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//btn_array_Click(btn_array[0], new EventArgs());
			//}
			//
		//}

		//UPGRADE_NOTE: (7001) The following declaration (cmd_contact_add_Click) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_contact_add_Click()
		//{
			//
			//frm_CompanyContact new_frm_CompanyContact = frm_CompanyContact.CreateInstance();
			//
			//try
			//{
				//
				//clear_contact_controls();
				//
				//new_frm_CompanyContact.nContactID = -1;
				//new_frm_CompanyContact.nCompanyID = nReference_CompanyID;
				//new_frm_CompanyContact.nJournID = nReference_CompanyJID;
				//new_frm_CompanyContact.CompanyName_Renamed = modCommon.GetCompanyName(nReference_CompanyID, nReference_CompanyJID);
				//new_frm_CompanyContact.ServicesUsed = modCommon.GetCompanyServiceName(nReference_CompanyID, nReference_CompanyJID, modGlobalVars.ServicesUsed_Array);
				//
				//this.Cursor = Cursors.WaitCursor;
				//
				//new_frm_CompanyContact.Top = Convert.ToInt32(mdi_ResearchAssistant.DefInstance.Top + ((mdi_ResearchAssistant.DefInstance.Height - new_frm_CompanyContact.Height) / 2d));
				//new_frm_CompanyContact.Left = Convert.ToInt32(mdi_ResearchAssistant.DefInstance.Left + ((mdi_ResearchAssistant.DefInstance.Width - new_frm_CompanyContact.Width) / 2d)); // mdi_ResearchAssistant
				//
				//new_frm_CompanyContact.ShowDialog();
				//
				//fill_company_contact_grid();
				//
				//if (enter_company_info.s_comp_fractowr_id > 0 && new_frm_CompanyContact.nContactID > 0)
				//{
					//if (enter_company_info.s_comp_fractowr_contact_id != new_frm_CompanyContact.nContactID)
					//{
						//modCompany.fill_fractional_owner_contact_list(nReference_CompanyID, nReference_CompanyJID, enter_company_info.s_comp_fractowr_id, cbo_comp_fractowr_contact_id);
					//}
					//else
					//{
						//modCompany.fill_fractional_owner_contact_list(nReference_CompanyID, nReference_CompanyJID, new_frm_CompanyContact.nContactID, cbo_comp_fractowr_contact_id);
					//}
				//}
				//
				//select_company_contact(new_frm_CompanyContact.nContactID);
				//
				//new_frm_CompanyContact = null;
				//
				//if (mvHasFocus)
				//{
					//mvHasFocus = false;
				//}
				//
				//grd_company_contacts.Redraw = true;
				//
				//this.Activate();
				//
				//search_off();
			//}
			//catch (System.Exception excep)
			//{
				//
				////UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				//modAdminCommon.Report_Error($"cmd_contact_add_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				//
				//if (mvHasFocus)
				//{
					//mvHasFocus = false;
				//}
				//
				//search_off();
			//}
			//
		//}

		//UPGRADE_NOTE: (7001) The following declaration (cmd_contact_add_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_contact_add_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//btn_array_Click(btn_array[3], new EventArgs());
			//}
			//
		//}

		private void cmd_contact_edit_Click()
		{

			try
			{

				grd_company_contacts_doubleClickBodyCode();

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_contact_edit_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();
			}

		}

		//UPGRADE_NOTE: (7001) The following declaration (cmd_contact_edit_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_contact_edit_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//cmd_contact_edit_Click();
			//}
			//
		//}

		private void cmd_contact_save_seq_Click()
		{

			StringBuilder Query = new StringBuilder();

			try
			{

				if (Convert.ToString(grd_company_contacts[1, 2].Value).Trim().ToLower() != ("No Contacts Found").ToLower())
				{

					search_on("Saving Contact Sequence ....");

					modAdminCommon.ADO_Transaction("BeginTrans");

					int tempForEndVar = grd_company_contacts.RowsCount - 1;
					for (int i = 1; i <= tempForEndVar; i++)
					{

						Query = new StringBuilder($"UPDATE Contact SET contact_acpros_seq_no = {i.ToString()}, contact_action_date = NULL");
						Query.Append($" WHERE contact_id = {grd_company_contacts.get_RowData(i).ToString()}");
						Query.Append($" AND contact_journ_id = {nReference_CompanyJID.ToString()}");

						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Query.ToString();
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery();

					}

					modAdminCommon.ADO_Transaction("CommitTrans");

					fill_company_contact_grid();

					search_off();

				}

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_contact_save_seq_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				modAdminCommon.ADO_Transaction("RollbackTrans");

				search_off();
			}

		}

		//UPGRADE_NOTE: (7001) The following declaration (cmd_contact_save_seq_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_contact_save_seq_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//cmd_contact_save_seq_Click();
			//}
			//
		//}

		// ====================================================================================
		// Written By : David D. Cruger
		// Created    : 10/01/2013
		// Modified   : 10/01/2013
		// Procedure  : cmd_contact_send_email_project_survey
		// Parameters : None
		// Returns    : None
		//
		// Notes      : Creates an email for Project Survey for this specific contact
		//
		// ====================================================================================

		private void cmd_contact_send_email_project_survey()
		{

			ADORecordSetHelper rstRec1 = new ADORecordSetHelper(); // User Table
			ADORecordSetHelper rstRec2 = new ADORecordSetHelper(); // Project Survey Configuration

			string strQuery1 = "";
			string strQuery2 = "";
			string strInsert1 = "";

			string strMsg = "";
			string strType = "";

			string strTo = "";
			string strCC = "";
			string strBCC = "";
			string strSendTo = "";

			int lPSCId = 0;
			string strProjectName = "";
			string strSubject = "";
			string strBody = "";
			string strAttachment = "";
			string strHTMLFlag = "";
			string strStatus = "";
			string strReplyName = "";
			string strReplyEMail = "";
			string strSMTPServer = "";
			int lSMTPPort = 0;
			string strSMTPUserName = "";
			string strSMTPPassWord = "";
			string strErrorMsg = "";
			string strCONTACTNAME = "";
			string strContactEMail = "";

			string strSurveyHRef = "";
			string strUserFirstName = "";
			string strUserLastName = "";
			string strUserPhoneNbr = "";
			string strUserExtNbr = "";
			string strUserEMail = "";
			string strJournalSubject = "";

			string strDateTime = "";

			int lCompId = 0;
			int lContactId = 0;

			string strButtonStatus = "";

			try
			{

				lCompId = 0;
				lContactId = 0;

				strErrorMsg = "";
				strCONTACTNAME = "";
				strUserFirstName = "";
				strUserLastName = "";
				strUserPhoneNbr = "";
				strUserExtNbr = "";
				strUserEMail = "";
				strButtonStatus = "Cancel";

				lContactId = Convert.ToInt32(Double.Parse(txt_contact_id.Text));

				strQuery1 = "SELECT user_id, user_first_name, user_last_name, user_phone_no, user_phone_no_ext, user_email_address";
				strQuery1 = $"{strQuery1} FROM [User] WITH (NOLOCK)";
				strQuery1 = $"{strQuery1} WHERE (user_id = '{modAdminCommon.gbl_User_ID}')";

				rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!rstRec1.BOF && !rstRec1.EOF)
				{

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["user_email_address"]))
					{
						if (Convert.ToString(rstRec1["user_email_address"]).Trim() != modGlobalVars.cEmptyString)
						{
							strUserEMail = Convert.ToString(rstRec1["user_email_address"]).Trim();
						}
					}

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["user_first_name"]))
					{
						if (Convert.ToString(rstRec1["user_first_name"]).Trim() != modGlobalVars.cEmptyString)
						{
							strUserFirstName = Convert.ToString(rstRec1["user_first_name"]).Trim();
						}
					}

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["user_last_name"]))
					{
						if (Convert.ToString(rstRec1["user_last_name"]).Trim() != modGlobalVars.cEmptyString)
						{
							strUserLastName = Convert.ToString(rstRec1["user_last_name"]).Trim();
						}
					}

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["user_phone_no"]))
					{
						if (Convert.ToString(rstRec1["user_phone_no"]).Trim() != modGlobalVars.cEmptyString)
						{
							strUserPhoneNbr = Convert.ToString(rstRec1["user_phone_no"]).Trim();
						}
					}

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["user_phone_no_ext"]))
					{
						if (Convert.ToString(rstRec1["user_phone_no_ext"]).Trim() != modGlobalVars.cEmptyString)
						{
							strUserExtNbr = Convert.ToString(rstRec1["user_phone_no_ext"]).Trim();
						}
					}

				}
				else
				{
					MessageBox.Show("Unable To Find Logged In User Account", "Contact : EMAIL JETNETiQ", MessageBoxButtons.OK, MessageBoxIcon.Error);
					strUserEMail = modGlobalVars.cEmptyString;
				} // If (rstRec1.BOF = False) And (rstRec1.EOF = False) Then

				rstRec1.Close();

				if (strUserEMail != modGlobalVars.cEmptyString)
				{

					if (strUserFirstName != modGlobalVars.cEmptyString && strUserLastName != modGlobalVars.cEmptyString)
					{

						if (Information.IsNumeric(txt_comp_id.Text.Trim()) && Information.IsNumeric(txt_contact_id.Text.Trim()))
						{

							lCompId = Convert.ToInt32(Double.Parse(txt_comp_id.Text.Trim()));
							lContactId = Convert.ToInt32(Double.Parse(txt_contact_id.Text.Trim()));

							strCONTACTNAME = $"{((cbo_contact_sirname.Text.Trim() != "") ? $"{cbo_contact_sirname.Text.Trim()} " : "")}" +
							                 $"{txt_contact_first_name.Text.Trim()} " +
							                 $"{((txt_contact_middle_initial.Text.Trim() != "") ? $"{txt_contact_middle_initial.Text.Trim()}. " : "")}" +
							                 $"{txt_contact_last_name.Text.Trim()} " +
							                 $"{((cbo_contact_suffix.Text.Trim() != "") ? cbo_contact_suffix.Text.Trim() : "")}";
							strCONTACTNAME = strCONTACTNAME.Trim();

							if (MessageBox.Show($"Send Project Survey EMail{Environment.NewLine}Are You Sure?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
							{

								strSendTo = $"Send To{Environment.NewLine}{txt_contact_first_name.Text} {txt_contact_last_name.Text}{Environment.NewLine}{txt_contact_email_address.Text}";

								// Get The Language
								//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								//VB.Global.Load(frm_ProjectSurvey.DefInstance);
								frm_ProjectSurvey.DefInstance.Hide();
								frm_ProjectSurvey.DefInstance.Top = Convert.ToInt32(mdi_ResearchAssistant.DefInstance.Top + ((mdi_ResearchAssistant.DefInstance.Height - frm_ProjectSurvey.DefInstance.Height) / 2d));
								frm_ProjectSurvey.DefInstance.Left = Convert.ToInt32(mdi_ResearchAssistant.DefInstance.Left + ((mdi_ResearchAssistant.DefInstance.Width - frm_ProjectSurvey.DefInstance.Width) / 2d));
								frm_ProjectSurvey.DefInstance.SetSendToLabel(strSendTo);
								frm_ProjectSurvey.DefInstance.SetContactFlag(true);
								frm_ProjectSurvey.DefInstance.SetCompanyFlag(false);
								frm_ProjectSurvey.DefInstance.ShowDialog();
								frm_ProjectSurvey.DefInstance.ReturnStatus(ref strButtonStatus);
								if (strButtonStatus == "EMail")
								{
									frm_ProjectSurvey.DefInstance.ReturnSelectedProjectSurveyId(ref lPSCId);
								} // frm_ProjectSurvey
								frm_ProjectSurvey.DefInstance.Close();

								if (strButtonStatus == "EMail" && lPSCId > 0)
								{

									//----------------------------------
									// Basic EMail Information
									//----------------------------------
									strTo = ($"{txt_contact_email_address.Text} ").Trim();
									strContactEMail = strTo;

									strCC = "";
									strBCC = "";
									strStatus = "Open";
									strAttachment = "";
									strHTMLFlag = "Y";
									strSubject = "";
									strBody = "";
									strReplyName = "";
									strReplyEMail = "";
									strJournalSubject = "";
									strSurveyHRef = "";

									//----------------------------------
									// SMTP Server Information
									//----------------------------------
									strSMTPServer = modCommon.DLookUp("aconfig_email_smtp_server", "Application_Configuration");
									lSMTPPort = Convert.ToInt32(Double.Parse(modCommon.DLookUp("aconfig_smtp_port", "Application_Configuration")));
									strSMTPUserName = modCommon.DLookUp("aconfig_email_username", "Application_Configuration");
									strSMTPPassWord = modCommon.DLookUp("aconfig_email_password", "Application_Configuration");

									// Find Project Record
									strQuery2 = "SELECT TOP 1 * FROM Project_Survey_Configuration WITH (NOLOCK) ";
									strQuery2 = $"{strQuery2}WHERE (psc_id = {lPSCId.ToString()}) ";

									rstRec2.Open(strQuery2, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

									if (!rstRec2.BOF && !rstRec2.EOF)
									{

										//----------------------------------
										// Reply Name/EMail Information
										//----------------------------------

										strReplyName = ($"{Convert.ToString(rstRec2["psc_reply_name"])} ").Trim();
										strReplyName = StringsHelper.Replace(strReplyName, "{RESEARCHERNAME}", $"{strUserFirstName} {strUserLastName}", 1, -1, CompareMethod.Binary);

										strReplyEMail = ($"{Convert.ToString(rstRec2["psc_reply_email"])} ").Trim();
										strReplyEMail = StringsHelper.Replace(strReplyEMail, "{RESEARCHEREMAIL}", strUserEMail, 1, -1, CompareMethod.Binary);

										strSubject = ($"{Convert.ToString(rstRec2["psc_email_subject"])} ").Trim();
										strBody = ($"{Convert.ToString(rstRec2["psc_email_body"])} ").Trim();

										strJournalSubject = ($"{Convert.ToString(rstRec2["psc_journ_subject"])} ").Trim();
										strSurveyHRef = ($"{Convert.ToString(rstRec2["psc_href_link"])} ").Trim();

										if (strBody != "" && strSubject != "")
										{

											strBody = StringsHelper.Replace(strBody, "{EMAILSUBJECT}", strSubject, 1, -1, CompareMethod.Binary);
											strBody = StringsHelper.Replace(strBody, "{CONTACTNAME}", strCONTACTNAME, 1, -1, CompareMethod.Binary);
											strBody = StringsHelper.Replace(strBody, "{CONTACTEMAIL}", strContactEMail, 1, -1, CompareMethod.Binary);
											strBody = StringsHelper.Replace(strBody, "{COMPID}", lCompId.ToString(), 1, -1, CompareMethod.Binary);
											strBody = StringsHelper.Replace(strBody, "{CONTACTID}", lContactId.ToString(), 1, -1, CompareMethod.Binary);
											strBody = StringsHelper.Replace(strBody, "{RESEARCHERNAME}", $"{strUserFirstName} {strUserLastName}", 1, -1, CompareMethod.Binary);
											strBody = StringsHelper.Replace(strBody, "{RESEARCHEREMAIL}", strUserEMail, 1, -1, CompareMethod.Binary);
											strBody = StringsHelper.Replace(strBody, "{SURVEYHREF}", strSurveyHRef, 1, -1, CompareMethod.Binary);

											if (modEmail.Insert_EMail_Queue_Record(strTo, strCC, strBCC, strSubject, strBody, strAttachment, strHTMLFlag, strStatus, strReplyName, strReplyEMail, strSMTPServer, lSMTPPort, strSMTPUserName, strSMTPPassWord, ref strErrorMsg, lCompId, lContactId))
											{

												modEmail.Send_All_EMail_In_Queue(ref strErrorMsg, lCompId);

												if (strErrorMsg.Trim() == "")
												{

													//-----------------------
													// Insert Journal Note
													//-----------------------

													strDateTime = DateTimeHelper.ToString(DateTime.Now);
													strInsert1 = "INSERT INTO Journal (";
													strInsert1 = $"{strInsert1}journ_subcategory_code, journ_subject, journ_contact_id, journ_comp_id, ";
													strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date ";
													strInsert1 = $"{strInsert1}) VALUES (";
													strInsert1 = $"{strInsert1}'IQ', '{strJournalSubject}',{lContactId.ToString()}, {nReference_CompanyID.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
													strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
													strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
													strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
													strInsert1 = $"{strInsert1}) ";

													modAdminCommon.ADO_Transaction("BeginTrans");
													DbCommand TempCommand = null;
													TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
													UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
													TempCommand.CommandText = strInsert1;
													//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
													//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
													TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
													UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
													TempCommand.ExecuteNonQuery();
													modAdminCommon.ADO_Transaction("CommitTrans");

												} // If Trim(strErrorMsg) = "" Then

											} // Insert EMail Query Record

										}
										else
										{
											MessageBox.Show("EMail Subject or Body Does NOT Exists For Language Selected", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
										} // If strBody <> "" And strSubject <> "" Then

									}
									else
									{
										MessageBox.Show("Unable To Find Project Survey Configuration Record", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
									} // If rstRec2.BOF = False And rstRec2.EOF = False Then

									rstRec2.Close();

								} // If strButtonStatus = "EMail" And lPSCId > 0 Then

							} // If MsgBox("Send Project Survey" & vbCrLf & strProjectName & vbCrLf & "EMail Confirmation. Are You Sure?", vbYesNo) = vbYes Then

						}
						else
						{
							MessageBox.Show("Can NOT Validate CompId And/Or ContactId", "Company : EMAIL JETNETiQ", MessageBoxButtons.OK, MessageBoxIcon.Error);
						} // If IsNumeric(Trim(txt_Comp_id.Text)) = True And IsNumeric(Trim(txt_contact_id.Text)) = True Then

					}
					else
					{
						MessageBox.Show("Logged In User Account Does NOT Have First/Last Name Entered In", "Company : EMAIL JETNETiQ", MessageBoxButtons.OK, MessageBoxIcon.Error);
					} // If (Trim(rstRec1!user_first_name & " ") <> "") And (Trim(rstRec1!user_last_name & " ") <> "") Then

				}
				else
				{
					MessageBox.Show("Logged In User Account Does NOT Have EMail Address Filled In", "Company : EMAIL JETNETiQ", MessageBoxButtons.OK, MessageBoxIcon.Error);
				} // If Trim(rstRec1!user_email_address & " ") <> "" Then

				rstRec1 = null;
				rstRec2 = null;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"EMail Project Survey Error: ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				search_off();

				modAdminCommon.ADO_Transaction("RollbackTrans");
			}

		} // cmd_contact_send_email_project_survey

		private void cmd_company_update_callback_date_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmd_company_update_callback_date, eventSender);


			switch(Index)
			{
				case 0 :  // Update Company Callback Date 
					 
					update_cb_date(0); 
					 
					break;
			} // Case Index

		} // cmd_company_update_callback_date_Click

		private void cmd_company_update_callback_date_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmd_company_update_callback_date, eventSender);
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;


			switch(Index)
			{
				case 0 :  // Company Call Back 
					 
					if (mvHasFocus)
					{
						mvHasFocus = false;
						update_cb_date(0);
					} 
					 
					break;
			} // Case Index

		} // cmd_company_update_callback_date_MouseUp

		private void cmd_contact_seq_down_Click(Object eventSender, EventArgs eventArgs)
		{

			string tmpString = modGlobalVars.cEmptyString;
			string sSeparator = modGlobalVars.cEmptyString;
			int theRow = 0;
			string theRowData = "";

			try
			{

				if (grd_company_contacts.CurrentRowIndex > 0 && Convert.ToString(grd_company_contacts[1, 2].Value).Trim().ToLower() != ("No Contacts Found").ToLower())
				{

					if ((grd_company_contacts.CurrentRowIndex < grd_company_contacts.RowsCount - 1) && grd_company_contacts.CurrentRowIndex > 0)
					{

						int tempForEndVar = grd_company_contacts.ColumnsCount - 1;
						for (int i = 0; i <= tempForEndVar; i++)
						{
							grd_company_contacts.CurrentColumnIndex = i;
							tmpString = $"{tmpString}{sSeparator}{grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].FormattedValue.ToString()}";
							sSeparator = "\t";
						}

						theRow = grd_company_contacts.CurrentRowIndex;
						theRowData = grd_company_contacts.get_RowData(grd_company_contacts.CurrentRowIndex).ToString();

						grd_company_contacts.RemoveItem(theRow);
						grd_company_contacts.AddItem(tmpString, theRow + 1);
						grd_company_contacts.set_RowData(theRow + 1, Convert.ToInt32(theRowData));

						if (grd_company_contacts.CurrentRowIndex < grd_company_contacts.RowsCount - 1)
						{
							grd_company_contacts.CurrentRowIndex = theRow + 1;
						}

						grd_company_contacts.RowSel = grd_company_contacts.CurrentRowIndex;
						grd_company_contacts.ColSel = 0;

						renumber_company_contact_grid();

						grd_company_contacts.Redraw = true;

					}

				}

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_contact_seq_down_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		private void cmd_contact_seq_down_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_contact_seq_down_Click(cmd_contact_seq_down, new EventArgs());
			}

		}

		private void cmd_contact_seq_up_Click(Object eventSender, EventArgs eventArgs)
		{

			string tmpString = modGlobalVars.cEmptyString;
			string sSeparator = modGlobalVars.cEmptyString;
			int theRow = 0;
			string theRowData = "";

			try
			{

				if (grd_company_contacts.CurrentRowIndex > 0 && Convert.ToString(grd_company_contacts[1, 2].Value).Trim().ToLower() != ("No Contacts Found").ToLower())
				{
					if (grd_company_contacts.CurrentRowIndex > 1)
					{

						int tempForEndVar = grd_company_contacts.ColumnsCount - 1;
						for (int i = 0; i <= tempForEndVar; i++)
						{
							grd_company_contacts.CurrentColumnIndex = i;
							tmpString = $"{tmpString}{sSeparator}{grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].FormattedValue.ToString()}";
							sSeparator = "\t";
						}

						theRow = grd_company_contacts.CurrentRowIndex;
						theRowData = grd_company_contacts.get_RowData(grd_company_contacts.CurrentRowIndex).ToString();

						grd_company_contacts.RemoveItem(theRow);
						grd_company_contacts.AddItem(tmpString, theRow - 1);
						grd_company_contacts.set_RowData(theRow - 1, Convert.ToInt32(theRowData));

						if (grd_company_contacts.CurrentRowIndex > 1)
						{
							grd_company_contacts.CurrentRowIndex = theRow - 1;
						}

						grd_company_contacts.RowSel = grd_company_contacts.CurrentRowIndex;
						grd_company_contacts.ColSel = 0;

						renumber_company_contact_grid();

						grd_company_contacts.Redraw = true;

					}

				}

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_contact_seq_up_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		private void cmd_contact_seq_up_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_contact_seq_up_Click(cmd_contact_seq_up, new EventArgs());
			}

		}

		private void cmd_delete_logo_Click(Object eventSender, EventArgs eventArgs) => delete_company_logo();


		private void cmd_edit_business_types_Click(Object eventSender, EventArgs eventArgs)
		{

			int i = 0;
			bool isABISelected = false;
			bool isACSelected = false;
			bool isABIOnly = false;
			string lstItem = modGlobalVars.cEmptyString;
			string Query = modGlobalVars.cEmptyString;
			string query_update = "";
			bool isYACHTSelected = false;


			try
			{

				if (enter_company_info.s_comp_product_abi_flag == "Y" || chk_comp_product_code[modGlobalVars.CHK_ABI_IDX].CheckState == CheckState.Checked)
				{
					isABISelected = true;
				}

				//  If enter_company_info.s_comp_product_yacht_flag = "Y" Or chk_comp_product_code(CHK_YACHT_IDX).Value = vbChecked Then
				//    isYACHTSelected = True
				//  End If

				if (enter_company_info.s_comp_product_business_flag == "Y" || chk_comp_product_code[modGlobalVars.CHK_BUSINESS_IDX].CheckState == CheckState.Checked)
				{
					isACSelected = true;
				}

				if (enter_company_info.s_comp_product_commercial_flag == "Y" || chk_comp_product_code[modGlobalVars.CHK_COMMERCIAL_IDX].CheckState == CheckState.Checked)
				{
					isACSelected = true;
				}


				if (enter_company_info.s_comp_product_helicopter_flag == "Y" || chk_comp_product_code[modGlobalVars.CHK_HELICOPTER_IDX].CheckState == CheckState.Checked)
				{
					isACSelected = true;
				}

				string temp_subject = "";
				string temp_desc = "";
				if (nReference_CompanyID > 0)
				{

					frm_CompanyBusinessTypes.DefInstance.inCompID = nReference_CompanyID;
					frm_CompanyBusinessTypes.DefInstance.inJournID = nReference_CompanyJID;
					frm_CompanyBusinessTypes.DefInstance.inSelectionMode = "BusType";
					frm_CompanyBusinessTypes.DefInstance.IsABI = isABISelected;
					frm_CompanyBusinessTypes.DefInstance.IsYacht = isYACHTSelected;
					frm_CompanyBusinessTypes.DefInstance.IsAC = isACSelected;
					frm_CompanyBusinessTypes.DefInstance.PrimaryBusinessType = cbo_comp_business_type.Text.Trim();
					frm_CompanyBusinessTypes.DefInstance.SelectOnly = false; // We're editing (not just selecting one)
					frm_CompanyBusinessTypes.DefInstance.ShowDialog();

					if (frm_CompanyBusinessTypes.DefInstance.PrimaryBusinessType.Trim() != "")
					{

						if (frm_CompanyBusinessTypes.DefInstance.PrimaryBusinessType.Trim().ToLower() != cbo_comp_business_type.Text.Trim().ToLower())
						{

							modAdminCommon.ADO_Transaction("BeginTrans");

							Query = $"UPDATE Company SET comp_action_date = NULL, comp_business_type = '{frm_CompanyBusinessTypes.DefInstance.PrimaryBusinessType.Trim().Substring(0, Math.Min(2, frm_CompanyBusinessTypes.DefInstance.PrimaryBusinessType.Trim().Length)).ToUpper()}'";
							Query = $"{Query} WHERE comp_id = {nReference_CompanyID.ToString()} AND comp_journ_id = {nReference_CompanyJID.ToString()}";

							// set these to the new values so they don't trigger a save
							enter_company_info.s_comp_business_type = frm_CompanyBusinessTypes.DefInstance.PrimaryBusinessType.Trim().Substring(0, Math.Min(2, frm_CompanyBusinessTypes.DefInstance.PrimaryBusinessType.Trim().Length)).ToUpper();
							exit_company_info.s_comp_business_type = frm_CompanyBusinessTypes.DefInstance.PrimaryBusinessType.Trim().Substring(0, Math.Min(2, frm_CompanyBusinessTypes.DefInstance.PrimaryBusinessType.Trim().Length)).ToUpper();

							DbCommand TempCommand = null;
							TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
							TempCommand.CommandText = Query;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
							TempCommand.ExecuteNonQuery();
							modAdminCommon.ADO_Transaction("CommitTrans");


							// ADDED MSW - 9/27/21 ----------------
							// thne business type was changed
							temp_subject = "Company Business Type Updated";
							//removed the left 2 so that the entire type goes in - MSW - 1/10/23
							temp_desc = $" Updated To: {frm_CompanyBusinessTypes.DefInstance.PrimaryBusinessType.Trim().ToUpper()}";
							//temp_desc = " Updated To: " & UCase$(left(Trim$(frm_CompanyBusinessTypes.PrimaryBusinessType), 2))

							modCommon.InsertPriorityEvent("CBTU", 0, 0, $"{cbo_comp_business_type.Text.Trim()} {temp_desc}", nReference_CompanyID, 0, "N");

							//---------------------------------



						}
					}

					if (enter_company_info.s_comp_product_abi_flag == "Y")
					{

						if (enter_company_info.s_comp_product_business_flag != "Y" && enter_company_info.s_comp_product_commercial_flag != "Y" && enter_company_info.s_comp_product_helicopter_flag != "Y" && enter_company_info.s_comp_product_airbp_flag != "Y")
						{
							isABIOnly = true;
						}

						modFillCompConControls.Fill_Company_Business_Types(nReference_CompanyID, nReference_CompanyJID, lst_business_types, cbo_comp_business_type, ref bBlockAirBp, true, isABIOnly);
						// cbo_comp_business_type.Enabled = False
						// ADDED MSW - 4/30/12
						//Call fill_businesstype_From_Select(Me.cbo_comp_business_type, nReference_CompanyID, selected_bus_type)

					}
					else
					{

						modFillCompConControls.Fill_Company_Business_Types(nReference_CompanyID, nReference_CompanyJID, lst_business_types, cbo_comp_business_type, ref bBlockAirBp, false, false);
						// cbo_comp_business_type.Enabled = False
						// ADDED MSW - 4/30/12
						//Call fill_businesstype_From_Select(Me.cbo_comp_business_type, nReference_CompanyID, selected_bus_type)

						// If inCompID > 0 Then
						// Query_update = "Update Company set WHERE  inCompID  urn_id = " & CStr(inJournID)
						//Call modAdminCommon.ADODB_Trans_conn.Execute(Query_update, , adExecuteNoRecords + adCmdText)
						//End If



					}

					if (cbo_comp_business_type.Text.Substring(0, Math.Min(2, cbo_comp_business_type.Text.Length)).Trim().ToUpper() == "DB" || cbo_comp_business_type.Text.Substring(0, Math.Min(2, cbo_comp_business_type.Text.Length)).Trim().ToUpper() == "FI" || cbo_comp_business_type.Text.Substring(0, Math.Min(2, cbo_comp_business_type.Text.Length)).Trim().ToUpper() == "MF" || cbo_comp_business_type.Text.Substring(0, Math.Min(2, cbo_comp_business_type.Text.Length)).Trim().ToUpper() == "DS")
					{

						change_background("DB");
					}
					else
					{
						if (IsAerodex)
						{
							change_background("AERODEX");
						}
						else
						{
							change_background("NORMAL");
						}
					}

				} // If nReference_CompanyID > 0 Then

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_edit_business_types_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();
				return;
			}

		}

		private void cmd_edit_business_types_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_edit_business_types_Click(cmd_edit_business_types, new EventArgs());
			}

		}

		private void cmd_company_fill_journal_Click(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				fill_company_journal_grid(grd_company_journal);
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_fill_journal_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		private void cmd_company_fill_journal_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_company_fill_journal_Click(cmd_company_fill_journal, new EventArgs());
			}

		}

		private void cmd_company_fill_aircraft_Click()
		{

			try
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				fill_company_aircraft_grid();
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_fill_aircraft_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		//UPGRADE_NOTE: (7001) The following declaration (cmd_company_fill_aircraft_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_company_fill_aircraft_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//
		//}

		private void cmd_Edit_Comp_Description_Click(Object eventSender, EventArgs eventArgs)
		{


			// LAUNCH TO THE COMPANY DESCRIPTION FORM TO SHOW DESCRIPTION IN WEB PRESENTATION FORMAT.

			string strCompCustNote1 = "";
			string strCompCustNote2 = "";

			strCompCustNote1 = modCommon.DLookUp("comp_customer_notes", "Company", $"(comp_id = {nReference_CompanyID.ToString()}) AND (comp_journ_id = {nReference_CompanyJID.ToString()})");

			this.Cursor = CursorHelper.CursorDefault;

			if ((modAdminCommon.LOCAL_ADO_DB.ConnectionString.IndexOf("jetnet_ra_test") + 1) == 0)
			{
				frm_Company_Description.DefInstance.test_or_live = "N";
			}
			else
			{
				frm_Company_Description.DefInstance.test_or_live = "Y";
			}

			frm_Company_Description.DefInstance.Comp_id = Convert.ToInt32(Double.Parse(txt_comp_id.Text));
			frm_Company_Description.DefInstance.ShowDialog();

			strCompCustNote2 = modCommon.DLookUp("comp_customer_notes", "Company", $"(comp_id = {nReference_CompanyID.ToString()}) AND (comp_journ_id = {nReference_CompanyJID.ToString()})");

			if (nReference_CompanyJID == 0)
			{

				if (strCompCustNote1 == "")
				{

					if (strCompCustNote2 != "")
					{
						modAdminCommon.Record_Event("User Action", "Added Company Customer Note", 0, nReference_CompanyJID, nReference_CompanyID, false, 0, 0);
					}

				} // If strCompCustNote1 = "" Then

			} // If nReference_CompanyJID = 0 Then

		} // cmd_Edit_Comp_Description_Click

		private void cmd_EditMailList_Click(Object eventSender, EventArgs eventArgs)
		{
			frm_CompanyContact_MList new_frm_CompanyContact_MList = frm_CompanyContact_MList.CreateInstance();


			new_frm_CompanyContact_MList.nCompanyID = nReference_CompanyID;
			new_frm_CompanyContact_MList.nContactID = Convert.ToInt32(Double.Parse(txt_contact_id.Text));
			new_frm_CompanyContact_MList.nJournID = 0;

			new_frm_CompanyContact_MList.Top = Convert.ToInt32(mdi_ResearchAssistant.DefInstance.Top + ((mdi_ResearchAssistant.DefInstance.Height - new_frm_CompanyContact_MList.Height) / 2d));
			new_frm_CompanyContact_MList.Left = Convert.ToInt32(mdi_ResearchAssistant.DefInstance.Left + ((mdi_ResearchAssistant.DefInstance.Width - new_frm_CompanyContact_MList.Width) / 2d)); // mdi_ResearchAssistant

			new_frm_CompanyContact_MList.ShowDialog();

			new_frm_CompanyContact_MList = null;

		}

		private void cmd_relationship_buttons_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmd_relationship_buttons, eventSender);


			if (Index == 0)
			{
				add_relationship_function();
			}
			else if (Index == 1)
			{ 
				remove_relationship_function();
			}
			else if (Index == 2)
			{ 
				confirm_company_function();
			}
			else if (Index == 3)
			{ 
				confirm_contact_function();
			}
			else if (Index == 4)
			{ 
				save_relationship_function();
			}


		}

		//UPGRADE_NOTE: (7001) The following declaration (cmd_save_marketing_note_Click) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_save_marketing_note_Click()
		//{
			//
		//}

		private void cmd_verify_status_cancel_Click(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				cmd_company_add_note.Visible = true;
				pnl_verify_aircraft_status.Visible = false;
				cbo_verify_journal_subject.Text = modGlobalVars.cEmptyString;
				enable_important_items();

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				// ADDED MSW = 1/15/2014 to deal with the seperate verify yacht save button
				lbl_comp[49].Text = "Add Note:";
				cmd_verify_status_save.Visible = true;
				cmd_verify_yacht[2].Visible = false;
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_verify_status_cancel_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		private void cmd_verify_status_cancel_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_verify_status_cancel_Click(cmd_verify_status_cancel, new EventArgs());
			}

		}

		private void cmd_verify_status_save_Click(Object eventSender, EventArgs eventArgs)
		{

			int nContact_ID = 0;
			int nAircraft_ID = 0;
			int yacht_id = 0;
			string strOwner = "";
			string marketing_note = "";
			int spot1 = 0;
			string strJournalSubject = "";
			string JCatPart1 = "";
			bool iq_auto_on = false;
			bool iq_auto_off = false;

			try
			{

				// ENSURE THAT THE USER HAS SELECTED A CONTACT BEFORE VERIFYING STATUS
				if (cbo_verify_other_contacts.SelectedIndex == -1 && chk_verify_contact.CheckState == CheckState.Checked)
				{
					if (sVerifyAircraftStatus.Trim().ToUpper() == "NOTE")
					{
						MessageBox.Show("You must select a contact for this note", "Company : Insert Research Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
					}
					else
					{
						MessageBox.Show("Verify Aircraft Status By CONTACT is blank", "Company : Verify Aircraft Status", MessageBoxButtons.OK, MessageBoxIcon.Information);
					}

					cbo_verify_other_contacts.Focus();

					return;

				}

				//this means this was somehow selected by tab ?
				//MSW - 9/28/18
				if (opt_verify_aircraft[5].Checked && (!lst_aircraft.Visible || lst_aircraft.Text == ""))
				{
					opt_verify_aircraft[5].Checked = false;
					lst_aircraft.Visible = false;
					nSelVerifyAircraft = modGlobalVars.opt_verify_ac_NONE;
				}



				// ENSURE THAT THE USER HAS ENTERED A JOURNAL NOTE BEFORE VERIFYING STATUS
				if (sVerifyAircraftStatus.Trim().ToUpper() == "NOTE")
				{
					JCatPart1 = cbo_verify_note_type.Text.Substring(0, Math.Min(2, cbo_verify_note_type.Text.Length));
					if (JCatPart1 == "iQ" || JCatPart1 == "ID" || JCatPart1 == "PB" || JCatPart1 == "RA" || JCatPart1 == "DO")
					{
						strJournalSubject = cbo_verify_journal_subject.Text.Trim();
						if (strJournalSubject == modGlobalVars.cEmptyString)
						{
							MessageBox.Show("You cannot add a blank note!", "Company : Insert Research Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
							//cbo_verify_journal_auto_subject.SetFocus
							return;
						}
					}
					else
					{
						strJournalSubject = cbo_verify_journal_subject.Text.Trim();
						if (strJournalSubject == modGlobalVars.cEmptyString)
						{
							MessageBox.Show("You cannot add a blank note!", "Company : Insert Research Note", MessageBoxButtons.OK, MessageBoxIcon.Information);
							cbo_verify_journal_subject.Focus();
							return;
						}
					}
				}

				// set contact ID to zero(0) if we don't have a verify contact
				// If cbo_verify_other_contacts.ListIndex = -1 And chk_verify_contact.Value = vbUnchecked Then
				//   nContact_ID = 0
				// Else
				//   nContact_ID = cbo_verify_other_contacts.ItemData(cbo_verify_other_contacts.ListIndex)
				// End If

				if (chk_verify_contact.CheckState == CheckState.Unchecked)
				{
					nContact_ID = 0;
				}
				else
				{
					nContact_ID = cbo_verify_other_contacts.GetItemData(cbo_verify_other_contacts.SelectedIndex);
				}

				if (sVerifyAircraftStatus.Trim().ToUpper() == ("Note").ToUpper())
				{

					if (!cbo_verify_aircraft.Visible)
					{ // cbo_verify_aircraft.ListIndex = -1 And
						// added MSW 11/13/12
						// also added the .visible to the first part, if you click, then it dissapears, then dont want it still active
						if (cbo_yachts.Visible)
						{
							spot1 = (cbo_yachts.Text.IndexOf(" -") + 1);
							yacht_id = Convert.ToInt32(Double.Parse(cbo_yachts.Text.Substring(0, Math.Min(spot1 - 1, cbo_yachts.Text.Length))));
						}
						nAircraft_ID = 0;
					}
					else
					{
						yacht_id = 0;
						if ((cbo_verify_aircraft.Text) != "")
						{
							nAircraft_ID = cbo_verify_aircraft.GetItemData(cbo_verify_aircraft.SelectedIndex);
						}
						else
						{
							nAircraft_ID = 0;
							if (Convert.ToString(lst_aircraft.Tag).Trim() == "")
							{
								MessageBox.Show("You Need to Pick An Aircraft", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
								return;
							}
						}
					}
				}
				else if (sVerifyAircraftStatus.Trim().ToUpper() == ("One").ToUpper())
				{ 
					if (grd_company_aircraft.CurrentRowIndex > 0 && Convert.ToString(grd_company_aircraft[1, 3].Value).Trim().ToUpper() != ("No Aircraft Found").ToUpper())
					{
						nAircraft_ID = grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex);

						// check and  see who has this aircraft record locked - if anyone
						strOwner = modCommon.AircraftLocked(nAircraft_ID, nReference_CompanyJID).ToLower();

						//If someone has this locked who is not "me" then say so
						if (strOwner != "false" && strOwner != modAdminCommon.gbl_User_ID.ToLower())
						{
							MessageBox.Show($"Aircraft locked: AC ID: {nAircraft_ID.ToString()} by {strOwner}", "Company : Verify Aircraft Status", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
							return;
						} //Not (strOwner = "False") And Not (strOwner = LCase$(gbl_User_ID))

					}
					else
					{
						MessageBox.Show("You must select an Aircraft to Verify Status", "Company : Verify Aircraft Status", MessageBoxButtons.OK, MessageBoxIcon.Information);
						return;
					}
				}
				else if (sVerifyAircraftStatus.Trim().ToUpper() == ("Owner").ToUpper())
				{ 

					if (yacht_owner_id > 0)
					{
						yacht_id = yacht_owner_id;
						nAircraft_ID = 0;
					}
					else
					{
						if (grd_company_aircraft.CurrentRowIndex > 0 && Convert.ToString(grd_company_aircraft[1, 3].Value).Trim().ToUpper() != ("No Aircraft Found").ToUpper())
						{
							nAircraft_ID = grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex);

							// check and  see who has this aircraft record locked - if anyone
							strOwner = modCommon.AircraftLocked(nAircraft_ID, nReference_CompanyJID).ToLower();

							//If someone has this locked who is not "me" then say so
							if (strOwner != "false" && strOwner != modAdminCommon.gbl_User_ID.ToLower())
							{
								MessageBox.Show($"Aircraft locked: AC ID: {nAircraft_ID.ToString()} by {strOwner}", "Company : Verify Aircraft Status", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
								return;
							} //Not (strOwner = "False") And Not (strOwner = LCase$(gbl_User_ID))

						}
						else
						{
							MessageBox.Show("You must select an Aircraft to Verify Ownership", "Company : Verify Aircraft Status", MessageBoxButtons.OK, MessageBoxIcon.Information);
							return;
						}
					}

				}

				if (sVerifyAircraftStatus.Trim().ToUpper() == ("Note").ToUpper())
				{
					search_on("Adding Company Journal Note....");
				}
				else
				{
					search_on("Verifing Aircraft Status....");
				}

				if (txt_marketing_notes.Text.Trim() != "")
				{
					marketing_note = $"|| {StringsHelper.Replace(txt_marketing_notes.Text.Trim(), "'", "", 1, -1, CompareMethod.Binary)}";
				}

				// added in MSW - 4/8/21 - these will be what josiah looks for to automate the process
				//Or chk_array(2).Value = 1 Or chk_array(3).Value = 1 Or chk_array(4).Value = 1
				if (Convert.ToString(chk_array[1].Tag).Trim() != "")
				{
					if (StringsHelper.ToDoubleSafe(Convert.ToString(chk_array[1].Tag)) == 0 && chk_array[1].CheckState == CheckState.Checked)
					{ // then we - autoamted it
						if (chk_array[1].CheckState == CheckState.Checked)
						{
							txt_market_note[3].Text = $"{txt_market_note[3].Text} -- ";
						}

						if (chk_array[1].CheckState == CheckState.Checked)
						{
							txt_market_note[3].Text = $"{txt_market_note[3].Text} (IQ Automated) ";
							iq_auto_on = true;
						}
					}
					else if (StringsHelper.ToDoubleSafe(Convert.ToString(chk_array[1].Tag)) == 1 && chk_array[1].CheckState == CheckState.Unchecked)
					{  // then we turned off
						if (chk_array[1].CheckState == CheckState.Unchecked)
						{
							txt_market_note[3].Text = $"{txt_market_note[3].Text} -- ";
						}

						if (chk_array[1].CheckState == CheckState.Unchecked)
						{
							txt_market_note[3].Text = $"{txt_market_note[3].Text} (Removed From iQ Automated List) ";
							iq_auto_off = true;
						}
					}
				}



				string tempRefParam = $"{strJournalSubject}{marketing_note}";
				string Query = "";
				if (modCompany.verify_aircraft_status(nReference_CompanyID, nAircraft_ID, nContact_ID, nReference_CompanyJID, ref tempRefParam, cbo_verify_note_type.Text.Trim(), cbo_verify_other_contacts, cbo_verify_aircraft, nSelVerifyJournSub, nSelVerifyAircraft, grd_company_aircraft, ref arrConfirmAircraft, sVerifyAircraftStatus, yacht_id, cbo_yachts.Text, Convert.ToString(lst_aircraft.Tag), txt_market_note[3].Text, "COMP"))
				{

					Query = "";
					if (iq_auto_on)
					{
						Query = $"UPDATE Contact SET contact_iq_status = 'Y'  where contact_journ_id = 0 and contact_id = {nContact_ID.ToString()} and contact_comp_id = {nReference_CompanyID.ToString()} ";


						modAdminCommon.ADO_Transaction("BeginTrans");

						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery();

						modAdminCommon.ADO_Transaction("CommitTrans");
					}
					else if (iq_auto_off)
					{ 

						Query = $"UPDATE Contact SET contact_iq_status = 'N'  where contact_journ_id = 0 and contact_id = {nContact_ID.ToString()} and contact_comp_id = {nReference_CompanyID.ToString()} ";

						modAdminCommon.ADO_Transaction("BeginTrans");

						DbCommand TempCommand_2 = null;
						TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
						TempCommand_2.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
						TempCommand_2.ExecuteNonQuery();

						modAdminCommon.ADO_Transaction("CommitTrans");
					}

					// added MSW - 1/11/21 - per task
					if (cbo_verify_note_type.Text.Trim().StartsWith("RADN", StringComparison.Ordinal))
					{
						confirm_coy_reassign_procedure(nAircraft_ID);
					}


					if (cbo_verify_note_type.Text.Trim().StartsWith("RVEAT", StringComparison.Ordinal))
					{
						update_last_contact_date(true, txt_market_note[3].Text);
					}

					if (cbo_verify_note_type.Text.Trim().StartsWith("RAAT", StringComparison.Ordinal))
					{
						update_last_contact_date(true, txt_market_note[3].Text);
					}

					// ADDED IN MSW - to do DOCAT AND MEMO - 5/13/19
					if ((cbo_verify_note_type.Text.Trim().StartsWith("MEMO", StringComparison.Ordinal) && strJournalSubject.Trim() == "MEMO - Memo Attempted") || cbo_verify_note_type.Text.Trim().StartsWith("DOCAT", StringComparison.Ordinal))
					{
						update_last_contact_date(true, txt_market_note[3].Text);
					}

					if (sVerifyAircraftStatus.Trim().ToUpper() == ("Note").ToUpper())
					{
						fill_company_journal_grid(grd_company_journal);
					}
					else
					{
						fill_company_aircraft_grid(ac_reload_spot);
					}

					if (nReference_CompanyJID == 0 && sVerifyAircraftStatus.Trim().ToUpper() != ("Note").ToUpper())
					{

						cmd_company_update_callback_date_Click(cmd_company_update_callback_date[0], new EventArgs());

						//update the company contact_date if any of the aircraft have been verified
						if (lbl_comp[LAST_CALLED_INDEX].Text.Trim() != "")
						{
							if (Information.IsDate(lbl_comp[LAST_CALLED_INDEX].Text.Trim()))
							{
								if (DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)) != DateTime.Parse(lbl_comp[LAST_CALLED_INDEX].Text.Trim()))
								{
									update_last_contact_date(false);
								}
							}
							else
							{
								update_last_contact_date(false);
							} //IsDate(Trim$(lbl_comp(LAST_CALLED_INDEX).Caption))
						} //Trim$(lbl_comp(LAST_CALLED_INDEX).Caption) <> ""

					} //nReference_CompanyJID = 0

				} // modCompany.Verify_Aircraft_Status

				cmd_company_add_note.Visible = true;
				cbo_verify_journal_subject.Text = "";
				txt_market_note[3].Text = "";
				cbo_verify_journal_auto_subject.Text = "";
				txt_marketing_notes.Text = "";
				pnl_verify_aircraft_status.Visible = false;
				cmd_ac_verify[0].Visible = false; // Verify Aircraft

				cbo_yachts.Items.Clear();

				search_off();

				enable_important_items();

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_verify_status_save_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();
			}

		} // cmd_verify_status_save_Click

		private void cmd_verify_status_save_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_verify_status_save_Click(cmd_verify_status_save, new EventArgs());
			}

		}

		private void cmd_company_update_stats_Click(Object eventSender, EventArgs eventArgs)
		{
			try
			{

				search_on("Updating Company Statistics....");

				modCommon.Company_Stats_Update(nReference_CompanyID);
				// Call fill_stats_grid

				search_off();

				MessageBox.Show("Company Statistics Are Now Beinging Updated as a Background Process. Results may not appear until the next time you enter this form.", "Company: Update Statistics", MessageBoxButtons.OK, MessageBoxIcon.Information);

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_update_stats_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		private void cmd_company_update_stats_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_company_update_stats_Click(cmd_company_update_stats, new EventArgs());
			}

		}

		private void cmd_verify_aircraft_Click()
		{
			try
			{

				string test_new = "";
				int C = 0;
				string back_color = "";

				test_new = "N";
				//test_new = "Y"
				C = 0;


				if (test_new == "Y")
				{


					lbl_comp[VERIFY_NOTETYPE_INDEX].Visible = false;
					lbl_comp[VERIFY_ACLABEL_INDEX].Visible = false;
					lbl_comp[VERIFY_NOTELABEL_INDEX].Visible = false;
					lbl_comp[VERIFY_STATUS_INDEX].Visible = false;
					lbl_comp[VERIFY_CONTACTLABEL_INDEX].Text = "Please Select A Contact To Verify Status:";
					lbl_comp[VERIFY_CONTACTLABEL_INDEX].Visible = true;

					frm_verify_status.DefInstance.nReference_CompanyJID = nReference_CompanyJID;
					frm_verify_status.DefInstance.nReference_CompanyID = nReference_CompanyID;
					frm_verify_status.DefInstance.nSelectedAircraftID = nSelectedAircraftID;
					frm_verify_status.DefInstance.strSelectedAircraft = strSelectedAircraft;
					frm_verify_status.DefInstance.nSelectedYachtID = nSelectedYachtID;
					frm_verify_status.DefInstance.strSelectedYacht = strSelectedYacht;
					frm_verify_status.DefInstance.nSelectedContactID = nSelectedContactID;
					frm_verify_status.DefInstance.strSelectedContact = strSelectedContact;
					frm_verify_status.DefInstance.nSelVerifyJournSub = nSelVerifyJournSub;
					frm_verify_status.DefInstance.nSelVerifyAircraft = nSelVerifyAircraft;
					frm_verify_status.DefInstance.sVerifyAircraftStatus = "ONE";
					frm_verify_status.DefInstance.lbl_comp[11].Text = lbl_comp[LAST_CALLED_INDEX].Text;
					frm_verify_status.DefInstance.form_company_name = txt_comp_name.Text;



					grd_company_aircraft.CurrentColumnIndex = 8;
					back_color = ColorTranslator.ToOle(grd_company_aircraft.CellBackColor).ToString();


					frm_verify_status.DefInstance.grd_Company_Aircraft.ColumnsCount = 16;
					int tempForEndVar = grd_company_aircraft.ColumnsCount - 1;
					for (C = 0; C <= tempForEndVar; C++)
					{
						frm_verify_status.DefInstance.grd_Company_Aircraft[1, C].Value = Convert.ToString(grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, C].Value);
						frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentColumnIndex = C;
						frm_verify_status.DefInstance.grd_Company_Aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(back_color)));
					}



					//  frm_verify_status.grd_Company_Aircraft.AddItem (grd_Company_Aircraft.Row(grd_Company_Aircraft.Index))

					grd_company_aircraft.CurrentColumnIndex = 3;
					frm_verify_status.DefInstance.grd_Company_Aircraft[frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentRowIndex, frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentColumnIndex].Value = grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString();
					// if we picked a row where some of the details are blank--- go above that one ---
					if (frm_verify_status.DefInstance.grd_Company_Aircraft[frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentRowIndex, frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim() == "")
					{

						grd_company_aircraft.CurrentColumnIndex = 3;
						grd_company_aircraft.CurrentRowIndex--;
						frm_verify_status.DefInstance.grd_Company_Aircraft[frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentRowIndex, frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentColumnIndex].Value = grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString();

						if (frm_verify_status.DefInstance.grd_Company_Aircraft[frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentRowIndex, frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim() == "")
						{
							grd_company_aircraft.CurrentColumnIndex = 3;
							grd_company_aircraft.CurrentRowIndex--;
							frm_verify_status.DefInstance.grd_Company_Aircraft[frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentRowIndex, frm_verify_status.DefInstance.grd_Company_Aircraft.CurrentColumnIndex].Value = grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString();
						}


					}

					frm_verify_status.DefInstance.Show();
					frm_verify_status.DefInstance.display_verify_aircraft_status_pnl_form(frm_Company.DefInstance, "One", nReference_CompanyID, nReference_CompanyJID, nSelectedContactID, frm_verify_status.DefInstance.grd_Company_Aircraft, arrConfirmAircraft);

					lbl_comp[LAST_CALLED_INDEX].Text = "";

					cmd_company_add_note.Visible = true;
					cbo_verify_journal_subject.Text = "";
					txt_market_note[3].Text = "";
					cbo_verify_journal_auto_subject.Text = "";
					txt_marketing_notes.Text = "";
					pnl_verify_aircraft_status.Visible = false;
					cmd_ac_verify[0].Visible = false; // Verify Aircraft

				}
				else
				{
					display_verify_aircraft_status_pnl("One");

					if (mvHasFocus)
					{
						mvHasFocus = false;
					}
				}
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_verify_aircraft_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}


		}

		//UPGRADE_NOTE: (7001) The following declaration (cmd_verify_aircraft_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_verify_aircraft_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//cmd_verify_aircraft_Click();
			//}
			//
		//}

		private void cmd_verify_all_aircraft_Click()
		{

			try
			{

				display_verify_aircraft_status_pnl("ALL");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_verify_all_aircraft_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		//UPGRADE_NOTE: (7001) The following declaration (cmd_verify_all_aircraft_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_verify_all_aircraft_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//cmd_verify_all_aircraft_Click();
			//}
			//
		//}

		private void cmd_verify_all_fixed_wing_Click()
		{

			try
			{

				display_verify_aircraft_status_pnl("Fixed");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_verify_all_fixed_wing_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		private void cmd_verify_all_available_Click()
		{

			try
			{

				display_verify_aircraft_status_pnl("AVAILABLE");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_verify_all_fixed_wing_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}


		//UPGRADE_NOTE: (7001) The following declaration (cmd_verify_all_fixed_wing_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_verify_all_fixed_wing_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//cmd_verify_all_fixed_wing_Click();
			//}
			//
		//}

		private void cmd_verify_all_helicopters_Click()
		{

			try
			{

				display_verify_aircraft_status_pnl("Rotary");

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_verify_all_helicopters_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		//UPGRADE_NOTE: (7001) The following declaration (cmd_verify_all_helicopters_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_verify_all_helicopters_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//cmd_verify_all_helicopters_Click();
			//}
			//
		//}





		private void cmd_verify_yacht_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmd_verify_yacht, eventSender);
			// NOTE - THIS BUTTON IS HERE FOR THE YACHT VERIFY ITEMS
			// THIS IS NOT THE SAVE JOURNAL NOTE BUTTON, IT IS LOCATED DIRECTLY BEHIND/NEXT TO IT

			string[] subjects = null;
			int[] yacht_id = new int[901];
			string strUpdate1 = "";
			int lRow1 = 0;

			string temp_desc = "";
			int last_yacht_id = 0;
			int yacht_id_spot = 0;
			int last_spot = 0;
			int Current_Row = 0;
			int contact_id = 0;
			string strToday = DateTime.Now.ToString("d");
			string subject1 = "";
			int i = 0;
			int X = 0;

			cmd_verify_yacht[2].Tag = "";

			switch(Index)
			{
				case 6 :  // Load CRM Markeing Notes 
					 
					fill_company_journal_grid(grd_marketing_crm_notes); 
					 
					break;
			} // Case Index

		}

		private void cmd_wanted_add_Click(Object eventSender, EventArgs eventArgs)
		{

			try
			{


				pnl_company_wanted.Visible = true;


				if (!keep_wanteds_items)
				{
					txt_amwant_notes.Text = modGlobalVars.cEmptyString;
				}
				else
				{
					save_wanted_info.save_amwant_id = -1; // reset id
				}

				clear_save_wanted_info(ref save_wanted_info);
				txt_amwant_listed_date.Text = DateTime.Now.ToString("d");
				txt_amwant_start_year.Text = "Open";
				txt_amwant_end_year.Text = modGlobalVars.cEmptyString;
				txt_amwant_max_price.Text = "0";
				txt_amwant_max_aftt.Text = "0";
				txt_amwant_yearnote.Text = modGlobalVars.cEmptyString;
				txt_amwant_pricenote.Text = modGlobalVars.cEmptyString;

				chk_amwant_auto_distribute_flag.CheckState = CheckState.Unchecked;
				txt_amwant_auto_distribute_email.Text = modGlobalVars.cEmptyString;
				txt_amwant_auto_distribute_replyname.Text = modGlobalVars.cEmptyString;
				txt_amwant_auto_unsuscribe_date.Text = modGlobalVars.cEmptyString;

				txt_amwant_date_verified.Text = DateTime.Now.ToString("d");
				txt_amwant_date_verified.BackColor = NORMAL_TXT_BACKCOLOR;

				lbl_comp[WANT_MOD_BUILD_YR_INDEX].Text = modGlobalVars.cEmptyString;
				cbo_amwant_accept_damage_cur.SelectedIndex = cbo_amwant_accept_damage_cur.Items.Count - 1;
				cbo_amwant_accept_damage_hist.SelectedIndex = cbo_amwant_accept_damage_hist.Items.Count - 1;
				cbo_amwant_model.SelectedIndex = -1;
				//UPGRADE_ISSUE: (2064) ComboBox property cbo_amwant_model.Locked was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				cbo_amwant_model.setLocked(false);

				chk_amwant_date_is_verified.CheckState = CheckState.Checked;

				pnl_company_wanted.Refresh();




				cmd_wanted_add.Visible = false;

				grd_company_wanted.CurrentRowIndex = 0;
				grd_company_wanted.Redraw = true;

				lbl_comp[81].Visible = true;

				txt_amwant_auto_unsuscribe_date.Visible = true;
				txt_amwant_auto_distribute_email.Visible = true;
				txt_amwant_auto_distribute_replyname.Visible = true;
				Shape3.Visible = true;

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}



				search_off();
			}
			catch (System.Exception excep)
			{

				if (nReference_CompanyJID == 0)
				{
					cmd_wanted_add.Visible = true;
				}

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_wanted_add_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		private void cmd_wanted_add_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_wanted_add_Click(cmd_wanted_add, new EventArgs());
			}

		}


		//UPGRADE_NOTE: (7001) The following declaration (cmd_wanted_cancel_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_wanted_cancel_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//cmd_wanted_cancel_Click();
			//}
		//}

		private void cmd_wanted_delete_Click(Object eventSender, EventArgs eventArgs)
		{
			try
			{

				if (MessageBox.Show("Are you sure you want to Delete this Wanted?", "Company: Delete Wanted", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
				{
					save_wanted_selection(ref save_wanted_info);
					modCompany.wanted_aircraft_delete(nReference_CompanyID, nReference_CompanyJID, save_wanted_info);
					insert_company_journal(nReference_CompanyID);

					// added MSW - 10/27/21 ------------------
					modAdminCommon.ADO_Transaction("BeginTrans");

					modCommon.InsertPriorityEvent("RWAN", 0, 0, $"Previous Note: {StringsHelper.Replace(txt_amwant_notes.Text, "'", "", 1, -1, CompareMethod.Binary)}", nReference_CompanyID, 0, "Y");

					modAdminCommon.ADO_Transaction("CommitTrans");
					//-----------------------------------------

					fill_wanted_grid();
				}

				clear_wanted_controls();

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_wanted_delete_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				search_off();
				return;
			}

		}
		public void insert_company_journal(int nReference_CompanyID)
		{

			string strDateTime = "";
			string strInsert1 = "";

			strDateTime = DateTimeHelper.ToString(DateTime.Now);
			strInsert1 = "INSERT INTO Journal (";
			strInsert1 = $"{strInsert1}journ_subcategory_code, journ_subject, journ_contact_id, journ_comp_id, ";
			strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date ";
			strInsert1 = $"{strInsert1}, journ_description) VALUES (";
			strInsert1 = $"{strInsert1}'RN', 'Wanted Record Deleted',0, {nReference_CompanyID.ToString()}, '{modAdminCommon.gbl_User_ID}', 'A', ";
			strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
			strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
			strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
			strInsert1 = $"{strInsert1}, 'Previous Note: {StringsHelper.Replace(txt_amwant_notes.Text, "'", "", 1, -1, CompareMethod.Binary)}'";

			strInsert1 = $"{strInsert1}) ";

			modAdminCommon.ADO_Transaction("BeginTrans");
			DbCommand TempCommand = null;
			TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
			UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
			TempCommand.CommandText = strInsert1;
			//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
			TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
			UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
			TempCommand.ExecuteNonQuery();
			modAdminCommon.ADO_Transaction("CommitTrans");

		}

		private void cmd_wanted_delete_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;
			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_wanted_delete_Click(cmd_wanted_delete, new EventArgs());
			}
		}

		private void cmd_wanted_verify_Click_1()
		{

			string wanted_Desc = modGlobalVars.cEmptyString;
			bool bWasChange = false;
			string check_for_contact = ""; // checking wanted note for "Contact"
			try
			{

				if (save_wanted_info.save_amwant_id == -1)
				{
					// txt_amwanted_notes

					wanted_Desc = $"{cbo_amwant_model.Text.Trim()}{modGlobalVars.cSingleSpace}{txt_amwant_start_year.Text}";
					// check txt_amwant_notes for "contact"
					if (txt_amwant_notes.Text.Trim() != modGlobalVars.cEmptyString)
					{
						check_for_contact = txt_amwant_notes.Text;
						if ((check_for_contact.ToUpper().IndexOf("CONTACT") + 1) == 0)
						{
							MessageBox.Show($"You did not add your Wanted Note which means this Wanted will go out on Evolution Priority Events with no contact information.{Environment.NewLine}Please add ''Contact...'' to the Wanted Note.{Environment.NewLine}Save will not continue", "No Contact Info in Wanted Notes", MessageBoxButtons.OK, MessageBoxIcon.Error);
							return;
						}
					}
					else
					{
						MessageBox.Show($"You did not add your Wanted Note which means this Wanted will go out on Evolution Priority Events with no contact information.{Environment.NewLine}Please add ''Contact...'' to the Wanted Note.{Environment.NewLine}Save will not continue", "No Contact Info in Wanted Notes", MessageBoxButtons.OK, MessageBoxIcon.Error);
						return;
					}
					if (txt_amwant_end_year.Text.Trim() != modGlobalVars.cEmptyString)
					{
						wanted_Desc = $"{wanted_Desc}{modGlobalVars.cHyphen}{txt_amwant_end_year.Text}";
					}

					if (modCommon.pubf_ReturnNumberFromDollarAmt(txt_amwant_max_price.Text) > 0)
					{
						wanted_Desc = $"{wanted_Desc} ${txt_amwant_max_price.Text.Trim()}{modGlobalVars.cSingleSpace}{txt_amwant_notes.Text.Trim()}";
					}
					else
					{
						wanted_Desc = $"{wanted_Desc} $(unknown){modGlobalVars.cSingleSpace}{txt_amwant_notes.Text.Trim()}";
					}

					if (verify_wanted_controls())
					{

						save_wanted_selection(ref save_wanted_info);
						modCompany.wanted_aircraft_insert(nReference_CompanyID, nReference_CompanyJID, nSelectedContactID, ref save_wanted_info);

						// Insert Wanted Priority Event
						if (save_wanted_info.save_amwant_id > -1)
						{
							modCommon.InsertPriorityEvent("NEWWA", 0, 0, wanted_Desc.Trim(), nReference_CompanyID, nReference_CompanyJID, "N", save_wanted_info.save_amwant_id);
						}
						fill_wanted_grid();

					}

				}
				else
				{

					// check txt_amwant_notes for "contact"
					if (txt_amwant_notes.Text.Trim() != modGlobalVars.cEmptyString)
					{
						check_for_contact = txt_amwant_notes.Text;
						if ((check_for_contact.ToUpper().IndexOf("CONTACT") + 1) == 0)
						{
							MessageBox.Show($"You did not add your Wanted Note which means this Wanted will go out on Evolution Priority Events with no contact information.{Environment.NewLine}Please add ''Contact...'' to the Wanted Note.{Environment.NewLine}Save will not continue", "No Contact Info in Wanted Notes", MessageBoxButtons.OK, MessageBoxIcon.Error);
							return;
						}
					}
					else
					{
						MessageBox.Show($"You did not add your Wanted Note which means this Wanted will go out on Evolution Priority Events with no contact information.{Environment.NewLine}Please add ''Contact...'' to the Wanted Note.{Environment.NewLine}Save will not continue", "No Contact Info in Wanted Notes", MessageBoxButtons.OK, MessageBoxIcon.Error);
						return;
					}

					if (save_wanted_info.save_amwant_model.Trim() != cbo_amwant_model.Text.Trim())
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_listed_date.Trim() != txt_amwant_listed_date.Text.Trim())
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_verified_date.Trim() != txt_amwant_date_verified.Text.Trim())
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_start_year.Trim() != txt_amwant_start_year.Text.Trim())
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_end_year.Trim() != txt_amwant_end_year.Text.Trim())
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_max_price != modCommon.pubf_ReturnNumberFromDollarAmt(txt_amwant_max_price.Text))
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_max_aftt != Convert.ToInt32(Conversion.Val(StringsHelper.Replace(txt_amwant_max_aftt.Text.Trim(), ",", "", 1, -1, CompareMethod.Binary))))
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_accept_damage_cur.Trim() != cbo_amwant_accept_damage_cur.Text.Trim())
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_accept_damage_hist.Trim() != cbo_amwant_accept_damage_hist.Text.Trim())
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_yearnote.Trim() != txt_amwant_yearnote.Text.Trim())
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_pricenote.Trim() != txt_amwant_pricenote.Text.Trim())
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_notes.Trim() != txt_amwant_notes.Text.Trim())
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_auto_distribute_flag != ((short) chk_amwant_auto_distribute_flag.CheckState))
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_auto_distribute_email.Trim() != txt_amwant_auto_distribute_email.Text.Trim())
					{
						bWasChange = true;
					}

					if (save_wanted_info.save_amwant_auto_distribute_replyname.Trim() != txt_amwant_auto_distribute_replyname.Text.Trim())
					{
						bWasChange = true;
					}

					if (bWasChange)
					{ // if there were no changes found then exit

						if (verify_wanted_controls())
						{

							save_wanted_selection(ref save_wanted_info);
							modCompany.wanted_aircraft_update(nReference_CompanyID, nReference_CompanyJID, nSelectedContactID, save_wanted_info, ref arrConfirmWantedAC, "Save");
							fill_wanted_grid();

						}

					}

				}

				if (nReference_CompanyJID == 0)
				{
					cmd_wanted_add.Visible = true;
				}

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				search_off();
			}
			catch (System.Exception excep)
			{

				if (nReference_CompanyJID == 0)
				{
					cmd_wanted_add.Visible = true;
				}

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_wanted_save_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		//UPGRADE_NOTE: (7001) The following declaration (cmd_wanted_verify_MouseUp) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cmd_wanted_verify_MouseUp(int Button, int Shift, float X, float Y)
		//{
			//
			//if (mvHasFocus)
			//{
				//mvHasFocus = false;
				//cmd_wanted_verify_Click();
			//}
			//
		//}

		private void cmd_wanted_save_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmd_wanted_save, eventSender);

			keep_wanteds_items = false;
			switch(Index)
			{
				case 0 : 
					cmd_wanted_verify_Click_1(); 
					break;
				case 1 : 
					cmd_wanted_verify_Click(); 
					break;
				case 2 : 
					cmd_wanted_cancel_Click(); 
					break;
				case 3 : 
					cmd_wanted_verify_Click_1(); 
					keep_wanteds_items = true; 
					break;
			}

		}

		private void cmdCertCommand_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmdCertCommand, eventSender);

			string strDateTime = "";
			string strInsert1 = "";
			string temp_string = "";
			string temp_cert_num = "";
			string temp_cat = "";

			cert_combo_drop_down[1].Visible = false;
			cmdCertCommand[Index].Enabled = false;

			int new_fin_id = 0;
			string Query = "";
			ADORecordSetHelper ado_fin_id = null;
			switch(Index)
			{
				case 0 :  // Update 
					 
					temp_string = cert_combo_drop_down[0].Text; 
					 
					cmd_company_update_cert_Click(); 
					 
					//-------------- INSERT INTO JOURNAL NOTES  ---------------------------------------------------------------------------- 
					strDateTime = DateTimeHelper.ToString(DateTime.Now); 
					strInsert1 = "INSERT INTO Journal ("; 
					strInsert1 = $"{strInsert1}journ_subcategory_code, journ_subject, journ_contact_id, journ_comp_id, "; 
					strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date "; 
					strInsert1 = $"{strInsert1}) VALUES ('RN', '"; 
					strInsert1 = $"{strInsert1}Updated Certificate Information : {temp_string}"; 
					strInsert1 = $"{strInsert1}',0, {txt_comp_id.Text}, '{modAdminCommon.gbl_User_ID}', 'A', "; 
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', "; 
					strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', "; 
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'"; 
					strInsert1 = $"{strInsert1}) "; 
					 
					modAdminCommon.ADO_Transaction("BeginTrans"); 
					 
					DbCommand TempCommand = null; 
					TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand(); 
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand); 
					TempCommand.CommandText = strInsert1; 
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021 
					TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text)); 
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand); 
					TempCommand.ExecuteNonQuery(); 
					 
					modAdminCommon.ADO_Transaction("CommitTrans"); 
					//-------------- INSERT INTO JOURNAL NOTES  ---------------------------------------------------------------------------- 
					 
					// ADDING MSW - MAKE SURE WE RE-SEND OUT THE COMPANY WHEN WE DO CHANGES/INSERTS/REMOVES 
					if (nReference_CompanyID > 0)
					{
						modCommon.ClearCompanyActionDate(nReference_CompanyID, nReference_CompanyJID);
					} 
					 
					break;
				case 1 :  // Insert/Save 
					 
					temp_string = cert_combo_drop_down[0].Text; 
					 
					temp_cat = cert_combo_drop_down[1].Text; 
					 
					temp_cert_num = cert_number_textbox.Text; 
					 
					cmd_company_insert_cert_Click(); 

					 
					if (temp_cat.Trim() == "Certificate")
					{
						modCommon.InsertPriorityEvent("CCA", 0, 0, $"Added Certificate: {temp_string}, {temp_cert_num}", Convert.ToInt32(Double.Parse(txt_comp_id.Text)), 0, "N");
					} 
					 
					//-------------- INSERT INTO JOURNAL NOTES  ---------------------------------------------------------------------------- 
					strDateTime = DateTimeHelper.ToString(DateTime.Now); 
					strInsert1 = "INSERT INTO Journal ("; 
					strInsert1 = $"{strInsert1}journ_subcategory_code, journ_subject, journ_contact_id, journ_comp_id, "; 
					strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date "; 
					strInsert1 = $"{strInsert1}) VALUES ('RN', '"; 
					strInsert1 = $"{strInsert1}Inserted Certificate Information : {temp_string}"; 
					strInsert1 = $"{strInsert1}',0, {txt_comp_id.Text}, '{modAdminCommon.gbl_User_ID}', 'A', "; 
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', "; 
					strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', "; 
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'"; 
					strInsert1 = $"{strInsert1}) "; 
					 
					modAdminCommon.ADO_Transaction("BeginTrans"); 
					 
					DbCommand TempCommand_2 = null; 
					TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand(); 
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2); 
					TempCommand_2.CommandText = strInsert1; 
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021 
					TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text)); 
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2); 
					TempCommand_2.ExecuteNonQuery(); 
					 
					modAdminCommon.ADO_Transaction("CommitTrans"); 
					//-------------- INSERT INTO JOURNAL NOTES  ---------------------------------------------------------------------------- 
					 
					// ADDING MSW - MAKE SURE WE RE-SEND OUT THE COMPANY WHEN WE DO CHANGES/INSERTS/REMOVES 
					if (nReference_CompanyID > 0)
					{
						modCommon.ClearCompanyActionDate(nReference_CompanyID, nReference_CompanyJID);
					} 
					 
					break;
				case 2 :  // Remove 

					 
					temp_string = cert_combo_drop_down[0].Text; 
					 
					temp_cert_num = cert_number_textbox.Text; 
					 
					temp_cat = cert_combo_drop_down[1].Text; 
					 
					cmd_company_remove_cert_Click(); 
					 
					if (temp_cat.Trim() == "Certificate")
					{
						modCommon.InsertPriorityEvent("CCR", 0, 0, $"Removed Certificate: {temp_string}, {temp_cert_num}", Convert.ToInt32(Double.Parse(txt_comp_id.Text)), 0, "N");
					} 
					 
					//-------------- INSERT INTO JOURNAL NOTES  ---------------------------------------------------------------------------- 
					strDateTime = DateTimeHelper.ToString(DateTime.Now); 
					strInsert1 = "INSERT INTO Journal ("; 
					strInsert1 = $"{strInsert1}journ_subcategory_code, journ_subject, journ_contact_id, journ_comp_id, "; 
					strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date "; 
					strInsert1 = $"{strInsert1}) VALUES ('RN', '"; 
					strInsert1 = $"{strInsert1}Removed Certificate Information : {temp_string}: {temp_cert_num}"; 
					strInsert1 = $"{strInsert1}',0, {txt_comp_id.Text}, '{modAdminCommon.gbl_User_ID}', 'A', "; 
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', "; 
					strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', "; 
					strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'"; 
					strInsert1 = $"{strInsert1}) "; 
					 
					modAdminCommon.ADO_Transaction("BeginTrans"); 
					 
					DbCommand TempCommand_3 = null; 
					TempCommand_3 = modAdminCommon.ADODB_Trans_conn.CreateCommand(); 
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_3); 
					TempCommand_3.CommandText = strInsert1; 
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021 
					TempCommand_3.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text)); 
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_3); 
					TempCommand_3.ExecuteNonQuery(); 
					 
					modAdminCommon.ADO_Transaction("CommitTrans"); 
					//-------------- INSERT INTO JOURNAL NOTES  ---------------------------------------------------------------------------- 
					 
					// ADDING MSW - MAKE SURE WE RE-SEND OUT THE COMPANY WHEN WE DO CHANGES/INSERTS/REMOVES 
					if (nReference_CompanyID > 0)
					{
						modCommon.ClearCompanyActionDate(nReference_CompanyID, nReference_CompanyJID);
					} 
					 
					break;
				case 3 :  // Cancel 
					cmd_company_cancel_cert_Click(); 
					 
					break;
				case 4 : 
					 
					// 6/2011 MSW - this fills the drop down with blanks 
					// moved from its own button into array - MSW - 3/27/17 
					cert_edit_enter_frame.Visible = true; 
					//lbl_company_check_sure.Visible = False 
					lbl_company_cert_id_label.Visible = false; 
					 
					fill_cert_drop_down_and_info("N"); 
					 
					cmdCertCommand[0].Visible = false;  // Update 
					cmdCertCommand[0].Enabled = false; 
					 
					cmdCertCommand[1].Visible = true;  // Insert/Save 
					cmdCertCommand[1].Enabled = true; 
					 
					cmdCertCommand[2].Visible = false;  // Remove 
					cmdCertCommand[2].Enabled = false; 
					break;
				case 5 : 
					// THIS SECTION WILL UPDATE THE FINANCIAL INSTITUTION ON THE DOCUMENTS TAB 
					// ADDED MSW - 3/27/17 
					ado_fin_id = new ADORecordSetHelper(); 
					new_fin_id = 0; 

					 
					if (cbo_comp_account[5].Visible)
					{

						if (txt_company_field[2].Text.Trim() != "" && cbo_comp_account[5].GetItemData(cbo_comp_account[5].SelectedIndex) == 0 && txt_company_field[2].Visible)
						{


							// IF THE TEXT FIELD HAS BEEN USED, ADD THE NEW ONE TO THE GROUP TABLE-----------------------
							strInsert1 = " INSERT INTO Financial_Institution_Primary_Group ";
							strInsert1 = $"{strInsert1}(";
							strInsert1 = $"{strInsert1}fipg_generic_name";
							strInsert1 = $"{strInsert1}, fipg_main_comp_id";
							strInsert1 = $"{strInsert1}, fipg_main_journ_id";
							strInsert1 = $"{strInsert1}, fipg_comp_id_in_clause";
							strInsert1 = $"{strInsert1}, fipg_active_flag";
							strInsert1 = $"{strInsert1}) Values (";
							strInsert1 = $"{strInsert1}'{txt_company_field[2].Text.Trim()}'";
							strInsert1 = $"{strInsert1},{txt_comp_id.Text}";
							strInsert1 = $"{strInsert1},0";
							strInsert1 = $"{strInsert1},{txt_comp_id.Text}";
							strInsert1 = $"{strInsert1},'Y')";

							DbCommand TempCommand_4 = null;
							TempCommand_4 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_4);
							TempCommand_4.CommandText = strInsert1;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_4.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_4);
							TempCommand_4.ExecuteNonQuery();
							// IF THE TEXT FIELD HAS BEEN USED, ADD THE NEW ONE TO THE GROUP TABLE-----------------------


							// get the highest ID -----------------------
							Query = " Select top 1 fipg_id from Financial_Institution_Primary_Group with (NOLOCK) order by fipg_id desc";

							ado_fin_id = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

							if (!(ado_fin_id.BOF && ado_fin_id.EOF))
							{

								while(!ado_fin_id.EOF)
								{

									new_fin_id = Convert.ToInt32(ado_fin_id["fipg_id"]);

									ado_fin_id.MoveNext();
								};
							}
							// get the highest ID -----------------------


							strInsert1 = " INSERT INTO Financial_Institution_Company_Reference ";
							strInsert1 = $"{strInsert1}(";
							strInsert1 = $"{strInsert1}ficr_main_comp_id";
							strInsert1 = $"{strInsert1}, ficr_sub_comp_id";
							strInsert1 = $"{strInsert1}, ficr_active_flag";
							strInsert1 = $"{strInsert1}) Values (";
							strInsert1 = $"{strInsert1}{txt_comp_id.Text}";
							strInsert1 = $"{strInsert1},{txt_comp_id.Text}";
							strInsert1 = $"{strInsert1},'Y')";

							DbCommand TempCommand_5 = null;
							TempCommand_5 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_5);
							TempCommand_5.CommandText = strInsert1;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_5.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_5);
							TempCommand_5.ExecuteNonQuery();

							cmdCertCommand[5].Visible = false;

							lbl_comp[101].Visible = true;
							lbl_comp[101].Text = " New Financial Group Added. ";
							lbl_comp[101].ForeColor = Color.Red;

							Fill_Financial_Group_Drop_Down(Convert.ToInt32(Double.Parse(txt_comp_id.Text)));

							//-------------- INSERT INTO JOURNAL NOTES  ----------------------------------------------------------------------------
							strDateTime = DateTimeHelper.ToString(DateTime.Now);
							strInsert1 = "INSERT INTO Journal (";
							strInsert1 = $"{strInsert1}journ_subcategory_code, journ_subject, journ_contact_id, journ_comp_id, ";
							strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date ";
							strInsert1 = $"{strInsert1}) VALUES ('RN', '";
							strInsert1 = $"{strInsert1}Assigned Company to Financial Group Named: {cbo_comp_account[5].Text}";
							strInsert1 = $"{strInsert1}',0, {txt_comp_id.Text}, '{modAdminCommon.gbl_User_ID}', 'A', ";
							strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
							strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
							strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
							strInsert1 = $"{strInsert1}) ";

							modAdminCommon.ADO_Transaction("BeginTrans");

							DbCommand TempCommand_6 = null;
							TempCommand_6 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_6);
							TempCommand_6.CommandText = strInsert1;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_6.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_6);
							TempCommand_6.ExecuteNonQuery();

							modAdminCommon.ADO_Transaction("CommitTrans");

							modAdminCommon.Table_Action_Log("Financial_Institution_Company_Reference");
							modAdminCommon.Table_Action_Log("Financial_Institution_Primary_Group");

							//-------------- INSERT INTO JOURNAL NOTES  ----------------------------------------------------------------------------

						}
						else if (cbo_comp_account[5].Text.Trim() != "None Selected")
						{ 
							if (lbl_comp[101].ForeColor == Color.Red)
							{
								strInsert1 = " INSERT INTO Financial_Institution_Company_Reference ";
								strInsert1 = $"{strInsert1}(";
								strInsert1 = $"{strInsert1}ficr_main_comp_id";
								strInsert1 = $"{strInsert1}, ficr_sub_comp_id";
								strInsert1 = $"{strInsert1}, ficr_active_flag";
								strInsert1 = $"{strInsert1}) Values (";
								strInsert1 = $"{strInsert1}{cbo_comp_account[5].GetItemData(cbo_comp_account[5].SelectedIndex).ToString()}";
								strInsert1 = $"{strInsert1},{txt_comp_id.Text}";
								strInsert1 = $"{strInsert1},'Y')";

								DbCommand TempCommand_7 = null;
								TempCommand_7 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
								UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_7);
								TempCommand_7.CommandText = strInsert1;
								//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
								TempCommand_7.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
								UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_7);
								TempCommand_7.ExecuteNonQuery();
							}
							else if (StringsHelper.ToDoubleSafe(Convert.ToString(lbl_comp[101].Tag)) > 0)
							{ 
								strInsert1 = " Update Financial_Institution_Company_Reference ";
								strInsert1 = $"{strInsert1} set ";
								strInsert1 = $"{strInsert1}ficr_main_comp_id = {cbo_comp_account[5].GetItemData(cbo_comp_account[5].SelectedIndex).ToString()}";
								strInsert1 = $"{strInsert1}, ficr_sub_comp_id = {txt_comp_id.Text}";
								strInsert1 = $"{strInsert1} Where ficr_id = {Convert.ToString(lbl_comp[101].Tag)}";

								DbCommand TempCommand_8 = null;
								TempCommand_8 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
								UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_8);
								TempCommand_8.CommandText = strInsert1;
								//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
								TempCommand_8.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
								UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_8);
								TempCommand_8.ExecuteNonQuery();
							}


							//-------------- INSERT INTO JOURNAL NOTES  ----------------------------------------------------------------------------
							strDateTime = DateTimeHelper.ToString(DateTime.Now);
							strInsert1 = "INSERT INTO Journal (";
							strInsert1 = $"{strInsert1}journ_subcategory_code, journ_subject, journ_contact_id, journ_comp_id, ";
							strInsert1 = $"{strInsert1}journ_user_id, journ_status, journ_entry_date, journ_entry_time, journ_action_date, journ_date ";
							strInsert1 = $"{strInsert1}) VALUES ('RN', '";
							strInsert1 = $"{strInsert1}Assigned Company to Financial Group Named: {cbo_comp_account[5].Text}";
							strInsert1 = $"{strInsert1}',0, {txt_comp_id.Text}, '{modAdminCommon.gbl_User_ID}', 'A', ";
							strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString("d")}', ";
							strInsert1 = $"{strInsert1}'{Strings.FormatDateTime(DateTime.Parse(strDateTime), DateFormat.ShortTime)}', ";
							strInsert1 = $"{strInsert1}'{DateTime.Parse(strDateTime).ToString()}', '{DateTime.Parse(strDateTime).ToString("d")}'";
							strInsert1 = $"{strInsert1}) ";


							modAdminCommon.ADO_Transaction("BeginTrans");

							DbCommand TempCommand_9 = null;
							TempCommand_9 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_9);
							TempCommand_9.CommandText = strInsert1;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_9.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_9);
							TempCommand_9.ExecuteNonQuery();

							modAdminCommon.ADO_Transaction("CommitTrans");


							modAdminCommon.Table_Action_Log("Financial_Institution_Company_Reference");


							//-------------- INSERT INTO JOURNAL NOTES  ----------------------------------------------------------------------------

						}



					} 

					 
					break;
			} // Case Index

			cmdCertCommand[Index].Enabled = true;

		} // cmdCertCommand_Click

		private void cmdCompHistoryTab_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.cmdCompHistoryTab, eventSender);

			cmdCompHistoryTab[Index].Enabled = false;

			switch(Index)
			{
				case 0 :  // View Current Company Record 
					cmd_company_active_record_Click(); 
					 
					break;
				case 1 :  // Get All History Records 
					cmd_company_all_history_records_Click(); 
					 
					break;
			} // Case Index

			cmdCompHistoryTab[Index].Enabled = true;

		} // cmdCompHistoryTab_Click


		private void company_logo_Click(Object eventSender, EventArgs eventArgs)
		{

			string strFileName = "";
			string strUpdate1 = "";
			string logo_result = "";
			string strErrMsg = "";
			string strCompImageFlag = "";

			try
			{

				if (company_logo_path.Trim() != "")
				{

					// 04/14/2015 - By David D. Cruger
					// Can ONLY Load a JPG
					//UPGRADE_ISSUE: (2064) MSComDlg.CommonDialog property CommonDialog1.FileName was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					mdi_ResearchAssistant.DefInstance.CommonDialog1Open.FileName = "";
					//UPGRADE_ISSUE: (2064) MSComDlg.CommonDialog property CommonDialog1.DialogTitle was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					mdi_ResearchAssistant.DefInstance.CommonDialog1Open.Title = "Attach Company Logo";
					//UPGRADE_WARNING: (2074) MSComDlg.CommonDialog property mdi_ResearchAssistant.CommonDialog1.Flags was upgraded to mdi_ResearchAssistant.CommonDialog1Open.ShowReadOnly which has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2074
					//UPGRADE_WARNING: (2074) FileOpenConstants STRING RESOURCE ["IDS-CONSTANT"] NOT FOUND FileOpenConstants.cdlOFNHideReadOnly was upgraded to OpenFileDialog.ShowReadOnly which has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2074
					mdi_ResearchAssistant.DefInstance.CommonDialog1Open.ShowReadOnly = false;
					//UPGRADE_ISSUE: (2064) MSComDlg.CommonDialog property CommonDialog1.Filter was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (2081) Filter has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
					mdi_ResearchAssistant.DefInstance.CommonDialog1Open.Filter = "Image Files (*.jpg)|*.jpg|All Files (*.*)|*.*";
					mdi_ResearchAssistant.DefInstance.CommonDialog1Open.ShowDialog();

					//UPGRADE_ISSUE: (2064) MSComDlg.CommonDialog property CommonDialog1.FileName was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					strFileName = ($"{mdi_ResearchAssistant.DefInstance.CommonDialog1Open.FileName} ").Trim();

					if (strFileName != "")
					{

						if (nReference_CompanyID.ToString().Trim() != "")
						{

							//UPGRADE_WARNING: (1068) Attach_Company_Logo() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
							logo_result = Convert.ToString(Attach_Company_Logo(strFileName));

							if (logo_result.Trim() == "")
							{

								strCompImageFlag = "Y";
								display_company_logo(nReference_CompanyID.ToString(), ref strCompImageFlag);

								if (strCompImageFlag == "Y")
								{

									strUpdate1 = "UPDATE Company SET ";
									strUpdate1 = $"{strUpdate1}comp_logo_flag = 'Y', ";
									strUpdate1 = $"{strUpdate1}comp_action_date = NULL ";
									strUpdate1 = $"{strUpdate1}WHERE (comp_id = {nReference_CompanyID.ToString()}) ";
									strUpdate1 = $"{strUpdate1}AND (comp_journ_id = 0) ";
									DbCommand TempCommand = null;
									TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
									UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
									TempCommand.CommandText = strUpdate1;
									//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
									//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
									TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
									UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
									TempCommand.ExecuteNonQuery();

									MessageBox.Show("Your Company Logo Was Uploaded Successfully", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Information);

								}
								else
								{

									//-----------------------------------
									// Something Failed Delete It

									if (File.Exists(strFileName))
									{
										//UPGRADE_WARNING: (2081) DeleteFile has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
										File.Delete(strFileName);
									}
								} // If strCompImageFlag = "Y" Then

							} // If Trim(logo_result) = "" Then

						}
						else
						{
							MessageBox.Show("Unable To Get Company Id", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
						}

					} // If strFileName <> "" Then

				} // If Trim(company_logo_path) <> "" Then
			}
			catch (System.Exception excep)
			{

				strErrMsg = excep.Message;
				modAdminCommon.Record_Error("company_logo_Click_Error", strErrMsg);
				MessageBox.Show(strErrMsg, AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
			}

		} // company_logo_Click

		//-----------------------------------------------------------
		// Edited MSW - 10/3/2012
		// 05/21/2008 - By David D. Cruger
		// Moved this routine into it's own procedure
		// Getting the file name can happen in two ways
		// Clicking the Add Button or Dragging the file name over
		// 06/02/2008 - By David D. Cruger; Allow BMP files
		// They will get converted to JPG during copy process
		//-----------------------------------------------------------

		private object Attach_Company_Logo(string strFromFileName)
		{

			object result = null;
			result = "";

			Object fso = new Object();
			FileInfo fFile = null;

			dynamic pImage = null;//gap-note this type must be reviewed during blazor stabilization //PTRUE2.PhotoObject pImage = new PTRUE2.PhotoObject(); // [x] PhotoTrue v2 

			string strInsert1 = "";
			int lSeqNo = 0;
			string strSubject = "";
			string strFileType = "";
			string strExt = "";
			int iPos1 = 0;
			string strToFileName = "";
			int lPicId = 0;
			string strType = "";
			bool bResize = false;
			int iWidth = 0;
			int iHeight = 0;
			double dPercent = 0;

			try
			{

				strFromFileName = ($"{strFromFileName} ").Trim();

				if (strFromFileName != "")
				{

					if (File.Exists(strFromFileName))
					{

						fFile = new FileInfo(strFromFileName);

						strType = "JPG";

						if (strType != "")
						{

							pImage.CreateFromJPGFile(strFromFileName);
							iWidth = pImage.Width;
							iHeight = pImage.Height;

							if (iWidth > 1000 || iHeight > 500)
							{

								dPercent = 1;

								if (iWidth - 1000 > iHeight - 500)
								{
									dPercent = (1000 / ((double) iWidth));
								}
								else
								{
									dPercent = (500 / ((double) iHeight));
								}

								pImage.Resize(Convert.ToInt32(pImage.Width * dPercent), Convert.ToInt32(pImage.Height * dPercent));

								pImage.SaveAsJPGFile(strFromFileName, 95, false, false, true);

							}
							else
							{

								//UPGRADE_WARNING: (1068) fFile.size of type Variant is being forced to double. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
								if (Convert.ToDouble(fFile.Length) > 1500000)
								{
									pImage.SaveAsJPGFile(strFromFileName, 95, false, false, true);
								}

							} // If iWidth > 1000 Or iHeight > 500 Then

							//chkHide.Value = vbUnchecked
							//imgACPicture.Visible = False

							iPos1 = (fFile.Name.IndexOf('.') + 1);
							strExt = fFile.Name.Substring(Math.Min(iPos1, fFile.Name.Length)).ToLower(); // Do NOT Save the Period In The Ext

							strToFileName = $"{company_logo_path}{nReference_CompanyID.ToString()}.jpg";

							bResize = true;

							if (File.Exists(strToFileName))
							{
								//UPGRADE_WARNING: (2081) DeleteFile has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
								File.Delete(strToFileName);
							}

							File.Copy(strFromFileName, strToFileName, true);

							modAdminCommon.Record_Event("User Action", "Attach Company Logo", 0, 0, nReference_CompanyID, false, 0, 0);

							// If CopyImageFromToAndReSize(strFromFileName, strToFileName, strType, 640, bResize, True) = True Then
							//
							// Else
							//   Report_Error "Copy ReSize Image: FileName[" & strFromFileName & "] "
							// End If ' If CopyImageFromToAndReSize(strFromFileName, strToFileName, 640, bResize, True) = True Then

						}
						else
						{
                            // gap-note: jgamboa. Use FileInfo.Extension instead of File.Type.
                            MessageBox.Show($"File Type Must Be JPG or BMP Type!{Environment.NewLine}Type: [{fFile.Extension.ToLower()}]", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
                            // gap-note: jgamboa. Use FileInfo.Extension instead of File.Type.
                            result = $"File Type Must Be JPG or BMP Type!{Environment.NewLine}Type: [{fFile.Extension.ToLower()}]";
                        } // If strType <> "" Then

					}
					else
					{
						MessageBox.Show("File Does Not Exists!", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
					} // If fso.FileExists(strFromFileName) = True Then

				}
				else
				{
					MessageBox.Show("File Name Is Blank!", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
				} // If strFromFileName <> "" Then

				fFile = null;
				fso = null;
				pImage = null;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Record_Error("Attach_Company_Logo_Error: ", excep.Message);
			}

			return result;
		} // Attach_Company_Logo

		private void gdCompDocInProcess_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			time_ac_timer.Enabled = false; // Turn Off Timer So The Single Click Is Never Called
			gb_time_ac_timerDoubleClick = false;
			gb_time_ac_timerSingleClick = false;

			gdCompDocInProcess_DblClick_Into_Aircraft();

		} // gdCompDocInProcess_DblClick

		private void gdCompDocInProcess_DblClick_Into_Aircraft()
		{

			Form Frm = null;
			Form f = null;

			int lRow1 = gdCompDocInProcess.MouseRow;

			search_on("Loading Aircraft...");

			// Save Company Record Info for Return
			modGlobalVars.cfsiCompanyInfo.lCompId = nReference_CompanyID;
			modGlobalVars.cfsiCompanyInfo.lJournId = nReference_CompanyJID;
			modGlobalVars.cfsiCompanyInfo.iDeliveryPositionComboListIndex = (short) cbo_ac_delivery_position.SelectedIndex;
			modGlobalVars.cfsiCompanyInfo.ichkLimitAircraftList = (short) chk_limit_aircraft_list.CheckState;

			if (Convert.ToInt32(Conversion.Val(txt_only_show_first_aircraft_recs.Text.Trim())) > 0)
			{
				modGlobalVars.cfsiCompanyInfo.lHowManyAircraft = Convert.ToInt32(Conversion.Val(txt_only_show_first_aircraft_recs.Text.Trim()));
			}
			else
			{
				modGlobalVars.cfsiCompanyInfo.lHowManyAircraft = 0;
			}

			modGlobalVars.cfsiCompanyInfo.lAircraftGridRow = 0;
			modGlobalVars.cfsiCompanyInfo.lAircraftGridTopRow = 0;

			if (grd_company_aircraft.CurrentRowIndex > 0)
			{
				modGlobalVars.cfsiCompanyInfo.lAircraftGridRow = grd_company_aircraft.CurrentRowIndex;
				modGlobalVars.cfsiCompanyInfo.lAircraftGridTopRow = grd_company_aircraft.FirstDisplayedScrollingRowIndex;
			}

			modGlobalVars.cfsiCompanyInfo.iTab = 9; // Documents In Process Tab
			modGlobalVars.cfsiCompanyInfo.lDocInProcGridRow = 0;
			modGlobalVars.cfsiCompanyInfo.lDocInProcGridTopRow = 0;
			if (gdCompDocInProcess.CurrentRowIndex > 0)
			{
				modGlobalVars.cfsiCompanyInfo.lDocInProcGridRow = gdCompDocInProcess.CurrentRowIndex;
				modGlobalVars.cfsiCompanyInfo.lDocInProcGridTopRow = gdCompDocInProcess.FirstDisplayedScrollingRowIndex;
			}

			modCommon.Highlight_Grid_Row(gdCompDocInProcess);
			 // cfsiCompanyInfo

			// cleanup any aircraft forms and open a clean form
			foreach (Form FrmIterator in Application.OpenForms)
			{
				Frm = FrmIterator;
				f = Frm;
				if (f.Name.Trim() == "frm_Aircraft")
				{
					//UPGRADE_TODO: (1067) Member Unload_Aircraft_Form is not defined in type VB.Form. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
					(f as frm_aircraft).Unload_Aircraft_Form();
					f.Close();
					//UPGRADE_NOTE: (1029) Object f may not be destroyed until it is garbage collected. More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-1029
					f = null;
					break;
				}
				Frm = default(Form);
			}

			modAdminCommon.gbl_Aircraft_ID = gdCompDocInProcess.get_RowData(lRow1);

			if (modAdminCommon.gbl_Aircraft_ID > 0)
			{

				frm_aircraft.DefInstance.Form_Initialize();
				frm_aircraft.DefInstance.StartForm = StartForm;
				frm_aircraft.DefInstance.Reference_Aircraft_ID = modAdminCommon.gbl_Aircraft_ID;
				frm_aircraft.DefInstance.Reference_Journal_ID = modAdminCommon.gbl_Aircraft_Journal_ID;
				frm_aircraft.DefInstance.Reference_Company_ID = nReference_CompanyID;
				frm_aircraft.DefInstance.Show();
				//UPGRADE_WARNING: (2065) Form method frm_aircraft.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
				frm_aircraft.DefInstance.BringToFront();
				//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
				frm_aircraft.DefInstance.Form_Activated(frm_aircraft.DefInstance, new EventArgs());

				this.Cursor = CursorHelper.CursorDefault;

				Hide_MySelf(true, true);

			} // If gbl_Aircraft_ID > 0 Then

		} // gdCompDocInProcess_DblClick_Into_Aircraft

		private void grd_company_contact_relationships_Click(Object eventSender, EventArgs eventArgs)
		{

			if (grd_company_contact_relationships.CurrentRowIndex > 0)
			{
				//  Dim temp_comp As Long
				//lst_related_company.Visible = True
				// lst_related_contact.Visible = True
				//  grd_company_contact_relationships.Visible = True

				// grd_company_contact_relationships.Col = 0
				//temp_comp = grd_company_contact_relationships.Text
				//Call Build_Company_NameAddress(lst_related_company, grd_company_relationships.BandData(grd_company_relationships.Row), nReference_CompanyJID)
				// Call fill_related_company_contact_list(temp_comp, 0, grd_company_contact_relationships.RowData(grd_company_contact_relationships.Row), cbo_related_company_contact)
				// cbo_related_company_contact.Visible = False

				// Call Build_Contact_Info(lst_related_contact, grd_company_contact_relationships.RowData(grd_company_contact_relationships.Row), 0, False)

			}

		}

		private void grd_company_contact_relationships_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			grd_company_contact_relationships.Enabled = false;

			if (grd_company_contact_relationships.CurrentRowIndex > 0)
			{

				if (Convert.ToString(grd_company_contact_relationships[1, 0].Value).ToLower() != ("No Relationships Found").ToLower())
				{

					if (grd_company_contact_relationships.MouseCol == 3)
					{

					}
					else
					{

						// before we leave the record for the related company
						// save any changes
						bCompany_relation_DblClick = true;

						cmd_company_save_Click(cmd_company_save, new EventArgs());
						Application.DoEvents();

						bCompany_relation_DblClick = false;

						nReference_CompanyID = grd_company_contact_relationships.get_RowData(grd_company_contact_relationships.CurrentRowIndex);
						nReference_CompanyJID = 0;

						// 04/25/2008 - By David D. Cruger
						// When going from company to company through relationships
						// Reset all these values for Delivery Position
						Clear_Company_Save_Info();

						cbo_ac_delivery_position.Items.Clear();
						cbo_ac_delivery_position.Enabled = false;
						// 8/31/2010 - Updated MSW/RTW, deleted second value inserted and added two booleans that are adjusted previously to compare and show desired results
						modFillCompConControls.Fill_Deliver_Position_List(cbo_ac_delivery_position, bCompany_Commercial_Records, bCompany_BusorHel_Records, modGlobalVars.cfsiCompanyInfo.iDeliveryPositionComboListIndex);
						cbo_ac_delivery_position.Enabled = true;

						// Temp Hold ????
						//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
						Form_Activated(this, new EventArgs());

					} // If grd_company_contact_relationships.MouseCol = 3 Then

				} // If grd_company_contact_relationships.TextMatrix(grd_company_contact_relationships.MouseRow, 0) <> "None Found" Then

			} // If grd_company_contact_relationships.Row > 0 Then
		}


		private void grd_contact_phone_numbers_DoubleClick(Object eventSender, EventArgs eventArgs)
		{


			int Current_Row = 0;
			string phone_number_to_return = "";
			int number_of_contacts = 0;
			int nCompanyID = 0;
			string contact_id_list = "";
			int nContactID = 0;
			if (grd_contact_phone_numbers.CurrentRowIndex > 0)
			{
				number_of_contacts = 0;
				nContactID = Convert.ToInt32(Double.Parse(txt_contact_id.Text));
				nCompanyID = nReference_CompanyID;
				contact_id_list = "";
				phone_number_to_return = "";
				Current_Row = 0;
				Current_Row = grd_contact_phone_numbers.CurrentRowIndex;

				Current_Row = 0;
				Current_Row = grd_contact_phone_numbers.CurrentRowIndex;

				Confirm_Contact_Phone_Number_Comp(ref phone_number_to_return);

				// if its office, then and company has same office, then confirm company as well
				modCompany.Check_Company_Office_Number(phone_number_to_return, nCompanyID);


				// ADDED MSW 10/30/15--------------------------------------
				//  WHEN THE Contact phone number is done being confirmed,
				contact_id_list = "";
				string tempRefParam = "";
				contact_id_list = modCompany.Confirm_Matching_Contacts(Convert.ToInt32(Double.Parse(nContactID.ToString())), ref number_of_contacts, phone_number_to_return, ref tempRefParam, nCompanyID);
				if (contact_id_list.Trim() != "")
				{
					if (MessageBox.Show($"This Contact Has {number_of_contacts.ToString()} Other Contacts Connected To It With the Same Phone Number. Would you like to also Confirm These?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
					{
						// RUN THE UPDATE OF ALL OF THE CONTACTS ASSOCIATED
						Confirm_Contact_Phone_Number_For_Related_Contacts_Comp(contact_id_list, Current_Row);
					}
				}

				MessageBox.Show("Phone Number Confirmed", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
			}



		}

		public void Confirm_Contact_Phone_Number_For_Related_Contacts_Comp(string Related_ID_List, int confirmed_row)
		{
			//*****************************************************************************************************
			// Function used to confirm a contact phone number
			//*****************************************************************************************************
			int nCompanyID = 0;
			int nContactID = 0;
			try
			{
				string Query = "";
				string Full_Phone = "";
				Full_Phone = "";
				string Full_Phone_Type = "";
				Full_Phone_Type = "";
				int i = 0;
				string query_update = "";
				string[] contact_Array = null;
				int contact_count = 0;
				int temp_comp_id = 0;
				contact_count = 0;
				string contact_id_list = "";
				nContactID = Convert.ToInt32(Double.Parse(txt_contact_id.Text));
				nCompanyID = nReference_CompanyID;

				//i = grd_Contact_Phone_Numbers.Row

				i = confirmed_row;
				Full_Phone_Type = ($"{Convert.ToString(grd_contact_phone_numbers[i, 0].Value)}").Trim();

				for (int K = 1; K <= 4; K++)
				{
					if (Convert.ToString(grd_contact_phone_numbers[i, K].Value).Trim() != "")
					{
						Full_Phone = $"{Full_Phone}{Convert.ToString(grd_contact_phone_numbers[i, K].Value).Trim()}{((K == 4) ? "" : modGlobalVars.cHyphen)}";
					}
				}

				// ADDED MSW - 11/20/15
				if (Related_ID_List.Trim() != "")
				{
					query_update = $"UPDATE Phone_Numbers SET pnum_confirm_date = '{DateTime.Now.ToString("d")}'";
					query_update = $"{query_update} WHERE pnum_journ_id = 0 AND pnum_contact_id in ({Related_ID_List}) ";
					query_update = $"{query_update} and pnum_number_full_search = '{StringsHelper.Replace(StringsHelper.Replace(Full_Phone, " ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary), modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary).Trim()}'  ";

					modAdminCommon.ADO_Transaction("BeginTrans");

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = query_update;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();

					if (Related_ID_List.IndexOf(',') >= 0)
					{
						contact_Array = Related_ID_List.Split(',');
						contact_count = contact_Array.GetUpperBound(0);
					}
					else
					{
						Related_ID_List = $"{Related_ID_List},";
						contact_Array = Related_ID_List.Split(',');
						contact_count = 0;
					}

				}


				if (Full_Phone.Trim() != "")
				{
					Full_Phone = Full_Phone.Trim();
				}

				if (Full_Phone.Trim() != "")
				{

					Query = $"UPDATE Phone_Numbers SET pnum_confirm_date = '{DateTime.Now.ToString("d")}'";
					Query = $"{Query} WHERE pnum_comp_id = {nCompanyID.ToString()}";
					Query = $"{Query} AND pnum_journ_id = 0 AND pnum_contact_id = {nContactID.ToString()}";
					Query = $"{Query} AND pnum_type = '{Full_Phone_Type.Trim()}'";
					Query = $"{Query} AND pnum_number_full_search = '{StringsHelper.Replace(StringsHelper.Replace(Full_Phone, " ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary), modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary).Trim()}'";

					modAdminCommon.ADO_Transaction("BeginTrans");

					DbCommand TempCommand_2 = null;
					TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
					TempCommand_2.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
					TempCommand_2.ExecuteNonQuery();



					int tempForEndVar2 = contact_count;
					for (i = 0; i <= tempForEndVar2; i++)
					{

						contact_Array[i] = StringsHelper.Replace(contact_Array[i], "'", "", 1, -1, CompareMethod.Binary);



						if (nContactID.ToString().Trim() != contact_Array[i].Trim())
						{
							temp_comp_id = 0;
							temp_comp_id = modCompany.Get_Company_ID(Convert.ToInt32(Double.Parse(contact_Array[i])));

							// INSERT A CONTACT CONFIRMATION JOURNAL ENTRY
							// Rec_Journal_Info.journ_subject = "Confirmed Contact Phone Number (" & Trim(Full_Phone_Type) & ") " & Full_Phone
							modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject($"Confirmed Contact Phone Number ({Full_Phone_Type.Trim()}) {Full_Phone}", "CNCFM", 0, temp_comp_id, Convert.ToInt32(Double.Parse(contact_Array[i])));

							modAdminCommon.Rec_Journal_Info.journ_description = " ";
							modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CNCFM";
							modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
							modAdminCommon.Rec_Journal_Info.journ_comp_id = temp_comp_id;


							modAdminCommon.Rec_Journal_Info.journ_contact_id = Convert.ToInt32(Double.Parse(contact_Array[i]));
							modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
							modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
							modAdminCommon.Rec_Journal_Info.journ_prior_account_id = "";
							modAdminCommon.Rec_Journal_Info.journ_status = "A";
							modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

							frm_Journal.DefInstance.Commit_Journal_Entry();

						}

					}

					modAdminCommon.ADO_Transaction("CommitTrans");


					grd_contact_phone_numbers.CurrentColumnIndex = 0;
					grd_contact_phone_numbers.CellBackColor = Color.White;
					grd_contact_phone_numbers.CurrentColumnIndex = 1;
					grd_contact_phone_numbers.CellBackColor = Color.White;
					grd_contact_phone_numbers.CurrentColumnIndex = 2;
					grd_contact_phone_numbers.CellBackColor = Color.White;
					grd_contact_phone_numbers.CurrentColumnIndex = 3;
					grd_contact_phone_numbers.CellBackColor = Color.White;
					grd_contact_phone_numbers.CurrentColumnIndex = 4;
					grd_contact_phone_numbers.CellBackColor = Color.White;
					grd_contact_phone_numbers.CurrentColumnIndex = 5;
					grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = DateTime.Now.ToString("d");
					grd_contact_phone_numbers.CellBackColor = Color.White;
					grd_contact_phone_numbers.CurrentColumnIndex = 6;
					grd_contact_phone_numbers.CellBackColor = Color.White;

					Full_Phone = "";

					grd_contact_phone_numbers.CurrentColumnIndex = 0;

				}

				// Call fill_contact_phone_Grid
			}
			catch (System.Exception excep)
			{

				// Call Contact_Message_Off
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Confirm_Contact_Phone_Numbers_Error ({Information.Err().Number.ToString()}) {excep.Message} cmpid[{nCompanyID.ToString()}] conid[{nContactID.ToString()}] jid[0]", "frm_CompanyContact(PHONE)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				return;
			}

		}


		public void Confirm_Contact_Phone_Number_Comp(ref string Full_Phone_return)
		{
			//*****************************************************************************************************
			// Function used to confirm a contact phone number
			//*****************************************************************************************************
			int nCompanyID = 0;
			int nContactID = 0;
			try
			{
				string Query = "";
				string Full_Phone = "";
				Full_Phone = "";
				string Full_Phone_Search = "";
				Full_Phone_Search = "";
				string Full_Phone_Type = "";
				Full_Phone_Type = "";
				int i = 0;
				int K = 0;
				nCompanyID = nReference_CompanyID;
				nContactID = Convert.ToInt32(Double.Parse(txt_contact_id.Text));
				string pnum_Ext = "";

				i = grd_contact_phone_numbers.CurrentRowIndex;
				Full_Phone_Type = ($"{Convert.ToString(grd_contact_phone_numbers[i, 0].Value)}").Trim();

				for (K = 1; K <= 4; K++)
				{
					if (Convert.ToString(grd_contact_phone_numbers[i, K].Value).Trim() != "")
					{
						Full_Phone = $"{Full_Phone}{Convert.ToString(grd_contact_phone_numbers[i, K].Value).Trim()}{((K == 4) ? "" : modGlobalVars.cHyphen)}";
					}
				}

				// added MSW 0 6/14/21
				K = 5;
				if (Convert.ToString(grd_contact_phone_numbers[i, K].Value).Trim() != "")
				{
					pnum_Ext = $" Ext:{Convert.ToString(grd_contact_phone_numbers[i, K].Value).Trim()}";
				}

				Full_Phone = Full_Phone.Trim();
				Full_Phone_Search = modCommon.LeaveOnlyAlphaAndNumeric(Full_Phone);

				Full_Phone_return = Full_Phone_Search;

				if (Full_Phone != "")
				{

					Query = $"UPDATE Phone_Numbers SET pnum_confirm_date = '{DateTime.Now.ToString("d")}'";
					Query = $"{Query} WHERE pnum_comp_id = {nCompanyID.ToString()}";
					Query = $"{Query} AND pnum_journ_id = 0 AND pnum_contact_id = {nContactID.ToString()}";
					Query = $"{Query} AND pnum_type = '{Full_Phone_Type.Trim()}'";
					Query = $"{Query} AND pnum_number_full_search = '{Full_Phone_Search}'";

					modAdminCommon.ADO_Transaction("BeginTrans");

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();

					// INSERT A CONTACT CONFIRMATION JOURNAL ENTRY
					//Rec_Journal_Info.journ_subject = "Confirmed Contact Phone Number (" & Trim(Full_Phone_Type) & ") " & Full_Phone

					modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject($"Confirmed Contact Phone Number ({Full_Phone_Type.Trim()}) {Full_Phone}{pnum_Ext}", "CNCFM", 0, nCompanyID, nContactID);

					modAdminCommon.Rec_Journal_Info.journ_description = " ";
					modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
					modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CNCFM";
					modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
					modAdminCommon.Rec_Journal_Info.journ_comp_id = nCompanyID;
					modAdminCommon.Rec_Journal_Info.journ_contact_id = nContactID;
					modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
					modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
					modAdminCommon.Rec_Journal_Info.journ_prior_account_id = "";
					modAdminCommon.Rec_Journal_Info.journ_status = "A";
					modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

					frm_Journal.DefInstance.Commit_Journal_Entry();

					modAdminCommon.ADO_Transaction("CommitTrans");

					grd_contact_phone_numbers.CurrentColumnIndex = 0;
					grd_contact_phone_numbers.CellBackColor = Color.White;
					grd_contact_phone_numbers.CurrentColumnIndex = 1;
					grd_contact_phone_numbers.CellBackColor = Color.White;
					grd_contact_phone_numbers.CurrentColumnIndex = 2;
					grd_contact_phone_numbers.CellBackColor = Color.White;
					grd_contact_phone_numbers.CurrentColumnIndex = 3;
					grd_contact_phone_numbers.CellBackColor = Color.White;
					grd_contact_phone_numbers.CurrentColumnIndex = 4;
					grd_contact_phone_numbers.CellBackColor = Color.White;
					grd_contact_phone_numbers.CurrentColumnIndex = 5;
					grd_contact_phone_numbers[grd_contact_phone_numbers.CurrentRowIndex, grd_contact_phone_numbers.CurrentColumnIndex].Value = DateTime.Now.ToString("d");
					grd_contact_phone_numbers.CellBackColor = Color.White;
					grd_contact_phone_numbers.CurrentColumnIndex = 6;
					grd_contact_phone_numbers.CellBackColor = Color.White;

					Full_Phone = "";

					grd_contact_phone_numbers.CurrentColumnIndex = 0;

				}

				//Call fill_contact_phone_Grid
			}
			catch (System.Exception excep)
			{

				// Call Contact_Message_Off
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Confirm_Contact_Phone_Numbers_Error ({Information.Err().Number.ToString()}) {excep.Message} cmpid[{nCompanyID.ToString()}] conid[{nContactID.ToString()}] jid[0]", "frm_CompanyContact(PHONE)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				return;
			}

		}

		private void grd_Contact_Phone_Numbers_MouseDown(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			string strType = "";

			int lRow1 = grd_contact_phone_numbers.MouseRow;
			int lCol1 = grd_contact_phone_numbers.MouseCol;

			if (lRow1 > 0)
			{

				if (Button == UpgradeHelpers.Utils.WinForms.MouseButtonsHelper.GetVB6ShortValue(MouseButtons.Right))
				{

					grd_contact_phone_numbers.CurrentRowIndex = lRow1;

					strType = Convert.ToString(grd_contact_phone_numbers[lRow1, 0].Value);

					if (strType != "")
					{

						strPhoneGrid = "Contact";
						mnuCompanyDialPhoneNumber.Available = true;
						mnuCompanyDialPhoneNumber.Enabled = true;
						mnuCompanyShowUserHistory.Available = false;

						modCommon.Highlight_Grid_Row(grd_contact_phone_numbers);

						//UPGRADE_WARNING: (6024) Default menues are not supported for Context Menues (Popup) More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6024
						Ctx_mnuTools.Show(this, PointToClient(Cursor.Position).X, PointToClient(Cursor.Position).Y);

						grd_contact_phone_numbers.Redraw = true;

						mnuCompanyShowUserHistory.Available = true;
						mnuCompanyDialPhoneNumber.Available = false;

					} // If strType <> "" Then

				} // If Button = vbRightButton Then

			} // If lRow1 > 0 Then

		} // grd_contact_phone_numbers_MouseDown

		private void grd_pubs_DoubleClick(Object eventSender, EventArgs eventArgs)
		{
			string Query = "";
			string bgcolor = "";
			string temp_string = "";

			int lRow1 = grd_pubs.MouseRow;
			int lCol1 = grd_pubs.MouseCol;

			if (lRow1 > 1)
			{

				if (lCol1 == 3)
				{
					grd_pubs.CurrentColumnIndex = 6;
					grd_pubs.CurrentRowIndex = lRow1;
					bgcolor = ColorTranslator.ToOle(grd_pubs.CellBackColor).ToString();

					if (grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].FormattedValue.ToString().Trim() != "")
					{
						//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//VB.Global.Load(frm_WebReport.DefInstance);

						frm_WebReport.DefInstance.PassedPubLink = grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].FormattedValue.ToString();

						frm_WebReport.DefInstance.WhichReport = "Yacht_Pub";

						frm_WebReport.DefInstance.Show();
					}
				}
				else
				{

					if (frm_WebCrawl.DefInstance.Visible)
					{
						frm_WebCrawl.DefInstance.Hide();
					}

					grd_pubs.CurrentColumnIndex = 7;
					frm_WebCrawl.DefInstance.pub_single_click_code(Convert.ToInt32(Double.Parse(grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].FormattedValue.ToString())), 0);
					frm_WebCrawl.DefInstance.from_spot = "COMP";
					frm_WebCrawl.DefInstance.Show();

					fill_ac_pub_details();
				}

			}
			else
			{
				if (lRow1 == 0)
				{
					frm_WebCrawl.DefInstance.WhichAcctRep = modAdminCommon.gbl_Account_ID;

					//Call setup_doc_request
					setup_memo_request();

					if (frm_WebCrawl.DefInstance.Visible)
					{
						frm_WebCrawl.DefInstance.Hide();
					}

					frm_WebCrawl.DefInstance.assign_correct_account_rep();
					// frm_WebCrawl.Show vbModal  ' removed modal MSW - 5/17/21
					frm_WebCrawl.DefInstance.Show();

					fill_ac_pub_details();


				}
			}

		}

		public void setup_memo_request()
		{

			frm_WebCrawl.DefInstance.cmd_pub_Click(frm_WebCrawl.DefInstance.cmd_pub, new EventArgs());
			frm_WebCrawl.DefInstance.txt_pub[5].Text = ""; // title ' removed memo from title - msw - 4/30/21
			frm_WebCrawl.DefInstance.txt_pub[1].Text = "0"; // ac id
			frm_WebCrawl.DefInstance.txt_pub[6].Text = txt_comp_id.Text; // comp id
			frm_WebCrawl.DefInstance.cbo_pub[6].Text = "Memo"; // ccategory
			frm_WebCrawl.DefInstance.cbo_pub[1].Text = "O - Open";
			frm_WebCrawl.DefInstance.cbo_pub[0].Text = "All";
			frm_WebCrawl.DefInstance.from_spot = "AC";

			frm_WebCrawl.DefInstance.move_notes_over();

		}


		public void fill_ac_pub_details()
		{

			// RTW/MSW - 8/14/12 - YACHT - TO TURN AB ON OR OFF
			ADORecordSetHelper ado_Yacht = new ADORecordSetHelper();
			string Query = "";
			string cellcolor = "";
			string tmp_text = "";
			string type_of = "";
			string tnotes = "";
			StringBuilder temp_notes = new StringBuilder();

			try
			{

				Query = modGlobalVars.cEmptyString;
				cellcolor = modGlobalVars.cEmptyString;

				//extract fields from yacht table
				grd_pubs.Visible = false;
				grd_pubs.Enabled = false;

				//Clear the grid.
				grd_pubs.Clear();

				//Set the number of columns and rows in the grid.
				grd_pubs.ColumnsCount = 12;
				grd_pubs.RowsCount = 3;

				grd_pubs.FixedRows = 1;
				grd_pubs.FixedColumns = 0;

				//point to the first column and first row.
				grd_pubs.CurrentRowIndex = 0;


				grd_pubs.CurrentColumnIndex = 0;
				grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "Add Memo";
				grd_pubs.CurrentRowIndex = 1;


				grd_pubs.CurrentColumnIndex = 0;
				grd_pubs.SetColumnWidth(grd_pubs.CurrentColumnIndex, 167);
				grd_pubs.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "Type";

				grd_pubs.CurrentColumnIndex = 1;
				grd_pubs.SetColumnWidth(grd_pubs.CurrentColumnIndex, 167);
				grd_pubs.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "Date";


				grd_pubs.CurrentColumnIndex = 2;
				grd_pubs.SetColumnWidth(grd_pubs.CurrentColumnIndex, 167);
				grd_pubs.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "Pub Title";

				grd_pubs.CurrentColumnIndex = 3;
				grd_pubs.SetColumnWidth(grd_pubs.CurrentColumnIndex, 100);
				grd_pubs.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "Source";

				grd_pubs.CurrentColumnIndex = 4;
				grd_pubs.SetColumnWidth(grd_pubs.CurrentColumnIndex, 0);
				grd_pubs.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "Status";

				grd_pubs.CurrentColumnIndex = 5;
				grd_pubs.SetColumnWidth(grd_pubs.CurrentColumnIndex, 667);
				grd_pubs.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "Notes";

				grd_pubs.CurrentColumnIndex = 6;
				grd_pubs.SetColumnWidth(grd_pubs.CurrentColumnIndex, 0);
				grd_pubs.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "Link";

				grd_pubs.CurrentColumnIndex = 7;
				grd_pubs.SetColumnWidth(grd_pubs.CurrentColumnIndex, 0);
				grd_pubs.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "ID";

				grd_pubs.CurrentColumnIndex = 8;
				grd_pubs.SetColumnWidth(grd_pubs.CurrentColumnIndex, 100);
				grd_pubs.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "ACREP";


				grd_pubs.CurrentColumnIndex = 9;
				grd_pubs.SetColumnWidth(grd_pubs.CurrentColumnIndex, 100);
				grd_pubs.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "Ser No";


				grd_pubs.CurrentColumnIndex = 10;
				grd_pubs.SetColumnWidth(grd_pubs.CurrentColumnIndex, 100);
				grd_pubs.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "Reg No";

				grd_pubs.CurrentColumnIndex = 11;
				grd_pubs.SetColumnWidth(grd_pubs.CurrentColumnIndex, 100);
				grd_pubs.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "Status";



				grd_pubs.CurrentRowIndex = 2;





				Query = " select publist_process_status as type_of, publist_ser_no, amod_make_name, amod_model_name, pub_name as SOURCE,  ";
				Query = $"{Query} publist_clear_date as CLEARDATE, publist_entry_date as PUBDATE, publist_status, publist_entry_date, ";
				Query = $"{Query} publist_url as WEBLINK, publist_ac_id,  publist_id, ";
				Query = $"{Query} publist_description as LASTNOTES, publist_research_note, publist_acct_rep, ac_ser_no_full, ac_reg_no ";
				Query = $"{Query} from Publication_Listing with (NOLOCK) ";
				Query = $"{Query}  left outer join Publications with (NOLOCK) on pub_id = publist_source ";
				Query = $"{Query} left outer join aircraft with (NOLOCK) on ac_journ_id = 0 and ac_id = publist_ac_id ";
				Query = $"{Query} left outer join aircraft_model with (NOLOCK) on amod_id = ac_amod_id ";
				Query = $"{Query} where publist_comp_id = {txt_comp_id.Text} ";


				// 9/18/23 added MSW
				if (chk_comp_product_code[7].CheckState == CheckState.Checked)
				{
				}
				else
				{
					Query = $"{Query}and (amod_class_code <> 'E' or amod_class_code is null)  ";
				}


				Query = $"{Query} order by publist_entry_date desc ";


				ado_Yacht.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockBatchOptimistic);

				if (!ado_Yacht.BOF && !ado_Yacht.EOF)
				{

					do 
					{ // Loop Until ado_Yacht.EOF = True

						//grd_pubs.RowData(grd_pubs.Row) = ado_Yacht("yd_id")

						grd_pubs.CurrentColumnIndex = 0;
						grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["type_of"]))
						{
							type_of = Convert.ToString(ado_Yacht["type_of"]).Trim();

							tnotes = "";
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Yacht["LASTNOTES"]))
							{
								tnotes = Convert.ToString(ado_Yacht["LASTNOTES"]).Trim();
							}


							if (type_of.ToLower().Trim().IndexOf("for sale") >= 0)
							{
								type_of = "For Sale Listing";
							}
							else if (type_of.ToLower().Trim().IndexOf("sold") >= 0)
							{ 
								type_of = "Sold Listing";
							}
							else
							{
								type_of = "For Sale News Article";
							}

							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = type_of;
						}

						grd_pubs.CurrentColumnIndex = 1;
						grd_pubs.CellFontUnderline = true;
						grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["publist_entry_date"]))
						{
							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["publist_entry_date"]).Trim();
						}

						grd_pubs.CurrentColumnIndex = 2;
						grd_pubs.CellFontUnderline = true;
						grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["amod_make_name"]))
						{
							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = $"{Convert.ToString(ado_Yacht["amod_make_name"]).Trim()} {Convert.ToString(ado_Yacht["amod_model_name"]).Trim()}";
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["publist_ser_no"]))
						{
							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = $"{grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].FormattedValue.ToString()} - {Convert.ToString(ado_Yacht["publist_ser_no"]).Trim()}";
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["publist_ac_id"]))
						{
							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = $"{grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].FormattedValue.ToString()} ({Convert.ToString(ado_Yacht["publist_ac_id"]).Trim()})";
						}

						grd_pubs.CurrentColumnIndex = 3;
						grd_pubs.CellFontUnderline = true;
						grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["SOURCE"]))
						{
							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["SOURCE"]).Trim();
						}


						grd_pubs.CurrentColumnIndex = 4;
						grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["publist_status"]))
						{
							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["publist_status"]).Trim();

							temp_notes = new StringBuilder("");
							if (grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].FormattedValue.ToString() == "O")
							{
								grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "Open";

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Yacht["PUBDATE"]))
								{
									System.DateTime TempDate2 = DateTime.FromOADate(0);
									temp_notes = new StringBuilder($"Found on {((DateTime.TryParse(Convert.ToString(ado_Yacht["PUBDATE"]).Trim(), out TempDate2)) ? TempDate2.ToString("MM/dd/yy") : Convert.ToString(ado_Yacht["PUBDATE"]).Trim())}");
								}

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Yacht["LASTNOTES"]))
								{
									temp_notes.Append($": {Convert.ToString(ado_Yacht["LASTNOTES"]).Trim()}");
								}



							}
							else if (grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].FormattedValue.ToString() == "C")
							{ 
								grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "Cleared";

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Yacht["CLEARDATE"]))
								{
									temp_notes = new StringBuilder($"Cleared On {Convert.ToString(ado_Yacht["CLEARDATE"]).Trim()}");
								}

							}
							else if (grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].FormattedValue.ToString() == "R")
							{ 
								grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "References";
								temp_notes = new StringBuilder("Reference");
							}
							else if (grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].FormattedValue.ToString() == "N")
							{ 
								grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "No Action Required";

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Yacht["PUBDATE"]))
								{
									System.DateTime TempDate3 = DateTime.FromOADate(0);
									temp_notes = new StringBuilder($"Found on {((DateTime.TryParse(Convert.ToString(ado_Yacht["PUBDATE"]).Trim(), out TempDate3)) ? TempDate3.ToString("MM/dd/yy") : Convert.ToString(ado_Yacht["PUBDATE"]).Trim())}");
								}

								temp_notes.Append(" - No Action Required");

							}
							else if (grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].FormattedValue.ToString() == "I")
							{ 
								grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "In Progress";
							}

						}


						grd_pubs.CurrentColumnIndex = 5;
						grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = temp_notes.ToString();

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["publist_research_note"]))
						{
							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = $"{grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].FormattedValue.ToString()} - {Convert.ToString(ado_Yacht["publist_research_note"]).Trim()}";
						}




						grd_pubs.CurrentColumnIndex = 6;
						grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["WEBLINK"]))
						{
							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["WEBLINK"]).Trim();
						}

						grd_pubs.CurrentColumnIndex = 7;
						grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["publist_id"]))
						{
							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["publist_id"]).Trim();
						}


						grd_pubs.CurrentColumnIndex = 8;
						grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["publist_acct_rep"]))
						{
							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["publist_acct_rep"]).Trim();
						}

						grd_pubs.CurrentColumnIndex = 9;
						grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["ac_ser_no_full"]))
						{
							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["ac_ser_no_full"]).Trim();
						}

						grd_pubs.CurrentColumnIndex = 10;
						grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["ac_reg_no"]))
						{
							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["ac_reg_no"]).Trim();
						}

						grd_pubs.CurrentColumnIndex = 11;
						grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Yacht["publist_status"]))
						{
							grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = Convert.ToString(ado_Yacht["publist_status"]).Trim();
						}


						grd_pubs.RowsCount++;
						grd_pubs.CurrentRowIndex++;

						ado_Yacht.MoveNext();

					}
					while(!ado_Yacht.EOF);

					grd_pubs.RowsCount--;

					grd_pubs.CurrentRowIndex = 1;
					grd_pubs.Enabled = true;

				}
				else
				{

					grd_pubs.CurrentRowIndex = 1;
					grd_pubs.CurrentColumnIndex = 1;
					grd_pubs.set_RowData(1, 0);
					grd_pubs[grd_pubs.CurrentRowIndex, grd_pubs.CurrentColumnIndex].Value = "No Pubs Found";
					grd_pubs.Enabled = true;

				} // If (ado_Yacht.BOF = False And ado_Yacht.EOF = False) Then

				ado_Yacht.Close();

				grd_pubs.Visible = true;
				grd_pubs.Redraw = true;

				ado_Yacht = null;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Record_Error("Yact fill_yacht_bridge_details_Error", excep.Message);
			}

		} // fill_yacht_bridge_details_Error

		private void grdCompDupByAdd_Click(Object eventSender, EventArgs eventArgs) => modCommon.Highlight_Grid_Row(grdCompDupByAdd);


		private void grdCompDupByAdd_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			int lCol1 = 0;

			int lRow1 = grdCompDupByAdd.CurrentRowIndex;
			if (grdCompDupByAdd.CurrentRowIndex > 0)
			{

				if (Convert.ToString(grdCompDupByAdd[1, 1].Value) != "No Records Found")
				{

					// Save Changes
					bCompany_relation_DblClick = true;
					cmd_company_save_Click(cmd_company_save, new EventArgs());
					bCompany_relation_DblClick = false;

					nReference_CompanyID = grdCompDupByAdd.get_RowData(lRow1);
					nReference_CompanyJID = 0;

					Clear_Company_Save_Info();

					grdCompDupByAdd.Clear();
					grdCompDupByAdd.RowsCount = 2;
					grdCompDupByAdd.ColumnsCount = 2;

					cbo_ac_delivery_position.Items.Clear();
					cbo_ac_delivery_position.Enabled = false;
					modFillCompConControls.Fill_Deliver_Position_List(cbo_ac_delivery_position, bCompany_Commercial_Records, bCompany_BusorHel_Records, modGlobalVars.cfsiCompanyInfo.iDeliveryPositionComboListIndex);
					cbo_ac_delivery_position.Enabled = true;

					// Temp Hold ??
					//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
					Form_Activated(this, new EventArgs());

				} // If grdCompDupByAdd.TextMatrix(1, 1) <> "No Records Found" Then

			} // If grdCompDupByAdd.Row > 0 Then

		} // grdCompDupByAdd_DblClick

		private void lbl_comp_MouseDown(Object eventSender, MouseEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.lbl_comp, eventSender);
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;


			if (Index == 63)
			{
				if (Button == UpgradeHelpers.Utils.WinForms.MouseButtonsHelper.GetVB6ShortValue(MouseButtons.Right))
				{
					if (MessageBox.Show("Would you like to Clear All of the Address Information?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
					{
						txt_comp_address1.Text = "";
						txt_comp_address2.Text = "";
						txt_comp_city.Text = "";
						cbo_comp_state.SelectedIndex = 0;
						txt_comp_zip_code.Text = "";

						cmd_company_save_Click(cmd_company_save, new EventArgs());

						modAdminCommon.Rec_Journal_Info.journ_subject = "Removed Company Address";

						modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
						modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
						modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
						modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;
						modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
						modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
						modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
						modAdminCommon.Rec_Journal_Info.journ_status = "A";
						modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";
						//Rec_Journal_Info.journ_yacht_id = 0

						frm_Journal.DefInstance.Commit_Journal_Entry();

					}
				}
			}



		}



		private void lst_aircraft_contact_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			string strEMail = "";
			int lPTr = 0;
			int WM_SETTEXT = 0;


			string strText = lst_aircraft_contact.GetListItem(ListBoxHelper.GetSelectedIndex(lst_aircraft_contact)).Trim();

			if (strText != "")
			{

				if (strText.StartsWith("EMail:", StringComparison.Ordinal))
				{

					strEMail = strText.Substring(Math.Min(6, strText.Length)).Trim();
					if (strEMail != "")
					{
						JetNetSupport.PInvoke.SafeNative.shell32.ShellExecute(Support.GetHInstance().ToInt32(), "open", $"mailto:{strEMail}", null, null, 0);
					}

				}
				else
				{
					// Call Notepad With All Contact Information
					strText = "";
					int tempForEndVar = lst_aircraft_contact.Items.Count - 1;
					for (int lCnt1 = 0; lCnt1 <= tempForEndVar; lCnt1++)
					{
						strText = $"{strText}{($"{lst_aircraft_contact.GetListItem(lCnt1)} ").Trim()}{Environment.NewLine}";
					}

					if (strText != "")
					{

						if (frm_Info.DefInstance == null)
						{
							//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//VB.Global.Load(frm_Info.DefInstance);
						}

						frm_Info.DefInstance.SetFormCaption("Contact Information");
						frm_Info.DefInstance.SetText(strText);
						frm_Info.DefInstance.SetTextEnabled(false);
						frm_Info.DefInstance.Show();

					} // If strText <> "" Then

				} // If left(strText, 6) = "EMail:" Then

			} // If strText <> "" Then

		} // lst_aircraft_contact_DblClick

		private void lst_Aircraft_MouseDown(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			string temp_id = "";
			if (ListBoxHelper.GetSelectedIndex(lst_aircraft) >= 0 && lst_aircraft.Text != "")
			{
				temp_id = lst_aircraft.GetItemData(ListBoxHelper.GetSelectedIndex(lst_aircraft)).ToString().Trim();

				if (lst_aircraft.SelectedItems.Count == 1)
				{
					lst_aircraft.Tag = $" '{temp_id}' ";
				}
				else
				{
					if (lst_aircraft.Text.Trim() != "")
					{
						lst_aircraft.Tag = $"{Convert.ToString(lst_aircraft.Tag)} , ";
					}
					lst_aircraft.Tag = $"{Convert.ToString(lst_aircraft.Tag)} '{temp_id}' ";
				}
			}


		}

		public void mnuAddCompanyDocument_Click(Object eventSender, EventArgs eventArgs)
		{

			//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//VB.Global.Load(frm_CompanyDocument.DefInstance);
			frm_CompanyDocument.DefInstance.SetCompanyId(nReference_CompanyID);
			modCommon.CenterFormOnHomebaseMainForm(frm_CompanyDocument.DefInstance);
			frm_CompanyDocument.DefInstance.Form_Load_Data();
			frm_CompanyDocument.DefInstance.ShowDialog();
			frm_CompanyDocument.DefInstance.Close();

		}

		public void mnuAddCompPub_Click(Object eventSender, EventArgs eventArgs)
		{

			frm_WebCrawl.DefInstance.WhichAcctRep = modAdminCommon.gbl_Account_ID;

			setup_memo_request();

			if (frm_WebCrawl.DefInstance.Visible)
			{
				frm_WebCrawl.DefInstance.Hide();
			}
			frm_WebCrawl.DefInstance.Show();

		}

		public void mnuConfirmManagement_Click(Object eventSender, EventArgs eventArgs) => confirm_callback_company("M", grd_company_aircraft.CurrentRowIndex);

		public void mnuConfirmCharter_Click(Object eventSender, EventArgs eventArgs) => confirm_callback_company("C", grd_company_aircraft.CurrentRowIndex);


		public void mnuConfirnManCharter_Click(Object eventSender, EventArgs eventArgs)
		{

			int temp_row = grd_company_aircraft.CurrentRowIndex;

			confirm_callback_company("M", temp_row);
			confirm_callback_company("C", temp_row);

		}

		public void confirm_callback_company(string type_of, int lRow)
		{

			string journ_subject = "";
			string strToday = DateTime.Now.ToString("d");
			int ac_id = 0;
			int comp_id = 0;

			grd_company_aircraft.CurrentColumnIndex = 8;
			grd_company_aircraft.CurrentRowIndex = lRow;

			if (grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim().StartsWith("AMCMP", StringComparison.Ordinal) || grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim().StartsWith("CHCMP", StringComparison.Ordinal))
			{

				grd_company_aircraft.CurrentColumnIndex = 3;
				if (grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim() == "")
				{
					grd_company_aircraft.CurrentRowIndex--;

					grd_company_aircraft.CurrentColumnIndex = 3;
					if (grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim() == "")
					{
						grd_company_aircraft.CurrentRowIndex--;

						grd_company_aircraft.CurrentColumnIndex = 3;
						if (grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim() == "")
						{
							grd_company_aircraft.CurrentRowIndex--;

							grd_company_aircraft.CurrentColumnIndex = 3;
							if (grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim() == "")
							{
								grd_company_aircraft.CurrentRowIndex--;

								grd_company_aircraft.CurrentColumnIndex = 3;
								if (grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim() == "")
								{
									grd_company_aircraft.CurrentRowIndex--;
								}
							}
						}

					}
				}

				if (grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim() == "")
				{
					MessageBox.Show("Could Not Find Correct Information", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
				}
				else
				{
					if (type_of.Trim() == "M")
					{
						journ_subject = "Confirmed Management Company ";
					}
					else if (type_of.Trim() == "C")
					{ 
						journ_subject = "Confirmed Charter Company ";
					}

					// company name
					journ_subject = $"{journ_subject}{txt_comp_name.Text} -> ";

					grd_company_aircraft.CurrentColumnIndex = 3;
					journ_subject = $"{journ_subject}{grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString()}";

					grd_company_aircraft.CurrentColumnIndex = 4;
					journ_subject = $"{journ_subject} {grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString()}";


					modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(strToday.Trim());
					if (type_of.Trim() == "M")
					{
						modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CMC";
					}
					else
					{
						modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CCC";
					}
					modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";
					modAdminCommon.Rec_Journal_Info.journ_subject = journ_subject;
					modAdminCommon.Rec_Journal_Info.journ_description = "";
					modAdminCommon.Rec_Journal_Info.journ_ac_id = grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex);
					modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;
					modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;

					modAdminCommon.Rec_Journal_Info.journ_account_id = cbo_comp_account[COMP_ACCOUNT_REP].Text.Trim();
					modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
					modAdminCommon.Rec_Journal_Info.journ_status = "A";

					frm_Journal.DefInstance.Commit_Journal_Entry();
				}

			}

		}


		public void mnuCompanyShowUserHistory_Click(Object eventSender, EventArgs eventArgs)
		{

			if (frm_Main_Menu.DefInstance.mnuShowUserHistory.Text == "Show User History")
			{
				frm_UserHistory.DefInstance.Refresh_User_History_Grids("All");
				mnuCompanyShowUserHistory.Text = "Hide User History";
				frm_Main_Menu.DefInstance.mnuShowUserHistory.Text = "Hide User History";
				frm_UserHistory.DefInstance.SetLastForm("frm_Company");
				frm_UserHistory.DefInstance.Show();
			}
			else
			{
				frm_UserHistory.DefInstance.TimerOff();
				mnuCompanyShowUserHistory.Text = "Show User History";
				frm_Main_Menu.DefInstance.mnuShowUserHistory.Text = "Show User History";
				frm_UserHistory.DefInstance.Hide();
			}

		} // mnuCompanyShowUserHistory_Click

		private void grd_company_phone_MouseDown(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			string strType = "";

			int lRow1 = grd_company_phone.MouseRow;
			int lCol1 = grd_company_phone.MouseCol;

			if (lRow1 > 0)
			{

				if (Button == UpgradeHelpers.Utils.WinForms.MouseButtonsHelper.GetVB6ShortValue(MouseButtons.Right))
				{

					grd_company_phone.CurrentRowIndex = lRow1;

					strType = Convert.ToString(grd_company_phone[lRow1, 0].Value);

					if (strType != "")
					{

						strPhoneGrid = "Company";
						mnuCompanyDialPhoneNumber.Available = true;
						mnuCompanyShowUserHistory.Available = false;

						modCommon.Highlight_Grid_Row(grd_company_phone);

						//UPGRADE_WARNING: (6024) Default menues are not supported for Context Menues (Popup) More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6024
						Ctx_mnuTools.Show(this, PointToClient(Cursor.Position).X, PointToClient(Cursor.Position).Y);

						grd_company_phone.Redraw = true;

						mnuCompanyShowUserHistory.Available = true;
						mnuCompanyDialPhoneNumber.Available = false;

					} // If strType <> "" Then

				} // If Button = vbRightButton Then

			} // If lRow1 > 0 Then

		} // grd_company_phone_MouseDown

		public void mnuCompanyDialPhoneNumber_Click(Object eventSender, EventArgs eventArgs)
		{

			string strType = "";
			string strPhoneNbr = "";
			string strMsg = "";

			int lContactId = 0;
			int lRow1 = 0;

			if (strPhoneGrid == "Company")
			{

				lRow1 = grd_company_phone.CurrentRowIndex;

				if (lRow1 > 0)
				{

					strType = Convert.ToString(grd_company_phone[lRow1, 0].Value);
					if (strType != "")
					{

						strPhoneNbr = modCommon.Format_Phone_Number_To_Dial(($"{cbo_comp_account[COMP_LINE_ACCESS].Text} ").Trim(), ($"{cbo_comp_country.Text} ").Trim(), Convert.ToString(grd_company_phone[lRow1, 1].Value).Trim(), Convert.ToString(grd_company_phone[lRow1, 2].Value).Trim(), Convert.ToString(grd_company_phone[lRow1, 3].Value).Trim(), Convert.ToString(grd_company_phone[lRow1, 4].Value).Trim());

						strMsg = $"Company: {txt_comp_name.Text.Trim()} - [{strType} - {strPhoneNbr}]";

						modAdminCommon.Record_Event("Dial Phone Number", strMsg, 0, nReference_CompanyJID, nReference_CompanyID, false, 0, 0);

						modCommon.EnterStandardJournalNotes($"Auto Dialed - {strMsg}", "", 0, nReference_CompanyID, 0, 0);

						// changed msw - 5/12/22 - per andrew
						//TAPIDialer Replace(strPhoneNbr, "-", "")
						modCallOne.CallOne_Dialer(StringsHelper.Replace(StringsHelper.Replace(strPhoneNbr, "-", "", 1, -1, CompareMethod.Binary), " ", "", 1, -1, CompareMethod.Binary));

					} // If strType <> "" Then

				} // If lRow1 > 0 Then

			} // If strPhoneGrid = "Company" Then

			if (strPhoneGrid == "Contact")
			{

				lContactId = Convert.ToInt32(Double.Parse(txt_contact_id.Text));
				lRow1 = grd_contact_phone_numbers.CurrentRowIndex;

				if (lRow1 > 0)
				{

					strType = Convert.ToString(grd_contact_phone_numbers[lRow1, 0].Value);
					if (strType != "")
					{

						strPhoneNbr = modCommon.Format_Phone_Number_To_Dial(($"{cbo_comp_account[COMP_LINE_ACCESS].Text} ").Trim(), ($"{cbo_comp_country.Text} ").Trim(), Convert.ToString(grd_contact_phone_numbers[lRow1, 1].Value).Trim(), Convert.ToString(grd_contact_phone_numbers[lRow1, 2].Value).Trim(), Convert.ToString(grd_contact_phone_numbers[lRow1, 3].Value).Trim(), Convert.ToString(grd_contact_phone_numbers[lRow1, 4].Value).Trim());

						strMsg = $"Contact: {Convert.ToString(txt_contact_id.Tag).Trim()} - [{strType} - {strPhoneNbr}]";

						modAdminCommon.Record_Event("Dial Phone Number", strMsg, 0, nReference_CompanyJID, nReference_CompanyID, false, 0, lContactId);

						strMsg = $"[{strType} - {strPhoneNbr}]";

						modCommon.EnterStandardJournalNotes($"Auto Dialed - {strMsg}", "", 0, nReference_CompanyID, lContactId, 0);

						// changed MSw - 5/12/22 - per andrew
						// TAPIDialer Replace(strPhoneNbr, "-", "")
						modCallOne.CallOne_Dialer(StringsHelper.Replace(StringsHelper.Replace(strPhoneNbr, "-", "", 1, -1, CompareMethod.Binary), " ", "", 1, -1, CompareMethod.Binary));

					} // If strType <> "" Then

				} // If lRow1 > 0 Then

			} // If strPhoneGrid = "Contact" Then

		} // mnuCompanyDialPhoneNumber_Click

		public void mnuEditTransmitCompanyRecord_Click(Object eventSender, EventArgs eventArgs)
		{

			if (MessageBox.Show("Transmit This Company Record To Evolution Without Any Changes?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
			{

				if (nReference_CompanyID > 0)
				{

					modCommon.ClearCompanyActionDate(nReference_CompanyID, nReference_CompanyJID);

					MessageBox.Show($"Transmit Successful{Environment.NewLine}{Environment.NewLine}You Must Exit The Company Record{Environment.NewLine}{Environment.NewLine}Before It Will Be Transmitted To Evolution", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Information);

				} // CompanyID > 0

			} // MsgBox

		} // mnuEditTransmitCompanyRecord_Click



		private void grd_company_expired_leases_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			if (grd_company_expired_leases.CurrentRowIndex > 0 && Convert.ToString(grd_company_expired_leases[1, 0].Value).Trim().ToUpper() != ("No Expired Leases Found").ToUpper())
			{

				modAdminCommon.gbl_Aircraft_ID = grd_company_expired_leases.get_RowData(grd_company_expired_leases.CurrentRowIndex);
				modAdminCommon.gbl_Aircraft_Journal_ID = nReference_CompanyJID;

				frm_aircraft.DefInstance.Form_Initialize();
				frm_aircraft.DefInstance.StartForm = StartForm;
				frm_aircraft.DefInstance.Reference_Aircraft_ID = modAdminCommon.gbl_Aircraft_ID;
				frm_aircraft.DefInstance.Reference_Journal_ID = modAdminCommon.gbl_Aircraft_Journal_ID;
				frm_aircraft.DefInstance.Reference_Company_ID = nReference_CompanyID;
				frm_aircraft.DefInstance.Show();
				//UPGRADE_WARNING: (2065) Form method frm_aircraft.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
				frm_aircraft.DefInstance.BringToFront();
				//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
				frm_aircraft.DefInstance.Form_Activated(frm_aircraft.DefInstance, new EventArgs());

			} // If grd_company_expired_leases.Row > 0 And UCase$(Trim$(grd_company_expired_leases.TextMatrix(1, 0))) <> UCase$("No Expired Leases Found") Then

			Hide_MySelf(true, true);

		} // grd_company_expired_leases_DblClick

		private void grd_company_cert_Click(Object eventSender, EventArgs eventArgs)
		{

			cmdCertCommand[2].Visible = true; // Remove
			cmdCertCommand[2].Enabled = true;
			lbl_company_cert_id_label.Visible = true;
			cert_edit_enter_frame.Visible = true;
			// lbl_company_check_sure.Visible = False

			cert_combo_drop_down[1].Visible = false;
			fill_cert_drop_down_and_info("Y");

		}


		private void grd_company_history_Click(Object eventSender, EventArgs eventArgs)
		{

			if ((grd_company_history.CurrentRowIndex > 0) && (Convert.ToString(grd_company_history[1, 1].Value).Trim().ToUpper() != ("No Company History Found").ToUpper()))
			{
				display_historical_grid_selection();
			}
			else
			{

				txt_historical_ac_description.Text = modGlobalVars.cEmptyString;
				lbl_comp[JOURNAL_ID_INDEX].Text = modGlobalVars.cEmptyString;

				lbl_comp[HISTORY_JOURNID_INDEX].Visible = false;
				lbl_comp[JOURNAL_ID_INDEX].Visible = false;

				lbl_comp[HISTORY_COUNT_INDEX].Text = "0";

				cmdCompHistoryTab[1].Enabled = false; // Get All History Records

			}

		}

		private void grd_company_history_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			if ((grd_company_history.CurrentRowIndex > 0) && (Convert.ToString(grd_company_history[1, 2].Value).Trim().ToUpper() != ("No Company History Found").ToUpper()))
			{

				if (nReference_CompanyJID != grd_company_history.get_RowData(grd_company_history.CurrentRowIndex))
				{
					// only save if going to another historical record

					bCompany_history_DblClick = true;
					cmd_company_save_Click(cmd_company_save, new EventArgs());

				}

			}

		}

		private void grd_company_history_CellEnter(Object eventSender, EventArgs eventArgs) => grd_company_history_Click(grd_company_history, new EventArgs());


		private void grd_company_journal_Click(Object eventSender, EventArgs eventArgs)
		{

			if (grd_company_journal.MouseRow == 0)
			{


				switch(grd_company_journal.MouseCol)
				{
					case 0 : 
						strJournalOrderBy = " ORDER BY journ_date DESC, journ_id DESC "; 
						 
						break;
					case 1 : 
						strJournalOrderBy = " ORDER BY journ_user_id  "; 
						 
						break;
					case 2 : 
						strJournalOrderBy = " ORDER BY journ_subject "; 
						 
						break;
					case 3 : case 4 : 
						return; 

					case 5 : 
						strJournalOrderBy = " ORDER BY journ_subcategory_code "; 
						 
						break;
					case 6 : 
						strJournalOrderBy = " ORDER BY journ_id DESC, journ_date DESC"; 
						 
						break;
				}

				fill_company_journal_grid(grd_company_journal);

			}
			else if (grd_company_journal.MouseRow > 0 && grd_company_journal.CurrentRowIndex > 0)
			{ 

				grd_company_journal.RowSel = grd_company_journal.CurrentRowIndex;

			}

		}

		private void grd_company_journal_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			grd_company_journal.Enabled = false;
			disable_important_items();

			if (grd_company_journal.CurrentRowIndex > 0)
			{

				frm_Journal.DefInstance.Reference_Journal_ID = grd_company_journal.get_RowData(grd_company_journal.CurrentRowIndex);
				frm_Journal.DefInstance.Reference_Comp_Id = nReference_CompanyID;


				frm_Journal.DefInstance.ShowDialog();

			}

			grd_company_journal.Enabled = true;

			enable_important_items();

			if (!modGlobalVars.bKeepTransactionFocus)
			{
				this.Activate();
			}
			else
			{
				frm_Transaction_Documents.DefInstance.Activate();
			}

			search_off();

		}

		private void grd_company_shares_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			if (grd_company_shares.CurrentRowIndex > 0 && Convert.ToString(grd_company_shares[1, 0].Value).Trim().ToUpper() != ("No Share Relationships Found").ToUpper())
			{

				if (grd_company_shares.MouseCol > 4)
				{

					//select by company
					grd_company_shares.CurrentColumnIndex = 7;
					if (grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
					{
						if (Convert.ToInt32(Conversion.Val(grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].FormattedValue.ToString())) > 0)
						{
							nReference_CompanyID = Convert.ToInt32(Conversion.Val(grd_company_shares[grd_company_shares.CurrentRowIndex, grd_company_shares.CurrentColumnIndex].FormattedValue.ToString()));
							nReference_CompanyJID = 0;
							// Temp Hold ??
							//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
							Form_Activated(this, new EventArgs());
						}
					}

				}
				else
				{

					//select by ac
					modAdminCommon.gbl_Aircraft_ID = grd_company_shares.get_RowData(grd_company_shares.CurrentRowIndex);
					modAdminCommon.gbl_Aircraft_Journal_ID = 0;

					if (modAdminCommon.gbl_Aircraft_ID > 0)
					{

						frm_aircraft.DefInstance.Form_Initialize();
						frm_aircraft.DefInstance.StartForm = StartForm;
						frm_aircraft.DefInstance.Reference_Aircraft_ID = modAdminCommon.gbl_Aircraft_ID;
						frm_aircraft.DefInstance.Reference_Journal_ID = modAdminCommon.gbl_Aircraft_Journal_ID;
						frm_aircraft.DefInstance.Reference_Company_ID = nReference_CompanyID;
						frm_aircraft.DefInstance.JournalIDToShow = 0;
						frm_aircraft.DefInstance.Show();
						//UPGRADE_WARNING: (2065) Form method frm_aircraft.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
						frm_aircraft.DefInstance.BringToFront();
						//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
						frm_aircraft.DefInstance.Form_Activated(frm_aircraft.DefInstance, new EventArgs());

						Hide_MySelf(true, true);

					} // If gbl_Aircraft_ID > 0 Then

				} // If grd_company_shares.MouseCol > 4 Then

			} // If grd_company_shares.Row > 0 And UCase$(Trim$(grd_company_shares.TextMatrix(1, 0))) <> UCase$("No Share Relationships Found") Then

		} // grd_company_shares_DblClick

		private void grd_company_wanted_Click(Object eventSender, EventArgs eventArgs)
		{


			int lRow = grd_company_wanted.CurrentRowIndex;

			if (lRow > 0)
			{

				if (Convert.ToString(grd_company_wanted[1, 1].Value).Trim().ToUpper() != ("No Wanted Aircraft Found").ToUpper())
				{

					if (WHICH_NOTE == "")
					{
						WHICH_NOTE = "Wanted";
					}

					if (get_selected_wanted(grd_company_wanted.get_RowData(lRow)))
					{

						// unlock the model combo box so user can change model
						cmd_wanted_delete.Visible = true;
						//UPGRADE_ISSUE: (2064) ComboBox property cbo_amwant_model.Locked was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						cbo_amwant_model.setLocked(false);
						cmd_wanted_save[1].Enabled = true;

						if (WHICH_NOTE == "Wanted")
						{
							pnl_company_wanted_notes.Visible = true;
							txt_amwant_auto_unsuscribe_date.Visible = false;
							txt_amwant_auto_distribute_email.Visible = false;
							txt_amwant_auto_distribute_replyname.Visible = false;
							Shape3.Visible = true;
							lbl_comp[81].Visible = false;
							cmd_wanted_save[1].Visible = false;
							lbl_comp_Click(lbl_comp[90], new EventArgs()); // added in at request from tanya to not make message visible first - 1/16/18 MSW
						}

					}
					else
					{

						cmd_wanted_delete.Visible = false;

						if (nReference_CompanyJID == 0)
						{
							cmd_wanted_add.Visible = true;
						}

						if (WHICH_NOTE == "Wanted")
						{
							pnl_company_wanted_notes.Visible = true;
							txt_amwant_auto_unsuscribe_date.Visible = false;
							txt_amwant_auto_distribute_email.Visible = false;
							txt_amwant_auto_distribute_replyname.Visible = false;
							Shape3.Visible = true;
							cmd_wanted_save[1].Visible = false;
							lbl_comp[81].Visible = false;
						}

					} // If get_selected_wanted(grd_company_wanted.RowData(lRow)) Then

				} // If UCase(Trim(grd_company_wanted.TextMatrix(1, 1))) <> UCase("No Wanted Aircraft Found") Then

			} // If lRow > 0 Then

		} // grd_company_wanted_Click


		private void lbl_comp_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.lbl_comp, eventSender);
			//
			string strEMName = "";
			int lEMId = 0;
			int lCompId = 0;
			int lContactId = 0;
			int lRow = 0;
			int lCompRefKey = 0;
			string strHideFlag = "";
			string results_email = "";


			switch(Index)
			{
				case ACCOUNT_REP_INDEX : 
					cal_comp_callback_date.SetDate(cal_comp_callback_date.SelectionRange.Start.AddDays(30)); 
					 
					break;
				case HOTBOX_DETAIL_INDEX : 
					 
					break;
				case SHOW_MODEL_NOTE : 
					WHICH_NOTE = "Wanted"; 
					pnl_company_wanted_notes.Visible = true; 
					cmd_wanted_save[1].Visible = false; 
					txt_amwant_auto_unsuscribe_date.Visible = false; 
					txt_amwant_auto_distribute_email.Visible = false; 
					txt_amwant_auto_distribute_replyname.Visible = false; 
					Shape3.Visible = true; 
					lbl_comp[81].Visible = false; 
					 
					break;
				case SHOW_WANTED_NOTE : 
					WHICH_NOTE = "Model"; 
					pnl_company_wanted_notes.Visible = false; 
					txt_amwant_auto_unsuscribe_date.Visible = true; 
					txt_amwant_auto_distribute_email.Visible = true; 
					txt_amwant_auto_distribute_replyname.Visible = true; 
					Shape3.Visible = true; 
					lbl_comp[81].Visible = true; 
					cmd_wanted_save[1].Visible = true; 
					 
					break;
				case CONTACT_EMAIL_NOTICE : 
					 
					// 06/19/2014 - By David D. Cruger 
					strEMName = cmbContactEMail.Text; 
					lEMId = cmbContactEMail.GetItemData(cmbContactEMail.SelectedIndex); 
					 
					if (strEMName != "Not Selected")
					{

						lbl_comp[CONTACT_EMAIL_NOTICE].Enabled = false;

						if (strEMName == "Project Survey")
						{
							cmd_contact_send_email_project_survey();
						}
						else
						{

							lCompId = nReference_CompanyID;
							lContactId = nSelectedContactID;

							//----------------------------------------------------------------------
							// 01/06/2016 - By David D. Cruger
							// Check JNiQ EMail Notice And If Contact Is On Do Not Send JNiQ EMail

							if (strEMName.IndexOf("JNiQ") >= 0)
							{

								if (modCommon.IsContactOnDoNotSendJNiQSurveyList(lCompId, lContactId))
								{
									modAdminCommon.Record_Event("Contact", "Contact Is On Do Not Send JNiQ Survey List", 0, 0, lCompId, false, 0, lContactId);
									lEMId = 0;
									MessageBox.Show($"Contact Is On Do Not Send JNiQ Survey List{Environment.NewLine}{Environment.NewLine}Unable To Send EMail Notice", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Information);
								}

								if (Check_If_Company_Has_Completed_Survey(lCompId, 0, ref results_email))
								{
									if (MessageBox.Show($"{results_email}.   Would You still Like to Send An Email?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
									{
										lEMId = 0;
									}
								}

								if (lEMId > 0)
								{ // if we are still going to send it then check
									if (Check_If_Company_Has_Been_Sent_Survey(lCompId, lContactId, ref results_email))
									{
										if (MessageBox.Show($"{results_email}.   Would You still Like to Send An Email?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
										{
											lEMId = 0;
										}
									}
								}


							} // If InStr(1, strEMName, "JNiQ") > 0 Then

							if (modAdminCommon.LOCAL_ADO_DB.ConnectionString.IndexOf("jetnet_ra_test") >= 0)
							{ //added msw = 4/8/22
								MessageBox.Show("You are On Test, Email Did not Really Send!", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
							}
							else if (lEMId > 0)
							{ 
								modEMailNotice.Send_EMail_Notice(lEMId, lCompId, lContactId, 0, 0, txt_market_note[7].Text); // added MSw - 12/18/2020
							}


							if (strEMName.IndexOf("JNiQ") >= 0)
							{ // added MSW - 4/29/21
								// auto bring up the add note button - 4/8/21
								cmd_company_add_note_Click(cmd_company_add_note, new EventArgs());

								opt_journal_subject[3].Checked = true;
								cbo_verify_note_type.Text = "IQ - Survey Notes";

								cbo_verify_journal_auto_subject.Text = "JNiQ - Email Sent";
								cbo_verify_journal_auto_subject.Enabled = false;
								cbo_verify_journal_subject.Text = cbo_verify_journal_auto_subject.Text;
								cbo_verify_journal_auto_subject.Enabled = true;

								chk_array[1].Visible = false; // set this = false - per josiah - msw -  1/27/23
								if (chk_array[5].CheckState == CheckState.Checked)
								{
									chk_array[1].CheckState = CheckState.Checked;
									chk_array[1].Tag = "1";
								}
								else
								{
									chk_array[1].CheckState = CheckState.Unchecked;
									chk_array[1].Tag = "0";
								}
								chk_array[5].Visible = false;

								chk_verify_contact.CheckState = CheckState.Checked;
								chk_array[2].CheckState = CheckState.Unchecked;
								chk_array[3].CheckState = CheckState.Unchecked;
								chk_array[4].CheckState = CheckState.Unchecked;

								if (txt_market_note[7].Text.Trim() != "")
								{
									txt_market_note[3].Text = $"Email Sent To: {txt_market_note[7].Text}";
								}
								else
								{
									txt_market_note[3].Text = $"Email Sent To: {txt_contact_email_address.Text}";
								}

							}


						} // If strText = "Project Survey" Then

						lbl_comp[CONTACT_EMAIL_NOTICE].Enabled = true;

					}  // If strEMName <> "Not Selected" Then 
					 
					break;
				case ABIFLAG : 
					 
					SSTabHelper.SetSelectedIndex(tab_company_admin, 5); 
					 
					// 03/19/2015 - By David D. Cruger 
					// Added Hide Flag 
					 
					break;
				case COMPANY_HIDE_RELATIONSHIP : 
					 
					lRow = grd_company_relationships.CurrentRowIndex; 
					lCompRefKey = grd_company_relationships.get_RowData(lRow); 

					 
					if (modCommon.Hide_UnHide_Company_Relationship(lCompRefKey, ref strHideFlag))
					{
						SSTabHelper.SetSelectedIndex(tab_company_rel, 0);
						fill_relationships_grid();
					} 

					 
					break;
				case 114 : 
					 
					//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064 
					//VB.Global.Load(frm_WebReport.DefInstance); 
					frm_WebReport.DefInstance.WhichReport = "Company Services Used"; 
					frm_WebReport.DefInstance.PassedCompID = nReference_CompanyID; 
					frm_WebReport.DefInstance.Show(); 
					 
					break;
				case 109 : 
					 
					// company contact events - MSW - 8/27/21 
					frm_EventsList.DefInstance.gblACID = 0; 
					frm_EventsList.DefInstance.gblCOMPID = nReference_CompanyID; 
					frm_EventsList.DefInstance.gblYacht_ID = 0; 
					frm_EventsList.DefInstance.Show(); 
					//UPGRADE_WARNING: (2065) Form method frm_EventsList.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065 
					frm_EventsList.DefInstance.BringToFront(); 


					 
					break;
			} // Case Index

		} // lbl_comp_Click(Index As Integer)
		// 03/19/2015 - By David D. Cruger
		// Update Hide Flag on Company Relationship

		public bool Check_If_Company_Has_Completed_Survey(int comp_id, int contact_id, ref string results_string)
		{

			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			string strQuery1 = "";
			string strUpdate1 = "";

			int lComp1 = 0;
			int lComp2 = 0;
			int lChg1 = 0;

			bool bTrans = false;
			string strErrDesc = "";

			bool bResults = false;

			if (comp_id > 0)
			{

				strQuery1 = "select journ_subject, journ_date from Journal witth (NOLOCK) ";
				strQuery1 = $"{strQuery1} where journ_subcategory_code = 'IQ' and journ_subject like '%completed Q%' and journ_date > (GETDATE() -100)  ";
				strQuery1 = $"{strQuery1} and (journ_comp_id = {comp_id.ToString()}) ";

				rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!rstRec1.BOF && !rstRec1.EOF)
				{

					bResults = true;

					results_string = $"Recent Completed IQ Survey Done: {($"{Convert.ToString(rstRec1["journ_subject"])} ").Trim()} on {($"{Convert.ToString(rstRec1["journ_date"])} ").Trim()}";

				} // If rstRec1.BOF = False And rstRec1.EOF = False Then

				rstRec1.Close();

			} // If lCompRefKey > 0 Then

			rstRec1 = null;

			return bResults;

		}

		public bool Check_If_Company_Has_Been_Sent_Survey(int comp_id, int contact_id, ref string results_string)
		{

			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			string strQuery1 = "";
			string strUpdate1 = "";

			int lComp1 = 0;
			int lComp2 = 0;
			int lChg1 = 0;

			bool bTrans = false;
			string strErrDesc = "";

			bool bResults = false;

			if (comp_id > 0)
			{

				strQuery1 = "select journ_subject, journ_date from Journal witth (NOLOCK) ";
				strQuery1 = $"{strQuery1} where journ_subcategory_code = 'IQ'  and journ_subject like '%Sent%' and journ_subject like '%iQ%' and journ_date > (GETDATE() -14)  ";
				strQuery1 = $"{strQuery1} and (journ_comp_id = {comp_id.ToString()}) ";

				if (contact_id > 0)
				{
					strQuery1 = $"{strQuery1} and (journ_contact_id = {contact_id.ToString()}) ";
				}


				rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!rstRec1.BOF && !rstRec1.EOF)
				{

					bResults = true;

					results_string = $"Recent IQ Survey Sent: {($"{Convert.ToString(rstRec1["journ_subject"])} ").Trim()} on {($"{Convert.ToString(rstRec1["journ_date"])} ").Trim()}";

				} // If rstRec1.BOF = False And rstRec1.EOF = False Then

				rstRec1.Close();

			} // If lCompRefKey > 0 Then

			rstRec1 = null;

			return bResults;

		}


		private void lbl_comp_DoubleClick(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.lbl_comp, eventSender);

			int temp_main_comp_id = 0;
			string temp_string = "";
			ADORecordSetHelper ado_ContactInfo = null;
			string Query = "";
			StringBuilder strText = new StringBuilder();
			StringBuilder temp_Ticker = new StringBuilder();

			switch(Index)
			{
				case CITY_STATE_ZIP_INDEX : case ADDRESS_INDEX : 
					 
					confirm_company_field("comp_address"); 
					 
					break;
				case EMAIL_ADDRESS_INDEX : 
					 
					confirm_company_field("comp_email"); 
					 
					break;
				case WEB_ADDRESS_INDEX : 
					 
					confirm_company_field("comp_web"); 
					 
					break;
				case CONTACT_NAME_INDEX : 
					 
					confirm_contact_field("contact_name"); 
					 
					break;
				case CONTACT_EMAIL_ADDRESS_INDEX : 
					 
					confirm_contact_field("contact_email"); 
					 
					break;
				case CONTACT_TITLE_INDEX : 
					 
					confirm_contact_field("contact_title"); 
					break;
				case 101 : 
					 
					break;
				case 41 : 
					// dispaly the new hot box list - MSW - 5/20/20 
					 
					if (lbl_comp[41].Text == "Double Click to Go Back to Hot Box")
					{
						lbl_comp[41].Text = "  Date                       Make/Model   [Ser#]   (Reg#)   Subject";
						fill_hotbox_list();
					}
					else
					{
						lbl_comp[41].Text = "Double Click to Go Back to Hot Box";

						pnl_research_notes.Visible = false;

						int tempRefParam = 0;
						modCommon.fill_research_action_list(nReference_CompanyID, 0, lst_research_notes, null, "", 0, ref tempRefParam, false, false, "", -1, tab_company_admin);

					} 


					 
					break;
				case 38 : 
					// new re-assign procedues done date - 10/8/21 - 
					 
					confirm_coy_reassign_procedure(); 
					break;
				case 116 : 
					 
					temp_main_comp_id = 0; 
					 
					temp_string = modCommon.DLookUp("comp_id", "view_company_ticker", $"(tickercompid = {nReference_CompanyID.ToString()})"); 
					if (Information.IsNumeric(temp_string))
					{
						temp_main_comp_id = Convert.ToInt32(Double.Parse(temp_string));
					} 
					 
					if (temp_main_comp_id > 0)
					{

						Query = " select comp_name, company.comp_id, relationship, view_company_ticker.comp_ticker_symbol, comp_ticker_name ";

						Query = $"{Query} from view_company_ticker  ";
						Query = $"{Query} inner join Company  with (NOLOCK) on tickercompid = Company.comp_id and comp_journ_id = 0";
						Query = $"{Query} inner join Company_Ticker with (NOLOCK) on Company_Ticker.comp_ticker_jetnet_comp_id = view_company_ticker.comp_id ";
						Query = $"{Query} where view_company_ticker.comp_id = {temp_main_comp_id.ToString()} ";

						ado_ContactInfo = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

						if (!(ado_ContactInfo.BOF && ado_ContactInfo.EOF))
						{

							while(!ado_ContactInfo.EOF)
							{

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_ContactInfo["comp_name"]))
								{
									if (Convert.ToString(ado_ContactInfo["comp_name"]).Trim() != modGlobalVars.cEmptyString)
									{
										strText.Append($"{Environment.NewLine}{Convert.ToString(ado_ContactInfo["comp_name"]).Trim()}{modGlobalVars.cSingleSpace}");
									}
								}

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_ContactInfo["comp_id"]))
								{
									if (Convert.ToString(ado_ContactInfo["comp_id"]).Trim() != modGlobalVars.cEmptyString)
									{
										strText.Append($" ({Convert.ToString(ado_ContactInfo["comp_id"]).Trim()}){modGlobalVars.cSingleSpace}");
									}
								}

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_ContactInfo["comp_ticker_name"]))
								{
									if (Convert.ToString(ado_ContactInfo["comp_ticker_name"]).Trim() != modGlobalVars.cEmptyString)
									{
										temp_Ticker = new StringBuilder($"{Convert.ToString(ado_ContactInfo["comp_ticker_name"]).Trim()}{modGlobalVars.cSingleSpace}");
									}
								}

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_ContactInfo["relationship"]))
								{
									if (Convert.ToString(ado_ContactInfo["relationship"]).Trim() != modGlobalVars.cEmptyString)
									{
										strText.Append($" - {Convert.ToString(ado_ContactInfo["relationship"]).Trim()} {modGlobalVars.cSingleSpace}");
									}
								}


								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_ContactInfo["comp_ticker_symbol"]))
								{
									if (Convert.ToString(ado_ContactInfo["comp_ticker_symbol"]).Trim() != modGlobalVars.cEmptyString)
									{
										temp_Ticker.Append(Convert.ToString(ado_ContactInfo["comp_ticker_symbol"]).Trim());
									}
								}

								ado_ContactInfo.MoveNext();
							};
						} // If Not (ado_ContactInfo.BOF And ado_ContactInfo.EOF) Then

						ado_ContactInfo.Close();

						ado_ContactInfo = null;


						frm_Info.DefInstance.SetFormCaption($"Company Ticker Relationships - {temp_Ticker.ToString()}");
						frm_Info.DefInstance.SetText($"{temp_Ticker.ToString()}{Environment.NewLine}{strText.ToString()}");
						frm_Info.DefInstance.cmd_show_all.Visible = false;
						frm_Info.DefInstance.ACID = 0;
						frm_Info.DefInstance.SetTextEnabled(false);
						frm_Info.DefInstance.Show();
					} 
					break;
			}

			check_re_load_company_journal();

		}
		private void lst_business_types_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				ToolTipMain.SetToolTip(lst_business_types, lst_business_types.Text);
			}

		}

		private void lst_related_company_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{
			if (!bFormLoad)
			{
				ToolTipMain.SetToolTip(lst_related_company, lst_related_company.Text);
			}
		}

		private void lst_Related_Contact_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{
			if (!bFormLoad)
			{
				ToolTipMain.SetToolTip(lst_related_contact, lst_related_contact.Text);
			}
		}

		private void lst_research_notes_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			string temp_note = "";
			string temp_type = "";
			if (!bFormLoad)
			{


				temp_note = lst_research_notes.Text.Trim();

				// this passes their ID in
				//UPGRADE_WARNING: (1068) find_research_action_item() of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
				temp_type = Convert.ToString(find_research_action_item(lst_research_notes.GetItemData(ListBoxHelper.GetSelectedIndex(lst_research_notes))));
				SSTabHelper.SetSelectedIndex(tab_company_admin, 2);

				// added MSW - 8/3/2020
				if (temp_type.Trim() == "PUBLICATION")
				{
					pnl_research_notes.Visible = false;
				}
				else
				{
					pnl_research_notes.Visible = true;
					lbl_comp[HOTBOX_DETAIL_INDEX].Text = temp_note;
				}


			}



		}

		public void mnuShowExclusiveBroker_Click(Object eventSender, EventArgs eventArgs)
		{

			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			ADORecordSetHelper rstRec2 = new ADORecordSetHelper();
			string strQuery1 = "";
			string strQuery2 = "";
			string strText = "";
			int lACId = 0;
			int lRow1 = 0;
			int lCompId = 0;
			int lContactId = 0;

			try
			{

				strText = "";

				lRow1 = grd_company_aircraft.CurrentRowIndex;
				lACId = grd_company_aircraft.get_RowData(lRow1);

				strQuery1 = "SELECT ";
				strQuery1 = $"{strQuery1}A1.ac_id As ACId, ";
				strQuery1 = $"{strQuery1}AM1.amod_make_name As Make, ";
				strQuery1 = $"{strQuery1}AM1.amod_model_name As Model, ";
				strQuery1 = $"{strQuery1}A1.ac_ser_no_full As SerNbr, ";
				strQuery1 = $"{strQuery1}A1.ac_reg_no As RegNbr, ";
				strQuery1 = $"{strQuery1}C1.comp_id As CompId, ";
				strQuery1 = $"{strQuery1}C1.comp_name As Company, ";
				strQuery1 = $"{strQuery1}C1.comp_address1 As Address1, ";
				strQuery1 = $"{strQuery1}C1.comp_address2 As Address2, ";
				strQuery1 = $"{strQuery1}C1.comp_city As City, ";
				strQuery1 = $"{strQuery1}C1.comp_State As StateCode, ";
				strQuery1 = $"{strQuery1}C1.comp_Country As Country, ";
				strQuery1 = $"{strQuery1}AR1.cref_contact_type As ContactType, ";
				strQuery1 = $"{strQuery1}ACT1.actype_name As ContactTypeName, ";
				strQuery1 = $"{strQuery1}AR1.cref_contact_id As ContactId, ";
				strQuery1 = $"{strQuery1}dbo.CreateContactFullNameTitle(CT1.contact_sirname, CT1.contact_first_name, CT1.contact_middle_initial, CT1.contact_last_name, CT1.contact_suffix, '') As ContactName, ";
				strQuery1 = $"{strQuery1}CT1.contact_title As ContactTitle ";

				strQuery1 = $"{strQuery1}FROM Aircraft_Model AS AM1 WITH (NOLOCK) ";
				strQuery1 = $"{strQuery1}INNER JOIN Aircraft AS A1 WITH (NOLOCK) ON A1.ac_amod_id = AM1.amod_id ";
				strQuery1 = $"{strQuery1}INNER JOIN Aircraft_Reference AS AR1 WITH (NOLOCK) ON AR1.cref_ac_id = A1.ac_id AND AR1.cref_journ_id = A1.ac_journ_id ";
				strQuery1 = $"{strQuery1}INNER JOIN Aircraft_Contact_Type AS ACT1 WITH (NOLOCK) ON ACT1.actype_code = AR1.cref_contact_type ";
				strQuery1 = $"{strQuery1}INNER JOIN Company AS C1 WITH (NOLOCK) ON C1.comp_id = AR1.cref_comp_id AND C1.comp_journ_id = AR1.cref_journ_id ";
				strQuery1 = $"{strQuery1}LEFT OUTER JOIN Contact AS CT1 WITH (NOLOCK) ON CT1.contact_id = AR1.cref_contact_id AND CT1.contact_journ_id = AR1.cref_journ_id ";
				strQuery1 = $"{strQuery1}WHERE (AR1.cref_ac_id = {lACId.ToString()}) ";
				strQuery1 = $"{strQuery1}AND (AR1.cref_journ_id = 0) ";

				//----------------------------------
				// 38=Sales Company/Contact
				// 93=Exclusive Representative
				// 99=Exclusive Broker

				strQuery1 = $"{strQuery1}AND (AR1.cref_contact_type IN ('38','93','99','2X')) ";
				strQuery1 = $"{strQuery1}ORDER BY AR1.cref_transmit_seq_no ";

				rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!rstRec1.BOF && !rstRec1.EOF)
				{

					//------------------------------------
					//-- Display Aircraft Information

					strText = $"{strText}ACID: {Convert.ToString(rstRec1["ACID"])}{Environment.NewLine}";
					strText = $"{strText}Make: {($"{Convert.ToString(rstRec1["make"])} ").Trim()}{Environment.NewLine}";
					strText = $"{strText}Model: {($"{Convert.ToString(rstRec1["model"])} ").Trim()}{Environment.NewLine}";
					strText = $"{strText}SerNbr: {($"{Convert.ToString(rstRec1["SerNbr"])} ").Trim()}{Environment.NewLine}";
					strText = $"{strText}RegNbr: {($"{Convert.ToString(rstRec1["RegNbr"])} ").Trim()}{Environment.NewLine}";
					strText = $"{strText}{new string('-', 50)}{Environment.NewLine}{Environment.NewLine}";

					do 
					{ // Loop Until rstRec1.EOF = True

						lCompId = Convert.ToInt32(rstRec1["CompID"]);
						lContactId = Convert.ToInt32(rstRec1["ContactId"]);

						//------------------------------------
						//-- Display Company Information

						strText = $"{strText}CompId: {Convert.ToString(rstRec1["CompID"])}{Environment.NewLine}";
						strText = $"{strText}{($"{Convert.ToString(rstRec1["ContactType"])} ").Trim()} - {($"{Convert.ToString(rstRec1["ContactTypeName"])} ").Trim()}{Environment.NewLine}";
						strText = $"{strText}{($"{Convert.ToString(rstRec1["Company"])} ").Trim()}{Environment.NewLine}";
						strText = $"{strText}{($"{Convert.ToString(rstRec1["Address1"])} ").Trim()}{Environment.NewLine}";
						if (($"{Convert.ToString(rstRec1["Address2"])} ").Trim() != "")
						{
							strText = $"{strText}{($"{Convert.ToString(rstRec1["Address2"])} ").Trim()}{Environment.NewLine}";
						}
						strText = $"{strText}{($"{Convert.ToString(rstRec1["city"])} ").Trim()}, {($"{Convert.ToString(rstRec1["StateCode"])} ").Trim()} {($"{Convert.ToString(rstRec1["country"])} ").Trim()}{Environment.NewLine}";

						//--------------------------------------
						//-- Company Phone Numbers

						strQuery2 = "SELECT * FROM Phone_Numbers WITH (NOLOCK) ";
						strQuery2 = $"{strQuery2}INNER JOIN Phone_Type WITH (NOLOCK) ON ptype_name = pnum_type ";
						strQuery2 = $"{strQuery2}WHERE (pnum_comp_id = {lCompId.ToString()}) ";
						strQuery2 = $"{strQuery2}AND (pnum_journ_id = 0) ";
						strQuery2 = $"{strQuery2}AND (pnum_contact_id = 0) ";
						strQuery2 = $"{strQuery2}AND (pnum_number_full IS NOT NULL) ";
						strQuery2 = $"{strQuery2}AND (pnum_number_full <> '') ";
						strQuery2 = $"{strQuery2}ORDER BY ptype_seq_no ";

						rstRec2.Open(strQuery2, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
						if (!rstRec2.BOF && !rstRec2.EOF)
						{
							do 
							{ // Loop Until rstRec2.EOF = True
								strText = $"{strText}{($"{Convert.ToString(rstRec2["pnum_type"])} ").Trim()}: {($"{Convert.ToString(rstRec2["pnum_number_full"])} ").Trim()}{Environment.NewLine}";
								rstRec2.MoveNext();
							}
							while(!rstRec2.EOF);
						} // If rstRec2.BOF = False And rstRec2.EOF = False Then
						rstRec2.Close();

						//------------------------------------
						//-- Display Contact Information

						if (($"{Convert.ToString(rstRec1["ContactName"])} ").Trim() != "")
						{
							strText = $"{strText}{($"{Convert.ToString(rstRec1["ContactName"])} ").Trim()}{Environment.NewLine}";
						}
						if (($"{Convert.ToString(rstRec1["ContactTitle"])} ").Trim() != "")
						{
							strText = $"{strText}{($"{Convert.ToString(rstRec1["ContactTitle"])} ").Trim()}{Environment.NewLine}";
						}

						//--------------------------------------
						//-- Company Phone Numbers

						strQuery2 = "SELECT * FROM Phone_Numbers WITH (NOLOCK) ";
						strQuery2 = $"{strQuery2}INNER JOIN Phone_Type WITH (NOLOCK) ON ptype_name = pnum_type ";
						strQuery2 = $"{strQuery2}WHERE (pnum_comp_id = {lCompId.ToString()}) ";
						strQuery2 = $"{strQuery2}AND (pnum_journ_id = 0) ";
						strQuery2 = $"{strQuery2}AND (pnum_contact_id = {lContactId.ToString()}) ";
						strQuery2 = $"{strQuery2}AND (pnum_number_full IS NOT NULL) ";
						strQuery2 = $"{strQuery2}AND (pnum_number_full <> '') ";
						strQuery2 = $"{strQuery2}ORDER BY ptype_seq_no ";

						rstRec2.Open(strQuery2, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
						if (!rstRec2.BOF && !rstRec2.EOF)
						{
							do 
							{ // Loop Until rstRec2.EOF = True
								strText = $"{strText}{($"{Convert.ToString(rstRec2["pnum_type"])} ").Trim()}: {($"{Convert.ToString(rstRec2["pnum_number_full"])} ").Trim()}{Environment.NewLine}";
								rstRec2.MoveNext();
							}
							while(!rstRec2.EOF);
						} // If rstRec2.BOF = False And rstRec2.EOF = False Then
						rstRec2.Close();

						strText = $"{strText}{new string('-', 50)}{Environment.NewLine}{Environment.NewLine}";

						rstRec1.MoveNext();

					}
					while(!rstRec1.EOF);

				} // If rstRec1.BOF = False And rstRec1.EOF = False Then

				rstRec1.Close();

				if (strText != "")
				{

					if (frm_Info.DefInstance == null)
					{
						//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//VB.Global.Load(frm_Info.DefInstance);
					}

					frm_Info.DefInstance.SetFormCaption("Exclusive Broker");
					frm_Info.DefInstance.SetText(strText);
					frm_Info.DefInstance.cmd_show_all.Visible = true;
					frm_Info.DefInstance.ACID = lACId;
					frm_Info.DefInstance.SetTextEnabled(true);
					frm_Info.DefInstance.Show();

				}
				else
				{
					MessageBox.Show("No Exclusive Broker or Sales Contact Found For This Aircraft", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Information);
				} // If strText <> "" Then

				rstRec2 = null;
				rstRec1 = null;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Record_Error("mnuShowExclusiveBroker_Click_Error", excep.Message);
			}

		} // mnuShowExclusiveBroker_Click


		public void mnuShowExtra_Click(Object eventSender, EventArgs eventArgs)
		{


			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			ADORecordSetHelper rstRec2 = new ADORecordSetHelper();
			string strQuery2 = "";
			int lCompId = 0;
			int lContactId = 0;

			string strText = "";

			int lRow1 = grd_company_aircraft.CurrentRowIndex;
			int lACId = grd_company_aircraft.get_RowData(lRow1);

			string strQuery1 = "SELECT top 1 ";
			strQuery1 = $"{strQuery1}A1.ac_id As ACId, ";
			strQuery1 = $"{strQuery1}AM1.amod_make_name As Make, ";
			strQuery1 = $"{strQuery1}AM1.amod_model_name As Model, ";
			strQuery1 = $"{strQuery1}A1.ac_ser_no_full As SerNbr, ";
			strQuery1 = $"{strQuery1}A1.ac_reg_no As RegNbr, ";


			strQuery1 = $"{strQuery1}A1.ac_confidential_notes As Status_Notes, ";
			strQuery1 = $"{strQuery1}A1.ac_hidden_asking_price As Hidden_Asking, ";
			strQuery1 = $"{strQuery1}A1.ac_asking_price As ac_asking_price, ";
			strQuery1 = $"{strQuery1}A1.ac_airframe_tot_hrs As AFTT, ";


			strQuery1 = $"{strQuery1}C1.comp_id As CompId, ";
			strQuery1 = $"{strQuery1}C1.comp_name As Company, ";
			strQuery1 = $"{strQuery1}C1.comp_address1 As Address1, ";
			strQuery1 = $"{strQuery1}C1.comp_address2 As Address2, ";
			strQuery1 = $"{strQuery1}C1.comp_city As City, ";
			strQuery1 = $"{strQuery1}C1.comp_State As StateCode, ";
			strQuery1 = $"{strQuery1}C1.comp_Country As Country, ";
			strQuery1 = $"{strQuery1}AR1.cref_contact_type As ContactType, ";
			strQuery1 = $"{strQuery1}ACT1.actype_name As ContactTypeName, ";
			strQuery1 = $"{strQuery1}AR1.cref_contact_id As ContactId, ";
			strQuery1 = $"{strQuery1}dbo.CreateContactFullNameTitle(CT1.contact_sirname, CT1.contact_first_name, CT1.contact_middle_initial, CT1.contact_last_name, CT1.contact_suffix, '') As ContactName, ";
			strQuery1 = $"{strQuery1}CT1.contact_title As ContactTitle, cref_contact_type ";

			strQuery1 = $"{strQuery1}FROM Aircraft_Model AS AM1 WITH (NOLOCK) ";
			strQuery1 = $"{strQuery1}INNER JOIN Aircraft AS A1 WITH (NOLOCK) ON A1.ac_amod_id = AM1.amod_id ";
			strQuery1 = $"{strQuery1}LEFT OUTER JOIN Aircraft_Reference AS AR1 WITH (NOLOCK) ON AR1.cref_ac_id = A1.ac_id AND AR1.cref_journ_id = A1.ac_journ_id ";

			// moved to down here msw 5/18/20
			strQuery1 = $"{strQuery1} and cref_contact_type in ('38','99') "; // 38=Sales Company/Contact, 99 exclusive broker

			strQuery1 = $"{strQuery1}LEFT OUTER JOIN Aircraft_Contact_Type AS ACT1 WITH (NOLOCK) ON ACT1.actype_code = AR1.cref_contact_type ";
			strQuery1 = $"{strQuery1}LEFT OUTER JOIN Company AS C1 WITH (NOLOCK) ON C1.comp_id = AR1.cref_comp_id AND C1.comp_journ_id = AR1.cref_journ_id ";

			// sales was here .. not working as part of the left outer join
			strQuery1 = $"{strQuery1}LEFT OUTER JOIN Contact AS CT1 WITH (NOLOCK) ON CT1.contact_id = AR1.cref_contact_id AND CT1.contact_journ_id = AR1.cref_journ_id ";
			strQuery1 = $"{strQuery1}WHERE (ac_id = {lACId.ToString()}) "; // changed from cref - so i could do outer join ' - msw - 10/5/2020
			strQuery1 = $"{strQuery1}AND (ac_journ_id = 0) "; // changed from cref - so i could do outer join


			//----------------------------------
			// 38=Sales Company/Contact
			// 93=Exclusive Representative
			// 99=Exclusive Broker

			//  strQuery1 = strQuery1 & "AND (AR1.cref_contact_type IN ('00','08','17')) "
			strQuery1 = $"{strQuery1}ORDER BY AR1.cref_transmit_seq_no, cref_contact_type asc ";

			rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

			if (rstRec1.BOF || rstRec1.EOF)
			{
				strQuery1 = StringsHelper.Replace(strQuery1, "", "", 1, -1, CompareMethod.Binary);
			}



			if (!rstRec1.BOF && !rstRec1.EOF)
			{

				strText = $"{strText}ACID: {Convert.ToString(rstRec1["ACID"])}{Environment.NewLine}";
				strText = $"{strText}Make: {($"{Convert.ToString(rstRec1["make"])} ").Trim()}{Environment.NewLine}";
				strText = $"{strText}Model: {($"{Convert.ToString(rstRec1["model"])} ").Trim()}{Environment.NewLine}";
				strText = $"{strText}SerNbr: {($"{Convert.ToString(rstRec1["SerNbr"])} ").Trim()}{Environment.NewLine}";
				strText = $"{strText}RegNbr: {($"{Convert.ToString(rstRec1["RegNbr"])} ").Trim()}{Environment.NewLine}";
				strText = $"{strText}{new string('-', 50)}{Environment.NewLine}{Environment.NewLine}";

				do 
				{ // Loop Until rstRec1.EOF = True



					strText = $"{strText}Airframe Total Time (AFTT): ";
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["aftt"]))
					{
						if (Convert.ToDouble(rstRec1["aftt"]) >= 0)
						{
							strText = $"{strText}{($"{Convert.ToString(rstRec1["aftt"])} ").Trim()}";
						}
					}
					strText = $"{strText}{Environment.NewLine}";


					strText = $"{strText}Hidden Price: ";
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["Hidden_Asking"]))
					{
						if (Convert.ToDouble(rstRec1["Hidden_Asking"]) >= 0)
						{
							strText = $"{strText}{($"{Convert.ToString(rstRec1["Hidden_Asking"])} ").Trim()}";
						}
					}
					strText = $"{strText}{Environment.NewLine}";

					// ADDED MSW 3/31/20
					strText = $"{strText}Asking Price: ";
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["ac_asking_price"]))
					{
						if (Convert.ToDouble(rstRec1["ac_asking_price"]) >= 0)
						{
							strText = $"{strText}{Double.Parse(($"{Convert.ToString(rstRec1["ac_asking_price"])} ").Trim(), NumberStyles.Any).ToString("N0")}";
						}
					}
					strText = $"{strText}{Environment.NewLine}";



					strText = $"{strText}Status Notes: ";
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["Status_Notes"]))
					{
						if (Convert.ToString(rstRec1["Status_Notes"]).Trim() != "")
						{
							strText = $"{strText}{($"{Convert.ToString(rstRec1["Status_Notes"])} ").Trim()}{Environment.NewLine}";
						}
					}

					strText = $"{strText}{Environment.NewLine}";






					//------------------------------------
					//-- Display Company Information

					// added in MSW - 10/5/2020
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["cref_contact_type"]))
					{
						if (Convert.ToString(rstRec1["cref_contact_type"]).Trim() == "99")
						{
							strText = $"{strText}Exclusive Broker: ";
						}
						else
						{
							strText = $"{strText}Sales Company Contact: ";
						}
					}
					else
					{
						strText = $"{strText}Sales Company Contact: ";
					}



					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["CompID"]))
					{

						lCompId = Convert.ToInt32(rstRec1["CompID"]);
						lContactId = Convert.ToInt32(rstRec1["ContactId"]);

						strText = $"{strText}CompId: {Convert.ToString(rstRec1["CompID"])}{Environment.NewLine}";
						strText = $"{strText}{($"{Convert.ToString(rstRec1["ContactType"])} ").Trim()} - {($"{Convert.ToString(rstRec1["ContactTypeName"])} ").Trim()}{Environment.NewLine}";
						strText = $"{strText}{($"{Convert.ToString(rstRec1["Company"])} ").Trim()}{Environment.NewLine}";
						strText = $"{strText}{($"{Convert.ToString(rstRec1["Address1"])} ").Trim()}{Environment.NewLine}";
						if (($"{Convert.ToString(rstRec1["Address2"])} ").Trim() != "")
						{
							strText = $"{strText}{($"{Convert.ToString(rstRec1["Address2"])} ").Trim()}{Environment.NewLine}";
						}
						strText = $"{strText}{($"{Convert.ToString(rstRec1["city"])} ").Trim()}, {($"{Convert.ToString(rstRec1["StateCode"])} ").Trim()} {($"{Convert.ToString(rstRec1["country"])} ").Trim()}{Environment.NewLine}";

						//--------------------------------------
						//-- Company Phone Numbers

						strQuery2 = "SELECT * FROM Phone_Numbers WITH (NOLOCK) ";
						strQuery2 = $"{strQuery2}INNER JOIN Phone_Type WITH (NOLOCK) ON ptype_name = pnum_type ";
						strQuery2 = $"{strQuery2}WHERE (pnum_comp_id = {lCompId.ToString()}) ";
						strQuery2 = $"{strQuery2}AND (pnum_journ_id = 0) ";
						strQuery2 = $"{strQuery2}AND (pnum_contact_id = 0) ";
						strQuery2 = $"{strQuery2}AND (pnum_number_full IS NOT NULL) ";
						strQuery2 = $"{strQuery2}AND (pnum_number_full <> '') ";
						strQuery2 = $"{strQuery2}ORDER BY ptype_seq_no ";

						rstRec2.Open(strQuery2, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
						if (!rstRec2.BOF && !rstRec2.EOF)
						{
							do 
							{ // Loop Until rstRec2.EOF = True
								strText = $"{strText}{($"{Convert.ToString(rstRec2["pnum_type"])} ").Trim()}: {($"{Convert.ToString(rstRec2["pnum_number_full"])} ").Trim()}{Environment.NewLine}";
								rstRec2.MoveNext();
							}
							while(!rstRec2.EOF);
						} // If rstRec2.BOF = False And rstRec2.EOF = False Then
						rstRec2.Close();

						//------------------------------------
						//-- Display Contact Information

						if (($"{Convert.ToString(rstRec1["ContactName"])} ").Trim() != "")
						{
							strText = $"{strText}{($"{Convert.ToString(rstRec1["ContactName"])} ").Trim()}{Environment.NewLine}";
						}
						if (($"{Convert.ToString(rstRec1["ContactTitle"])} ").Trim() != "")
						{
							strText = $"{strText}{($"{Convert.ToString(rstRec1["ContactTitle"])} ").Trim()}{Environment.NewLine}";
						}

						//--------------------------------------
						//-- Company Phone Numbers

						strQuery2 = "SELECT * FROM Phone_Numbers WITH (NOLOCK) ";
						strQuery2 = $"{strQuery2}INNER JOIN Phone_Type WITH (NOLOCK) ON ptype_name = pnum_type ";
						strQuery2 = $"{strQuery2}WHERE (pnum_comp_id = {lCompId.ToString()}) ";
						strQuery2 = $"{strQuery2}AND (pnum_journ_id = 0) ";
						strQuery2 = $"{strQuery2}AND (pnum_contact_id = {lContactId.ToString()}) ";
						strQuery2 = $"{strQuery2}AND (pnum_number_full IS NOT NULL) ";
						strQuery2 = $"{strQuery2}AND (pnum_number_full <> '') ";
						strQuery2 = $"{strQuery2}ORDER BY ptype_seq_no ";

						rstRec2.Open(strQuery2, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
						if (!rstRec2.BOF && !rstRec2.EOF)
						{
							do 
							{ // Loop Until rstRec2.EOF = True
								strText = $"{strText}{($"{Convert.ToString(rstRec2["pnum_type"])} ").Trim()}: {($"{Convert.ToString(rstRec2["pnum_number_full"])} ").Trim()}{Environment.NewLine}";
								rstRec2.MoveNext();
							}
							while(!rstRec2.EOF);
						} // If rstRec2.BOF = False And rstRec2.EOF = False Then
						rstRec2.Close();

						strText = $"{strText}{new string('-', 50)}{Environment.NewLine}{Environment.NewLine}";

					}

					rstRec1.MoveNext();

				}
				while(!rstRec1.EOF);

			} // If rstRec1.BOF = False And rstRec1.EOF = False Then

			rstRec1.Close();

			if (strText != "")
			{

				if (frm_Info.DefInstance == null)
				{
					//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//VB.Global.Load(frm_Info.DefInstance);
				}

				frm_Info.DefInstance.SetFormCaption("Exclusive Broker");
				frm_Info.DefInstance.SetText(strText);
				frm_Info.DefInstance.cmd_show_all.Visible = true;
				frm_Info.DefInstance.ACID = lACId;
				frm_Info.DefInstance.SetTextEnabled(true);
				frm_Info.DefInstance.Show();

			}
			else
			{
				MessageBox.Show("No Available Data For This Aircraft", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Information);
			} // If strText <> "" Then

			rstRec2 = null;
			rstRec1 = null;

			return;


		}

		//
		//
		//
		public void mnuShowOwner_Click(Object eventSender, EventArgs eventArgs)
		{

			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			ADORecordSetHelper rstRec2 = new ADORecordSetHelper();
			string strQuery1 = "";
			string strQuery2 = "";
			string strText = "";
			int lACId = 0;
			int lRow1 = 0;
			int lCompId = 0;
			int lContactId = 0;

			try
			{

				strText = "";

				lRow1 = grd_company_aircraft.CurrentRowIndex;
				lACId = grd_company_aircraft.get_RowData(lRow1);

				strQuery1 = "SELECT ";
				strQuery1 = $"{strQuery1}A1.ac_id As ACId, ";
				strQuery1 = $"{strQuery1}AM1.amod_make_name As Make, ";
				strQuery1 = $"{strQuery1}AM1.amod_model_name As Model, ";
				strQuery1 = $"{strQuery1}A1.ac_ser_no_full As SerNbr, ";
				strQuery1 = $"{strQuery1}A1.ac_reg_no As RegNbr, ";
				strQuery1 = $"{strQuery1}C1.comp_id As CompId, ";
				strQuery1 = $"{strQuery1}C1.comp_name As Company, ";
				strQuery1 = $"{strQuery1}C1.comp_address1 As Address1, ";
				strQuery1 = $"{strQuery1}C1.comp_address2 As Address2, ";
				strQuery1 = $"{strQuery1}C1.comp_city As City, ";
				strQuery1 = $"{strQuery1}C1.comp_State As StateCode, ";
				strQuery1 = $"{strQuery1}C1.comp_Country As Country, ";
				strQuery1 = $"{strQuery1}AR1.cref_contact_type As ContactType, ";
				strQuery1 = $"{strQuery1}ACT1.actype_name As ContactTypeName, ";
				strQuery1 = $"{strQuery1}AR1.cref_contact_id As ContactId, ";
				strQuery1 = $"{strQuery1}dbo.CreateContactFullNameTitle(CT1.contact_sirname, CT1.contact_first_name, CT1.contact_middle_initial, CT1.contact_last_name, CT1.contact_suffix, '') As ContactName, ";
				strQuery1 = $"{strQuery1}CT1.contact_title As ContactTitle ";

				strQuery1 = $"{strQuery1}FROM Aircraft_Model AS AM1 WITH (NOLOCK) ";
				strQuery1 = $"{strQuery1}INNER JOIN Aircraft AS A1 WITH (NOLOCK) ON A1.ac_amod_id = AM1.amod_id ";
				strQuery1 = $"{strQuery1}INNER JOIN Aircraft_Reference AS AR1 WITH (NOLOCK) ON AR1.cref_ac_id = A1.ac_id AND AR1.cref_journ_id = A1.ac_journ_id ";
				strQuery1 = $"{strQuery1}INNER JOIN Aircraft_Contact_Type AS ACT1 WITH (NOLOCK) ON ACT1.actype_code = AR1.cref_contact_type ";
				strQuery1 = $"{strQuery1}INNER JOIN Company AS C1 WITH (NOLOCK) ON C1.comp_id = AR1.cref_comp_id AND C1.comp_journ_id = AR1.cref_journ_id ";
				strQuery1 = $"{strQuery1}LEFT OUTER JOIN Contact AS CT1 WITH (NOLOCK) ON CT1.contact_id = AR1.cref_contact_id AND CT1.contact_journ_id = AR1.cref_journ_id ";
				strQuery1 = $"{strQuery1}WHERE (AR1.cref_ac_id = {lACId.ToString()}) ";
				strQuery1 = $"{strQuery1}AND (AR1.cref_journ_id = 0) ";

				//----------------------------------
				// 38=Sales Company/Contact
				// 93=Exclusive Representative
				// 99=Exclusive Broker

				strQuery1 = $"{strQuery1}AND (AR1.cref_contact_type IN ('00','08','17')) ";
				strQuery1 = $"{strQuery1}ORDER BY AR1.cref_transmit_seq_no ";

				rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (rstRec1.BOF || rstRec1.EOF)
				{
					strQuery1 = StringsHelper.Replace(strQuery1, "", "", 1, -1, CompareMethod.Binary);
				}



				if (!rstRec1.BOF && !rstRec1.EOF)
				{

					//------------------------------------
					//-- Display Aircraft Information

					strText = $"{strText}ACID: {Convert.ToString(rstRec1["ACID"])}{Environment.NewLine}";
					strText = $"{strText}Make: {($"{Convert.ToString(rstRec1["make"])} ").Trim()}{Environment.NewLine}";
					strText = $"{strText}Model: {($"{Convert.ToString(rstRec1["model"])} ").Trim()}{Environment.NewLine}";
					strText = $"{strText}SerNbr: {($"{Convert.ToString(rstRec1["SerNbr"])} ").Trim()}{Environment.NewLine}";
					strText = $"{strText}RegNbr: {($"{Convert.ToString(rstRec1["RegNbr"])} ").Trim()}{Environment.NewLine}";
					strText = $"{strText}{new string('-', 50)}{Environment.NewLine}{Environment.NewLine}";

					do 
					{ // Loop Until rstRec1.EOF = True

						lCompId = Convert.ToInt32(rstRec1["CompID"]);
						lContactId = Convert.ToInt32(rstRec1["ContactId"]);

						//------------------------------------
						//-- Display Company Information

						strText = $"{strText}CompId: {Convert.ToString(rstRec1["CompID"])}{Environment.NewLine}";
						strText = $"{strText}{($"{Convert.ToString(rstRec1["ContactType"])} ").Trim()} - {($"{Convert.ToString(rstRec1["ContactTypeName"])} ").Trim()}{Environment.NewLine}";
						strText = $"{strText}{($"{Convert.ToString(rstRec1["Company"])} ").Trim()}{Environment.NewLine}";
						strText = $"{strText}{($"{Convert.ToString(rstRec1["Address1"])} ").Trim()}{Environment.NewLine}";
						if (($"{Convert.ToString(rstRec1["Address2"])} ").Trim() != "")
						{
							strText = $"{strText}{($"{Convert.ToString(rstRec1["Address2"])} ").Trim()}{Environment.NewLine}";
						}
						strText = $"{strText}{($"{Convert.ToString(rstRec1["city"])} ").Trim()}, {($"{Convert.ToString(rstRec1["StateCode"])} ").Trim()} {($"{Convert.ToString(rstRec1["country"])} ").Trim()}{Environment.NewLine}";

						//--------------------------------------
						//-- Company Phone Numbers

						strQuery2 = "SELECT * FROM Phone_Numbers WITH (NOLOCK) ";
						strQuery2 = $"{strQuery2}INNER JOIN Phone_Type WITH (NOLOCK) ON ptype_name = pnum_type ";
						strQuery2 = $"{strQuery2}WHERE (pnum_comp_id = {lCompId.ToString()}) ";
						strQuery2 = $"{strQuery2}AND (pnum_journ_id = 0) ";
						strQuery2 = $"{strQuery2}AND (pnum_contact_id = 0) ";
						strQuery2 = $"{strQuery2}AND (pnum_number_full IS NOT NULL) ";
						strQuery2 = $"{strQuery2}AND (pnum_number_full <> '') ";
						strQuery2 = $"{strQuery2}ORDER BY ptype_seq_no ";

						rstRec2.Open(strQuery2, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
						if (!rstRec2.BOF && !rstRec2.EOF)
						{
							do 
							{ // Loop Until rstRec2.EOF = True
								strText = $"{strText}{($"{Convert.ToString(rstRec2["pnum_type"])} ").Trim()}: {($"{Convert.ToString(rstRec2["pnum_number_full"])} ").Trim()}{Environment.NewLine}";
								rstRec2.MoveNext();
							}
							while(!rstRec2.EOF);
						} // If rstRec2.BOF = False And rstRec2.EOF = False Then
						rstRec2.Close();

						//------------------------------------
						//-- Display Contact Information

						if (($"{Convert.ToString(rstRec1["ContactName"])} ").Trim() != "")
						{
							strText = $"{strText}{($"{Convert.ToString(rstRec1["ContactName"])} ").Trim()}{Environment.NewLine}";
						}
						if (($"{Convert.ToString(rstRec1["ContactTitle"])} ").Trim() != "")
						{
							strText = $"{strText}{($"{Convert.ToString(rstRec1["ContactTitle"])} ").Trim()}{Environment.NewLine}";
						}

						//--------------------------------------
						//-- Company Phone Numbers

						strQuery2 = "SELECT * FROM Phone_Numbers WITH (NOLOCK) ";
						strQuery2 = $"{strQuery2}INNER JOIN Phone_Type WITH (NOLOCK) ON ptype_name = pnum_type ";
						strQuery2 = $"{strQuery2}WHERE (pnum_comp_id = {lCompId.ToString()}) ";
						strQuery2 = $"{strQuery2}AND (pnum_journ_id = 0) ";
						strQuery2 = $"{strQuery2}AND (pnum_contact_id = {lContactId.ToString()}) ";
						strQuery2 = $"{strQuery2}AND (pnum_number_full IS NOT NULL) ";
						strQuery2 = $"{strQuery2}AND (pnum_number_full <> '') ";
						strQuery2 = $"{strQuery2}ORDER BY ptype_seq_no ";

						rstRec2.Open(strQuery2, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
						if (!rstRec2.BOF && !rstRec2.EOF)
						{
							do 
							{ // Loop Until rstRec2.EOF = True
								strText = $"{strText}{($"{Convert.ToString(rstRec2["pnum_type"])} ").Trim()}: {($"{Convert.ToString(rstRec2["pnum_number_full"])} ").Trim()}{Environment.NewLine}";
								rstRec2.MoveNext();
							}
							while(!rstRec2.EOF);
						} // If rstRec2.BOF = False And rstRec2.EOF = False Then
						rstRec2.Close();

						strText = $"{strText}{new string('-', 50)}{Environment.NewLine}{Environment.NewLine}";

						rstRec1.MoveNext();

					}
					while(!rstRec1.EOF);

				} // If rstRec1.BOF = False And rstRec1.EOF = False Then

				rstRec1.Close();

				if (strText != "")
				{

					if (frm_Info.DefInstance == null)
					{
						//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//VB.Global.Load(frm_Info.DefInstance);
					}

					frm_Info.DefInstance.SetFormCaption("Exclusive Broker");
					frm_Info.DefInstance.SetText(strText);
					frm_Info.DefInstance.cmd_show_all.Visible = true;
					frm_Info.DefInstance.ACID = lACId;
					frm_Info.DefInstance.SetTextEnabled(true);
					frm_Info.DefInstance.Show();

				}
				else
				{
					MessageBox.Show("No Owner Found For This Aircraft", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Information);
				} // If strText <> "" Then

				rstRec2 = null;
				rstRec1 = null;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Record_Error("mnuShowExclusiveBroker_Click_Error", excep.Message);
			}

		} // mnuShowExclusiveBroker_Click


		public void mnuACSearch_Click(Object eventSender, EventArgs eventArgs)
		{

			modAdminCommon.gbl_Aircraft_ID = 0;

			frm_PopUp.DefInstance.ComingFrom = "Aircraft Search";
			frm_PopUp.DefInstance.ShowDialog();

			if (modAdminCommon.gbl_Aircraft_ID > 0)
			{

				modAdminCommon.gbl_Aircraft_Journal_ID = nReference_CompanyJID;

				frm_aircraft.DefInstance.Form_Initialize();
				frm_aircraft.DefInstance.StartForm = StartForm;
				frm_aircraft.DefInstance.Reference_Aircraft_ID = modAdminCommon.gbl_Aircraft_ID;
				frm_aircraft.DefInstance.Reference_Journal_ID = modAdminCommon.gbl_Aircraft_Journal_ID;
				frm_aircraft.DefInstance.Reference_Company_ID = nReference_CompanyID;
				frm_aircraft.DefInstance.Show();
				//UPGRADE_WARNING: (2065) Form method frm_aircraft.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
				frm_aircraft.DefInstance.BringToFront();
				//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
				frm_aircraft.DefInstance.Form_Activated(frm_aircraft.DefInstance, new EventArgs());

				//RTW - MODIFIED TO CHANGE 2ND PARAMETER TO NOT SAVE COMPANY  WHEN HIDING FORM
				// THIS WAS CAUSING HOMEBASE TO FREAK OUT/FLICKER ON CERTAIN COMPANIES
				Hide_MySelf(true, false);

			} // If gbl_Aircraft_ID > 0 Then

		} // mnuACSearch_Click

		public void mnusoldprices_Click(Object eventSender, EventArgs eventArgs)
		{
			frm_Missing_Solds.DefInstance.Main_Comp_ID = Convert.ToInt32(Double.Parse(txt_comp_id.Text));
			frm_Missing_Solds.DefInstance.sold_model_ids = Convert.ToString(cmd_ac_verify[6].Tag);
			frm_Missing_Solds.DefInstance.Height = 667;
			frm_Missing_Solds.DefInstance.Show();
		}

		public void mnuSurveyResponse_Click(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				disable_important_items();

				grd_company_journal.Enabled = false;

				frm_Journal.DefInstance.Reference_Comp_Id = nReference_CompanyID;

				frm_Journal.DefInstance.Reference_Category_Code = "AR";
				frm_Journal.DefInstance.Reference_SubCategory_Code = "RSRVY";
				frm_Journal.DefInstance.Reference_Subject = "Response to Eastman Survey";
				frm_Journal.DefInstance.Reference_Journal_ID = 0;
				frm_Journal.DefInstance.Reference_Ac_Id = 0;

				modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
				modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
				modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
				modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;
				modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
				modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
				modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
				modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
				modAdminCommon.Rec_Journal_Info.journ_status = "A";

				grd_company_journal.Enabled = true;

				frm_Journal.DefInstance.ShowDialog();

				enable_important_items();

				this.Activate();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnuSurveyResponse_Click_error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		public void mnuChangeBusinessType_Click(Object eventSender, EventArgs eventArgs)
		{

			string Query = "";
			string sBusinessType = modGlobalVars.cEmptyString;

			try
			{

				sBusinessType = modCommon.GetBusinessTypeToUse(nReference_CompanyID, nReference_CompanyJID, true);

				if (sBusinessType.Trim() != modGlobalVars.cEmptyString)
				{

					search_on("Updating Business Type On Selected Aircraft....");

					Query = $"UPDATE Aircraft_Reference SET cref_business_type = '{sBusinessType.Substring(0, Math.Min(sBusinessType.IndexOf(modGlobalVars.cHyphen), sBusinessType.Length)).Trim()}'";
					//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_aircraft.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					Query = $"{Query} WHERE cref_id = {grd_company_aircraft.BandData(grd_company_aircraft.CurrentRowIndex).ToString()}";

					modAdminCommon.ADO_Transaction("BeginTrans");

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();

					//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_aircraft.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					modCommon.CheckForAircraftTransmit(grd_company_aircraft.BandData(grd_company_aircraft.CurrentRowIndex));
					modCommon.ClearAircraftActionDate(grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex), nReference_CompanyJID);

					modAdminCommon.ADO_Transaction("CommitTrans");

					fill_company_aircraft_grid();

					search_off();

				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnuChangeBusinessType_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();

				return;
			}

		}

		public void mnuChangeBusinessTypeOnAllAircraft_Click(Object eventSender, EventArgs eventArgs)
		{

			string Query = "";
			string sBusinessType = modGlobalVars.cEmptyString;
			int nPreviousACID = 0;
			ADORecordSetHelper ado_CompanyAircaft = null;

			try
			{

				sBusinessType = modCommon.GetBusinessTypeToUse(nReference_CompanyID, nReference_CompanyJID, true);

				if (sBusinessType.Trim() != modGlobalVars.cEmptyString)
				{

					search_on("Updating Business Type On All Aircraft....");

					Query = $"UPDATE Aircraft_Reference SET cref_business_type = '{sBusinessType.Substring(0, Math.Min(sBusinessType.IndexOf(modGlobalVars.cHyphen), sBusinessType.Length)).Trim()}'";
					Query = $"{Query} WHERE cref_comp_id = {nReference_CompanyID.ToString()}";

					modAdminCommon.ADO_Transaction("BeginTrans");

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();

					Query = $"EXEC HomebaseGetCompanyAircraftList {nReference_CompanyID.ToString()}, 0";

					ado_CompanyAircaft = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(ado_CompanyAircaft.Fields) && !(ado_CompanyAircaft.BOF && ado_CompanyAircaft.EOF))
					{


						while(!ado_CompanyAircaft.EOF)
						{
							// process each unique aircraft
							if (nPreviousACID != Convert.ToInt32(ado_CompanyAircaft["ac_id"]))
							{

								modCommon.CheckForAircraftTransmit(Convert.ToInt32(ado_CompanyAircaft["cref_id"]));
								modCommon.ClearAircraftActionDate(Convert.ToInt32(ado_CompanyAircaft["ac_id"]), nReference_CompanyJID);

							}

							nPreviousACID = Convert.ToInt32(ado_CompanyAircaft["ac_id"]);
							ado_CompanyAircaft.MoveNext();

						}; // While Not ado_CompanyAircaft.EOF

						ado_CompanyAircaft.Close();

					} // Not (ado_CompanyAircaft.BOF And ado_CompanyAircaft.EOF)

					ado_CompanyAircaft = null;

					modAdminCommon.ADO_Transaction("CommitTrans");

					fill_company_aircraft_grid();

				}

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnuChangeBusinessTypeOnAllAircraft_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();

				return;
			}

		}

		public void mnuChangeBusinessTypeOnAllReferences_Click(Object eventSender, EventArgs eventArgs)
		{

			string Query = "";
			string sBusinessType = modGlobalVars.cEmptyString;
			int nPreviousACID = 0;
			ADORecordSetHelper ado_CompanyAircaft = null;

			try
			{

				sBusinessType = modCommon.GetBusinessTypeToUse(nReference_CompanyID, nReference_CompanyJID, true);

				if (sBusinessType.Trim() != modGlobalVars.cEmptyString)
				{

					search_on("Updating Business Type On All References....");

					Query = $"UPDATE Aircraft_Reference SET cref_business_type = '{sBusinessType.Substring(0, Math.Min(sBusinessType.IndexOf(modGlobalVars.cHyphen), sBusinessType.Length)).Trim()}'";
					Query = $"{Query} WHERE cref_ac_id = {grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex).ToString()}";
					Query = $"{Query} AND cref_comp_id = {nReference_CompanyID.ToString()}";

					modAdminCommon.ADO_Transaction("BeginTrans");

					DbCommand TempCommand = null;
					TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
					UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
					TempCommand.CommandText = Query;
					//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
					TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
					UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
					TempCommand.ExecuteNonQuery();

					Query = $"EXEC HomebaseGetCompanyAircraftList {nReference_CompanyID.ToString()}, 0";

					ado_CompanyAircaft = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(ado_CompanyAircaft.Fields) && !(ado_CompanyAircaft.BOF && ado_CompanyAircaft.EOF))
					{


						while(!ado_CompanyAircaft.EOF)
						{
							// process each unique aircraft
							if (nPreviousACID != Convert.ToInt32(ado_CompanyAircaft["ac_id"]))
							{

								modCommon.CheckForAircraftTransmit(Convert.ToInt32(ado_CompanyAircaft["cref_id"]));

							}

							nPreviousACID = Convert.ToInt32(ado_CompanyAircaft["ac_id"]);
							ado_CompanyAircaft.MoveNext();

						}; // While Not ado_CompanyAircaft.EOF

						ado_CompanyAircaft.Close();

					} // Not (ado_CompanyAircaft.BOF And ado_CompanyAircaft.EOF)

					ado_CompanyAircaft = null;

					modCommon.ClearAircraftActionDate(grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex), nReference_CompanyJID);

					modAdminCommon.ADO_Transaction("CommitTrans");

					fill_company_aircraft_grid();

					search_off();

				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnuChangeBusinessTypeOnAllReferences_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();

				return;
			}

		}

		public void mnuConfirmACBase_Click(Object eventSender, EventArgs eventArgs)
		{

			string Query = "";

			try
			{

				search_on("Updating Aircraft Base Confirmation Date....");

				Query = $"UPDATE Aircraft SET ac_airport_code_verify_date = '{DateTime.Now.ToString()}', ac_action_date = NULL";
				Query = $"{Query} WHERE ac_id = {grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex).ToString()}";
				Query = $"{Query} AND ac_lifecycle_stage <> 4 AND ac_journ_id = {nReference_CompanyJID.ToString()}";

				modAdminCommon.ADO_Transaction("BeginTrans");

				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();

				// INSERT THE JOURNAL ENTRY
				modAdminCommon.Rec_Journal_Info.journ_subject = "Verified Aircraft Base Info";
				modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
				modAdminCommon.Rec_Journal_Info.journ_ac_id = grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex);
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "VAB";
				modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
				modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;
				modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
				modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
				modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
				modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
				modAdminCommon.Rec_Journal_Info.journ_status = "A";
				modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

				frm_Journal.DefInstance.Commit_Journal_Entry();

				modAdminCommon.ADO_Transaction("CommitTrans");

				fill_company_aircraft_grid(grd_company_aircraft.CurrentRowIndex);

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnuConfirmACBase_Click_error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();

				return;
			}

		}

		public void mnuConfirmACReg_Click(Object eventSender, EventArgs eventArgs)
		{

			string Query = "";
			int nClickedCol = 0;

			try
			{

				search_on("Updating Registration Number Confirmation Date....");

				Query = $"UPDATE Aircraft SET ac_reg_no_verify_date = '{DateTime.Now.ToString()}', ac_action_date = NULL";
				Query = $"{Query} WHERE ac_id = {grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex).ToString()}";
				Query = $"{Query} AND ac_lifecycle_stage <> 4 AND ac_journ_id = {nReference_CompanyJID.ToString()}";

				modAdminCommon.ADO_Transaction("BeginTrans");

				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();

				// Update the Registration Number background color
				nClickedCol = grd_company_aircraft.CurrentColumnIndex;
				grd_company_aircraft.CurrentColumnIndex = 10;
				modAdminCommon.Rec_Journal_Info.journ_subject = $"Verified Reg# {grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim()}";
				grd_company_aircraft.CurrentColumnIndex = nClickedCol;

				modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
				modAdminCommon.Rec_Journal_Info.journ_ac_id = grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex);
				modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "VAR";
				modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
				modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;
				modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
				modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
				modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
				modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
				modAdminCommon.Rec_Journal_Info.journ_status = "A";
				modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

				frm_Journal.DefInstance.Commit_Journal_Entry();

				modAdminCommon.ADO_Transaction("CommitTrans");

				fill_company_aircraft_grid(grd_company_aircraft.CurrentRowIndex);

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnuConfirmACReg_Click_error ({Information.Err().Number.ToString()}) {excep.Message} ACID:[{grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex).ToString()}] CMPID[{nReference_CompanyID.ToString()}] JID[{nReference_CompanyJID.ToString()}]", "frm_company(CONACREG)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();

				return;
			}

		}

		public void mnuEditAddFractional_Click(Object eventSender, EventArgs eventArgs)
		{

			if (MessageBox.Show("Are you sure that you want to put this company on the fractional owner list?", "Company : Add Fractional Owner", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
			{
				modCompany.add_fractional_owner(nReference_CompanyID, nReference_CompanyJID);
				// Temp Hold ??
				//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
				Form_Activated(this, new EventArgs());
			}

		}



		public void mnuEditCompMailingList_Click(Object eventSender, EventArgs eventArgs)
		{

			frm_CompanyContact_MList new_frm_CompanyContact_MList = frm_CompanyContact_MList.CreateInstance();


			new_frm_CompanyContact_MList.nCompanyID = nReference_CompanyID;
			new_frm_CompanyContact_MList.nContactID = 0;
			new_frm_CompanyContact_MList.nJournID = 0;

			new_frm_CompanyContact_MList.Top = Convert.ToInt32(mdi_ResearchAssistant.DefInstance.Top + ((mdi_ResearchAssistant.DefInstance.Height - new_frm_CompanyContact_MList.Height) / 2d));
			new_frm_CompanyContact_MList.Left = Convert.ToInt32(mdi_ResearchAssistant.DefInstance.Left + ((mdi_ResearchAssistant.DefInstance.Width - new_frm_CompanyContact_MList.Width) / 2d)); // mdi_ResearchAssistant

			new_frm_CompanyContact_MList.ShowDialog();
			new_frm_CompanyContact_MList = null;

		}

		public void mnuFileClose_Click(Object eventSender, EventArgs eventArgs)
		{

			Form Frm = null;
			Form f = null;

			try
			{

				bIsClosingForm = true;
				cmd_company_save_Click(cmd_company_save, new EventArgs());

				if (nReference_AircraftID > 0)
				{

					if (MessageBox.Show("Return to Aircraft?", "Company: Close Company", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
					{

						modStatusBar.Update_Status_Bar(modAdminCommon.SB, "Returning to Aircraft.....", Color.Red);

						modCommon.Unload_Form("frm_Aircraft");

						// need to keep this one
						modAdminCommon.gbl_Aircraft_ID = nReference_AircraftID;
						modAdminCommon.gbl_Aircraft_Journal_ID = nReference_CompanyJID;

						frm_aircraft.DefInstance.Form_Initialize();
						frm_aircraft.DefInstance.StartForm = StartForm;
						frm_aircraft.DefInstance.Reference_Aircraft_ID = modAdminCommon.gbl_Aircraft_ID;
						frm_aircraft.DefInstance.Reference_Journal_ID = modAdminCommon.gbl_Aircraft_Journal_ID;
						frm_aircraft.DefInstance.Reference_Company_ID = nReference_CompanyID;
						frm_aircraft.DefInstance.Show();
						//UPGRADE_WARNING: (2065) Form method frm_aircraft.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
						frm_aircraft.DefInstance.BringToFront();
						//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
						frm_aircraft.DefInstance.Form_Activated(frm_aircraft.DefInstance, new EventArgs());

					}
					else
					{

						// go back to find form (based on calling forms action code)

						switch((tCompanyForm_EntryPoints))
						{
							case modGlobalVars.e_find_form_entry_points.geChangeHistContact : case modGlobalVars.e_find_form_entry_points.geAssociateToAircraft : case modGlobalVars.e_find_form_entry_points.geExclusiveBroker : 
								//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067 
								modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Show();  
								modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes 
								break;
							case modGlobalVars.e_find_form_entry_points.geFindManufacturer : case modGlobalVars.e_find_form_entry_points.geAddShareRelation : case modGlobalVars.e_find_form_entry_points.geFortune1000 : case modGlobalVars.e_find_form_entry_points.geAccountCallback : 
								//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067 
								modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_MISC].Show();  
								modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_MISC].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes 
								break;
							case modGlobalVars.e_find_form_entry_points.geAddCompanyRelation : 
								//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067 
								modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].Show();  
								modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes 
								break;
							case modGlobalVars.e_find_form_entry_points.geAircraftChange : 
								//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067 
								modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_TX].Show();  
								modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_TX].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes 
								break;
							case modGlobalVars.e_find_form_entry_points.geAircraftDocument : 
								//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067 
								modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_DOCS].Show();  
								modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_DOCS].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes 
								break;
							default:
								 
								if (((int) StartForm) != modGlobalVars.gcCOMPANY)
								{
									modCommon.pubf_ReturnToStartPage(StartForm);
								}
								else
								{
									//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
									modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_NEW].Show();
									modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_NEW].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes
								} 
								 
								break;
						}

					} // If MsgBox("Return to Aircraft?", vbQuestion + vbYesNo, "Company: Close Company") = vbYes Then

					nReference_AircraftID = 0;

				}
				else
				{

					modAdminCommon.Record_Event("Monitor Activity", "mnuFileClose_Click - Else nRef_AircraftId > 0 ", 0, nReference_CompanyJID, nReference_CompanyID, false, 0, 0);

					// go back to find form (based on calling forms action code)

					switch((tCompanyForm_EntryPoints))
					{
						case modGlobalVars.e_find_form_entry_points.geChangeHistContact : case modGlobalVars.e_find_form_entry_points.geAssociateToAircraft : 
							//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067 
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Show(); 
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes 
							break;
						case modGlobalVars.e_find_form_entry_points.geFindManufacturer : case modGlobalVars.e_find_form_entry_points.geAddShareRelation : case modGlobalVars.e_find_form_entry_points.geFortune1000 : case modGlobalVars.e_find_form_entry_points.geAccountCallback : 
							//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067 
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_MISC].Show(); 
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_MISC].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes 
							break;
						case modGlobalVars.e_find_form_entry_points.geAddCompanyRelation : 
							//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067 
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].Show(); 
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_CON].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes 
							break;
						case modGlobalVars.e_find_form_entry_points.geAircraftChange : 
							//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067 
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_TX].Show(); 
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_TX].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes 
							break;
						case modGlobalVars.e_find_form_entry_points.geAircraftDocument : 
							//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067 
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_DOCS].Show(); 
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_DOCS].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes 
							break;
						case modGlobalVars.e_find_form_entry_points.geExclusiveBroker : 
							//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067 
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].Show(); 
							modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_AC].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes 
							 
							//      Case geYacht 
							// 
							//        frm_Yacht.yacht_id = CLng(yacht_to_company_id) 
							//        frm_Yacht.journ_id = 0 
							// 
							//        frm_Yacht.load_yacht_data 
							//        frm_Yacht.previous_screen = "Search" 
							//        frm_yacht_model_edit.Hide 
							//        frm_Yacht.Show 
							 
							break;
						default:
							 
							modAdminCommon.Record_Event("Monitor Activity", "mnuFileClose_Click - Case (tCompanyForm_EntryPoints) ", 0, nReference_CompanyJID, nReference_CompanyID, false, 0, 0); 
							 
							if (((int) StartForm) != modGlobalVars.gcCOMPANY)
							{
								modCommon.pubf_ReturnToStartPage(StartForm);
							}
							else
							{
								//UPGRADE_TODO: (1067) Member Name is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
								modAdminCommon.Record_Event("Monitor Activity", $"mnuFileClose_Click - Form Name: {Convert.ToString(modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_NEW].Name)}", 0, nReference_CompanyJID, nReference_CompanyID, false, 0, 0);
								//UPGRADE_TODO: (1067) Member Show is not defined in type Variant. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
								modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_NEW].Show();
								modGlobalVars.find_frm_collection[modGlobalVars.FIND_FORM_NEW].BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes
							} 
							 
							break;
					} // Case (tCompanyForm_EntryPoints)

				} // If nReference_AircraftID > 0 Then

				Hide_MySelf(true, false);
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnuFileClose_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "frm_Company(CLOSE)");
				search_off();
				return;
			}

		} // mnuFileClose_Click

		public void mnuFileLogout_Click(Object eventSender, EventArgs eventArgs)
		{

			Hide_MySelf(true, true);
			frm_Main_Menu.DefInstance.Close();

		} // mnuFileLogout_Click

		//UPGRADE_NOTE: (7001) The following declaration (mnuHelp_Click) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void mnuHelp_Click()
		//{
			//
			////UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			////VB.Global.Load(frm_WebReport.DefInstance);
			//frm_WebReport.DefInstance.WhichReport = "Company Help";
			//frm_WebReport.DefInstance.Show();
			//
		//}

		public void mnuMassConfirmACBase_Click(Object eventSender, EventArgs eventArgs)
		{
			//popup menu on aircraft grid

			string Query = "";
			int nPreviousACID = 0;
			ADORecordSetHelper ado_CompanyAircaft = null;

			try
			{

				if (MessageBox.Show("Are you sure that you want to Confirm ALL Aircraft Bases?", "Company : Mass Confirm ALL Aircraft Base", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == System.Windows.Forms.DialogResult.Yes)
				{

					search_on("Mass Updating of Aircraft Base Confirmation Date....");

					Query = $"EXEC HomebaseGetCompanyAircraftList {nReference_CompanyID.ToString()}, 0";

					ado_CompanyAircaft = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(ado_CompanyAircaft.Fields) && !(ado_CompanyAircaft.BOF && ado_CompanyAircaft.EOF))
					{

						modAdminCommon.ADO_Transaction("BeginTrans");


						while(!ado_CompanyAircaft.EOF)
						{
							// process each unique aircraft

							if (nPreviousACID != Convert.ToInt32(ado_CompanyAircaft["ac_id"]))
							{

								Query = "";
								Query = "SELECT ac_id FROM aircraft WITH(NOLOCK) INNER JOIN Aircraft_model WITH(NOLOCK) ON ac_amod_id= amod_id";
								//Query = Query & " WHERE (amod_airframe_type_code='F' OR (amod_airframe_type_code ='R' and amod_class_code='A'))"
								Query = $"{Query} WHERE (amod_airframe_type_code='F' OR (amod_airframe_type_code ='R'))"; // removed class A msw - 5/27/15 - per jackie
								Query = $"{Query} AND ac_id = {Convert.ToString(ado_CompanyAircaft["ac_id"])}";
								Query = $"{Query} AND ac_journ_id = {nReference_CompanyJID.ToString()}";
								Query = $"{Query} and ac_lifecycle_stage < 4 ";


								if (modAdminCommon.Exist(Query))
								{

									Query = $"UPDATE Aircraft SET ac_airport_code_verify_date = '{DateTime.Now.ToString()}', ac_action_date = NULL";
									Query = $"{Query} WHERE ac_id = {Convert.ToString(ado_CompanyAircaft["ac_id"])}";
									Query = $"{Query} AND ac_lifecycle_stage <> 4 AND ac_journ_id = {nReference_CompanyJID.ToString()}";

									DbCommand TempCommand = null;
									TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
									UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
									TempCommand.CommandText = Query;
									//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
									//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
									TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
									UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
									TempCommand.ExecuteNonQuery();


									modAdminCommon.Rec_Journal_Info.journ_subject = "Mass Verified Base";

									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_CompanyAircaft["ac_aport_name"]))
									{
										modAdminCommon.Rec_Journal_Info.journ_subject = $"{modAdminCommon.Rec_Journal_Info.journ_subject} - {Convert.ToString(ado_CompanyAircaft["ac_aport_name"])} ";
									}

									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_CompanyAircaft["ac_aport_state"]))
									{
										modAdminCommon.Rec_Journal_Info.journ_subject = $"{modAdminCommon.Rec_Journal_Info.journ_subject} {Convert.ToString(ado_CompanyAircaft["ac_aport_state"])} ";
									}

									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_CompanyAircaft["ac_aport_country"]))
									{
										modAdminCommon.Rec_Journal_Info.journ_subject = $"{modAdminCommon.Rec_Journal_Info.journ_subject}, {Convert.ToString(ado_CompanyAircaft["ac_aport_country"])} ";
									}


									// CHANGED - MSW 7/26/16
									//Rec_Journal_Info.journ_subject = "Mass Verified Aircraft Base Info on all Aircraft"
									modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
									modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(Double.Parse(Convert.ToString(ado_CompanyAircaft["ac_id"])));
									modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "VAB";
									modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
									modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;
									modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
									modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
									modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
									modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
									modAdminCommon.Rec_Journal_Info.journ_status = "A";
									modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

									frm_Journal.DefInstance.Commit_Journal_Entry();


								} //Exist(Query)

							}

							nPreviousACID = Convert.ToInt32(ado_CompanyAircaft["ac_id"]);
							ado_CompanyAircaft.MoveNext();

						}; // While Not ado_CompanyAircaft.EOF

						ado_CompanyAircaft.Close();

						modAdminCommon.ADO_Transaction("CommitTrans");

					} // Not (ado_CompanyAircaft.BOF And ado_CompanyAircaft.EOF)

					ado_CompanyAircaft = null;

					fill_company_aircraft_grid();

					search_off();

				} //Resp = vbYes
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnuMassConfirmACBase_Click_error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();
				ado_CompanyAircaft = null;

				return;
			}

		}

		public void mnuMassConfirmACReg_Click(Object eventSender, EventArgs eventArgs)
		{

			string Query = "";
			int nPreviousACID = 0;
			ADORecordSetHelper ado_CompanyAircaft = null;

			try
			{

				if (MessageBox.Show("Are you sure that you want to Confirm ALL Aircraft Registration Numbers?", "Company : Mass Confirm ALL Registration Number", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button2) == System.Windows.Forms.DialogResult.Yes)
				{

					search_on("Mass Updating of Registration Number Confirmation Date....");

					Query = $"EXEC HomebaseGetCompanyAircraftList {nReference_CompanyID.ToString()}, 0";

					ado_CompanyAircaft = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(ado_CompanyAircaft.Fields) && !(ado_CompanyAircaft.BOF && ado_CompanyAircaft.EOF))
					{



						while(!ado_CompanyAircaft.EOF)
						{

							modAdminCommon.ADO_Transaction("BeginTrans");

							// process each unique aircraft
							if (nPreviousACID != Convert.ToInt32(ado_CompanyAircaft["ac_id"]))
							{

								Query = "";
								Query = "SELECT ac_id FROM aircraft WITH(NOLOCK) INNER JOIN Aircraft_model WITH(NOLOCK) ON ac_amod_id= amod_id";
								//Query = Query & " WHERE (amod_airframe_type_code='F' OR (amod_airframe_type_code ='R' and amod_class_code='A'))"
								Query = $"{Query} WHERE (amod_airframe_type_code='F' OR (amod_airframe_type_code ='R'))"; // removed class A msw - 5/27/15 - per jackie
								Query = $"{Query} AND ac_id = {Convert.ToString(ado_CompanyAircaft["ac_id"])}";
								Query = $"{Query} AND ac_journ_id = {nReference_CompanyJID.ToString()}";
								Query = $"{Query} AND ac_lifecycle_stage <> 4 "; // added in MSW - should not confirm stage 4 ac

								if (modAdminCommon.Exist(Query))
								{

									Query = $"UPDATE Aircraft SET ac_reg_no_verify_date = '{DateTime.Now.ToString()}', ac_action_date = NULL";
									Query = $"{Query} WHERE ac_id = {Convert.ToString(ado_CompanyAircaft["ac_id"])}";
									Query = $"{Query} AND ac_lifecycle_stage <> 4 AND ac_journ_id = {nReference_CompanyJID.ToString()}";

									DbCommand TempCommand = null;
									TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
									UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
									TempCommand.CommandText = Query;
									//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
									//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
									TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
									UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
									TempCommand.ExecuteNonQuery();

									// INSERT THE JOURNAL ENTRY  - moved 5/19/05 aey
									// CHANGED WORDING - ADDED IN REG NUMBEr - MSW - 7/16/16
									//   Rec_Journal_Info.journ_subject = "Mass Verified Reg# on all Aircraft"
									//  grd_Company_Aircraft.Col = 10

									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_CompanyAircaft["ac_reg_no"]))
									{
										modAdminCommon.Rec_Journal_Info.journ_subject = $"Mass Verified Reg# - {Convert.ToString(ado_CompanyAircaft["ac_reg_no"])}";
									}
									else
									{
										modAdminCommon.Rec_Journal_Info.journ_subject = "Mass Verified Reg#";
									}

									modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
									modAdminCommon.Rec_Journal_Info.journ_ac_id = Convert.ToInt32(Double.Parse(Convert.ToString(ado_CompanyAircaft["ac_id"])));
									modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "VAR";
									modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
									modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;
									modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
									modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
									modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
									modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
									modAdminCommon.Rec_Journal_Info.journ_status = "A";
									modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

									frm_Journal.DefInstance.Commit_Journal_Entry();

								} //Exist(Query)

							}

							nPreviousACID = Convert.ToInt32(ado_CompanyAircaft["ac_id"]);
							ado_CompanyAircaft.MoveNext();

						}; // While Not ado_CompanyAircaft.EOF

						ado_CompanyAircaft.Close();

						modAdminCommon.ADO_Transaction("CommitTrans");

					} // Not (ado_CompanyAircaft.BOF And ado_CompanyAircaft.EOF)

					ado_CompanyAircaft = null;

					fill_company_aircraft_grid();

					search_off();

				} //Resp = vbYes
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnuMassConfirmACReg_Click_error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();

				return;
			}

		}

		public void mnuRemoveDupContacts_Click(Object eventSender, EventArgs eventArgs)
		{

			if (Convert.ToString(grd_company_contacts[1, 2].Value).Trim().ToUpper() != ("No Contacts Found").Trim().ToUpper())
			{

				if (grd_company_contacts.CurrentRowIndex > 0)
				{
					if (grd_company_contacts.RowsCount > 2)
					{

						frm_RemoveDuplicateContacts.DefInstance.PassedContactID = grd_company_contacts.get_RowData(grd_company_contacts.CurrentRowIndex);
						frm_RemoveDuplicateContacts.DefInstance.PassedCompanyID = nReference_CompanyID;
						frm_RemoveDuplicateContacts.DefInstance.ShowDialog();

						this.Activate();

						fill_company_contact_grid();

					}
					else
					{
						MessageBox.Show("No Other Contacts", "Company : Remove Duplicate Contacts", MessageBoxButtons.OK, MessageBoxIcon.Information);
					}
				}
				else
				{
					MessageBox.Show("You must select a contact!", "Company : Remove Duplicate Contacts", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
				}

			}

		}

		public void mnuRemoveFractional_Click(Object eventSender, EventArgs eventArgs)
		{

			if (MessageBox.Show("Are you sure that you want to take this company off the fractional owner list?", "Company : Remove Fractional Owner", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
			{
				modCompany.remove_fractional_owner(nReference_CompanyID, nReference_CompanyJID);
				// Temp Hold ??
				//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
				Form_Activated(this, new EventArgs());
			}

		}

		// ====================================================================================
		// Written By : David D. Cruger
		// Created    : 04/15/2008
		// Modified   : 04/15/2008
		// Procedure  : mnuReportDeliveryPositionReport_Click
		// Parameters : None
		// Returns    : None
		//
		// Notes      : Creates a HTML report showing the delivery position by make/model
		// and a count of how many aircraft.  Writes this html file to the hard drive
		// and calls I.E to display it.
		//
		// ====================================================================================

		public void mnuReportDeliveryPositionReport_Click(Object eventSender, EventArgs eventArgs)
		{
			StreamWriter tsFileWriter = null;

			Object fso = new Object();
			FileStream tsFile = null;

			ADORecordSetHelper rstRec1 = null;
			string strQuery1 = "";
			string strTemp = "";
			string strData = ""; // HTML Report
			string strDir = "";
			string strFileName = "";

			try
			{

				search_on("Creating Delivery Position Report ....");

				strQuery1 = "SELECT amod_type_code, amod_make_name,  amod_model_name, ac_model_config, ac_mfr_year, ac_engine_name, ac_engine_noise_rating, COUNT(ac_id) AS TotRec ";
				strQuery1 = $"{strQuery1}FROM Aircraft_Model AS AM1 ";
				strQuery1 = $"{strQuery1}INNER JOIN  Aircraft AS A1 ON amod_id = ac_amod_id ";
				strQuery1 = $"{strQuery1}WHERE (AC_Journ_id = 0) ";
				strQuery1 = $"{strQuery1}AND  (EXISTS (SELECT NULL FROM Aircraft_Reference AS AR2 WHERE (AR2.cref_ac_id = A1.ac_id) AND (AR2.cref_comp_id = {nReference_CompanyID.ToString()}) AND (AR2.cref_journ_id = 0))) ";
				strQuery1 = $"{strQuery1}AND (";
				strQuery1 = $"{strQuery1}     (EXISTS (SELECT NULL FROM Aircraft_Reference AS AR2 WHERE (AR2.cref_ac_id = A1.ac_id) AND (AR2.cref_comp_id = {nReference_CompanyID.ToString()}) AND (AR2.cref_journ_id = 0) AND (AR2.cref_contact_type = '42'))) ";
				strQuery1 = $"{strQuery1}OR ";
				strQuery1 = $"{strQuery1}     (ac_lifecycle_stage = 1) ";
				strQuery1 = $"{strQuery1}     ) ";
				strQuery1 = $"{strQuery1}GROUP BY amod_type_code, amod_make_name, amod_model_name, ac_mfr_year, ac_model_config, ac_engine_name, ac_engine_noise_rating ";
				strQuery1 = $"{strQuery1}ORDER BY amod_type_code, amod_make_name, amod_model_name, ac_mfr_year, ac_model_config, ac_engine_name, ac_engine_noise_rating ";

				rstRec1 = ADORecordSetHelper.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, "");

				strData = $"<html>{Environment.NewLine}";
				strData = $"{strData}<head>{Environment.NewLine}";
				strData = $"{strData}<title>JETNET LLC - Company Delivery Position Report</title>{Environment.NewLine}";
				strData = $"{strData}</head>{Environment.NewLine}{Environment.NewLine}";

				strData = $"{strData}<body>{Environment.NewLine}";
				strData = $"{strData}<center>{Environment.NewLine}";

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(rstRec1.Fields) && !(rstRec1.BOF && rstRec1.EOF))
				{

					strData = $"{strData}<h1>JETNET LLC<br>Company Delivery Position Report</h1>{Environment.NewLine}";
					strData = $"{strData}<h2>{txt_comp_name.Text.Trim()} ({nReference_CompanyID.ToString()})<br>{Environment.NewLine}{txt_comp_city.Text.Trim()}, {cbo_comp_country.Text.Trim()}</h2>{Environment.NewLine}{Environment.NewLine}";
					strData = $"{strData}<table border='1' cellpadding='5'>{Environment.NewLine}";

					strData = $"{strData}<tr>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Type</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Make</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Model</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Config</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Year Mfr</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Engine Name</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Noise Rating</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Total</th>{Environment.NewLine}";
					strData = $"{strData}</tr>{Environment.NewLine}{Environment.NewLine}";


					while(!rstRec1.EOF)
					{

						strData = $"{strData}<tr>{Environment.NewLine}";
						strData = $"{strData}<td align='center'>&nbsp;{($"{Convert.ToString(rstRec1["amod_type_code"])} ").Trim()}&nbsp;</td>{Environment.NewLine}";
						strData = $"{strData}<td align='left'>&nbsp;{($"{Convert.ToString(rstRec1["amod_make_name"])} ").Trim()}</td>{Environment.NewLine}";
						strData = $"{strData}<td align='left'>&nbsp;{($"{Convert.ToString(rstRec1["amod_model_name"])} ").Trim()}</td>{Environment.NewLine}";
						strData = $"{strData}<td align='center'>&nbsp;{($"{Convert.ToString(rstRec1["ac_model_config"])} ").Trim()}&nbsp;</td>{Environment.NewLine}";
						strData = $"{strData}<td align='center'>&nbsp;{($"{Convert.ToString(rstRec1["ac_mfr_year"])} ").Trim()}&nbsp;</td>{Environment.NewLine}";
						strData = $"{strData}<td align='left'>&nbsp;{($"{Convert.ToString(rstRec1["ac_engine_name"])} ").Trim()}</td>{Environment.NewLine}";
						strTemp = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(rstRec1["ac_engine_noise_rating"]))
						{
							strTemp = Convert.ToString(rstRec1["ac_engine_noise_rating"]).Trim();
						}
						strData = $"{strData}<td align='center'>{strTemp}&nbsp;</td>{Environment.NewLine}";

						strTemp = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(rstRec1["TotRec"]))
						{
							strTemp = Convert.ToString(rstRec1["TotRec"]).Trim();
						}
						strData = $"{strData}<td align='right'>{strTemp}&nbsp;</td>{Environment.NewLine}";
						strData = $"{strData}</tr>{Environment.NewLine}{Environment.NewLine}";

						rstRec1.MoveNext();

					};

					strData = $"{strData}</table>{Environment.NewLine}{Environment.NewLine}";
					rstRec1.Close();

				}
				else
				{
					strData = $"{strData}<h1>No Delivery Positions Found</h1>{Environment.NewLine}";
				} // If (rstRec1.BOF = False) And (rstRec1.EOF = False) Then

				rstRec1 = null;

				strData = $"{strData}</center>{Environment.NewLine}";
				strData = $"{strData}</body>{Environment.NewLine}";
				strData = $"{strData}</html>{Environment.NewLine}{Environment.NewLine}";

				//----------------------------------
				// Create Report HTML File
				//----------------------------------
				// strDir = App.Path & "\DPReports"

				if (modAdminCommon.gbl_User_ID == "mvit")
				{
					strDir = "C:\\Program Files\\Jetnet Homebase";
				}
				else
				{
					strDir = "C:\\Users\\Public\\Documents";
				}

				if (!Directory.Exists(strDir))
				{
					Directory.CreateDirectory(strDir);
				}

				strFileName = $"{strDir}\\DP-Report.html";
				tsFile = new FileStream(strFileName, FileMode.OpenOrCreate, FileAccess.Write);
				tsFileWriter = new StreamWriter(tsFile);
				tsFileWriter.WriteLine(strData); // Write String
				tsFileWriter.Close(); // Close File
				tsFile = null; // Release Memory

				frm_WebReport.DefInstance.WhichReport = "ADP_Report";
				frm_WebReport.DefInstance.Show();

				search_off();

				fso = null;
			}
			catch (System.Exception excep)
			{

				rstRec1 = null;
				fso = null;
				tsFile = null;

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnuReportDeliveryPositionReport_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		} // mnuReportDeliveryPositionReport_Click

		// ====================================================================================
		// Written By : David D. Cruger
		// Created    : 11/20/2008
		// Modified   : 11/20/2008
		// Procedure  : mnuReportInOperationReport_Click
		// Parameters : None
		// Returns    : None
		//
		// Notes      : Creates a HTML report showing the aircraft in operation by make/model
		// and a count of how many aircraft.  Writes this html file to the hard drive
		// and calls I.E to display it.
		//
		// ====================================================================================

		public void mnuReportInOperationReport_Click(Object eventSender, EventArgs eventArgs)
		{
			StreamWriter tsFileWriter = null;

			Object fso = new Object();
			FileStream tsFile = null;

			ADORecordSetHelper rstRec1 = null;
			string strQuery1 = "";
			string strTemp = "";
			string strData = ""; // HTML Report
			string strDir = "";
			string strFileName = "";

			try
			{

				mnuReportInOperationReport.Enabled = false;

				search_on("Creating Aircraft In Operation Report ....");

				strQuery1 = "SELECT amod_type_code, amod_make_name,  amod_model_name, ac_model_config, ac_mfr_year, ac_engine_name, ac_engine_noise_rating, COUNT(ac_id) AS TotRec ";
				strQuery1 = $"{strQuery1}FROM Aircraft_Model AS AM1 ";
				strQuery1 = $"{strQuery1}INNER JOIN  Aircraft AS A1 ON amod_id = ac_amod_id ";
				strQuery1 = $"{strQuery1}WHERE (ac_journ_id = 0) ";
				strQuery1 = $"{strQuery1}AND (ac_lifecycle_stage = 3) ";
				strQuery1 = $"{strQuery1}AND (EXISTS (SELECT NULL FROM Aircraft_Reference AS AR2 ";
				strQuery1 = $"{strQuery1}             WHERE (AR2.cref_ac_id = A1.ac_id) ";
				strQuery1 = $"{strQuery1}             AND (AR2.cref_comp_id = {nReference_CompanyID.ToString()}) ";
				strQuery1 = $"{strQuery1}             AND (AR2.cref_journ_id = 0) ";
				strQuery1 = $"{strQuery1}             ) ";
				strQuery1 = $"{strQuery1}     ) ";
				strQuery1 = $"{strQuery1}GROUP BY amod_type_code, amod_make_name, amod_model_name, ac_mfr_year, ac_model_config, ac_engine_name, ac_engine_noise_rating ";
				strQuery1 = $"{strQuery1}ORDER BY amod_type_code, amod_make_name, amod_model_name, ac_mfr_year, ac_model_config, ac_engine_name, ac_engine_noise_rating ";

				rstRec1 = ADORecordSetHelper.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, "");

				strData = $"<html>{Environment.NewLine}";
				strData = $"{strData}<head>{Environment.NewLine}";
				strData = $"{strData}<title>JETNET LLC - Company Aircraft In Operation Report</title>{Environment.NewLine}";
				strData = $"{strData}</head>{Environment.NewLine}{Environment.NewLine}";

				strData = $"{strData}<body>{Environment.NewLine}";
				strData = $"{strData}<center>{Environment.NewLine}";

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(rstRec1.Fields) && !(rstRec1.BOF && rstRec1.EOF))
				{

					strData = $"{strData}<h1>JETNET LLC<br>Company Aircraft In Operation Report</h1>{Environment.NewLine}";
					strData = $"{strData}<h2>{txt_comp_name.Text.Trim()} ({nReference_CompanyID.ToString()})<br>{Environment.NewLine}{txt_comp_city.Text.Trim()}, {cbo_comp_country.Text.Trim()}</h2>{Environment.NewLine}{Environment.NewLine}";
					strData = $"{strData}<table border='1' cellpadding='5'>{Environment.NewLine}";

					strData = $"{strData}<tr>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Type</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Make</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Model</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Config</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Year Mfr</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Engine Name</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Noise Rating</th>{Environment.NewLine}";
					strData = $"{strData}<th align='center'>Total</th>{Environment.NewLine}";
					strData = $"{strData}</tr>{Environment.NewLine}{Environment.NewLine}";


					while(!rstRec1.EOF)
					{

						strData = $"{strData}<tr>{Environment.NewLine}";
						strData = $"{strData}<td align='center'>&nbsp;{($"{Convert.ToString(rstRec1["amod_type_code"])} ").Trim()}&nbsp;</td>{Environment.NewLine}";
						strData = $"{strData}<td align='left'>&nbsp;{($"{Convert.ToString(rstRec1["amod_make_name"])} ").Trim()}</td>{Environment.NewLine}";
						strData = $"{strData}<td align='left'>&nbsp;{($"{Convert.ToString(rstRec1["amod_model_name"])} ").Trim()}</td>{Environment.NewLine}";
						strData = $"{strData}<td align='center'>&nbsp;{($"{Convert.ToString(rstRec1["ac_model_config"])} ").Trim()}&nbsp;</td>{Environment.NewLine}";
						strData = $"{strData}<td align='center'>&nbsp;{($"{Convert.ToString(rstRec1["ac_mfr_year"])} ").Trim()}&nbsp;</td>{Environment.NewLine}";
						strData = $"{strData}<td align='left'>&nbsp;{($"{Convert.ToString(rstRec1["ac_engine_name"])} ").Trim()}</td>{Environment.NewLine}";
						strTemp = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(rstRec1["ac_engine_noise_rating"]))
						{
							strTemp = Convert.ToString(rstRec1["ac_engine_noise_rating"]).Trim();
						}
						strData = $"{strData}<td align='center'>{strTemp}&nbsp;</td>{Environment.NewLine}";

						strTemp = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(rstRec1["TotRec"]))
						{
							strTemp = Convert.ToString(rstRec1["TotRec"]).Trim();
						}
						strData = $"{strData}<td align='right'>{strTemp}&nbsp;</td>{Environment.NewLine}";
						strData = $"{strData}</tr>{Environment.NewLine}{Environment.NewLine}";

						rstRec1.MoveNext();

					};

					strData = $"{strData}</table>{Environment.NewLine}{Environment.NewLine}";

					rstRec1.Close();

				}
				else
				{
					strData = $"{strData}<h1>No Aircraft In Operation Found</h1>{Environment.NewLine}";
				} // If (rstRec1.BOF = False) And (rstRec1.EOF = False) Then

				rstRec1 = null;

				strData = $"{strData}</center>{Environment.NewLine}";
				strData = $"{strData}</body>{Environment.NewLine}";
				strData = $"{strData}</html>{Environment.NewLine}{Environment.NewLine}";

				//----------------------------------
				// Create Report HTML File
				//----------------------------------
				//strDir = App.Path & "\DPReports"
				//strDir = "C:\Program Files (x86)\Jetnet Homebase\DPReports"

				if (modAdminCommon.gbl_User_ID == "mvit")
				{
					strDir = "C:\\Program Files\\Jetnet Homebase";
				}
				else
				{
					strDir = "C:\\Users\\Public\\Documents";
				}


				if (!Directory.Exists(strDir))
				{
					Directory.CreateDirectory(strDir);
				}

				strFileName = $"{strDir}\\AIO-Report.html";
				tsFile = new FileStream(strFileName, FileMode.OpenOrCreate, FileAccess.Write);
				tsFileWriter = new StreamWriter(tsFile);
				tsFileWriter.WriteLine(strData); // Write String
				tsFileWriter.Close(); // Close File
				tsFile = null; // Release Memory

				//----------------------------------------
				// Now Open Browser And View Report
				//----------------------------------------
				frm_WebReport.DefInstance.WhichReport = "AIO_Report";
				frm_WebReport.DefInstance.Show();
				search_off();

				fso = null;
			}
			catch (System.Exception excep)
			{

				rstRec1 = null;
				fso = null;
				tsFile = null;

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnuReportInOperationReport_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		} // mnuReportInOperationReport_Click

		public void mnuReportList_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.mnuReportList, eventSender);

			//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//VB.Global.Load(frm_WebReport.DefInstance);

			frm_WebReport.DefInstance.PassedCompID = nReference_CompanyID;
			frm_WebReport.DefInstance.PassedJournID = nReference_CompanyJID;


			switch(Index)
			{
				case 0 :  // Company Details 
					 
					frm_WebReport.DefInstance.WhichReport = "Company Details"; 
					 
					break;
				case 1 :  // Program Holders Report 
					 
					frm_WebReport.DefInstance.WhichReport = "Fractional Programs"; 
					 
					break;
				case 2 :  // Technical Department Customer Record 
					 
					frm_WebReport.DefInstance.WhichReport = "Customer Record"; 
					 
					break;
				case 3 :  // List of Sold Transactions 
					 
					frm_WebReport.DefInstance.WhichReport = "Company Sold Transactions"; 
					 
					break;
				case 4 :  // List Survey Survey Responses 
					 
					frm_WebReport.DefInstance.WhichReport = "List Survey Responses"; 
					 
					break;
				case 5 :  // Customer, CRM Mkt, Homebase Notes 
					 
					frm_WebReport.DefInstance.WhichReport = "Customer, CRM Mkt, Homebase Notes"; 
					 
					break;
				case 6 :  // Company Details Email 
					 
					frm_WebReport.DefInstance.WhichReport = "Company Details Email"; 
					//PDF_Creator.aspx?export_type=Company Details&comp_id=7223&r_id=47&homebase=Y 
					 
					break;
				case 7 :  // Company Details Report (API) 
					 
					if (modCommon.JAPI.bHasAPILogin)
					{
						frm_WebReport.DefInstance.WhichReport = "Company Details Report (API)";
					}  // If .bHasAPILogin = True Then 
					 
					break;
			} // Select Case Index

			if (frm_WebReport.DefInstance.WhichReport != "")
			{
				frm_WebReport.DefInstance.Show();
			}

		} // mnuReportList_Click

		public void mnuSubscriptions_Click(Object eventSender, EventArgs eventArgs)
		{

			modStatusBar.Update_Status_Bar(modAdminCommon.SB, "Loading Subscription Form...", Color.Blue);

			modSubscription.Entered_Company_ID = nReference_CompanyID;

			if (chk_comp_product_code[modGlobalVars.CHK_BUSINESS_IDX].CheckState == CheckState.Checked || chk_comp_product_code[modGlobalVars.CHK_HELICOPTER_IDX].CheckState == CheckState.Checked || chk_comp_product_code[modGlobalVars.CHK_COMMERCIAL_IDX].CheckState == CheckState.Checked || chk_comp_product_code[modGlobalVars.CHK_YACHT_IDX].CheckState == CheckState.Checked)
			{

				Turn_Off_Company_Timers();

				mnuSubscriptions.Enabled = false;

				frm_Subscription.DefInstance.Close();

				frm_Subscription.DefInstance.is_dealer_broker = is_dealer_broker;

				//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//VB.Global.Load(frm_Subscription.DefInstance);

				tbr_ToolBar.Enabled = false;

				modCommon.CenterFormOnHomebaseMainForm(frm_Subscription.DefInstance);

				Application.DoEvents();
				Application.DoEvents();
				Application.DoEvents();
				Application.DoEvents();

				frm_Subscription.DefInstance.ShowDialog();

				Application.DoEvents();
				Application.DoEvents();
				Application.DoEvents();
				Application.DoEvents();

				time_at_company.Enabled = true;
				mnuSubscriptions.Enabled = true;

				tbr_ToolBar.Enabled = true;

				modStatusBar.Clear_Status_Bar(modAdminCommon.SB);
			}
			else
			{
				MessageBox.Show($"Company Product Code Must Have One of the Following Set{Environment.NewLine}{Environment.NewLine}Business, Helicopter, Commerical Or Yacht", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
			} // Check for Business, Helicopter, Commerical Or Yacht Product Code

		} // mnuSubscriptions_Click

		public void mnueditaddcompany_Click(Object eventSender, EventArgs eventArgs)
		{

			Form Obj = null;

			bool bIsAllReadyOpen = false;

			foreach (Form ObjIterator in Application.OpenForms)
			{
				Obj = ObjIterator;
				if (String.Compare(Convert.ToString(Obj.Name), "frm_CompanyAdd", true) == 0)
				{
					bIsAllReadyOpen = true;
					break;
				}
				//Obj
				Obj = default(Form);
			}


			modGlobalVars.new_frm_CompanyAdd.ca_company_address1 = txt_comp_address1.Text;
			modGlobalVars.new_frm_CompanyAdd.ca_company_address2 = txt_comp_address2.Text;
			modGlobalVars.new_frm_CompanyAdd.ca_comp_email = txt_comp_email_address.Text;
			modGlobalVars.new_frm_CompanyAdd.ca_comp_city = txt_comp_city.Text;
			modGlobalVars.new_frm_CompanyAdd.ca_comp_agency = cbo_comp_agency_type.Text;
			modGlobalVars.new_frm_CompanyAdd.ca_comp_language = cbo_comp_language.Text;
			modGlobalVars.new_frm_CompanyAdd.ca_comp_account_rep = cbo_comp_account[1].Text;
			modGlobalVars.new_frm_CompanyAdd.ca_comp_zip = txt_comp_zip_code.Text;

			modGlobalVars.new_frm_CompanyAdd.ca_comp_state = cbo_comp_state.SelectedIndex.ToString();
			modGlobalVars.new_frm_CompanyAdd.ca_comp_country = cbo_comp_country.SelectedIndex.ToString();


			modGlobalVars.new_frm_CompanyAdd.ca_comp_business_type = cbo_comp_business_type.Text;
			modGlobalVars.new_frm_CompanyAdd.ca_comp_account_type = cbo_comp_account[0].Text;


			if (chk_comp_product_code[modGlobalVars.CHK_BUSINESS_IDX].CheckState == CheckState.Checked)
			{
				modGlobalVars.new_frm_CompanyAdd.ca_comp_product = "1";
			}
			else if (chk_comp_product_code[modGlobalVars.CHK_HELICOPTER_IDX].CheckState == CheckState.Checked)
			{ 
				modGlobalVars.new_frm_CompanyAdd.ca_comp_product = "2";
			}
			else if (chk_comp_product_code[modGlobalVars.CHK_COMMERCIAL_IDX].CheckState == CheckState.Checked)
			{ 
				modGlobalVars.new_frm_CompanyAdd.ca_comp_product = "3";
			}
			else if (chk_comp_product_code[modGlobalVars.CHK_YACHT_IDX].CheckState == CheckState.Checked)
			{ 
				modGlobalVars.new_frm_CompanyAdd.ca_comp_product = "6";
			}
			else
			{
				modGlobalVars.new_frm_CompanyAdd.ca_comp_product = "Business";
			}

			modGlobalVars.new_frm_CompanyAdd.cmd_copy_company.Visible = true;

			if (!bIsAllReadyOpen)
			{
				modGlobalVars.new_frm_CompanyAdd.Show();
			}
			else
			{
				modGlobalVars.new_frm_CompanyAdd.BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes
			}

		}

		public void mnuViewJournalSubType_Click(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.mnuViewJournalSubType, eventSender);


			switch(Index)
			{
				case 1 :  // Company 
					 
					((ToolStripMenuItem) mnuViewJournalSubType[1]).Checked = true;  // Company 
					((ToolStripMenuItem) mnuViewJournalSubType[2]).Checked = false;  // Contact 
					((ToolStripMenuItem) mnuViewJournalSubType[3]).Checked = false;  // Aircraft 
					 
					modFillCompConControls.Fill_Journal_Note_Type(cbo_journal_note_type, false, true, false); 
					 
					lbl_comp[JOURNAL_TYPELBL_INDEX].Text = "Company:"; 
					txt_journal_ac_selected.Text = txt_comp_name.Text.Trim(); 
					 
					break;
				case 2 :  // Contact 
					 
					((ToolStripMenuItem) mnuViewJournalSubType[1]).Checked = false;  // Company 
					((ToolStripMenuItem) mnuViewJournalSubType[2]).Checked = true;  // Contact 
					((ToolStripMenuItem) mnuViewJournalSubType[3]).Checked = false;  // Aircraft 
					 
					modFillCompConControls.Fill_Journal_Note_Type(cbo_journal_note_type, false, true, false); 
					 
					lbl_comp[JOURNAL_TYPELBL_INDEX].Text = "Contact:"; 
					txt_journal_ac_selected.Text = strSelectedContact; 
					 
					break;
				case 3 :  // Aircraft 
					 
					((ToolStripMenuItem) mnuViewJournalSubType[1]).Checked = false;  // Company 
					((ToolStripMenuItem) mnuViewJournalSubType[2]).Checked = false;  // Contact 
					((ToolStripMenuItem) mnuViewJournalSubType[3]).Checked = true;  // Aircraft 
					 
					modFillCompConControls.Fill_Journal_Note_Type(cbo_journal_note_type, true, true, false); 
					 
					lbl_comp[JOURNAL_TYPELBL_INDEX].Text = "Aircraft:"; 
					txt_journal_ac_selected.Text = strSelectedAircraft; 
					 
					break;
			} // Case Index

		} // mnuViewJournalSubType_Click

		private bool isInitializingComponent;
		private void opt_journal_subject_CheckedChanged(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.opt_journal_subject, eventSender);
			if (((RadioButton) eventSender).Checked)
			{
				if (isInitializingComponent)
				{
					return;
				}

				cbo_verify_journal_subject.Visible = true;
				cbo_verify_journal_auto_subject.Visible = false;
				cbo_verify_journal_auto_subject.Text = "";

				if (!bFormLoad)
				{

					if (Index == 0 || Index == 4)
					{ // added MSW - 3/2/20 to make it default to FN
						Application.DoEvents();
						Application.DoEvents();
						Application.DoEvents();
						cbo_verify_note_type.SelectedIndex = 5;
						Application.DoEvents();
						Application.DoEvents();
						Application.DoEvents();
						opt_journal_subject[Index].Checked = true;
						Application.DoEvents();
						Application.DoEvents();
						Application.DoEvents();
					}
					else if (Index != 3)
					{  //7/9/04 aey
						cbo_verify_journal_subject.SelectedIndex = Index;
					}
					else
					{
						cbo_verify_journal_subject.SelectedIndex = -1;
						lbl_comp[VERIFY_STATUS_INDEX].Text = $"for company {txt_comp_name.Text.Trim()} on: {DateTime.Now.ToString()}";
						lbl_comp[VERIFY_STATUS_INDEX].Visible = true;
					}

					nSelVerifyJournSub = -1;


					switch(Index)
					{
						case modGlobalVars.opt_journ_subj_SHARES : 
							nSelVerifyJournSub = modGlobalVars.opt_journ_subj_SHARES; 
							break;
						case modGlobalVars.opt_journ_subj_LETTER : 
							nSelVerifyJournSub = modGlobalVars.opt_journ_subj_LETTER; 
							break;
						case modGlobalVars.opt_journ_subj_MESSAGE : 
							nSelVerifyJournSub = modGlobalVars.opt_journ_subj_MESSAGE; 
							break;
						case modGlobalVars.opt_journ_subj_CUSTOM : 
							nSelVerifyJournSub = modGlobalVars.opt_journ_subj_CUSTOM; 
							break;
					}

				}

			}
		}

		private void opt_verify_aircraft_CheckedChanged(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.opt_verify_aircraft, eventSender);
			if (((RadioButton) eventSender).Checked)
			{
				if (isInitializingComponent)
				{
					return;
				}

				lst_aircraft.Tag = "";

				clicked_note_type = Index;

				if (!bFormLoad)
				{

					lst_aircraft.Visible = false;

					if (Index == modGlobalVars.opt_verify_ac_ONE || Index == 5 && opt_verify_aircraft[modGlobalVars.opt_verify_ac_ONE].Checked)
					{
						if (cbo_verify_aircraft.Items.Count > 0)
						{
							cbo_verify_aircraft.Visible = true;
							cbo_verify_aircraft.SelectedIndex = 0;
						}

						cbo_yachts.Visible = false;
						cmd_verify_status_save.Enabled = true;
					}
					else if (Index == 4)
					{ 
						//       cbo_yachts.Visible = True
						//       Call fill_company_yacht_dropdown
						//        cbo_yachts.ListIndex = 0
						//       cbo_verify_aircraft.Visible = False
						//       If cbo_yachts.Text = "No Yachts Found" Then
						//            cmd_verify_status_save.Enabled = False
						//       End If
					}
					else if (Index == 5)
					{ 

						if (lst_aircraft.SelectedItems.Count > 0)
						{
							cmd_ac_verify_Click(cmd_ac_verify[5], new EventArgs());
						}

						lst_aircraft.Visible = true;

					}
					else
					{
						cbo_verify_aircraft.SelectedIndex = -1;
						cbo_verify_aircraft.Visible = false;
						//cbo_yachts.Visible = False
						cmd_verify_status_save.Enabled = true;
					}

					nSelVerifyAircraft = -1;


					switch(Index)
					{
						case modGlobalVars.opt_verify_ac_NONE : 
							nSelVerifyAircraft = modGlobalVars.opt_verify_ac_NONE; 
							break;
						case modGlobalVars.opt_verify_ac_ONE : 
							nSelVerifyAircraft = modGlobalVars.opt_verify_ac_ONE; 
							break;
						case modGlobalVars.opt_verify_ac_ALL : 
							nSelVerifyAircraft = modGlobalVars.opt_verify_ac_ALL; 
							break;
						case modGlobalVars.opt_verify_ac_PRIMARY : 
							nSelVerifyAircraft = modGlobalVars.opt_verify_ac_PRIMARY; 
							 
							break;
					}

				}


			}
		}

		//UPGRADE_WARNING: (2050) ControlArray Event opt_verify_aircraft.DblClick was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2050
		private void opt_verify_aircraft_DblClick(int Index)
		{
			chk_limit_aircraft_list.CheckState = CheckState.Unchecked;
			fill_company_aircraft_grid(0);
			cbo_verify_aircraft.Visible = true;


			// ADDED IN MSW - 5/6/18
			if (Index == 1 || Index == 2 && chk_limit_aircraft_list.CheckState == CheckState.Checked)
			{
				chk_limit_aircraft_list.CheckState = CheckState.Unchecked;
				cmd_ac_verify_Click(cmd_ac_verify[5], new EventArgs());
				opt_verify_aircraft_CheckedChanged(opt_verify_aircraft[5], new EventArgs());
			}


			if (Index == 5)
			{
				lst_aircraft.Visible = true;
			}



		}

		private void Fill_Company_Documents_In_Process_Grid_Headers()
		{


			gdCompDocInProcess.Clear();

			gdCompDocInProcess.ColumnsCount = 13;
			gdCompDocInProcess.RowsCount = 2;
			gdCompDocInProcess.FixedRows = 1;
			gdCompDocInProcess.CurrentRowIndex = 0;

			int lCol1 = 0;
			gdCompDocInProcess.CurrentColumnIndex = lCol1;
			gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "Make/Model-SerNbr/RegNbr";
			gdCompDocInProcess.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
			gdCompDocInProcess.SetColumnWidth(gdCompDocInProcess.CurrentColumnIndex, 247);

			lCol1++;
			gdCompDocInProcess.CurrentColumnIndex = lCol1;
			gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "Last Action Date";
			gdCompDocInProcess.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
			gdCompDocInProcess.SetColumnWidth(gdCompDocInProcess.CurrentColumnIndex, 90);

			lCol1++;
			gdCompDocInProcess.CurrentColumnIndex = lCol1;
			gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "Type";
			gdCompDocInProcess.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
			gdCompDocInProcess.SetColumnWidth(gdCompDocInProcess.CurrentColumnIndex, 43);

			lCol1++;
			gdCompDocInProcess.CurrentColumnIndex = lCol1;
			gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "Tape#";
			gdCompDocInProcess.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
			gdCompDocInProcess.SetColumnWidth(gdCompDocInProcess.CurrentColumnIndex, 50);

			lCol1++;
			gdCompDocInProcess.CurrentColumnIndex = lCol1;
			gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "Tape Date";
			gdCompDocInProcess.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
			gdCompDocInProcess.SetColumnWidth(gdCompDocInProcess.CurrentColumnIndex, 67);

			lCol1++;
			gdCompDocInProcess.CurrentColumnIndex = lCol1;
			gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "Doc Date";
			gdCompDocInProcess.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
			gdCompDocInProcess.SetColumnWidth(gdCompDocInProcess.CurrentColumnIndex, 67);

			lCol1++;
			gdCompDocInProcess.CurrentColumnIndex = lCol1;
			gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "Frame Start";
			gdCompDocInProcess.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
			gdCompDocInProcess.SetColumnWidth(gdCompDocInProcess.CurrentColumnIndex, 63);

			lCol1++;
			gdCompDocInProcess.CurrentColumnIndex = lCol1;
			gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "Frame End";
			gdCompDocInProcess.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
			gdCompDocInProcess.SetColumnWidth(gdCompDocInProcess.CurrentColumnIndex, 60);

			lCol1++;
			gdCompDocInProcess.CurrentColumnIndex = lCol1;
			gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "Rolled By";
			gdCompDocInProcess.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
			gdCompDocInProcess.SetColumnWidth(gdCompDocInProcess.CurrentColumnIndex, 53);

			lCol1++;
			gdCompDocInProcess.CurrentColumnIndex = lCol1;
			gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "Assigned To";
			gdCompDocInProcess.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
			gdCompDocInProcess.SetColumnWidth(gdCompDocInProcess.CurrentColumnIndex, 67);

			lCol1++;
			gdCompDocInProcess.CurrentColumnIndex = lCol1;
			gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "Log ID";
			gdCompDocInProcess.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
			gdCompDocInProcess.SetColumnWidth(gdCompDocInProcess.CurrentColumnIndex, 53);

			lCol1++;
			gdCompDocInProcess.CurrentColumnIndex = lCol1;
			gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "Notes";
			gdCompDocInProcess.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
			gdCompDocInProcess.SetColumnWidth(gdCompDocInProcess.CurrentColumnIndex, 400);

			lCol1++;
			gdCompDocInProcess.CurrentColumnIndex = lCol1;
			gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "ACID";
			gdCompDocInProcess.DefaultCellStyle.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
			gdCompDocInProcess.SetColumnWidth(gdCompDocInProcess.CurrentColumnIndex, 0);

			Application.DoEvents();

		} // Fill_Company_Documents_In_Process_Grid_Headers

		private void Fill_Company_Documents_In_Process_Grid()
		{

			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			string strQuery1 = "";

			int lRow1 = 0;
			int lCol1 = 0;
			StringBuilder strText = new StringBuilder();
			int lCellColor = 0;

			try
			{

				gdCompDocInProcess.Enabled = false;

				Fill_Company_Documents_In_Process_Grid_Headers();

				strQuery1 = "SELECT DISTINCT FDL1.*, ";
				strQuery1 = $"{strQuery1}AM1.amod_make_name, ";
				strQuery1 = $"{strQuery1}Am1.amod_model_name, ";
				strQuery1 = $"{strQuery1}A1.ac_ser_no_full, ";
				strQuery1 = $"{strQuery1}A1.ac_reg_no, ";
				strQuery1 = $"{strQuery1}A1.ac_id, ";
				strQuery1 = $"{strQuery1}A1.ac_forsale_flag, ";
				strQuery1 = $"{strQuery1}A1.ac_lifecycle_stage ";
				strQuery1 = $"{strQuery1}FROM FAA_Document_Log AS FDL1 WITH (NOLOCK) ";
				strQuery1 = $"{strQuery1}INNER JOIN Aircraft_Reference AS AR1 WITH (NOLOCK) ON AR1.cref_ac_id = FDL1.faalog_ac_id AND AR1.cref_journ_id = FDL1.faalog_journ_id ";
				strQuery1 = $"{strQuery1}INNER JOIN Aircraft AS A1 WITH (NOLOCK) ON A1.ac_id = FDL1.faalog_ac_id AND A1.ac_journ_id = FDL1.faalog_journ_id ";
				strQuery1 = $"{strQuery1}INNER JOIN Aircraft_Model AS AM1 WITH (NOLOCK) ON AM1.amod_id = A1.ac_amod_id ";
				strQuery1 = $"{strQuery1}WHERE (cref_comp_id = {nReference_CompanyID.ToString()}) ";
				strQuery1 = $"{strQuery1}AND (faalog_journ_id = 0) ";

				// added MSW - 9/7/23
				strQuery1 = $"{strQuery1} and amod_class_code <> 'E' ";

				rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!rstRec1.BOF && !rstRec1.EOF)
				{

					lRow1 = 0;

					gdCompDocInProcess.Redraw = false;

					do 
					{ // Loop Until rstRec1.EOF = True

						lCellColor = Convert.ToInt32(Double.Parse(modAdminCommon.NoColor));
						if (($"{Convert.ToString(rstRec1["ac_forsale_flag"])} ").Trim().ToUpper() == "Y")
						{
							lCellColor = Convert.ToInt32(Double.Parse(modAdminCommon.ForSaleColor));
						}
						if (Convert.ToDouble(rstRec1["ac_lifecycle_stage"]) == 4)
						{
							lCellColor = Convert.ToInt32(Double.Parse(modAdminCommon.InactiveColor));
						}

						lRow1++;
						gdCompDocInProcess.RowsCount = lRow1 + 1;
						gdCompDocInProcess.CurrentRowIndex = lRow1;

						lCol1 = 0;
						gdCompDocInProcess.CurrentColumnIndex = lCol1;
						
						gdCompDocInProcess.ColAlignment[lCol1] = DataGridViewContentAlignment.MiddleLeft;
						strText = new StringBuilder(($"{Convert.ToString(rstRec1["amod_make_name"])} ").Trim());
						strText.Append($" / {($"{Convert.ToString(rstRec1["amod_model_name"])} ").Trim()}");
						strText.Append($" - {($"{Convert.ToString(rstRec1["ac_ser_no_full"])} ").Trim()}");
						strText.Append($" / {($"{Convert.ToString(rstRec1["ac_reg_no"])} ").Trim()}");
						gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = strText.ToString();

						lCol1++;
						gdCompDocInProcess.CurrentColumnIndex = lCol1;
						
						gdCompDocInProcess.ColAlignment[lCol1] = DataGridViewContentAlignment.MiddleCenter;
						gdCompDocInProcess.CellBackColor = ColorTranslator.FromOle(lCellColor);
						gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(rstRec1["faalog_update_date"]))
						{
							if (Information.IsDate(rstRec1["faalog_update_date"]))
							{
								gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = Convert.ToDateTime(rstRec1["faalog_update_date"]).ToString("MM/dd/yyyy");
							}
						}

						lCol1++;
						gdCompDocInProcess.CurrentColumnIndex = lCol1;
						
						gdCompDocInProcess.ColAlignment[lCol1] = DataGridViewContentAlignment.MiddleLeft;
						gdCompDocInProcess.CellBackColor = ColorTranslator.FromOle(lCellColor);
						gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = ($"{Convert.ToString(rstRec1["faalog_doc_type"])} ").Trim();

						lCol1++;
						gdCompDocInProcess.CurrentColumnIndex = lCol1;
						
						gdCompDocInProcess.ColAlignment[lCol1] = DataGridViewContentAlignment.MiddleLeft;
						gdCompDocInProcess.CellBackColor = ColorTranslator.FromOle(lCellColor);
						gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(rstRec1["faalog_tape_no"]))
						{
							gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = Convert.ToString(rstRec1["faalog_tape_no"]);
						}

						lCol1++;
						gdCompDocInProcess.CurrentColumnIndex = lCol1;
						
						gdCompDocInProcess.ColAlignment[lCol1] = DataGridViewContentAlignment.MiddleCenter;
						gdCompDocInProcess.CellBackColor = ColorTranslator.FromOle(lCellColor);
						gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(rstRec1["faalog_tape_date"]))
						{
							if (Information.IsDate(rstRec1["faalog_tape_date"]))
							{
								gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = Convert.ToDateTime(rstRec1["faalog_tape_date"]).ToString("MM/dd/yyyy");
							}
						}

						lCol1++;
						gdCompDocInProcess.CurrentColumnIndex = lCol1;
						
						gdCompDocInProcess.ColAlignment[lCol1] = DataGridViewContentAlignment.MiddleCenter;
						gdCompDocInProcess.CellBackColor = ColorTranslator.FromOle(lCellColor);
						gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(rstRec1["faalog_document_date"]))
						{
							if (Information.IsDate(rstRec1["faalog_document_date"]))
							{
								gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = Convert.ToDateTime(rstRec1["faalog_document_date"]).ToString("MM/dd/yyyy");
							}
						}

						lCol1++;
						gdCompDocInProcess.CurrentColumnIndex = lCol1;
						
						gdCompDocInProcess.ColAlignment[lCol1] = DataGridViewContentAlignment.MiddleLeft;
						gdCompDocInProcess.CellBackColor = ColorTranslator.FromOle(lCellColor);
						gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(rstRec1["faalog_starting_frame_no"]))
						{
							gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = Convert.ToString(rstRec1["faalog_starting_frame_no"]);
						}

						lCol1++;
						gdCompDocInProcess.CurrentColumnIndex = lCol1;
						
						gdCompDocInProcess.ColAlignment[lCol1] = DataGridViewContentAlignment.MiddleLeft;
						gdCompDocInProcess.CellBackColor = ColorTranslator.FromOle(lCellColor);
						gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(rstRec1["faalog_ending_frame_no"]))
						{
							gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = Convert.ToString(rstRec1["faalog_ending_frame_no"]);
						}

						lCol1++;
						gdCompDocInProcess.CurrentColumnIndex = lCol1;
						
						gdCompDocInProcess.ColAlignment[lCol1] = DataGridViewContentAlignment.MiddleLeft;
						gdCompDocInProcess.CellBackColor = ColorTranslator.FromOle(lCellColor);
						gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = ($"{Convert.ToString(rstRec1["faalog_rolled_by_user_id"])} ").Trim();

						lCol1++;
						gdCompDocInProcess.CurrentColumnIndex = lCol1;
						
						gdCompDocInProcess.ColAlignment[lCol1] = DataGridViewContentAlignment.MiddleLeft;
						gdCompDocInProcess.CellBackColor = ColorTranslator.FromOle(lCellColor);
						gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = ($"{Convert.ToString(rstRec1["faalog_user_id"])} ").Trim();

						lCol1++;
						gdCompDocInProcess.CurrentColumnIndex = lCol1;
						
						gdCompDocInProcess.ColAlignment[lCol1] = DataGridViewContentAlignment.MiddleLeft;
						gdCompDocInProcess.CellBackColor = ColorTranslator.FromOle(lCellColor);
						gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(rstRec1["faalog_id"]))
						{
							gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = Convert.ToString(rstRec1["faalog_id"]);
						}

						lCol1++;
						gdCompDocInProcess.CurrentColumnIndex = lCol1;
						
						gdCompDocInProcess.ColAlignment[lCol1] = DataGridViewContentAlignment.MiddleLeft;
						gdCompDocInProcess.CellBackColor = ColorTranslator.FromOle(lCellColor);
						gdCompDocInProcess[gdCompDocInProcess.CurrentRowIndex, gdCompDocInProcess.CurrentColumnIndex].Value = ($"{Convert.ToString(rstRec1["faalog_general_note"])} ").Trim();

						gdCompDocInProcess.set_RowData(gdCompDocInProcess.CurrentRowIndex,Convert.ToInt32( rstRec1.GetField("ac_id")));

						if (lRow1 == 15)
						{
							gdCompDocInProcess.Redraw = true;
							gdCompDocInProcess.Refresh();
							Application.DoEvents();
							gdCompDocInProcess.Redraw = false;
						}

						rstRec1.MoveNext();

					}
					while(!rstRec1.EOF);

					gdCompDocInProcess.Redraw = true;
					gdCompDocInProcess.Enabled = true;
					gdCompDocInProcess.Refresh();

				} // If rstRec1.BOF = False And rstRec1.EOF = False Then

				rstRec1.Close();
				Application.DoEvents();

				rstRec1 = null;
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Record_Error("Fill_Company_Documents_In_Process_Grid_Error", excep.Message);
			}


		} // Fill_Company_Documents_In_Process_Grid


		private void tab_comp_description_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{



			//services used
			switch(SSTabHelper.GetSelectedIndex(tab_comp_description))
			{
				case 4 : 
					if (modAdminCommon.gbl_User_ID == "tmt" || modAdminCommon.gbl_User_ID == "dj" || modAdminCommon.gbl_User_ID == "slh")
					{
					}
					else
					{
						//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//VB.Global.Load(frm_WebReport.DefInstance);
						frm_WebReport.DefInstance.WhichReport = "Company Services Used";
						frm_WebReport.DefInstance.PassedCompID = nReference_CompanyID;
						frm_WebReport.DefInstance.Show();
					} 
					break;
				case 6 : 
					Find_Latest_Accounting_Note(nReference_CompanyID); 
					 
					break;
			}





			tab_comp_descriptionPreviousTab = tab_comp_description.SelectedIndex;
		}

		public bool Find_Latest_Accounting_Note(int comp_id)
		{
			//
			// Purpose: The purpose of this procedure is to determine if the current lease may be deleted or
			//          expired due to dependency on a sublease
			// By: Rick Wanner
			// Last Modified: 3/19/2002
			//
			string Query = "";
			ADORecordSetHelper snpOwner = new ADORecordSetHelper(); //8/11/05 aey

			try
			{

				Query = " select top 1 * from Journal with (NOLOCK) ";
				Query = $"{Query}  inner join Journal_Category with (NOLOCK) on journ_subcategory_code = jcat_subcategory_code ";
				Query = $"{Query} where journ_subcategory_code = 'CSAC' and journ_comp_id = {comp_id.ToString()}";
				Query = $"{Query} order by journ_date desc ";

				lbl_comp[12].Tag = "";

				snpOwner.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				txt_market_note[6].Text = "";

				if (!(snpOwner.BOF && snpOwner.EOF))
				{

					lbl_comp[12].Tag = Convert.ToString(snpOwner["journ_id"]).Trim();
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(snpOwner["journ_description"]))
					{
						if (txt_market_note[6].Text.Trim() != "")
						{
							txt_market_note[6].Text = $"{txt_market_note[6].Text} - ";
						}

						txt_market_note[6].Text = $"{txt_market_note[6].Text}{Convert.ToString(snpOwner["journ_description"]).Trim()}";
					}

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(snpOwner["journ_user_id"]))
					{
						if (txt_market_note[6].Text.Trim() != "")
						{
							txt_market_note[6].Text = $"{txt_market_note[6].Text} (";
						}

						txt_market_note[6].Text = $"{txt_market_note[6].Text}{Convert.ToString(snpOwner["journ_user_id"]).Trim()}";
						txt_market_note[6].Text = $"{txt_market_note[6].Text}) ";
					}


				}

				snpOwner.Close();
				snpOwner = null;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Find_Latest_Accounting_Note_Error ({Information.Err().Number.ToString()}) {excep.Message}", "Aircraft (modAircraft)");
				return false;
			}

			return false;
		}
		private void tab_company_details_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				yacht_owner_id = 0; // make sure this is cleared if you change tabs


				if (!bFormLoad)
				{


					switch(SSTabHelper.GetSelectedIndex(tab_company_details))
					{
						case 0 :  // Aircraft 

							 
							break;
						case 1 :  // Contact 
							 
							//------------------------------------------------------------------------------ 
							// 03/25/2009 - By David D. Cruger - Added 
							// If No EMail Address or Historical Record Then Disable The Company/Contact 
							// EMail Notification Button 
							//------------------------------------------------------------------------------ 
							cmbContactEMail.Enabled = true; 
							if (txt_contact_email_address.Text.Trim() == "" || (nReference_CompanyJID > 0) || (chk_company_flag[iCompActiveFlag].CheckState == CheckState.Checked))
							{
								cmbContactEMail.Enabled = false;
							} 
							 
							if (nSelectedContactID == 0)
							{
								pnl_company_contact_details.Visible = false;
							} 
							 
							break;
						case 2 :  // Journal 
							 
							if (((ToolStripMenuItem) mnuViewJournalSubType[1]).Checked)
							{ // Company
								mnuViewJournalSubType_Click(mnuViewJournalSubType[1], new EventArgs());
							} 
							if (((ToolStripMenuItem) mnuViewJournalSubType[2]).Checked)
							{ // Contact
								mnuViewJournalSubType_Click(mnuViewJournalSubType[2], new EventArgs());
							} 
							if (((ToolStripMenuItem) mnuViewJournalSubType[3]).Checked)
							{ // Aircraft
								mnuViewJournalSubType_Click(mnuViewJournalSubType[3], new EventArgs());
							} 
							 
							break;
						case 3 :  // Wanted 
							 
							if (nReference_CompanyJID == 0)
							{ // deal with items only necessary for active companies
								fill_wanted_grid();
							} 
							 
							clear_wanted_controls(); 
							 
							break;
						case 4 :  // Share Relationships 
							 
							fill_share_relationship_grid(); 
							 
							break;
						case 5 :  // Document Relationships 
							 
							fill_document_grid(); 
							 
							break;
						case 6 :  // Past Due Leases 
							 
							fill_expired_leases_grid(); 
							 
							break;
						case 7 :  // Marketing CRM 
							 
							fill_company_journal_grid(grd_marketing_crm_notes); 
							 
							break;
						case 8 :  // Yachts 
							Application.DoEvents(); 
							break;
						case 9 :  // Documents In Process 
							 
							if (gdCompDocInProcess.ColumnsCount <= 2)
							{
								if (nReference_CompanyJID == 0)
								{
									Fill_Company_Documents_In_Process_Grid();
								}
							} 
							break;
						case 10 : 
							// this is for the incldue class E checkbox 
							chk_comp_product_code[7].Visible = true; 
							chk_comp_product_code[7].Enabled = true; 
							fill_ac_pub_details(); 
							 
							break;
					} // tab_company_details.Tab

					if (bChk_CompRelationInternal_Outstanding)
					{
						modGridEditCommon.InPlace_Grid_Reset(grd_company_relationships, chk_internal_relation, nRememberGridRow, nRememberGridCol);
						bChk_CompRelationInternal_Outstanding = false;
					}

					if (bEdit_PurchQuest_Outstanding)
					{
						modGridEditCommon.InPlace_Grid_Reset(grd_company_aircraft, cbo_comp_purchase_question, nRememberGridRow, nRememberGridCol);
						bEdit_PurchQuest_Outstanding = false;
					}

				} // If bFormLoad = False Then

				if (tab_company_details.Visible && tab_company_details.Enabled)
				{
					tab_company_details.Focus();
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"tab_company_details_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				tab_company_detailsPreviousTab = tab_company_details.SelectedIndex;
			}

		} // tab_company_details_Click

		//UPGRADE_NOTE: (7001) The following declaration (fill_yacht_contact_type) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void fill_yacht_contact_type(ComboBox combo, string selected_string)
		//{
			//
			//string Query = modGlobalVars.cEmptyString;
			//ADORecordSetHelper ado_Yacht = new ADORecordSetHelper();
			//bool found_match = false;
			//
			//try
			//{
				//
				//Query = "SELECT * FROM yacht_contact_Type WITH (NOLOCK) ORDER BY yct_name asc ";
				//
				//
				//ado_Yacht.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockBatchOptimistic);
				//
				//if (!ado_Yacht.BOF && !ado_Yacht.EOF)
				//{
					//
					//combo.Items.Clear();
					//combo.AddItem("");
					//
					//do 
					//{
						//
						//combo.AddItem($"{Convert.ToString(ado_Yacht["yct_name"])} - {Convert.ToString(ado_Yacht["yct_code"])}");
						//
						//if (Convert.ToString(ado_Yacht["yct_code"]).Trim() == selected_string.Trim())
						//{
							//combo.SelectedText = $"{Convert.ToString(ado_Yacht["yct_name"])} - {Convert.ToString(ado_Yacht["yct_code"])}";
							//found_match = true;
						//}
						//
						//ado_Yacht.MoveNext();
						//
					//}
					//while(!ado_Yacht.EOF);
					//
					//if (!found_match)
					//{
						//// combo.SelText = "08 - Co-Owner"     ' changed by MSW 5/11/2014  per request by diane wilson
						//combo.SelectedText = "";
					//}
					//
				//} // If (ado_Yacht.BOF = False And ado_Yacht.EOF = False) Then
				//
				//ado_Yacht.Close();
				//
				//ado_Yacht = null;
			//}
			//catch (System.Exception excep)
			//{
				//
				////UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				//modAdminCommon.Report_Error($"fill_yacht_contact_type_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				//search_off();
			//}
			//
		//}

		private void fill_duplicate_company_by_address_city_grid_headers()
		{

			int lRowl = 0;

			grdCompDupByAdd.Visible = true;
			grdCompDupByAdd.Clear();
			grdCompDupByAdd.RowsCount = 2;
			grdCompDupByAdd.ColumnsCount = 6;
			grdCompDupByAdd.CurrentRowIndex = 0;

			int lCol1 = -1;

			lCol1++;
			grdCompDupByAdd.CurrentColumnIndex = lCol1;
			grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = "CompId";
			grdCompDupByAdd.SetColumnWidth(lCol1, 60);
			grdCompDupByAdd.CellAlignment = DataGridViewContentAlignment.MiddleLeft;

			lCol1++;
			grdCompDupByAdd.CurrentColumnIndex = lCol1;
			grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = "Company";
			grdCompDupByAdd.SetColumnWidth(lCol1, 170);
			grdCompDupByAdd.CellAlignment = DataGridViewContentAlignment.MiddleLeft;

			lCol1++;
			grdCompDupByAdd.CurrentColumnIndex = lCol1;
			grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = "Address1";
			grdCompDupByAdd.SetColumnWidth(lCol1, 150);
			grdCompDupByAdd.CellAlignment = DataGridViewContentAlignment.MiddleLeft;

			lCol1++;
			grdCompDupByAdd.CurrentColumnIndex = lCol1;
			grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = "City";
			grdCompDupByAdd.SetColumnWidth(lCol1, 110);
			grdCompDupByAdd.CellAlignment = DataGridViewContentAlignment.MiddleLeft;

			lCol1++;
			grdCompDupByAdd.CurrentColumnIndex = lCol1;
			grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = "Nbr A/C";
			grdCompDupByAdd.SetColumnWidth(lCol1, 50);
			grdCompDupByAdd.CellAlignment = DataGridViewContentAlignment.MiddleCenter;

			lCol1++;
			grdCompDupByAdd.CurrentColumnIndex = lCol1;
			grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = "Nbr P-AC";
			grdCompDupByAdd.CellAlignment = DataGridViewContentAlignment.MiddleCenter;
			grdCompDupByAdd.SetColumnWidth(lCol1, 50);

			grdCompDupByAdd.FixedRows = 1;
			grdCompDupByAdd.FixedColumns = 0;

			grdCompDupByAdd.CurrentRowIndex = 1;

		} // fill_duplicate_company_by_address_city_grid_headers

		private void fill_duplicate_company_by_address_city_grid()
		{

			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			ADORecordSetHelper rstRec2 = new ADORecordSetHelper();
			string strQuery1 = "";
			string strQuery2 = "";

			int lRow1 = 0;
			int lCol1 = 0;
			string strCity = "";
			string strAddress1 = "";

			try
			{

				grdCompDupByAdd.Enabled = false;

				if (grdCompDupByAdd.ColumnsCount <= 2)
				{

					fill_duplicate_company_by_address_city_grid_headers();

					if (nReference_CompanyJID == 0)
					{

						strAddress1 = modCommon.LeaveOnlyAlphaAndNumeric(txt_comp_address1.Text).ToUpper();
						strCity = modCommon.LeaveOnlyAlphaAndNumeric(txt_comp_city.Text).ToUpper();

						if (strAddress1 != "")
						{

							if (strCity != "")
							{

								strQuery1 = "SELECT C1.* FROM Company AS C1 WITH (NOLOCK) ";
								strQuery1 = $"{strQuery1}WHERE (C1.comp_journ_id = 0) ";
								strQuery1 = $"{strQuery1}AND (C1.comp_id <> {nReference_CompanyID.ToString()}) ";
								strQuery1 = $"{strQuery1}AND (C1.comp_address1_search = '{strAddress1}') ";
								strQuery1 = $"{strQuery1}AND (dbo.LeaveAlphaAndNumeric(C1.comp_city) = '{strCity}') ";

								strQuery1 = $"{strQuery1}AND (NOT EXISTS (SELECT NULL FROM Company_Reference AS CR2 WITH (NOLOCK) ";
								strQuery1 = $"{strQuery1}                 WHERE (CR2.compref_journ_id = 0) ";
								strQuery1 = $"{strQuery1}                 AND ( ";
								strQuery1 = $"{strQuery1}                           (CR2.compref_comp_id = {nReference_CompanyID.ToString()} ";
								strQuery1 = $"{strQuery1}                         OR CR2.compref_rel_comp_id = {nReference_CompanyID.ToString()} ";
								strQuery1 = $"{strQuery1}                          ) ";
								strQuery1 = $"{strQuery1}                     ) ";
								strQuery1 = $"{strQuery1}                ) ";
								strQuery1 = $"{strQuery1}    ) ";

								strQuery1 = $"{strQuery1}ORDER BY C1.comp_name";

								search_on("Searching Duplicate Company By Address1/City ....");

								rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

								if (!rstRec1.EOF && !rstRec1.BOF)
								{

									search_off();

									lRow1 = 0;

									grdCompDupByAdd.Redraw = false;

									do 
									{ // Loop Until rstRec1.EOF = True

										lRow1++;
										grdCompDupByAdd.RowsCount = lRow1 + 1;
										grdCompDupByAdd.CurrentRowIndex = lRow1;

										lCol1 = -1;

										lCol1++; // CompId
										grdCompDupByAdd.CurrentColumnIndex = lCol1;
										grdCompDupByAdd.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
										grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = Convert.ToString(rstRec1["comp_id"]);

										grdCompDupByAdd.set_RowData(lRow1,Convert.ToInt32( rstRec1.GetField("comp_id")));

										lCol1++; // Company
										grdCompDupByAdd.CurrentColumnIndex = lCol1;
										grdCompDupByAdd.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
										grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = ($"{Convert.ToString(rstRec1["comp_name"])} ").Trim();

										lCol1++; // Address1
										grdCompDupByAdd.CurrentColumnIndex = lCol1;
										grdCompDupByAdd.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
										grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = ($"{Convert.ToString(rstRec1["Comp_address1"])} ").Trim();

										lCol1++; // City
										grdCompDupByAdd.CurrentColumnIndex = lCol1;
										grdCompDupByAdd.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
										grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = ($"{Convert.ToString(rstRec1["Comp_city"])} ").Trim();

										//-----------------------------------------------
										//-- Number of Aircraft Related To Company

										lCol1++; // Number of Aircraft
										grdCompDupByAdd.CurrentColumnIndex = lCol1;
										grdCompDupByAdd.CellAlignment = DataGridViewContentAlignment.MiddleRight;

										strQuery2 = "SELECT COUNT(DISTINCT cref_ac_id) As TotAC FROM Aircraft_Reference WITH (NOLOCK) ";
										strQuery2 = $"{strQuery2}WHERE (cref_comp_id = {Convert.ToString(rstRec1["comp_id"])}) ";
										strQuery2 = $"{strQuery2}AND (cref_journ_id = 0) ";

										rstRec2.Open(strQuery2, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

										grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = "0";
										if (!rstRec2.EOF && !rstRec2.BOF)
										{
											grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = Convert.ToString(rstRec2["TotAC"]);
										}

										rstRec2.Close();

										//---------------------------------------------------
										//-- Number of Primary Aircraft Related To Company

										lCol1++; // Number of Primary Aircraft
										grdCompDupByAdd.CurrentColumnIndex = lCol1;
										grdCompDupByAdd.CellAlignment = DataGridViewContentAlignment.MiddleRight;

										strQuery2 = "SELECT COUNT(DISTINCT cref_ac_id) As TotAC FROM Aircraft_Reference WITH (NOLOCK) ";
										strQuery2 = $"{strQuery2}WHERE (cref_comp_id = {Convert.ToString(rstRec1["comp_id"])}) ";
										strQuery2 = $"{strQuery2}AND (cref_journ_id = 0) ";
										strQuery2 = $"{strQuery2}AND (cref_primary_poc_flag IN ('X','Y')) ";

										rstRec2.Open(strQuery2, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

										grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = "0";
										if (!rstRec2.EOF && !rstRec2.BOF)
										{
											grdCompDupByAdd[grdCompDupByAdd.CurrentRowIndex, grdCompDupByAdd.CurrentColumnIndex].Value = Convert.ToString(rstRec2["TotAC"]);
										}

										rstRec2.Close();

										if (lRow1 == 8)
										{
											grdCompDupByAdd.Redraw = true;
											grdCompDupByAdd.Refresh();
											grdCompDupByAdd.Redraw = false;
										}

										rstRec1.MoveNext();

									}
									while(!rstRec1.EOF);

									modCommon.Clear_Grid_Row(grdCompDupByAdd);
									grdCompDupByAdd.RowSel = 0;
									grdCompDupByAdd.ColSel = 0;

								}
								else
								{
									grdCompDupByAdd[1, 1].Value = "No Records Found";
								} // If rstRec1.EOF = False And rstRec1.BOF = False Then

								grdCompDupByAdd.Redraw = true;
								grdCompDupByAdd.Refresh();
								grdCompDupByAdd.Enabled = true;

								rstRec1.Close();

								search_off();

							}
							else
							{
								MessageBox.Show("City Is Blank. Unable To Search For Duplicates", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
							} // If strCity <> "" Then

						}
						else
						{
							MessageBox.Show("Address1 Is Blank. Unable To Search For Duplicates", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
						} // If strAddress1 = "" Then

					}
					else
					{
						MessageBox.Show("Can NOT Search For Duplicates On Historical Company Record", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
					} // If nReference_CompanyJID = 0 Then

				} // If grdCompDupByAdd.Cols <= 2 Then

				grdCompDupByAdd.Enabled = true;

				return;

				rstRec2 = null;
				rstRec1 = null;
			}
			catch
			{
			}



			modAdminCommon.Record_Error("fill_duplicate_company_by_address_city_grid_error", Information.Err().Description);

		} // fill_duplicate_company_by_address_city_grid

		private void tab_company_details_DoubleClick(Object eventSender, EventArgs eventArgs)
		{


			if (SSTabHelper.GetSelectedIndex(tab_company_details) == 10)
			{
				fill_ac_pub_details();
			}


		}

		private void tab_company_rel_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{


			switch(SSTabHelper.GetSelectedIndex(tab_company_rel))
			{
				case 0 :  // Company Relationships 
					fill_relationships_grid(); 
					 
					break;
				case 1 :  // Contact Relationships 
					fill_contact_relationships_grid(); 
					 
					break;
				case 2 :  // Duplicate Company By Address/City 
					fill_duplicate_company_by_address_city_grid(); 
					 
					break;
			} // Select Case tab_company_rel.Tab

			tab_company_relPreviousTab = tab_company_rel.SelectedIndex;
		} // tab_company_rel_Click

		private void time_at_company_Tick(Object eventSender, EventArgs eventArgs)
		{


			System.DateTime dtLocalTime = DateTime.Now.AddHours(n_country_timezone_adjustment);
			//08/27/2014 - By David D. Cruger
			// Reworked this display
			// The old one wasn't working when it got close to midnight
			lbl_Time.Text = $"Local Time: {dtLocalTime.ToString("T")}";
			ToolTipMain.SetToolTip(lbl_Time, $"Time Adjustment {n_country_timezone_adjustment.ToString()} Hours - {dtLocalTime.ToString("D")} {dtLocalTime.ToString("T")}");
			lbl_Time.Refresh();

		}

		private void txt_comp_email_address_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			if (txt_comp_email_address.Text.Trim() != "")
			{
				JetNetSupport.PInvoke.SafeNative.shell32.ShellExecute(Support.GetHInstance().ToInt32(), "open", $"mailto:{txt_comp_email_address.Text.Trim()}", null, null, 0);
			}

		}

		private void txt_comp_web_address_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			if (txt_comp_web_address.Text.Trim() != "")
			{
				modCommon.ShellOpenURLInBrowser(modAdminCommon.gbl_User_Browser, txt_comp_web_address.Text);
			}

		}

		private void txt_company_field_KeyDown(Object eventSender, KeyEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_company_field, eventSender);
			int KeyCode = (int) eventArgs.KeyCode;
			int Shift = ((int) eventArgs.KeyData) / 65536;
			try
			{

				string tupdate = "";

				if (Index == 4)
				{

					if (KeyCode == ((int) Keys.Return))
					{
						lbl_comp[116].Text = "";
						lbl_comp[116].Text = modCommon.DLookUp("comp_ticker_name", "company_ticker", $"(comp_ticker_symbol = '{txt_company_field[4].Text}')");
						lbl_comp[116].Visible = true;
						enter_company_info.s_comp_ticker_symbol = lbl_comp[116].Text;

						if (txt_company_field[4].Text.Trim() != "")
						{

							tupdate = $" update company_ticker set comp_ticker_jetnet_comp_id = 0 where comp_ticker_jetnet_comp_id = {txt_comp_id.Text}";

							DbCommand TempCommand = null;
							TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
							TempCommand.CommandText = tupdate;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
							TempCommand.ExecuteNonQuery();


							tupdate = $" update company_ticker set comp_ticker_jetnet_comp_id = {txt_comp_id.Text} where comp_ticker_symbol = '{txt_company_field[4].Text}' ";

							DbCommand TempCommand_2 = null;
							TempCommand_2 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
							TempCommand_2.CommandText = tupdate;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_2.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
							TempCommand_2.ExecuteNonQuery();
						}
						else
						{
							// if we cleared it
							tupdate = $" update company_ticker set comp_ticker_jetnet_comp_id = 0 where comp_ticker_jetnet_comp_id = {txt_comp_id.Text}";

							DbCommand TempCommand_3 = null;
							TempCommand_3 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_3);
							TempCommand_3.CommandText = tupdate;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_3.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_3);
							TempCommand_3.ExecuteNonQuery();
							lbl_comp[116].Text = "";
						}
					}

				}
			}
			finally
			{
				eventArgs.Handled = KeyCode == 0;
			}



		}

		private void txt_company_field_Leave(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_company_field, eventSender);

			string strAPortId = "";
			int lAPortId = 0;
			string strAPortName = "";


			switch(Index)
			{
				case iCompAirportId : 
					 
					strAPortId = txt_company_field[iCompAirportId].Text; 
					 
					if (Information.IsNumeric(strAPortId))
					{

						strAPortName = modCommon.DLookUp("aport_name", "Airport", $"(aport_id = {strAPortId})");
						if (strAPortName != "")
						{
							lbl_comp[113].Text = strAPortName;
						}
						else
						{
							MessageBox.Show($"Could NOT Find APortId = {strAPortId}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
							txt_company_field[iCompAirportId].Text = "0";
							lbl_comp[113].Text = "{Airport Name}";
						}

					}
					else
					{
						txt_company_field[iCompAirportId].Text = "0";
						lbl_comp[113].Text = "{Airport Name}";
					}  // If IsNumeric(strAPortId) = True Then 
					 
					break;
			} // Case Index

		} // txt_company_field_LostFocus

		private void txt_contact_email_address_TextChanged(Object eventSender, EventArgs eventArgs)
		{

			if (txt_contact_email_address.Enabled)
			{
				if (txt_contact_email_address.Text != Convert.ToString(txt_contact_email_address.Tag))
				{
					txt_contact_email_address.Text = Convert.ToString(txt_contact_email_address.Tag);
				}
			}

		}

		private void txt_contact_email_address_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			if (txt_contact_email_address.Text.Trim() != "")
			{
				JetNetSupport.PInvoke.SafeNative.shell32.ShellExecute(Support.GetHInstance().ToInt32(), "open", $"mailto:{txt_contact_email_address.Text.Trim()}", null, null, 0);
			}

		}


		private void txt_market_note_TextChanged(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_market_note, eventSender);

			if (Index == 5)
			{
				if (txt_market_note[5].Enabled)
				{
					if (txt_market_note[5].Text != Convert.ToString(txt_market_note[5].Tag))
					{
						txt_market_note[5].Text = Convert.ToString(txt_market_note[5].Tag);
					}
				}
			}



		}

		private void txt_market_note_DoubleClick(Object eventSender, EventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_market_note, eventSender);

			if (Index == 6)
			{

				grd_company_journal.Enabled = false;
				disable_important_items();

				if (Convert.ToString(lbl_comp[12].Tag) != "")
				{

					frm_Journal.DefInstance.Reference_Journal_ID = Convert.ToInt32(Double.Parse(Convert.ToString(lbl_comp[12].Tag)));
					frm_Journal.DefInstance.Reference_Comp_Id = nReference_CompanyID;


					frm_Journal.DefInstance.ShowDialog();
				}
				else
				{


					cmd_company_add_note_Click(cmd_company_add_note, new EventArgs());
					cbo_verify_note_type.Text = "CS - Customer Support";
				}

				grd_company_journal.Enabled = true;

				enable_important_items();

				//Call fill_company_journal_grid

				if (!modGlobalVars.bKeepTransactionFocus)
				{
					this.Activate();
				}
				else
				{
					frm_Transaction_Documents.DefInstance.Activate();
				}

				search_off();

				Find_Latest_Accounting_Note(nReference_CompanyID);
			}


		}


		private void txt_market_note_KeyPress(Object eventSender, KeyPressEventArgs eventArgs)
		{
			int Index = Array.IndexOf(this.txt_market_note, eventSender);
			int KeyAscii = Convert.ToInt32(eventArgs.KeyChar);
			try
			{


				if (Index == 0 && KeyAscii == 13)
				{
					cmd_verify_yacht_Click(cmd_verify_yacht[6], new EventArgs()); // call the refresh
				}
			}
			finally
			{
				if (KeyAscii == 0)
				{
					eventArgs.Handled = true;
				}
				eventArgs.KeyChar = Convert.ToChar(KeyAscii);
			}

		}

		private void txt_pnum_area_code_TextChanged(Object eventSender, EventArgs eventArgs)
		{

			int lastColumn = 0;

			lastColumn = grd_company_phone.CurrentColumnIndex;
			grd_company_phone.CurrentColumnIndex = 2;

			if (!bIsClearPhoneData)
			{
				if ((grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim() != txt_pnum_area_code.Text.Trim()) && chk_dont_color_confirm.CheckState == CheckState.Unchecked)
				{
					cbo_comp_pnum_type.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_cntry_code.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_area_code.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_prefix.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_number.BackColor = NORMAL_TXT_BACKCOLOR;
				}
			}

			grd_company_phone.CurrentColumnIndex = lastColumn;

		}

		private void txt_pnum_cntry_code_TextChanged(Object eventSender, EventArgs eventArgs)
		{

			int lastColumn = 0;

			lastColumn = grd_company_phone.CurrentColumnIndex;
			grd_company_phone.CurrentColumnIndex = 1;

			if (!bIsClearPhoneData)
			{
				if ((grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim() != txt_pnum_cntry_code.Text.Trim()) && chk_dont_color_confirm.CheckState == CheckState.Unchecked)
				{
					cbo_comp_pnum_type.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_cntry_code.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_area_code.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_prefix.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_number.BackColor = NORMAL_TXT_BACKCOLOR;
				}
			}

			grd_company_phone.CurrentColumnIndex = lastColumn;

		}

		private void txt_pnum_number_TextChanged(Object eventSender, EventArgs eventArgs)
		{

			int lastColumn = 0;

			lastColumn = grd_company_phone.CurrentColumnIndex;
			grd_company_phone.CurrentColumnIndex = 4;

			if (!bIsClearPhoneData)
			{
				if ((grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim() != txt_pnum_number.Text.Trim()) && chk_dont_color_confirm.CheckState == CheckState.Unchecked)
				{
					cbo_comp_pnum_type.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_cntry_code.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_area_code.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_prefix.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_number.BackColor = NORMAL_TXT_BACKCOLOR;
				}
			}

			grd_company_phone.CurrentColumnIndex = lastColumn;

		}

		private void txt_pnum_prefix_TextChanged(Object eventSender, EventArgs eventArgs)
		{

			int lastColumn = 0;

			lastColumn = grd_company_phone.CurrentColumnIndex;
			grd_company_phone.CurrentColumnIndex = 3;

			if (!bIsClearPhoneData)
			{
				if ((grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim() != txt_pnum_prefix.Text.Trim()) && chk_dont_color_confirm.CheckState == CheckState.Unchecked)
				{
					cbo_comp_pnum_type.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_cntry_code.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_area_code.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_prefix.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_number.BackColor = NORMAL_TXT_BACKCOLOR;
				}
			}

			grd_company_phone.CurrentColumnIndex = lastColumn;

		}

		//UPGRADE_WARNING: (2074) ComboBox event cbo_comp_pnum_type.Change was upgraded to cbo_comp_pnum_type.TextChanged which has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2074
		private void cbo_comp_pnum_type_TextChanged(Object eventSender, EventArgs eventArgs)
		{
			if (isInitializingComponent)
			{
				return;
			}

			int lastColumn = 0;

			lastColumn = grd_company_phone.CurrentColumnIndex;
			grd_company_phone.CurrentColumnIndex = 0;

			if (!bIsClearPhoneData)
			{
				if ((grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim() != cbo_comp_pnum_type.Text.Trim()) && chk_dont_color_confirm.CheckState == CheckState.Unchecked)
				{
					cbo_comp_pnum_type.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_cntry_code.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_area_code.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_prefix.BackColor = NORMAL_TXT_BACKCOLOR;
					txt_pnum_number.BackColor = NORMAL_TXT_BACKCOLOR;
				}
			}

			grd_company_phone.CurrentColumnIndex = lastColumn;

		}

		private void cmd_company_phone_save_Click(Object eventSender, EventArgs eventArgs)
		{

			//******************************************************************************************
			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO SAVE
			// PHONE NUMBERS BACK TO THE COMPANY PHONE GRID.
			//******************************************************************************************

			bool bOnlyChangeIsHideFlag = false;
			string tmpPhoneNumberCheck = "";
			string tmpPhoneNumberCheck2 = "";
			string New_Phone = modGlobalVars.cEmptyString;
			string New_Phone_Type = modGlobalVars.cEmptyString;
			string Check_Phone = modGlobalVars.cEmptyString;
			string Query = modGlobalVars.cEmptyString;
			string tmp_message = "";
			int intPress = 0;
			string dtConfirmDate = modGlobalVars.cEmptyString;
			int nFractOwnID = 0;
			bool bSubscription = false;
			int lSubId = 0;
			int lParentId = 0;
			string strTemp = "";
			string strEMailBody = "";
			string strEMailTo = "";
			string strSubject = "";
			bool bResults = false;
			string strErrMsg = "";

			try
			{

				if (txt_pnum_cntry_code.Text.Trim() != modGlobalVars.cEmptyString)
				{
					New_Phone = $"{txt_pnum_cntry_code.Text.Trim()}{modGlobalVars.cHyphen}";
				}

				if (txt_pnum_area_code.Text.Trim() != modGlobalVars.cEmptyString)
				{
					New_Phone = $"{New_Phone}{txt_pnum_area_code.Text.Trim()}{modGlobalVars.cHyphen}";
				}

				if (txt_pnum_prefix.Text.Trim() != modGlobalVars.cEmptyString)
				{
					New_Phone = $"{New_Phone}{txt_pnum_prefix.Text.Trim()}{modGlobalVars.cHyphen}";
				}

				if (txt_pnum_number.Text.Trim() != modGlobalVars.cEmptyString)
				{
					New_Phone = $"{New_Phone}{txt_pnum_number.Text.Trim()}{modGlobalVars.cHyphen}";
				}

				if (New_Phone.Trim() != modGlobalVars.cEmptyString)
				{
					New_Phone = New_Phone.Substring(Math.Min(0, New_Phone.Length), Math.Min(Strings.Len(New_Phone) - 1, Math.Max(0, New_Phone.Length))); // strip off the last hyphen
				}

				if (txt_pnum_cntry_code.Text.Trim() == modGlobalVars.cEmptyString && txt_pnum_area_code.Text.Trim() == modGlobalVars.cEmptyString && txt_pnum_prefix.Text.Trim() == modGlobalVars.cEmptyString && txt_pnum_number.Text.Trim() == modGlobalVars.cEmptyString)
				{
					MessageBox.Show("Phone Number cannot be blank", "Company : Save Company Phone Number", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
					click_failed = true;
					return;
				}

				New_Phone_Type = cbo_comp_pnum_type.Text.Trim();

				Check_Phone = StringsHelper.Replace(New_Phone, modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary).Trim(); // clean out hyphens
				Check_Phone = StringsHelper.Replace(Check_Phone, " ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary).Trim(); // clean out spaces

				// make sure the phone number is not blank and that its all numeric
				if (Check_Phone == modGlobalVars.cEmptyString || !(Information.IsNumeric(Check_Phone)))
				{
					MessageBox.Show("Phone Number is not numbers, please fix before saving!", "Company : Save Company Phone Number", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
					click_failed = true;
					return;
				}


				if (save_phone_info.company_phone_add_flag)
				{
					save_phone_info.company_phone_original_full = modGlobalVars.cEmptyString;
					save_phone_info.company_phone_original_type = modGlobalVars.cEmptyString;
					save_phone_info.company_phone_original_row = 0;
					save_phone_info.company_phone_original_hide = -1;
				}

				if (cbo_comp_pnum_type.Text == "")
				{
					MessageBox.Show("Please Enter a Type for the Phone Number", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK); // added MSW 7/29/19
				}
				else
				{
					// DETERMINE IF THE PHONE NUMBER WAS REALLY CHANGED
					if (save_phone_info.company_phone_original_full.Trim() == New_Phone.Trim())
					{
						//save_phone_info.company_phone_new_number = Trim$(New_Phone)
						if (!modCompany.check_company_phone_for_changes_user_input(nReference_CompanyID, nReference_CompanyJID, txt_pnum_cntry_code.Text, txt_pnum_area_code.Text, txt_pnum_prefix.Text, txt_pnum_number.Text, save_phone_info))
						{

							// if the phone number did not change then check for "hide flag"
							if (save_phone_info.company_phone_original_hide == ((short) chk_comp_pnum_hide_customer.CheckState))
							{
								// if hide flag did not change then check to see if only the type changed
								if (save_phone_info.company_phone_original_type.Trim() == New_Phone_Type.Trim())
								{
									MessageBox.Show("No Changes to Save", "Company : Save Company Phone Number", MessageBoxButtons.OK, MessageBoxIcon.Information);
									click_failed = true;
									return;
								}
								else
								{
									// DETERMINE IF THERE ARE MATCHING CONTACT PHONE NUMBERS
									// MSW  - 2/28/2012 - CHANGED QUERY TO USE FULL INDEX
									// 10/07/2019 - By David D. Cruger; Removed INDEX HINT
									Query = "SELECT * FROM Phone_Numbers WITH (NOLOCK)  ";
									Query = $"{Query}WHERE pnum_comp_id = {nReference_CompanyID.ToString()}";
									Query = $"{Query} AND pnum_journ_id = {nReference_CompanyJID.ToString()}";
									Query = $"{Query} AND pnum_contact_id > 0 AND pnum_type = '{save_phone_info.company_phone_original_type}'";
									Query = $"{Query} AND pnum_number_full_search = '{StringsHelper.Replace(StringsHelper.Replace(save_phone_info.company_phone_original_full, modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary), " ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary)}'";

									if (modAdminCommon.Exist(Query))
									{

										tmp_message = $"HOMEBASE ACTION: Homebase has detected that the company phone number * TYPE * is being updated,{Environment.NewLine}this TYPE also exists on one or more company contacts. {Environment.NewLine}{Environment.NewLine}";
										tmp_message = $"{tmp_message}Would you also like to update this TYPE for ALL contacts for this company?";

										if (MessageBox.Show(tmp_message, "Company : Save Company Phone Number(s)", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
										{
											// STORE THE ORIGINAL PHONE NUMBER and TYPE
											save_phone_info.contact_phone_toEdit = save_phone_info.company_phone_original_full;
											save_phone_info.contact_phone_typeToEdit = save_phone_info.company_phone_original_type;

											// STORE THE NEW PHONE NUMBER and TYPE
											save_phone_info.contact_phone_new = New_Phone;
											save_phone_info.contact_phone_typeNew = New_Phone_Type;

										} // intPress = 6

									} //Exist(Query)

								} //Trim$(save_phone_info.company_phone_original_type) = Trim$(New_Phone_Type)
							}
							else
							{
								save_phone_info.company_only_change_is_hide_flag = true;
								// DETERMINE IF THERE ARE MATCHING CONTACT PHONE NUMBERS
								// MSW  - 2/28/2012 - CHANGED QUERY TO USE FULL INDEX
								// 10/07/2019 - By David D. Cruger; Removed INDEX HINT
								Query = "SELECT * FROM Phone_Numbers WITH (NOLOCK)  ";
								Query = $"{Query}WHERE pnum_comp_id = {nReference_CompanyID.ToString()}";
								Query = $"{Query} AND pnum_journ_id = {nReference_CompanyJID.ToString()}";
								Query = $"{Query} AND pnum_contact_id > 0 AND pnum_type = '{save_phone_info.company_phone_original_type}'";
								Query = $"{Query} AND pnum_number_full_search = '{StringsHelper.Replace(StringsHelper.Replace(save_phone_info.company_phone_original_full, modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary), " ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary)}'";

								if (modAdminCommon.Exist(Query))
								{

									tmp_message = $"HOMEBASE ACTION: Homebase has detected that the company phone flag *HIDE FROM CUSTOMER* is being updated,{Environment.NewLine}this flag also exists on one or more company contacts. {Environment.NewLine}{Environment.NewLine}";
									tmp_message = $"{tmp_message}Would you also like to update this flag for ALL contacts for this company?";

									if (MessageBox.Show(tmp_message, "Company : Save Company Phone Number", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
									{
										// STORE THE ORIGINAL PHONE NUMBER and TYPE
										save_phone_info.contact_phone_toEdit = save_phone_info.company_phone_original_full;
										save_phone_info.contact_phone_typeToEdit = save_phone_info.company_phone_original_type;

										// STORE THE NEW PHONE NUMBER and TYPE
										save_phone_info.contact_phone_new = New_Phone;
										save_phone_info.contact_phone_typeNew = New_Phone_Type;

									} // intPress = 6

								} //Exist(Query)
							} // phone_original_Hide = chk_comp_pnum_hide_customer.Value
						}
						else
						{
							// DETERMINE IF THERE ARE MATCHING CONTACT PHONE NUMBERS
							// MSW  - 2/28/2012 - CHANGED QUERY TO USE FULL INDEX
							// 10/07/2019 - By David D. Cruger; Removed INDEX HINT
							Query = "SELECT * FROM Phone_Numbers WITH (NOLOCK) ";
							Query = $"{Query} WHERE pnum_comp_id = {nReference_CompanyID.ToString()}";
							Query = $"{Query} AND pnum_journ_id = {nReference_CompanyJID.ToString()}";
							Query = $"{Query} AND pnum_contact_id > 0 AND pnum_type = '{save_phone_info.company_phone_original_type}'";
							Query = $"{Query} AND pnum_number_full_search = '{StringsHelper.Replace(StringsHelper.Replace(save_phone_info.company_phone_original_full, modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary), " ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary)}'";

							if (modAdminCommon.Exist(Query))
							{

								tmp_message = $"HOMEBASE ACTION: Homebase has detected that the company phone number being updated also exists on one or more company contacts. {Environment.NewLine}{Environment.NewLine}";
								tmp_message = $"{tmp_message}Would you also like to update this phone number for ALL contacts for this company?";

								if (MessageBox.Show(tmp_message, "Company : Save Company Phone Number", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
								{
									// STORE THE ORIGINAL PHONE NUMBER and TYPE
									save_phone_info.contact_phone_toEdit = save_phone_info.company_phone_original_full;
									save_phone_info.contact_phone_typeToEdit = save_phone_info.company_phone_original_type;

									// STORE THE NEW PHONE NUMBER and TYPE
									save_phone_info.contact_phone_new = New_Phone;
									save_phone_info.contact_phone_typeNew = New_Phone_Type;

								} // intPress = 6

							} //Exist(Query)
						} // Not check_company_phone_for_changes_user_input
					}
					else
					{
						// DETERMINE IF THERE ARE MATCHING CONTACT PHONE NUMBERS
						// MSW  - 2/28/2012 - CHANGED QUERY TO USE FULL INDEX
						// 10/07/2019 - By David D. Cruger; Removed INDEX HINT
						Query = "SELECT * FROM Phone_Numbers WITH (NOLOCK) ";
						Query = $"{Query} WHERE pnum_comp_id = {nReference_CompanyID.ToString()}";
						Query = $"{Query} AND pnum_journ_id = {nReference_CompanyJID.ToString()}";
						Query = $"{Query} AND pnum_contact_id > 0 AND pnum_type = '{save_phone_info.company_phone_original_type}'";
						Query = $"{Query} AND pnum_number_full_search = '{StringsHelper.Replace(StringsHelper.Replace(save_phone_info.company_phone_original_full, modGlobalVars.cHyphen, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary), " ", modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary)}'";

						if (modAdminCommon.Exist(Query))
						{

							tmp_message = $"HOMEBASE ACTION: Homebase has detected that the company phone number being updated also exists on one or more company contacts. {Environment.NewLine}{Environment.NewLine}";
							tmp_message = $"{tmp_message}Would you also like to update this phone number for ALL contacts for this company?";

							if (MessageBox.Show(tmp_message, "Company : Save Company Phone Number", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == System.Windows.Forms.DialogResult.Yes)
							{
								// STORE THE ORIGINAL PHONE NUMBER and TYPE
								save_phone_info.contact_phone_toEdit = save_phone_info.company_phone_original_full;
								save_phone_info.contact_phone_typeToEdit = save_phone_info.company_phone_original_type;

								// STORE THE NEW PHONE NUMBER and TYPE
								save_phone_info.contact_phone_new = New_Phone;
								save_phone_info.contact_phone_typeNew = New_Phone_Type;

							} // intPress = 6

						} //Exist(Query)

					} // Trim(phone_original) = Trim(New_Phone)


					if (save_phone_info.company_phone_add_flag)
					{ // add new number

						if (grd_company_phone.RowsCount >= 2)
						{ // if we have more than two rows then check for duplicate phone numbers

							tmpPhoneNumberCheck2 = $"{cbo_comp_pnum_type.Text.Trim()}{txt_pnum_cntry_code.Text.Trim()}" +
							                       $"{txt_pnum_area_code.Text.Trim()}{txt_pnum_prefix.Text.Trim()}" +
							                       $"{txt_pnum_number.Text.Trim()}";

							int tempForEndVar = grd_company_phone.RowsCount - 1;
							for (int i = 1; i <= tempForEndVar; i++)
							{

								tmpPhoneNumberCheck = $"{Convert.ToString(grd_company_phone[i, 0].Value).Trim()}{Convert.ToString(grd_company_phone[i, 1].Value).Trim()}" +
								                      $"{Convert.ToString(grd_company_phone[i, 2].Value).Trim()}{Convert.ToString(grd_company_phone[i, 3].Value).Trim()}" +
								                      $"{Convert.ToString(grd_company_phone[i, 4].Value).Trim()}";

								if (tmpPhoneNumberCheck.Trim() == tmpPhoneNumberCheck2.Trim())
								{
									MessageBox.Show("Duplicate Phone Number is not allowed", "Company : Save Company Phone Number", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
									click_failed = true;
									return;
								}
							}

						}

					}
					else
					{
						// update old number

						if (grd_company_phone.RowsCount >= 2)
						{ // if we have more than two rows then check for duplicate phone numbers

							tmpPhoneNumberCheck2 = $"{cbo_comp_pnum_type.Text.Trim()}{txt_pnum_cntry_code.Text.Trim()}" +
							                       $"{txt_pnum_area_code.Text.Trim()}{txt_pnum_prefix.Text.Trim()}" +
							                       $"{txt_pnum_number.Text.Trim()}";

							int tempForEndVar2 = grd_company_phone.RowsCount - 1;
							for (int i = 1; i <= tempForEndVar2; i++)
							{

								tmpPhoneNumberCheck = $"{Convert.ToString(grd_company_phone[i, 0].Value).Trim()}{Convert.ToString(grd_company_phone[i, 1].Value).Trim()}" +
								                      $"{Convert.ToString(grd_company_phone[i, 2].Value).Trim()}{Convert.ToString(grd_company_phone[i, 3].Value).Trim()}" +
								                      $"{Convert.ToString(grd_company_phone[i, 4].Value).Trim()}";

								if (tmpPhoneNumberCheck.Trim() == tmpPhoneNumberCheck2.Trim() && i != grd_company_phone.CurrentRowIndex)
								{
									MessageBox.Show("Duplicate Phone Number is not allowed", "Company : Save Company Phone Number", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
									click_failed = true;
									return;
								}
							}
						}

					} // if add or update

					if (save_phone_info.company_phone_add_flag)
					{

						save_phone_info.company_phone_new_number = New_Phone;

						if (grd_company_phone.RowsCount == 0)
						{

							grd_company_phone.ColumnsCount = 7;
							grd_company_phone.RowsCount = 2;

							grd_company_phone.CurrentRowIndex = 0;
							grd_company_phone.CurrentColumnIndex = 0;
							grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 60);
							grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Type";

							grd_company_phone.CurrentColumnIndex = 1;
							grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 47);
							grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Country";

							grd_company_phone.CurrentColumnIndex = 2;
							grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 47);
							grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Area";

							grd_company_phone.CurrentColumnIndex = 3;
							grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 47);
							grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Prefix";

							grd_company_phone.CurrentColumnIndex = 4;
							grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 47);
							grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Phone";

							grd_company_phone.CurrentColumnIndex = 5;
							grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 30);
							grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Hide";

							grd_company_phone.CurrentColumnIndex = 6;
							grd_company_phone.SetColumnWidth(grd_company_phone.CurrentColumnIndex, 67);
							grd_company_phone.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Confirmed";

						} // grd_company_phone.Rows = 0

						grd_company_phone.RowsCount++;
						grd_company_phone.CurrentRowIndex = grd_company_phone.RowsCount - 1;

						grd_company_phone.CurrentColumnIndex = 0;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = cbo_comp_pnum_type.Text.Trim();
						grd_company_phone.CurrentColumnIndex = 1;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = txt_pnum_cntry_code.Text.Trim();
						grd_company_phone.CurrentColumnIndex = 2;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = txt_pnum_area_code.Text.Trim();
						grd_company_phone.CurrentColumnIndex = 3;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = txt_pnum_prefix.Text.Trim();
						grd_company_phone.CurrentColumnIndex = 4;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = txt_pnum_number.Text.Trim();
						grd_company_phone.CurrentColumnIndex = 5;

						if (chk_comp_pnum_hide_customer.CheckState == CheckState.Checked)
						{
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Y";
						}
						else
						{
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "N";
						}

						grd_company_phone.CurrentColumnIndex = 6;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = DateTime.Now.ToString("d").Trim();
						save_phone_info.company_phone_confirmdate = grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim();

					}
					else
					{

						grd_company_phone.CurrentRowIndex = save_phone_info.company_phone_original_row;

						grd_company_phone.CurrentColumnIndex = 0;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = cbo_comp_pnum_type.Text.Trim();
						grd_company_phone.CurrentColumnIndex = 1;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = txt_pnum_cntry_code.Text.Trim();
						grd_company_phone.CurrentColumnIndex = 2;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = txt_pnum_area_code.Text.Trim();
						grd_company_phone.CurrentColumnIndex = 3;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = txt_pnum_prefix.Text.Trim();
						grd_company_phone.CurrentColumnIndex = 4;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = txt_pnum_number.Text.Trim();
						grd_company_phone.CurrentColumnIndex = 5;

						if (chk_comp_pnum_hide_customer.CheckState == CheckState.Checked)
						{
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "Y";
						}
						else
						{
							grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = "N";
						}

						//Grab comformation date if there is one
						grd_company_phone.CurrentColumnIndex = 6;

						if (Information.IsDate(grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString()))
						{
							save_phone_info.company_phone_confirmdate = grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim();
						}

					}

					if (grd_company_phone.CurrentRowIndex == 1)
					{
						save_phone_info.company_phone1_changed_flag = true;
					}

					if (grd_company_phone.CurrentRowIndex == 2)
					{
						save_phone_info.company_phone2_changed_flag = true;
					}

					modAdminCommon.ADO_Transaction("BeginTrans");

					if (txt_comp_fractowr_id.Text.Trim() != modGlobalVars.cEmptyString)
					{
						if (Convert.ToInt32(Conversion.Val(txt_comp_fractowr_id.Text)) > 0)
						{
							nFractOwnID = Convert.ToInt32(Conversion.Val(txt_comp_fractowr_id.Text));
						}
					}

					save_phone_info.company_phone_new_number = New_Phone;

					if (modCompany.save_company_phone_number(nReference_CompanyID, nReference_CompanyJID, chk_dont_color_confirm.CheckState, nFractOwnID, cbo_comp_pnum_type, txt_pnum_cntry_code, txt_pnum_area_code, txt_pnum_prefix, txt_pnum_number, chk_comp_pnum_hide_customer, grd_company_phone, ref arrTransmitFields, ref arrVerifyFields, save_phone_info, Convert.ToString(cmd_company_phone_confirm.Tag)))
					{

						cmd_company_phone_save.Text = "&Update Phone List";

						Query = "UPDATE Company SET comp_action_date = NULL";
						Query = $"{Query} WHERE comp_id = {nReference_CompanyID.ToString()}";
						Query = $"{Query} AND comp_journ_id = {nReference_CompanyJID.ToString()}";

						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery();

						modAdminCommon.ADO_Transaction("CommitTrans");

						//------------------------------------------------
						//------------------------------------------------
						Application.DoEvents();
						if (nReference_CompanyJID == 0)
						{

							bSubscription = modCommon.Does_Company_Have_An_Active_Subscription(nReference_CompanyID, ref lSubId, ref lParentId);

							if (bSubscription)
							{

								if (save_phone_info.company_phone_original_full != New_Phone || save_phone_info.company_phone_original_type != New_Phone_Type || (save_phone_info.company_phone_original_hide != ((short) chk_comp_pnum_hide_customer.CheckState)) == (CheckState.Checked != CheckState.Unchecked))
								{

									strEMailTo = modCommon.DLookUp("aconfig_email_company_contact_chg", "Application_Configuration WITH(NOLOCK)").Trim();

									strTemp = StringsHelper.Replace(cmd_company_phone_save.Text, "&", "", 1, -1, CompareMethod.Binary);
									if ((strTemp.IndexOf("Update") + 1) == 0)
									{
										strSubject = "Homebase Company Phone Added for ";
									}
									else
									{
										strSubject = "Homebase Company Phone Updated for ";
									}

									strSubject = $"{strSubject}{txt_comp_name.Text} [{nReference_CompanyID.ToString()}] ";

									strEMailBody = $"Company: {txt_comp_name.Text} [{nReference_CompanyID.ToString()}]{Environment.NewLine}{Environment.NewLine}";

									if ((strTemp.IndexOf("Update") + 1) == 0)
									{ // Added
										strEMailBody = $"{strEMailBody}Added Phone Nbr: {New_Phone_Type} - {New_Phone} - Hide: {modCommon.ReturnCheckBoxYesNo(chk_comp_pnum_hide_customer)}{Environment.NewLine}";
									}
									else
									{
										//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
										strEMailBody = $"{strEMailBody}Original Phone Nbr: {save_phone_info.company_phone_original_type} - {save_phone_info.company_phone_original_full} - Hide: {modCommon.ReturnCheckBoxValueYesNo((CheckState) save_phone_info.company_phone_original_hide)}{Environment.NewLine}{Environment.NewLine}";
										strEMailBody = $"{strEMailBody}Updated Phone Nbr: {New_Phone_Type} - {New_Phone} - Hide: {modCommon.ReturnCheckBoxYesNo(chk_comp_pnum_hide_customer)}{Environment.NewLine}";
									}

									bResults = modEmail.Simple_Insert_EMail_Queue_Record(strEMailTo, "", "", strSubject, strEMailBody, "", "N", "Open", "Homebase Company Phone Change", "service@jetnet.com", nReference_CompanyID, 0);

									if (bResults)
									{
										modEmail.Send_All_EMail_In_Queue(ref strErrMsg, nReference_CompanyID);
									}

									// 05/15/2017 - By David D. Cruger; Added Message Queue
									modCommon.Enter_Customer_Program_Message_Note("", strEMailTo, $"{strSubject}{Environment.NewLine}{strEMailBody}", lSubId, lParentId, nReference_CompanyID, 0);

								} // If save_phone_info.company_phone_original_full <> New_Phone Or save_phone_info.company_phone_original_type <> New_Phone_Type Or save_phone_info.company_phone_original_hide <> chk_comp_pnum_hide_customer.Value = vbChecked Then

							} // If bSubscription = True Then

						} // If nReference_CompanyJID = 0 Then

						fill_phone_company_grid();

						if (pnl_company_contact_details.Visible)
						{
							pnl_company_contact_details.Visible = false;
						}

					}
					else
					{
						MessageBox.Show("Error Saving Company Phone Number!", "Company : Save Company Phone Number", MessageBoxButtons.OK, MessageBoxIcon.Error);
						modAdminCommon.ADO_Transaction("RollbackTrans");
					}

					cmd_company_save.Visible = true;
					frame_comp_phone.Visible = false;

					grd_company_phone.Enabled = true;
					grd_company_phone.Redraw = true;

					clear_phone_controls();
					clear_save_phone_info(ref save_phone_info);

				}


				search_off();

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_phone_save_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		private void cmd_company_phone_save_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_company_phone_save_Click(cmd_company_phone_save, new EventArgs());
			}

		}

		private void cmd_company_phone_cancel_Click(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				clear_phone_controls();

				frame_comp_phone.Visible = false;
				cmd_company_save.Visible = true;

				clear_save_phone_info(ref save_phone_info);

				cmd_company_phone_save.Text = "&Update Phone List";
				grd_company_phone.Enabled = true;
				grd_company_phone.Redraw = true;

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_phone_cancel_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		private void cmd_company_phone_cancel_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_company_phone_cancel_Click(cmd_company_phone_cancel, new EventArgs());
			}

		}

		private void cmd_company_phone_confirm_MouseUp(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			if (mvHasFocus)
			{
				mvHasFocus = false;
				cmd_company_phone_confirm_Click(cmd_company_phone_confirm, new EventArgs());
			}

		}

		private void cmd_company_phone_confirm_Click(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				string New_Phone = "";
				New_Phone = modGlobalVars.cEmptyString;
				string New_Phone_Type = "";
				New_Phone_Type = modGlobalVars.cEmptyString;

				// added so its not clicked twice - 5/15/ - msw
				cmd_company_phone_confirm.Visible = false;


				click_failed = false;


				// going to be - if it has any visible, non numeric fields, then dont go in
				if (modCommon.Is_Phone_Number_Field_Visible_Non_Numeric($"{txt_pnum_cntry_code.Text}{txt_pnum_area_code.Text}{txt_pnum_prefix.Text}{txt_pnum_number.Text}"))
				{

					MessageBox.Show("Phone Number is not numeric, please fix before saving!", "Company : Save Company Phone Number", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

				}
				else
				{

					// replace all of the characters, if it makes it past the numeric check - msw - 5/23/23
					txt_pnum_cntry_code.Text = modCommon.RemoveNonNumbers(txt_pnum_cntry_code.Text).Trim();
					txt_pnum_area_code.Text = modCommon.RemoveNonNumbers(txt_pnum_area_code.Text).Trim();
					txt_pnum_prefix.Text = modCommon.RemoveNonNumbers(txt_pnum_prefix.Text).Trim();
					txt_pnum_number.Text = modCommon.RemoveNonNumbers(txt_pnum_number.Text).Trim();

					// MSW - 5/12/23 - PER TASK - 5/12/23 - ONE BUTTON WILL DO BOTH CONFIRM AND UPDATE
					// STOLE THESE VARIABLES FROM THE PREVIOUS UPDATE FUNCTION TO COMPARE AND SEE IF ITEMS HAVE CHANGED
					//--------------------------------------------------------------------------
					New_Phone_Type = cbo_comp_pnum_type.Text.Trim();
					if (txt_pnum_cntry_code.Text.Trim() != modGlobalVars.cEmptyString)
					{
						New_Phone = $"{txt_pnum_cntry_code.Text.Trim()}{modGlobalVars.cHyphen}";
					}

					if (txt_pnum_area_code.Text.Trim() != modGlobalVars.cEmptyString)
					{
						New_Phone = $"{New_Phone}{txt_pnum_area_code.Text.Trim()}{modGlobalVars.cHyphen}";
					}

					if (txt_pnum_prefix.Text.Trim() != modGlobalVars.cEmptyString)
					{
						New_Phone = $"{New_Phone}{txt_pnum_prefix.Text.Trim()}{modGlobalVars.cHyphen}";
					}

					if (txt_pnum_number.Text.Trim() != modGlobalVars.cEmptyString)
					{
						New_Phone = $"{New_Phone}{txt_pnum_number.Text.Trim()}{modGlobalVars.cHyphen}";
					}

					if (New_Phone.Trim() != modGlobalVars.cEmptyString)
					{
						New_Phone = New_Phone.Substring(Math.Min(0, New_Phone.Length), Math.Min(Strings.Len(New_Phone) - 1, Math.Max(0, New_Phone.Length))); // strip off the last hyphen
					}



					if (save_phone_info.company_phone_original_full.Trim() == New_Phone.Trim())
					{
						//save_phone_info.company_phone_new_number = Trim$(New_Phone)

						// if the phone number did not change then check for "hide flag"
						if (save_phone_info.company_phone_original_hide == ((short) chk_comp_pnum_hide_customer.CheckState))
						{
							// if hide flag did not change then check to see if only the type changed
							if (save_phone_info.company_phone_original_type.Trim() == New_Phone_Type.Trim())
							{
								//Call MsgBox("No Changes to Save", vbOKOnly + vbInformation, "Company : Save Company Phone Number")
								// if there are no changes. then we are just confirming - otherwise just call the update
								confirm_company_phone_number();
							}
							else
							{
								cmd_company_phone_save_Click(cmd_company_phone_save, new EventArgs());
							}
						}
						else
						{
							cmd_company_phone_save_Click(cmd_company_phone_save, new EventArgs());
						}
					}
					else
					{
						cmd_company_phone_save_Click(cmd_company_phone_save, new EventArgs());
					}
					//--------------------------------------------------------------------------

					// added MSW - 5/22/23
					if (!click_failed)
					{

						frame_comp_phone.Visible = false;

						grd_company_phone.Enabled = true;
						grd_company_phone.Redraw = true;

						if (mvHasFocus)
						{
							mvHasFocus = false;
						}

						check_re_load_company_journal();
					}


				}

				// added in MSW so its not double clicked- 5/15
				cmd_company_phone_confirm.Visible = true;
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_phone_confirm_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				search_off();

				return;
			}


		}

		private void grd_company_phone_Click(Object eventSender, EventArgs eventArgs) => mnueditremovecompanyphone.Enabled = true;


		private void grd_company_phone_DoubleClick(Object eventSender, EventArgs eventArgs)
		{
			string ConfirmColor = "";
			int grdRow = 0;
			try
			{

				mnueditremovecompanyphone.Enabled = true;

				if (grd_company_phone.CurrentRowIndex > 0)
				{

					cbo_comp_pnum_type.SelectedIndex = -1;
					txt_pnum_cntry_code.Text = "";
					txt_pnum_area_code.Text = "";
					txt_pnum_prefix.Text = "";
					txt_pnum_number.Text = "";

					save_phone_info.company_phone_original_row = 0;
					save_phone_info.company_phone_original_full = modGlobalVars.cEmptyString;
					save_phone_info.company_phone_original_type = modGlobalVars.cEmptyString;
					save_phone_info.company_phone_original_hide = -1;

					grdRow = grd_company_phone.CurrentRowIndex;

					save_phone_info.company_phone_original_row = (short) grd_company_phone.CurrentRowIndex;
					save_phone_info.company_phone_original_type = Convert.ToString(grd_company_phone[grdRow, 0].Value).Trim();

					for (int K = 1; K <= 4; K++)
					{
						if (Convert.ToString(grd_company_phone[grdRow, K].Value).Trim() != modGlobalVars.cEmptyString)
						{
							save_phone_info.company_phone_original_full = $"{save_phone_info.company_phone_original_full}{Convert.ToString(grd_company_phone[grdRow, K].Value).Trim()}{((K == 4) ? modGlobalVars.cEmptyString : modGlobalVars.cHyphen)}";
						}
					}

					if (save_phone_info.company_phone_original_full.Trim() != modGlobalVars.cEmptyString)
					{
						save_phone_info.company_phone_original_full = save_phone_info.company_phone_original_full.Trim();
					}

					if (Convert.ToString(grd_company_phone[grdRow, 5].Value).Trim().ToUpper() == "Y" || Convert.ToString(grd_company_phone[grdRow, 5].Value).Trim().ToUpper() == "YES")
					{
						chk_comp_pnum_hide_customer.CheckState = CheckState.Checked;
					}
					else
					{
						chk_comp_pnum_hide_customer.CheckState = CheckState.Unchecked;
					}

					save_phone_info.company_phone_original_hide = (short) chk_comp_pnum_hide_customer.CheckState;

					grd_company_phone.CurrentColumnIndex = 6;
					if (!Information.IsDate(grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString()))
					{
						ConfirmColor = CONFIRM_BACKCOLOR.ToString();
					}
					else if (((int) DateAndTime.DateDiff("d", DateTime.Parse(grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString()), DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1)) > modAdminCommon.gbl_ColorConfirmDays && nReference_CompanyJID == 0)
					{ 
						ConfirmColor = CONFIRM_BACKCOLOR.ToString();
					}
					else
					{
						ConfirmColor = ColorTranslator.ToOle(NORMAL_TXT_BACKCOLOR).ToString();
					}

					grd_company_phone.CurrentColumnIndex = 0;
					cbo_comp_pnum_type.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));

					cbo_comp_pnum_type.SelectedIndex = -1;
					int tempForEndVar2 = cbo_comp_pnum_type.Items.Count - 1;
					for (int K = 0; K <= tempForEndVar2; K++)
					{
						if (grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim() == cbo_comp_pnum_type.GetListItem(K).Trim())
						{
							cbo_comp_pnum_type.SelectedIndex = K;
							break;
						}
					}

					grd_company_phone.CurrentColumnIndex = 1;
					txt_pnum_cntry_code.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));
					if (grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
					{
						txt_pnum_cntry_code.Text = grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim();
					}

					grd_company_phone.CurrentColumnIndex = 2;
					txt_pnum_area_code.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));
					if (grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
					{
						txt_pnum_area_code.Text = grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim();
					}

					grd_company_phone.CurrentColumnIndex = 3;
					txt_pnum_prefix.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));
					if (grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
					{
						txt_pnum_prefix.Text = grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim();
					}

					grd_company_phone.CurrentColumnIndex = 4;
					txt_pnum_number.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(ConfirmColor)));
					if (grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
					{
						txt_pnum_number.Text = grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim();
					}

					grd_company_phone.CurrentColumnIndex = 5;
					if (grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim().ToUpper() == "Y" || grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString().Trim().ToUpper() == "YES")
					{
						chk_comp_pnum_hide_customer.CheckState = CheckState.Checked;
					}
					else
					{
						chk_comp_pnum_hide_customer.CheckState = CheckState.Unchecked;
					}



					grd_company_phone.CurrentColumnIndex = 7;
					cmd_company_phone_confirm.Tag = grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].FormattedValue.ToString();

					grd_company_phone.CurrentColumnIndex = 0;
					grd_company_phone.Enabled = false;

					frame_comp_phone.Visible = true;
					frame_comp_phone.BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes

				} // If grd_company_phone.Row > 0 Then
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"grd_company_phone_DblClick_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		public void mnueditaddcompanyphone_Click(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				frame_comp_phone.Visible = true;
				frame_comp_phone.BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes

				cmd_company_save.Visible = false;

				clear_phone_controls();
				clear_save_phone_info(ref save_phone_info);

				save_phone_info.company_phone_add_flag = true;

				cmd_company_phone_save.Text = "&Add to Phone List";
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnueditaddcompanyphone ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				return;
			}

		}

		public void mnueditremovecompanyphone_Click(Object eventSender, EventArgs eventArgs)
		{

			string Query = "";
			int nFractOwnID = 0;
			bool bSubscription = false;
			int lSubId = 0;
			int lParentId = 0;
			bool bResults = false;
			string strErrMsg = "";
			string strEMailTo = "";
			string strEMailSubject = "";
			string strEMailBody = "";

			try
			{

				clear_save_phone_info(ref save_phone_info);

				if (grd_company_phone.CurrentRowIndex == 1)
				{
					save_phone_info.company_phone1_changed_flag = true;
				}

				if (grd_company_phone.CurrentRowIndex == 2)
				{
					save_phone_info.company_phone2_changed_flag = true;
				}

				if (txt_comp_fractowr_id.Text.Trim() != modGlobalVars.cEmptyString)
				{
					if (Convert.ToInt32(Conversion.Val(txt_comp_fractowr_id.Text)) > 0)
					{
						nFractOwnID = Convert.ToInt32(Conversion.Val(txt_comp_fractowr_id.Text));
					}
				}

				modCompany.delete_company_phone_number(nReference_CompanyID, nReference_CompanyJID, grd_company_phone, ref save_phone_info);
				Application.DoEvents();
				Application.DoEvents();
				if (save_phone_info.company_phone_delete_flag)
				{
					Application.DoEvents();
					Application.DoEvents();
					modAdminCommon.ADO_Transaction("BeginTrans");
					Application.DoEvents();
					Application.DoEvents();
					if (modCompany.save_company_phone_number(nReference_CompanyID, nReference_CompanyJID, chk_dont_color_confirm.CheckState, nFractOwnID, cbo_comp_pnum_type, txt_pnum_cntry_code, txt_pnum_area_code, txt_pnum_prefix, txt_pnum_number, chk_comp_pnum_hide_customer, grd_company_phone, ref arrTransmitFields, ref arrVerifyFields, save_phone_info, "0"))
					{

						cmd_company_phone_save.Text = "&Update Phone List";

						Query = "UPDATE Company SET comp_action_date = NULL";
						Query = $"{Query} WHERE comp_id = {nReference_CompanyID.ToString()}";
						Query = $"{Query} AND comp_journ_id = {nReference_CompanyJID.ToString()}";

						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery();

						modAdminCommon.ADO_Transaction("CommitTrans");
						Application.DoEvents();
						Application.DoEvents();
						fill_phone_company_grid();
						Application.DoEvents();
						Application.DoEvents();
					}
					else
					{
						MessageBox.Show("Error Deleting Company Phone Number!", "Company : Delete Company Phone Number", MessageBoxButtons.OK, MessageBoxIcon.Error);
						modAdminCommon.ADO_Transaction("RollbackTrans");
					}

				}
				else
				{

				} // If save_phone_info.company_phone_delete_flag Then

				frame_comp_phone.Visible = false;
				grd_company_phone.Redraw = true;

				clear_phone_controls();
				clear_save_phone_info(ref save_phone_info);

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"mnueditaddremovecompanyphone ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();

				return;
			}

		}

		public void confirm_company_phone_number()
		{

			// Function used to confirm a company phone number

			string Query = "";
			string strExists = "";
			string Full_Phone = modGlobalVars.cEmptyString;
			string Full_Phone_Type = modGlobalVars.cEmptyString;
			string strPhoneSearch = "";
			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			int[] comp_id_array = new int[101];
			int[] contact_id_array = new int[101];
			int comp_count = 0;

			try
			{


				if (chk_dont_color_confirm.CheckState == CheckState.Unchecked)
				{

					if (cbo_comp_pnum_type.Text.Trim() != modGlobalVars.cEmptyString)
					{
						Full_Phone_Type = cbo_comp_pnum_type.Text.Trim();
					}

					if (txt_pnum_cntry_code.Text.Trim() != modGlobalVars.cEmptyString)
					{
						Full_Phone = $"{Full_Phone}{txt_pnum_cntry_code.Text.Trim()}{modGlobalVars.cHyphen}";
					}

					if (txt_pnum_area_code.Text.Trim() != modGlobalVars.cEmptyString)
					{
						Full_Phone = $"{Full_Phone}{txt_pnum_area_code.Text.Trim()}{modGlobalVars.cHyphen}";
					}

					if (txt_pnum_prefix.Text.Trim() != modGlobalVars.cEmptyString)
					{
						Full_Phone = $"{Full_Phone}{txt_pnum_prefix.Text.Trim()}{modGlobalVars.cHyphen}";
					}

					if (txt_pnum_number.Text.Trim() != modGlobalVars.cEmptyString)
					{
						Full_Phone = $"{Full_Phone}{txt_pnum_number.Text.Trim()}{modGlobalVars.cHyphen}";
					}

					if (Full_Phone.Trim() != modGlobalVars.cEmptyString)
					{
						Full_Phone = Full_Phone.Substring(Math.Min(0, Full_Phone.Length), Math.Min(Strings.Len(Full_Phone) - 1, Math.Max(0, Full_Phone.Length))); // strip off the last hyphen
					}

					strPhoneSearch = modCommon.LeaveOnlyAlphaAndNumeric(Full_Phone);

					if (Full_Phone.Trim() != modGlobalVars.cEmptyString)
					{ //aey 5/27/04

						// ADDED MSW 7/16/15, if there exists another company phone number for that company number but its not that company, then update it too ?
						// make sure it finds if its a contact for that company as well

						strExists = "SELECT pnum_comp_id, pnum_contact_id FROM Phone_Numbers WITH (NOLOCK) ";
						strExists = $"{strExists} left outer join Contact with (NOLOCK) on contact_id = pnum_contact_id and contact_journ_id = 0 ";
						strExists = $"{strExists}WHERE (pnum_number_full_search = '{strPhoneSearch}') ";
						strExists = $"{strExists}AND (pnum_journ_id = 0) ";
						strExists = $"{strExists}AND (";
						strExists = $"{strExists}        (pnum_comp_id = {nReference_CompanyID.ToString()} AND pnum_contact_id > 0) ";
						strExists = $"{strExists}     OR (pnum_comp_id <> {nReference_CompanyID.ToString()}) ";
						strExists = $"{strExists}    ) ";
						strExists = $"{strExists} and (contact_active_flag = 'Y' or contact_active_flag is null) ";


						Query = $"UPDATE Phone_Numbers SET pnum_confirm_date = '{DateTime.Now.ToString()}' ";

						// CHANGED TO DO IT BY ID - MSW - 5/25/23, incldue by id as long as its there
						if (Convert.ToString(cmd_company_phone_confirm.Tag) != "" && Convert.ToString(cmd_company_phone_confirm.Tag) != "0")
						{
							Query = $"{Query}WHERE  pnum_id = '{Convert.ToString(cmd_company_phone_confirm.Tag)}'  ";
						}
						else
						{
							Query = $"{Query}WHERE (pnum_number_full_search = '{strPhoneSearch}') ";
						}

						Query = $"{Query}AND (pnum_journ_id = 0) ";


						if (modAdminCommon.Exist(strExists))
						{
							if (MessageBox.Show($"Do You want to Confirm All Other Phone Numbers Matching {Full_Phone}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.No)
							{
								Query = $"{Query}AND (pnum_comp_id = {nReference_CompanyID.ToString()}) ";
								Query = $"{Query}AND (pnum_contact_id = 0) ";
								Query = $"{Query}AND (pnum_type = '{Full_Phone_Type.Trim()}') ";
							}
							else
							{
								// if you want it to match them all


								Query = $"UPDATE Phone_Numbers SET pnum_confirm_date = '{DateTime.Now.ToString()}' ";
								Query = $"{Query} From Phone_Numbers";
								Query = $"{Query} left outer join Contact with (NOLOCK) on contact_id = pnum_contact_id and contact_journ_id = 0";
								Query = $"{Query} WHERE (pnum_number_full_search = '{strPhoneSearch}') ";
								Query = $"{Query} AND (pnum_journ_id = 0) ";
								Query = $"{Query} AND (        (pnum_comp_id = {nReference_CompanyID.ToString()} AND pnum_contact_id > 0)";
								Query = $"{Query} OR (pnum_comp_id <> {nReference_CompanyID.ToString()})   ";
								Query = $"{Query} OR (pnum_comp_id = {nReference_CompanyID.ToString()} AND pnum_contact_id = 0 and pnum_type = '{Full_Phone_Type.Trim()}')     )";
								Query = $"{Query} and (contact_active_flag = 'Y' or contact_active_flag is null)";


								comp_count = 0;
								rstRec1.Open(strExists, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockBatchOptimistic);

								if (!rstRec1.EOF && !rstRec1.EOF)
								{
									do 
									{

										comp_id_array[comp_count] = Convert.ToInt32(rstRec1["pnum_comp_id"]);

										//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
										if (!Convert.IsDBNull(rstRec1["pnum_contact_id"]))
										{
											contact_id_array[comp_count] = Convert.ToInt32(rstRec1["pnum_contact_id"]);
										}
										else
										{
											contact_id_array[comp_count] = 0;
										}

										comp_count++;

										rstRec1.MoveNext();

									}
									while(!rstRec1.EOF);

								}
							}
						}
						else
						{
							Query = $"{Query}AND (pnum_comp_id = {nReference_CompanyID.ToString()}) ";
							Query = $"{Query}AND (pnum_contact_id = 0) ";
							Query = $"{Query}AND (pnum_type = '{Full_Phone_Type.Trim()}') ";
						} // If Exist(strExists) Then

						modAdminCommon.ADO_Transaction("BeginTrans");
						DbCommand TempCommand = null;
						TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
						UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
						TempCommand.CommandText = Query;
						//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
						TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
						UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
						TempCommand.ExecuteNonQuery();
						modAdminCommon.ADO_Transaction("CommitTrans");

						// INSERT A COMPANY CONFIRMATION JOURNAL ENTRY
						modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject($"Confirmed Company Phone Number ({Full_Phone_Type.Trim()}) {Full_Phone}", "CPCFM", 0, nReference_CompanyID, 0);

						modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
						modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CPCFM";
						modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
						modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;
						modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
						modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
						modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
						modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
						modAdminCommon.Rec_Journal_Info.journ_status = "A";
						modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";
						//Rec_Journal_Info.journ_yacht_id = 0

						frm_Journal.DefInstance.Commit_Journal_Entry();

						if (comp_count > 0)
						{
							int tempForEndVar = comp_count - 1;
							for (int i = 0; i <= tempForEndVar; i++)
							{
								// INSERT A COMPANY CONFIRMATION JOURNAL ENTRY
								if (nReference_CompanyID.ToString().Trim() != comp_id_array[i].ToString().Trim() || contact_id_array[i] > 0)
								{ // dont put in a duplicate


									if (contact_id_array[i] > 0)
									{
										modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject($"Confirmed Contact Phone Number ({Full_Phone_Type.Trim()}) {Full_Phone}", "CPCFM", 0, comp_id_array[i], contact_id_array[i]);
									}
									else
									{
										modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject($"Confirmed Company Phone Number ({Full_Phone_Type.Trim()}) {Full_Phone}", "CPCFM", 0, comp_id_array[i], contact_id_array[i]);
									}


									modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
									modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
									modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CPCFM";
									modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
									modAdminCommon.Rec_Journal_Info.journ_comp_id = comp_id_array[i];
									modAdminCommon.Rec_Journal_Info.journ_contact_id = contact_id_array[i];
									modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
									modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
									modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
									modAdminCommon.Rec_Journal_Info.journ_status = "A";
									modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";
									//Rec_Journal_Info.journ_yacht_id = 0

									frm_Journal.DefInstance.Commit_Journal_Entry();
								}
							}
						}

						grd_company_phone.CurrentColumnIndex = 0;
						grd_company_phone.CellBackColor = Color.White;
						grd_company_phone.CurrentColumnIndex = 1;
						grd_company_phone.CellBackColor = Color.White;
						grd_company_phone.CurrentColumnIndex = 2;
						grd_company_phone.CellBackColor = Color.White;
						grd_company_phone.CurrentColumnIndex = 3;
						grd_company_phone.CellBackColor = Color.White;
						grd_company_phone.CurrentColumnIndex = 4;
						grd_company_phone.CellBackColor = Color.White;
						grd_company_phone.CurrentColumnIndex = 5;
						grd_company_phone.CellBackColor = Color.White;
						grd_company_phone.CurrentColumnIndex = 6;
						grd_company_phone[grd_company_phone.CurrentRowIndex, grd_company_phone.CurrentColumnIndex].Value = DateTime.Now.ToString("d");
						grd_company_phone.CellBackColor = Color.White;
						grd_company_phone.CurrentColumnIndex = 0;

					} //Trim$(Full_Phone) <> cEmptyString

					fill_phone_company_grid();

					search_off();

				} // chk_dont_color_confirm.Value = vbUnchecked
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"confirm_company_phone_number_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();

				return;
			}

		}

		// 03/04/2014 - By David D. Cruger
		// Add Or Remove EMail From Do_No_Not_Send Table
		private void AddRemoveCompanyEMailFromDoNotSendTable()
		{

			string strInsert1 = "";
			string strDelete1 = "";
			string strEMail = "";

			try
			{

				//--------------------------------------------------------------------
				// 05/08/2014 - By David D. Cruger
				// Check To See If Company's EMail Needs To Be Added Or Removed
				// From The Do Not Send EMail Table

				strEMail = ($"{txt_comp_email_address.Text} ").Trim();

				if (strEMail != "")
				{

					if (nReference_CompanyJID == 0)
					{


						CheckState switchVar = chkCompDoNotSendEMail.CheckState;
						if (switchVar == CheckState.Checked)
						{

							if (modCommon.DLookUp("DNSEMail_Id", "Do_Not_Send_EMail", $"DNSEMail_Address='{strEMail}'") == "")
							{

								strInsert1 = "INSERT INTO Do_Not_Send_EMail";
								strInsert1 = $"{strInsert1}(DNSEMail_Comp_Id,DNSEMail_Contact_Id,DNSEMail_Journ_Id,";
								strInsert1 = $"{strInsert1}DNSEMail_Address,DNSEMail_Description,";
								strInsert1 = $"{strInsert1}DNSEMail_Entered_Date,DNSEMail_Updated_Date,DNSEMail_WebAction_Date) ";
								strInsert1 = $"{strInsert1}VALUES (";
								strInsert1 = $"{strInsert1}{nReference_CompanyID.ToString()},0,{nReference_CompanyJID.ToString()},";
								strInsert1 = $"{strInsert1}'{strEMail}',";
								strInsert1 = $"{strInsert1}'Added By {modCommon.GetFullUserName(modAdminCommon.gbl_User_ID)}',";
								strInsert1 = $"{strInsert1}GetDate(),GetDate(),GetDate()";
								strInsert1 = $"{strInsert1})";

								DbCommand TempCommand = null;
								TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
								UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
								TempCommand.CommandText = strInsert1;
								//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
								TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
								UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
								TempCommand.ExecuteNonQuery();

								modAdminCommon.Record_Event("Do_Not_Send_EMail", $"EMail Address [{strEMail}] Has Been Added To The Table", 0, 0, nReference_CompanyID);

								ToolTipMain.SetToolTip(txt_comp_email_address, "This EMail Address Is Currently On The JETNET Do Not Send List");

							} // If DLookUp("DNSEMail_Id") Then

						}
						else if (switchVar == CheckState.Unchecked)
						{ 

							if (modCommon.DLookUp("DNSEMail_Id", "Do_Not_Send_EMail", $"DNSEMail_Address='{strEMail}'") != "")
							{

								strDelete1 = $"DELETE FROM Do_Not_Send_EMail WHERE (DNSEMail_Address = '{strEMail}') ";
								DbCommand TempCommand_2 = null;
								TempCommand_2 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
								UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
								TempCommand_2.CommandText = strDelete1;
								//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
								TempCommand_2.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
								UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
								TempCommand_2.ExecuteNonQuery();

								modAdminCommon.Record_Event("Do_Not_Send_EMail", $"EMail Address [{strEMail}] Has Been Removed From The Table", 0, 0, nReference_CompanyID);

							} // If DLookUp("DNSEMail_Id") Then

							ToolTipMain.SetToolTip(txt_comp_email_address, "");

						} // Select Case chkCompDoNotSendEMail.Value

					} // If nReference_CompanyJID = 0 Then

				} // If strEMail <> "" Then
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"AddRemoveCompanyEMailFromDoNotSendTable ({Information.Err().Number.ToString()}) {excep.Message} cmpid[{nReference_CompanyID.ToString()}] jid[{nReference_CompanyJID.ToString()}]", "Do_Not_Send_EMail");
			}

		} // AddRemoveCompanyEMailFromDoNotSendTable

		private void cmd_company_save_Click(Object eventSender, EventArgs eventArgs)
		{





			string Query = modGlobalVars.cEmptyString;
			int iCnt1 = 0;
			string sqlUpdateStr = modGlobalVars.cEmptyString;
			string tmpCompanyName = modGlobalVars.cEmptyString;
			string sReturnValue = modGlobalVars.cEmptyString;
			bool bStrippedSpacesFromCompName = false;
			bool bCheckedHideCompany = false;
			bool bCheckedInactivateCompany = false;
			bool bOverideForAirline = false;
			bool bAtLeastOneProduct = false;
			string strEMail = "";
			string strWebSite = "";
			string strJIC = "";
			string strMsg = "";
			System.DateTime dtStartDate = DateTime.FromOADate(0);
			System.DateTime dtEndDate = DateTime.FromOADate(0);
			bool bEMailAdded = false;
			bool bEMailDeleted = false;
			bool bWebSiteAdded = false;
			bool bJICAdded = false;
			string strMktRep = "";
			string strLineAccess = "";
			bool skip_save = false;
			string sqlUpdateStr_Hist = "";
			string sqlUpdateStr2 = "";
			int count_of_same = 0;
			string where_current_blank = "";
			int journ_count = 0;
			string journ_id_list = "";
			bool updated_compay_ticker = false;
			int address_count = 0;
			string ask_string = "";
			string update_temp = "";
			try
			{



				// added in MSW - to test and run new stored procedure
				//If InStr(LOCAL_ADO_DB, "jetnet_ra_test") > 0 Then    '  IT SHOULD ONLY GO IN ON TEST -  And gbl_User_ID = "mvit" And gbl_User_ID = "DONT GO"
				bool has_company_address_changed = false;
				bool bIsCompanyRelated = false;
				bool Does_Same_Address_Exist = false;
				string same_address_companies = "";
				string related_comp_ids = "";
				string address_change_text = "";
				int temp_index = 0;
				string temp_note = "";
				string address_change_text2 = "";
				string[] related_comp_ids_array = null;
				int i = 0;
				StringBuilder Query2 = new StringBuilder();
				string tupdate = "";
				string temp_subject = "";
				string temp_desc = "";
				string Remove_Query = "";
				if (modAdminCommon.LOCAL_ADO_DB.ConnectionString.IndexOf("jetnet_ra_test") >= 0 && modAdminCommon.gbl_User_ID == "mvit" && modAdminCommon.gbl_User_ID == "DONT GO")
				{ //    so for now it doesnt go in
					// SECTION RE-WORKED TO USE STORED PROCEDURE - MSW - 12/22 -


					disable_important_items();

					// THIS RUNS THROUGH MANY OF THE CHECKS SUCH AS ZIP CODES THAT MAKE SURE THE SAVE SHOULD BE ABLE TO CONTINUE
					if (!run_fields_to_check_to_exit(ref bEMailAdded, ref bEMailDeleted, ref strEMail))
					{
						Application.DoEvents();
						Application.DoEvents();
						Application.DoEvents();
						enable_important_items();
						Application.DoEvents();
						Application.DoEvents();
						Application.DoEvents();
						return;
					}

					// THIS IS A FUNCITON CONVERTED AND RE-USED FROM BELOW THAT BUILDS BOTH THE UPDATE STRING AND THE EXIT COMPANY INFO TABLE FOR
					// COMPARISON AND UPDATES -
					setup_company_update(ref sqlUpdateStr, ref exit_company_info, ref where_current_blank, ref tmpCompanyName, ref bStrippedSpacesFromCompName, ref strMktRep, ref sqlUpdateStr_Hist, ref strWebSite, ref bWebSiteAdded, strEMail, ref strJIC, ref bJICAdded, ref bCheckedInactivateCompany, ref bCheckedHideCompany, ref bAtLeastOneProduct, bOverideForAirline, ref strLineAccess);

					//NEED TO ENCORPERATE CHECK FOR CHANGES

					// THIS IS THE NEW FUNCTION - TO RUN THE COMPANY UPDATE STORED PROCEDURE
					run_company_update();

					// NEED TO KEEP THE REST OF THE SAVE ? AND ELIMINATE THE ITEMS WE R SAVING THROUGH STORED PROCEDURE

					enable_important_items();

				}
				else
				{

					disable_important_items();

					time_cc_timer.Enabled = false;
					time_ac_timer.Enabled = false;
					time_at_company.Enabled = false;
					skip_save = false;

					modCommon.Unload_Form("frm_UserAccounts");

					// remove commas and semis from 5/9/22
					txt_comp_email_address.Text = StringsHelper.Replace(StringsHelper.Replace(txt_comp_email_address.Text, ",", "", 1, -1, CompareMethod.Binary), ";", "", 1, -1, CompareMethod.Binary);

					if (nReference_CompanyJID > 0 && txt_comp_name.Text.Trim() == modGlobalVars.cEmptyString)
					{
						// Historical Company Was Not found ignore save
						return;
					}

					// if its visisble, then you actually clicked it
					if (lbl_comp[100].Visible)
					{
						MessageBox.Show("You Must Click 'Save Relationship' In Order To Update This Company to Company Relationship", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
						tab_company_admin.Enabled = true;
						tab_company_details.Enabled = true;
						pnl_company_main.Enabled = true;
						return;
					}
					else
					{
						lbl_comp[100].Visible = false;
						cbo_comp_account[3].Visible = false;
						cbo_comp_account[4].Visible = false;
					}
					//----------------------------------- FOR COMPANY RELATIONSHIP------------------------------



					//-------THIS IS THE AREA THAT HAS STARTED TO BE COMBINED INTO FUNCTIONS------------------------------------------
					// items moved into the function - MSW - 12/12/22
					if (!run_fields_to_check_to_exit(ref bEMailAdded, ref bEMailDeleted, ref strEMail))
					{

						Application.DoEvents();
						Application.DoEvents();
						enable_important_items();
						Application.DoEvents();
						Application.DoEvents();
						Application.DoEvents();

						return;
					}


					setup_company_update(ref sqlUpdateStr, ref exit_company_info, ref where_current_blank, ref tmpCompanyName, ref bStrippedSpacesFromCompName, ref strMktRep, ref sqlUpdateStr_Hist, ref strWebSite, ref bWebSiteAdded, strEMail, ref strJIC, ref bJICAdded, ref bCheckedInactivateCompany, ref bCheckedHideCompany, ref bAtLeastOneProduct, bOverideForAirline, ref strLineAccess);

					//--------FROM ABOVE, THIIS AREA IS MOVED INTO FUNCTIONS -------------------------------

					search_on("Saving Company Information ....");

					//--------------------------------------------------------------------
					// 03/04/2014 - By David D. Cruger
					// Check To See If Contact's EMail Needs To Be Added Or Removed
					// From The Do Not Send EMail Table

					if (strEMail != "")
					{
						if (nReference_CompanyJID == 0)
						{
							AddRemoveCompanyEMailFromDoNotSendTable();
						}
					}

					// ------------- MOVED FROM BELOW - MSW - 3/11/21 --------------
					Does_Same_Address_Exist = false;
					temp_note = "";
					temp_index = 0;
					bIsCompanyRelated = false;
					has_company_address_changed = false;
					related_comp_ids = "";
					same_address_companies = "";
					address_change_text2 = "";

					if (StringsHelper.ToDoubleSafe(Convert.ToString(cbo_comp_name_alt_type.Tag)) != cbo_comp_name_alt_type.SelectedIndex)
					{
						if (cbo_comp_name_alt_type.SelectedIndex > 0)
						{

							modAdminCommon.Rec_Journal_Info.journ_subject = "Updated/Added Comp Alt Type";

							//  Rec_Journal_Info.journ_subject = "Confirmed Company: " & tmpField
							modAdminCommon.Rec_Journal_Info.journ_description = $"Changed To: {cbo_comp_name_alt_type.Text}";
							modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
							modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
							modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;
							modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
							modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
							modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_status = "A";
							modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

							frm_Journal.DefInstance.Commit_Journal_Entry();

							modAdminCommon.ADO_Transaction("CommitTrans");

						}
					}



					if (Convert.ToString(txt_comp_address1.Tag).Trim() != txt_comp_address1.Text.Trim())
					{
						address_count++;
						if (Convert.ToString(txt_comp_address1.Tag).Trim() == "")
						{
							address_change_text2 = $"Address Changed From: [Blank] To: {txt_comp_address1.Text.Trim()}";
						}
						else if (txt_comp_address1.Text.Trim() == "")
						{ 
							address_change_text2 = $"Address Changed From: {Convert.ToString(txt_comp_address1.Tag).Trim()} To: [Blank]";
						}
						else
						{
							address_change_text2 = $"Address Changed From: {Convert.ToString(txt_comp_address1.Tag).Trim()} To: {txt_comp_address1.Text.Trim()}";
						}
					}

					if (Convert.ToString(txt_comp_address2.Tag).Trim() != txt_comp_address2.Text.Trim())
					{
						address_count++;

						if (Convert.ToString(txt_comp_address2.Tag).Trim() == "")
						{
							address_change_text2 = $"Address Changed From: [Blank] To: {txt_comp_address2.Text.Trim()}";
						}
						else if (txt_comp_address2.Text.Trim() == "")
						{ 
							address_change_text2 = $"Address Changed From: {Convert.ToString(txt_comp_address2.Tag).Trim()} To: [Blank]";
						}
						else
						{
							address_change_text2 = $"Address Changed From: {Convert.ToString(txt_comp_address2.Tag).Trim()} To: {txt_comp_address2.Text.Trim()}";
						}
					}

					if (Convert.ToString(txt_comp_city.Tag).Trim() != txt_comp_city.Text.Trim())
					{
						address_count++;

						if (Convert.ToString(txt_comp_city.Tag).Trim() == "")
						{
							address_change_text2 = $"City Changed From: [Blank] To: {txt_comp_city.Text.Trim()}";
						}
						else if (txt_comp_city.Text.Trim() == "")
						{ 
							address_change_text2 = $"City Changed From: {Convert.ToString(txt_comp_city.Tag).Trim()} To: [Blank]";
						}
						else
						{
							address_change_text2 = $"City Changed From: {Convert.ToString(txt_comp_city.Tag).Trim()} To: {txt_comp_city.Text.Trim()}";
						}
					}


					if (Convert.ToString(cbo_comp_state.Tag).Trim() != cbo_comp_state.SelectedIndex.ToString().Trim())
					{
						if (StringsHelper.ToDoubleSafe(cbo_comp_state.SelectedIndex.ToString().Trim()) == -1 && Convert.ToString(cbo_comp_state.Tag).Trim() == "")
						{ // added MSW 2/7/22
							// then no state change was really made
						}
						else
						{
							address_count++;

							if (Convert.ToString(lbl_comp[0].Tag).Trim() == "")
							{
								address_change_text2 = $"State Changed From: [Blank] To: {cbo_comp_state.Text.Trim()}";
							}
							else if (cbo_comp_state.Text.Trim() == "")
							{ 
								address_change_text2 = $"State Changed From: {Convert.ToString(lbl_comp[0].Tag).Trim()} To: [Blank]";
							}
							else
							{
								// lbl_comp(0).Tag is the text naming of the dropdown while the state.tag is the listindex
								address_change_text2 = $"State Changed From: {Convert.ToString(lbl_comp[0].Tag).Trim()} To: {cbo_comp_state.Text.Trim()}";
							}
						}
					}

					if (Convert.ToString(txt_comp_zip_code.Tag).Trim() != txt_comp_zip_code.Text.Trim())
					{
						address_count++;

						if (Convert.ToString(txt_comp_zip_code.Tag).Trim() == "")
						{
							address_change_text2 = $"Zip Code Changed From: [Blank] To: {txt_comp_zip_code.Text.Trim()}";
						}
						else if (txt_comp_zip_code.Text.Trim() == "")
						{ 
							address_change_text2 = $"Zip Code Changed From: {Convert.ToString(txt_comp_zip_code.Tag).Trim()} To: [Blank] ";
						}
						else
						{
							address_change_text2 = $"Zip Code Changed From: {Convert.ToString(txt_comp_zip_code.Tag).Trim()} To: {txt_comp_zip_code.Text.Trim()}";
						}
					}



					if (address_count > 1)
					{
						has_company_address_changed = true;

						address_change_text = "Address Changed From: ";

						// if they are all blank, then
						if (Convert.ToString(txt_comp_address1.Tag).Trim() == "" && Convert.ToString(txt_comp_address2.Tag).Trim() == "" && Convert.ToString(txt_comp_city.Tag).Trim() == "" && Convert.ToString(lbl_comp[0].Tag).Trim() == "" && Convert.ToString(txt_comp_zip_code.Tag).Trim() == "")
						{
							// only if there is an address 1 or 2 or city down the road, do we put in a "blank" to start
							//  If Trim(txt_comp_address1.Text) <> "" Or Trim(txt_comp_address2.Text) <> "" Or Trim(txt_comp_city.Text) <> "" Then
							address_change_text = $"{address_change_text} [Blank] ";
							//  End If
						}
						else
						{

							if (Convert.ToString(txt_comp_address1.Tag).Trim() != "")
							{
								address_change_text = $"{address_change_text}{Convert.ToString(txt_comp_address1.Tag).Trim()}";
							}

							if (Convert.ToString(txt_comp_address2.Tag).Trim() != "")
							{
								if (Convert.ToString(txt_comp_address1.Tag).Trim() != "")
								{
									address_change_text = $"{address_change_text} ";
								}
								address_change_text = $"{address_change_text}{Convert.ToString(txt_comp_address2.Tag).Trim()}";
							}

							if (Convert.ToString(txt_comp_city.Tag).Trim() != "")
							{
								if (Convert.ToString(txt_comp_address1.Tag).Trim() != "" || Convert.ToString(txt_comp_address2.Tag).Trim() != "")
								{
									address_change_text = $"{address_change_text} ";
								}
								address_change_text = $"{address_change_text}{Convert.ToString(txt_comp_city.Tag).Trim()}";
							}


							if (Convert.ToString(lbl_comp[0].Tag).Trim() != "")
							{
								if (Convert.ToString(txt_comp_address1.Tag).Trim() != "" || Convert.ToString(txt_comp_address2.Tag).Trim() != "" || Convert.ToString(txt_comp_city.Tag).Trim() != "")
								{
									address_change_text = $"{address_change_text}, ";
								}

								address_change_text = $"{address_change_text}{Convert.ToString(lbl_comp[0].Tag).Trim()}";

								if (Convert.ToString(txt_comp_zip_code.Tag).Trim() != "")
								{
									address_change_text = $"{address_change_text} {Convert.ToString(txt_comp_zip_code.Tag).Trim()}";
								}
							}
							else if (Convert.ToString(txt_comp_zip_code.Tag).Trim() != "")
							{ 
								address_change_text = $"{address_change_text} {Convert.ToString(txt_comp_zip_code.Tag).Trim()}";
							}

						}

						//-----------------------------------------------------------------------
						address_change_text = $"{address_change_text} To: ";

						if (txt_comp_address1.Text.Trim() == "" && txt_comp_address2.Text.Trim() == "" && txt_comp_city.Text.Trim() == "" && cbo_comp_state.Text.Trim() == "" && txt_comp_zip_code.Text.Trim() == "")
						{
							// only if there was one before,do we need to put a blank here after. not gonna put blank to blank
							// If Trim(txt_comp_address1.Tag) <> "" Or Trim(txt_comp_address2.Tag) <> "" Or Trim(txt_comp_city.Tag) <> "" Then
							address_change_text = $"{address_change_text}[Blank]";
							// End If
						}
						else
						{
							if (txt_comp_address1.Text.Trim() != "")
							{
								address_change_text = $"{address_change_text}{txt_comp_address1.Text.Trim()}";
							}

							if (txt_comp_address2.Text.Trim() != "")
							{
								if (txt_comp_address1.Text.Trim() != "")
								{
									address_change_text = $"{address_change_text} ";
								}
								address_change_text = $"{address_change_text}{txt_comp_address2.Text.Trim()}";
							}

							if (txt_comp_city.Text.Trim() != "")
							{
								if (txt_comp_address1.Text.Trim() != "" || txt_comp_address2.Text.Trim() != "")
								{
									address_change_text = $"{address_change_text} ";
								}
								address_change_text = $"{address_change_text}{txt_comp_city.Text.Trim()}";
							}


							if (cbo_comp_state.Text.Trim() != "")
							{
								if (txt_comp_city.Text.Trim() != "")
								{
									address_change_text = $"{address_change_text}, ";
								}

								address_change_text = $"{address_change_text}{cbo_comp_state.Text.Trim()}";
							}

							if (txt_comp_zip_code.Text.Trim() != "")
							{
								address_change_text = $"{address_change_text} {txt_comp_zip_code.Text.Trim()}";
							}
						}

						if (Convert.ToString(txt_comp_address1.Tag).Trim() == "")
						{ // COMPANY ADDRESS ADDED OR UPDATED
							modCommon.InsertPriorityEvent("CAA", 0, 0, address_change_text, nReference_CompanyID, 0, "N");
						}
						else
						{
							modCommon.InsertPriorityEvent("CAU", 0, 0, address_change_text, nReference_CompanyID, 0, "N");
						}
					}
					else if (address_count == 1)
					{ 
						has_company_address_changed = true;
						address_change_text = address_change_text2;

						if (Convert.ToString(txt_comp_address1.Tag).Trim() == "")
						{ // COMPANY ADDRESS ADDED OR UPDATED
							modCommon.InsertPriorityEvent("CAA", 0, 0, address_change_text, nReference_CompanyID, 0, "N");
						}
						else
						{
							modCommon.InsertPriorityEvent("CAU", 0, 0, address_change_text, nReference_CompanyID, 0, "N");
						}
					}



					if (!modCompany.save_company(nReference_CompanyID, nReference_CompanyJID, sqlUpdateStr, txt_history_date.Text.Trim(), chk_dont_color_confirm.CheckState, bUser_Changed_Callback_Date, bStrippedSpacesFromCompName, bCheckedInactivateCompany, bCheckedHideCompany, grd_company_wanted, ref arrTransmitFields, ref arrVerifyFields, ref arrChangedFields, save_phone_info, enter_company_info, exit_company_info, ref sReturnValue, address_change_text, ref updated_compay_ticker))
					{

						if (sReturnValue.Trim() != "no_changes" && sReturnValue.Trim() != "no_save")
						{
							MessageBox.Show($"This Company has not been saved. {Environment.NewLine}{Environment.NewLine}Please Correct and Try Again!", "Company : Save Company", MessageBoxButtons.OK, MessageBoxIcon.Error);
						}

					}
					else
					{

						if (bEMailAdded)
						{
							modCommon.Start_Activity_Monitor_Message("Company EMail Added", ref strMsg, ref dtStartDate, ref dtEndDate);
							strMsg = $" - {strEMail}";
							modCommon.End_Activity_Monitor_Message("Company EMail Added", ref strMsg, dtStartDate, ref dtEndDate, 0, nReference_CompanyJID, nReference_CompanyID, 0, 0);
						}

						if (bEMailDeleted)
						{
							modCommon.Start_Activity_Monitor_Message("Company EMail Deleted", ref strMsg, ref dtStartDate, ref dtEndDate);
							strMsg = $" - {Convert.ToString(txt_comp_email_address.Tag).Trim()}";
							modCommon.End_Activity_Monitor_Message("Company EMail Deleted", ref strMsg, dtStartDate, ref dtEndDate, 0, nReference_CompanyJID, nReference_CompanyID, 0, 0);
						}

						if (bWebSiteAdded)
						{
							modCommon.Start_Activity_Monitor_Message("Company WebSite Added", ref strMsg, ref dtStartDate, ref dtEndDate);
							strMsg = $" - {strWebSite}";
							modCommon.End_Activity_Monitor_Message("Company WebSite Added", ref strMsg, dtStartDate, ref dtEndDate, 0, nReference_CompanyJID, nReference_CompanyID, 0, 0);
						}

						if (bJICAdded)
						{
							modCommon.Start_Activity_Monitor_Message("Company JIC Added", ref strMsg, ref dtStartDate, ref dtEndDate);
							strMsg = $" - {strJIC} = {modCommon.DLookUp("csic_name", "Company_SIC_Codes", $"csic_code = '{strJIC}'")}";
							modCommon.End_Activity_Monitor_Message("Company JIC Added", ref strMsg, dtStartDate, ref dtEndDate, 0, nReference_CompanyJID, nReference_CompanyID, 0, 0);
						}


						// if it is updated on a historical data, then ask to update to the current
						journ_count = 0;
						if (nReference_CompanyJID > 0)
						{
							if (sqlUpdateStr_Hist.Trim() != "")
							{ // this means we updated a field that we want to update to the current
								journ_id_list = modCommon.Find_Historical_Company_AC_Records(nReference_CompanyID, nReference_CompanyJID, where_current_blank, ref journ_count);
								ask_string = $"There are {journ_count.ToString()} Other Historical Company Records, including the Current Company Record, That WILL have their Address Information Updated. Would You Like To Update All of Them?";

								if (journ_id_list.Trim() != "")
								{ // if we found that there are things that are updated, then ask
									if (journ_count > 0)
									{ //if we have found records that could match
										if (MessageBox.Show(ask_string, AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
										{ // if we want to update, then
											if ((journ_id_list.ToLower().IndexOf("please") + 1) == 0)
											{
												sqlUpdateStr2 = $"UPDATE Company SET comp_upd_date = '{DateTime.Now.ToString()}', comp_upd_user_id = '{modAdminCommon.gbl_User_ID.Trim()}' ";
												sqlUpdateStr2 = $"{sqlUpdateStr2} , comp_action_date = NULL ";
												// sqlUpdateStr2 = sqlUpdateStr2 & " , comp_address_confirm_date = '" & FormatDateTime(Now(), vbGeneralDate) & "' "
												sqlUpdateStr2 = $"{sqlUpdateStr2} {sqlUpdateStr_Hist}"; // update the fields

												sqlUpdateStr2 = $"{sqlUpdateStr2} where comp_id = {nReference_CompanyID.ToString()}";
												sqlUpdateStr2 = $"{sqlUpdateStr2} and comp_journ_id in ({journ_id_list}) "; // there is a comma in the list

												DbCommand TempCommand = null;
												TempCommand = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
												UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
												TempCommand.CommandText = sqlUpdateStr2;
												//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
												//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
												TempCommand.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
												UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
												TempCommand.ExecuteNonQuery();
											}
											else
											{
												MessageBox.Show(journ_id_list, AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
											}
										}
									}
								}
								else
								{
								}
							}
						}


						if (has_company_address_changed)
						{
							bIsCompanyRelated = modCommon.DoesSameAddressRelatedCompanyExist(Convert.ToInt32(Double.Parse(txt_comp_id.Text)), ref related_comp_ids);

							if (bIsCompanyRelated)
							{
								//  If MsgBox("Would You Like to Automatically Change the Address for the " & count_of_same & " Companies with the 'Same Address' ", vbYesNo) = vbYes Then
								if (MessageBox.Show("Would You Like to Automatically Change the Address for the Related 'Business Name/Same Address' Companies", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
								{
									i = 0;
									Query = "";

									// add the original company in too
									if (related_comp_ids.Trim() != "")
									{
										related_comp_ids = $"{related_comp_ids}, {txt_comp_id.Text}";
									}

									related_comp_ids_array = related_comp_ids.Split(',');

									int tempForEndVar = related_comp_ids_array.GetUpperBound(0);
									for (i = 0; i <= tempForEndVar; i++)
									{
										related_comp_ids_array[i] = StringsHelper.Replace(related_comp_ids_array[i], ",", "", 1, -1, CompareMethod.Binary);
										if (related_comp_ids_array[i].Trim() != "")
										{
											Query2 = new StringBuilder("UPDATE company SET   ");

											// added these two new functions in MSW - 6/12/23
											Query2.Append($" comp_address1 = '{txt_comp_address1.Text.Trim()}' ");
											Query2.Append($", comp_address1_search = '{modCommon.Return_String_Using_AlphaNumeric_DB_Function(txt_comp_address1.Text.Trim())}' ");

											Query2.Append($", comp_address2 = '{txt_comp_address2.Text.Trim()}' ");
											Query2.Append($", comp_address2_search = '{modCommon.Return_String_Using_AlphaNumeric_DB_Function(txt_comp_address2.Text.Trim())}' ");


											Query2.Append($", comp_city = '{txt_comp_city.Text.Trim()}' ");

											if (cbo_comp_state.Text.Trim().IndexOf(", ") >= 0)
											{
												Query2.Append($", comp_state = '{cbo_comp_state.Text.Trim().Substring(0, Math.Min(cbo_comp_state.Text.Trim().IndexOf(", "), cbo_comp_state.Text.Trim().Length))}' ");
											}
											else
											{
												Query2.Append($", comp_state = '{cbo_comp_state.Text.Trim()}' ");
											}

											Query2.Append($", comp_address_confirm_date = '{DateTime.Now.ToString()}'");
											Query2.Append($", comp_country = '{cbo_comp_country.Text.Trim()}' ");
											Query2.Append($", comp_zip_code = '{txt_comp_zip_code.Text.Trim()}' ");

											Query2.Append($" WHERE comp_id = {related_comp_ids_array[i]} AND comp_journ_id = 0");

											modAdminCommon.ADO_Transaction("BeginTrans");
											DbCommand TempCommand_2 = null;
											TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
											UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
											TempCommand_2.CommandText = Query2.ToString();
											//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
											//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
											TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
											UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
											TempCommand_2.ExecuteNonQuery();

											// previously was added MSW - 3/2/2020
											modAdminCommon.Rec_Journal_Info.journ_subject = $"Address changed For All Business Names/Additional Name Same Address: Comp ID: {txt_comp_id.Text}";
											modAdminCommon.Rec_Journal_Info.journ_description = address_change_text;
											modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
											modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
											modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
											modAdminCommon.Rec_Journal_Info.journ_comp_id = Convert.ToInt32(Double.Parse(related_comp_ids_array[i])); // gets from the id field
											modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
											modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
											modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
											modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
											modAdminCommon.Rec_Journal_Info.journ_status = "A";
											modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";
											frm_Journal.DefInstance.Commit_Journal_Entry();


											modAdminCommon.ADO_Transaction("CommitTrans");

										}
									}
									// update other companies information
									//
								}

							}
							else if (has_company_address_changed)
							{  // added MSW - then add the note just to this company - 2/2/21


								modAdminCommon.Rec_Journal_Info.journ_subject = $"Address changed Comp ID: {txt_comp_id.Text}";
								modAdminCommon.Rec_Journal_Info.journ_description = address_change_text;
								modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
								modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
								modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
								modAdminCommon.Rec_Journal_Info.journ_comp_id = Convert.ToInt32(Double.Parse(txt_comp_id.Text));
								modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
								modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
								modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
								modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
								modAdminCommon.Rec_Journal_Info.journ_status = "A";
								modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";
								frm_Journal.DefInstance.Commit_Journal_Entry();

								modAdminCommon.ADO_Transaction("CommitTrans");


							}
						}



						if (updated_compay_ticker)
						{
							tupdate = "";
							tupdate = $" update company_ticker set comp_ticker_jetnet_comp_id = {txt_comp_id.Text} where comp_ticker_symbol = '{txt_company_field[4].Text}' ";

							DbCommand TempCommand_3 = null;
							TempCommand_3 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_3);
							TempCommand_3.CommandText = tupdate;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_3.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_3);
							TempCommand_3.ExecuteNonQuery();
						}


						// added in msw - 4/23/21
						if (Convert.ToString(txt_comp_email_address.Tag) != txt_comp_email_address.Text)
						{

							temp_subject = "";
							temp_desc = "";



							//
							if (txt_comp_email_address.Text.Trim() == "" && Convert.ToString(txt_comp_email_address.Tag).Trim() != "")
							{
								temp_subject = "Company Email Address Removed";
								temp_desc = $"Was previously: {Convert.ToString(txt_comp_email_address.Tag).Trim()}";
							}
							else if (Convert.ToString(txt_comp_email_address.Tag).Trim() == "" && txt_comp_email_address.Text.Trim() != "")
							{ 
								temp_subject = "Company Email Address Entered";
								temp_desc = txt_comp_email_address.Text.Trim();
							}
							else if (Convert.ToString(txt_comp_email_address.Tag).Trim() != txt_comp_email_address.Text.Trim())
							{ 
								temp_subject = "Company Email Address Updated";
								temp_desc = $"Was previously: {Convert.ToString(txt_comp_email_address.Tag).Trim()}";
							}

							modAdminCommon.Rec_Journal_Info.journ_subject = temp_subject;
							modAdminCommon.Rec_Journal_Info.journ_description = temp_desc;
							modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
							modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
							modAdminCommon.Rec_Journal_Info.journ_comp_id = Convert.ToInt32(Double.Parse(txt_comp_id.Text)); // gets from the id field
							modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
							modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
							modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_status = "A";
							modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";
							frm_Journal.DefInstance.Commit_Journal_Entry();

							modAdminCommon.ADO_Transaction("CommitTrans");

						}

						//' ADDED MSW - 1/10/17 - if it is currently inactive, but was active before
						// if chk_company_flag(iCompActiveFlag).Tag = "Y" then the company was active
						if (chk_company_flag[iCompActiveFlag].CheckState == CheckState.Checked && Convert.ToString(chk_company_flag[iCompActiveFlag].Tag) == "Y")
						{
							modAdminCommon.Rec_Journal_Info.journ_subject = $"{txt_comp_name.Text} Company Inactivated";
							modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
							modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
							modAdminCommon.Rec_Journal_Info.journ_comp_id = Convert.ToInt32(Double.Parse(txt_comp_id.Text)); // gets from the id field
							modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
							modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
							modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_status = "A";
							modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";
							frm_Journal.DefInstance.Commit_Journal_Entry();


							// adding in delete for company certifications. - 1/16/24
							Remove_Query = $"Delete From Company_Certification where ccert_journ_id = 0 and ccert_comp_id = {txt_comp_id.Text} ";

							DbCommand TempCommand_4 = null;
							TempCommand_4 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_4);
							TempCommand_4.CommandText = Remove_Query;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand_4.CommandType = (CommandType) (((int) CommandType.Text) + ((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_4);
							TempCommand_4.ExecuteNonQuery();


							modAdminCommon.ADO_Transaction("CommitTrans");

						}
						else if (chk_company_flag[iCompActiveFlag].CheckState == CheckState.Unchecked && Convert.ToString(chk_company_flag[iCompActiveFlag].Tag) == "N")
						{ 
							modAdminCommon.Rec_Journal_Info.journ_subject = $"{txt_comp_name.Text} Company Activated";
							modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
							modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
							modAdminCommon.Rec_Journal_Info.journ_comp_id = Convert.ToInt32(Double.Parse(txt_comp_id.Text)); // gets from the id field
							modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
							modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
							modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_status = "A";
							modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";
							frm_Journal.DefInstance.Commit_Journal_Entry();

							modAdminCommon.ADO_Transaction("CommitTrans");

						}


						// checks the current spot of the airbp checkbox and the starting status of the airbp checkbox
						// if is currently unchecked and started checked then it adds a note in
						// MSW
						if ((chk_comp_product_code[modGlobalVars.CHK_AIRBP_IDX].CheckState == CheckState.Checked) || bOverideForAirline)
						{
							// Nothing
						}
						else
						{

							if (bisAirBPstart)
							{
								modAdminCommon.Rec_Journal_Info.journ_subject = "Removed Company from AirBP List";
								modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
								modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
								modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
								modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
								modAdminCommon.Rec_Journal_Info.journ_comp_id = Convert.ToInt32(Double.Parse(txt_comp_id.Text)); // gets from the id field
								modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
								modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
								modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
								modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
								modAdminCommon.Rec_Journal_Info.journ_status = "A";
								modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";
								frm_Journal.DefInstance.Commit_Journal_Entry();

								modAdminCommon.ADO_Transaction("CommitTrans");

							} // If bisAirBPstart Then

						} // If (chk_comp_product_code(CHK_AIRBP_IDX).Value = vbChecked) Or bOverideForAirline Then


					} // If Not modCompany.save_company

				} // end of the... if its on test   - commented out .. move above - 10/18/23

				if (!bIsClosingForm)
				{

					// this makes sure we activate the right company (historical or active) after save
					if (nReference_CompanyJID > 0 && bCompany_active_record_Click)
					{
						nReference_CompanyJID = 0;
						bCompany_active_record_Click = false;
					}
					else if (bCompany_history_DblClick)
					{ 
						nReference_CompanyJID = grd_company_history.get_RowData(grd_company_history.CurrentRowIndex);
						bCompany_history_DblClick = false;
					}

					// Temp Hold ??
					if (!bCompany_relation_DblClick)
					{
						//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
						Form_Activated(this, new EventArgs());
					}

					enable_important_items();

					search_off();

				} // If bIsClosingForm = False Then

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//End If   ' end of the... if its on test   - commented out .. move above - 10/18/23
			}
			catch (System.Exception excep)
			{

				if (mvHasFocus)
				{
					mvHasFocus = false;
				}

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"cmd_company_save_Click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				enable_important_items();

				search_off();
				return;
			}


		} // cmd_company_save


		private void menu_enabled(string Direction)
		{

			try
			{

				bool tf = false;

				tf = Direction.ToUpper() != "OFF";

				if (mnufile.Available)
				{
					mnufile.Enabled = tf;
				}
				if (mnuEdit.Available)
				{
					mnuEdit.Enabled = tf;
				}
				if (mnuView.Available)
				{
					mnuView.Enabled = tf;
				}
				if (mnuReport.Available)
				{
					mnuReport.Enabled = tf;
				}
				if (mnuSubscriptions.Available)
				{
					mnuSubscriptions.Enabled = tf;
				}
				if (mnuACSearch.Available)
				{
					mnuACSearch.Enabled = tf;
				}
				// If mnuHelp.Visible Then mnuHelp.Enabled = tf
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Report_Error("menu_enabled_error", excep.Message);
			}

		}

		private void disable_important_items()
		{

			tab_company_admin.Enabled = false;
			tab_company_details.Enabled = false;
			pnl_company_main.Enabled = false;

		}

		private void enable_important_items()
		{

			try
			{

				Application.DoEvents();
				Application.DoEvents();
				tab_company_admin.Enabled = true;
				tab_company_details.Enabled = true;
				pnl_company_main.Enabled = true;
				Application.DoEvents();
				Application.DoEvents();


				if (lbl_comp[6].Text.Substring(0, Math.Min(9, lbl_comp[6].Text.Length)).ToLower().Trim() != ("Locked by").ToLower())
				{
					cmd_company_save.Enabled = true;
					cmd_company_add_note.Enabled = true;
				}
				else
				{
					cmd_company_save.Enabled = false;
					cmd_company_add_note.Enabled = false;
				}

				if (txt_comp_name.Visible && txt_comp_name.Enabled)
				{
					txt_comp_name.Focus();
				}
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Report_Error("enable_important_items_Error", excep.Message);
			}

		}

		public void Form_Activated(Object eventSender, EventArgs eventArgs)
		{
			if (ActivateHelper.myActiveForm != eventSender)
			{
				ActivateHelper.myActiveForm = (Form) eventSender;

				has_other_companies_relationship = false;
				keep_wanteds_items = false;

				string string_ac = "";
				string string_abi = "";
				string string_yacht = "";

				try
				{


					if (cbo_comp_name_alt_type.Items.Count < 5)
					{
						cbo_comp_name_alt_type.AddItem("UNID");
						cbo_comp_name_alt_type.AddItem("UDO");
					}



					if (!modAdminCommon.gbl_bHomeClicked && !bIsClosingForm)
					{

						if (!bSkipFormActivate)
						{

							if ((!bFormLoad && !bFormInitalize && !bFormActivate) || (bForceReload))
							{

								bFormActivate = true;
								bForceReload = false;

								string_ac = "N";
								string_abi = "N";
								string_yacht = "N";

								arrChangedFields = new string[]{""};
								arrTransmitFields = new string[]{""};
								arrVerifyFields = new string[]{""};
								arrConfirmAircraft = new string[]{""};
								arrConfirmWantedAC = new string[]{""};

								arrChangedFields[0] = modGlobalVars.cEmptyString;
								arrTransmitFields[0] = modGlobalVars.cEmptyString;
								arrVerifyFields[0] = modGlobalVars.cEmptyString;
								arrConfirmAircraft[0] = modGlobalVars.cEmptyString;
								arrConfirmWantedAC[0] = modGlobalVars.cEmptyString;

								((ToolStripMenuItem) mnuViewJournalSubType[1]).Checked = true; // Company
								((ToolStripMenuItem) mnuViewJournalSubType[2]).Checked = false; // Contact
								((ToolStripMenuItem) mnuViewJournalSubType[3]).Checked = false; // Aircraft

								mnuReportList[7].Available = false; // Company Details Report (API)
								if (modCommon.JAPI.bHasAPILogin)
								{
									mnuReportList[7].Available = true;
								}

								CRM_CONN = "Driver={MySQL ODBC 3.51 Driver};Server=192.69.4.165;Port=3306;Database=crmmarketing_client_db;Uid=jetnetmark_user;Pwd=fubar#01;OPTION=3;";

								// SINCE WE ARE JUST ENTERING CLEAR COMPANY, AND CONTACT, and WANTED ...
								clear_company_controls();
								clear_contact_controls();
								clear_wanted_controls();

								clear_save_wanted_info(ref save_wanted_info);
								clear_save_phone_info(ref save_phone_info);
								clear_save_info(ref enter_company_info);
								clear_save_info(ref exit_company_info);

								sVerifiedContactFields = modGlobalVars.cEmptyString;
								sVerifiedCompanyFields = modGlobalVars.cEmptyString;

								lbl_comp[ABIFLAG].Visible = false;
								lst_aircraft_contact.Items.Clear();

								bUser_Changed_Callback_Date = false;

								SSTabHelper.SetSelectedIndex(tab_company_admin, 0);
								// toggle the boolean found this was filling the company AC form twice
								// 9-25-09 Tom & Mike
								bFormLoad = true;
								SSTabHelper.SetSelectedIndex(tab_company_details, 0);
								bFormLoad = false;

								cbo_comp_account[COMP_ACCOUNT_REP].BackColor = Color.White;
								cbo_comp_account[COMP_ACCOUNT_REP].Enabled = false;

								cal_comp_callback_date.SetDate(DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)));

								tbr_ToolBar.Visible = false;

								bControlProductCodeMsg = false;
								bIsClosingForm = false;
								bCompany_active_record_Click = false;
								bCompany_history_DblClick = false;
								bCompany_relation_DblClick = false;

								if (modAdminCommon.gbl_bHomeClicked)
								{

									this.Cursor = CursorHelper.CursorDefault;
									Hide_MySelf(true, true);

								}
								else
								{

									menu_enabled("Off");
									disable_important_items();

									JetNetSupport.PInvoke.SafeNative.user32.SendMessage(cbo_verify_journal_subject.Handle.ToInt32(), modGlobalVars.CB_LIMITTEXT, 120, 0);

									if (nReference_CompanyID > 0)
									{

										if (nReference_CompanyJID > 0)
										{

											cmdCompHistoryTab[0].Enabled = !modCompany.no_current_company(nReference_CompanyID); // View Current Company Record

											cmdCompHistoryTab[0].Text = "View Current Company Record";

										}
										else
										{
											nReference_CompanyJID = 0;
											cmdCompHistoryTab[0].Enabled = true;
											cmdCompHistoryTab[0].Text = "View Historical Company Record";
										} // If nReference_CompanyJID > 0 Then

										// 04/16/2008 - By David D. Cruger; Must be the same company/journid
										if (modGlobalVars.cfsiCompanyInfo.lCompId == nReference_CompanyID && modGlobalVars.cfsiCompanyInfo.lJournId == nReference_CompanyJID && modGlobalVars.cfsiCompanyInfo.lCompId > 0)
										{
											// RTW - 9/2/2010 - THE SELECT COMPANY AUTOMATICALLY SETS THE DELIVERY POSITION INDEX
											//cbo_ac_delivery_position.Enabled = False
											//cbo_ac_delivery_position.ListIndex = cfsiCompanyInfo.iDeliveryPositionComboListIndex
											//cbo_ac_delivery_position.Enabled = True
											//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
											chk_limit_aircraft_list.CheckState = (CheckState) modGlobalVars.cfsiCompanyInfo.ichkLimitAircraftList;
											txt_only_show_first_aircraft_recs.Text = modGlobalVars.cfsiCompanyInfo.lHowManyAircraft.ToString();
										}
										else
										{
											// RTW - 9/2/2010 - CLEAR THE DELIVERY POSITION SETTING WHEN NOT COMING BACK INTO A COMPANY FROM AIRCRAFT
											modGlobalVars.cfsiCompanyInfo.iDeliveryPositionComboListIndex = -1;
										}

										if (Select_Company())
										{

											this.Text = $"Company ID - {nReference_CompanyID.ToString()} ({txt_comp_name.Text.Trim()})";

											// 02/17/2012 - By David D. Cruger
											// Moved Menu Enabled Down After Select_Company

											if (txt_comp_name.Visible && txt_comp_name.Enabled)
											{
												txt_comp_name.Focus();
											}

											// 07/27/2010 - Updated Tom Jones, added this call to set the combo based on company product flag
											// 8/31/2010 - Updated MSW/RTW, deleted second value inserted and added two booleans that are adjusted previously to compare and show desired results
											//   Call modFillCompConControls.Fill_Deliver_Position_List(cbo_ac_delivery_position, bCompany_Commercial_Records, bCompany_BusorHel_Records)

											Refresh_Form_Pnl_Lbl_Txt();

											if (modGlobalVars.cfsiCompanyInfo.lAircraftGridRow > 0 && modGlobalVars.cfsiCompanyInfo.lAircraftGridTopRow > 0)
											{

												// if there are only 2 rows, and the other says 2, then its blank and dont display
												// ADDED MSW - 6/18/18 - blank companies were causing issues in certain work arounds
												if (((grd_company_aircraft.RowsCount - 1) >= modGlobalVars.cfsiCompanyInfo.lAircraftGridRow) || grd_company_aircraft.RowsCount > 2)
												{
													grd_company_aircraft.CurrentRowIndex = modGlobalVars.cfsiCompanyInfo.lAircraftGridRow;
												}

												modCommon.Highlight_Grid_Row(grd_company_aircraft);
												grd_company_aircraft.FirstDisplayedScrollingRowIndex = modGlobalVars.cfsiCompanyInfo.lAircraftGridTopRow;
											}

											if (modGlobalVars.cfsiCompanyInfo.lDocInProcGridRow > 0 && modGlobalVars.cfsiCompanyInfo.lDocInProcGridTopRow > 0)
											{
												Fill_Company_Documents_In_Process_Grid();
												gdCompDocInProcess.CurrentRowIndex = modGlobalVars.cfsiCompanyInfo.lDocInProcGridRow;
												modCommon.Highlight_Grid_Row(gdCompDocInProcess);
												gdCompDocInProcess.FirstDisplayedScrollingRowIndex = modGlobalVars.cfsiCompanyInfo.lDocInProcGridTopRow;
											}

											SSTabHelper.SetSelectedIndex(tab_company_details, modGlobalVars.cfsiCompanyInfo.iTab);

										}
										else
										{

											if (nReference_CompanyJID > 0)
											{
												this.Text = "Company ID - NONE (Historical Company Not Found)";
											}
											else
											{
												this.Text = "Company ID - NONE (Company Not Found)";
											}

										} // If Select_Company() = True Then

										time_at_company.Enabled = true;
										tbr_ToolBar.Visible = true;

										this.BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes

									} // If nReference_CompanyID > 0 Then

								} // If gbl_bHomeClicked Then

								if (cbo_comp_account[0].SelectedIndex == 1)
								{
									cmd_ac_verify[6].Visible = true;
									fill_historical_grid(25, true);
									//cmd_ac_verify(6).Picture = pic_verify_ac(0).Picture
									// cmd_ac_verify(6).BackColor = vbRed
								}
								else
								{
									cmd_ac_verify[6].Visible = false;
								}

								menu_enabled("On");
								enable_important_items();

								bFormActivate = false;

							} // If bFormLoad = False And bFormInitalize = False And bFormActivate = False Then

						} // If bSkipFormActivate = False Then

					}
					else
					{
						this.Close();
					} // If gbl_bHomeClicked = False And bIsClosingForm = False Then

					return;
				}
				catch (System.Exception excep)
				{

					//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
					modAdminCommon.Report_Error($"Company_Form_Activate_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
					this.Cursor = CursorHelper.CursorDefault;
				}
			}
		} // Form_Activate

		public void Form_Initialize()
		{
			//initialize form

			try
			{

				if ((!bFormLoad && !bFormInitalize && !bFormActivate) || (bForceReload))
				{

					bFormInitalize = true;
					bFormActivate = false;


					gb_time_cc_timerDoubleClick = false;
					gb_time_cc_timerSingleClick = false;

					gb_time_ac_timerDoubleClick = false;
					gb_time_ac_timerSingleClick = false;

					bEdit_PurchQuest_Outstanding = false;
					bChk_CompRelationInternal_Outstanding = false;

					bFormLoad = false;
					bIsClearPhoneData = false;
					bIsClearWantedData = false;
					bIsClearContactData = false;
					bIsClearCompanyData = false;
					bBlockAirBp = false;

					sVerifyAircraftStatus = modGlobalVars.cEmptyString;
					sVerifiedContactFields = modGlobalVars.cEmptyString;
					sVerifiedCompanyFields = modGlobalVars.cEmptyString;

					sCompanyActiveFlag = modGlobalVars.cEmptyString;

					n_country_timezone_adjustment = 0;
					strSelectedAircraft = modGlobalVars.cEmptyString;
					strSelectedContact = modGlobalVars.cEmptyString;
					strSelectedYacht = modGlobalVars.cEmptyString;

					nSelectedAircraftID = 0;
					nSelectedContactID = 0;
					nSelectedYachtID = 0;
					nSelVerifyJournSub = 0;
					nSelVerifyAircraft = 0;

					bUser_Changed_Callback_Date = false;

					strJournalOrderBy = "ORDER BY journ_entry_date DESC, journ_id DESC ";

					bControlProductCodeMsg = false;
					bIsClosingForm = false;
					bCompany_active_record_Click = false;
					bCompany_history_DblClick = false;
					bCompany_relation_DblClick = false;

					bFormInitalize = false;

				} // If bFormLoad = False And bFormInitalize = False And bFormActivate = False Then
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Company_Form_Initialize_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				this.Cursor = CursorHelper.CursorDefault;
			}

		} // Form_Initialize

		//UPGRADE_WARNING: (2080) Form_Load event was upgraded to Form_Load method and has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2080
		private void Form_Load()
		{

			// load form
			int iClickSpeed = 0;

			try
			{

				if (!modAdminCommon.gbl_bHomeClicked && !bIsClosingForm)
				{

					bFormLoad = true;
					bFormInitalize = false;
					bFormActivate = false;
					bForceReload = false;

					SetSkipFormActivate(false);

					iClickSpeed = modCommon.GetDoubleClickSpeed();

					time_cc_timer.Enabled = false;
					if (iClickSpeed == 0)
					{
						time_cc_timer.Enabled = false;
					}
					else
					{
						time_cc_timer.Interval = iClickSpeed;
						time_cc_timer.Enabled = true;
					}

					time_ac_timer.Enabled = false;
					if (iClickSpeed == 0)
					{
						time_ac_timer.Enabled = false;
					}
					else
					{
						time_ac_timer.Interval = iClickSpeed;
						time_ac_timer.Enabled = true;
					}

					menu_enabled("Off");

					// tCompanyForm_EntryPoints = geNoEntryPoint
					// commented out msw 7/1/2013

					//new variables for determining if company is commercial only msw 8/31/10
					bCompany_Commercial_Records = false;
					bCompany_BusorHel_Records = false;
					grd_company_aircraft.Enabled = false;

					chk_dont_color_confirm.CheckState = CheckState.Unchecked;

					// RTW - HOLD
					//cfsiCompanyInfo.iDeliveryPositionComboListIndex = -1

					//reposition "verify status" panel
					pnl_verify_aircraft_status.Left = 293;
					pnl_verify_aircraft_status.Top = 127;

					// FILL COMBOS FROM AVAILABLE ARRAYS FILLED AT MAIN MENU LOAD
					modFillCompConControls.fill_accounttype_FromArray(cbo_comp_account[COMP_ACCOUNT_TYPE]);
					modFillCompConControls.fill_agencytype_FromArray(cbo_comp_agency_type);
					modFillCompConControls.Fill_GovernmentSubCode_List(cbo_comp_govsub_code);


					modFillCompConControls.fill_phonetype_FromArray(cbo_comp_pnum_type);
					modFillCompConControls.fill_country_FromArray(cbo_comp_country);
					modFillCompConControls.fill_state_FromArray(cbo_comp_state, false, false, false);
					modFillCompConControls.fill_timezone_FromArray(cbo_comp_timezone);
					modFillCompConControls.Fill_Language_FromArray(cbo_comp_language);
					modFillCompConControls.Fill_AccountRep_FromArray(cbo_comp_account[COMP_ACCOUNT_REP], false, false);
					modFillCompConControls.fill_questionlist_FromArray(cbo_comp_purchase_question);
					modFillCompConControls.fill_journ_subject_List(cbo_verify_journal_subject);
					modFillCompConControls.fill_journ_auto_subject_List(cbo_verify_journal_auto_subject, (false).ToString());
					modFillCompConControls.Fill_Journal_Note_Type(cbo_verify_note_type, false, false, false, false);
					modFillCompConControls.Fill_Journal_Note_Type(cbo_journal_note_type, false, true);

					modFillCompConControls.Fill_Wanted_Damage_List(cbo_amwant_accept_damage_cur);
					modFillCompConControls.Fill_Wanted_Damage_List(cbo_amwant_accept_damage_hist);

					modFillCompConControls.fill_wanted_model_list_FromArray(cbo_amwant_model);

					// 06/19/2014 - By David D. Cruger; Added
					modFillCompConControls.Fill_EMail_Notice_List(cmbContactEMail, "Contact");

					// 10/23/2015 - By David D. Cruger; Added
					modFillCompConControls.Fill_Company_Marketing_Rep_ComboBox(cbo_comp_account[COMP_MARKETING_REP], false);

					// Initialize the ToolBar
					toolbar_setup();
					toolbar_buttons_setup();

					mnuCompanyShowUserHistory.Text = frm_Main_Menu.DefInstance.mnuShowUserHistory.Text;
					SSTabHelper.SetSelectedIndex(tab_comp_description, 0);

					txtCompJournalSearch.Text = "";

					bFormLoad = false;

				} // If gbl_bHomeClicked = False And bIsClosingForm = False Then



				if (mdi_ResearchAssistant.DefInstance.lbl_test_omg.Visible)
				{
					lbl_test_omg3[0].Visible = true;
					lbl_test_omg3[0].ForeColor = Color.Cyan;
					lbl_test_omg3[1].Visible = true;
					lbl_test_omg3[2].Visible = true;
					lbl_test_omg3[3].Visible = true;
				}


				SSTabHelper.SetTabVisible(tab_company_details, 8, false);
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Company_Form_Load_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				this.Cursor = CursorHelper.CursorDefault;
			}

		} // Form_Load

		//UPGRADE_NOTE: (7001) The following declaration (save_crm_marketing_prospect_folders) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void save_crm_marketing_prospect_folders(int lHBCompId)
		//{
			//
			////  Dim cntCRMMktConn As New ADODB.Connection
			////  Dim rstRec1 As New ADODB.Recordset
			////  Dim strQuery1 As String
			////  Dim lCnt1 As Long
			////
			////  Dim strFolderName As String
			////  Dim lFolderId As Long
			////  Dim bSelected As Boolean
			////  Dim lMktCRMCompId  As Long
			////
			////  On Error GoTo save_crm_marketing_prospect_folders_Error
			////
			////  '----------------------------------------
			////  ' ONLY Update If On The Live Database
			////
			////  If gbl_Live_flag = True Then
			////
			////    If lstbCRMProspects.ListCount > 0 Then
			////
			////      If OpenMarketingCRMDatabase(cntCRMMktConn) = True Then
			////
			////        '---------------------------------------------
			////        ' Get Marketing CRM Company Client Id
			////        ' If One Exists
			////
			////        lMktCRMCompId = 0
			////
			////        strQuery1 = "SELECT clicomp_id FROM client_company "
			////        strQuery1 = strQuery1 & "WHERE (clicomp_jetnet_comp_id = " & CStr(lHBCompId) & ") "
			////
			////        rstRec1.Open strQuery1, cntCRMMktConn, adOpenStatic, adLockReadOnly, adCmdText
			////
			////        If rstRec1.BOF = False And rstRec1.EOF = False Then
			////          lMktCRMCompId = rstRec1!clicomp_id
			////        End If
			////
			////        rstRec1.Close
			////
			////        For lCnt1 = 0 To lstbCRMProspects.ListCount - 1
			////
			////          strFolderName = lstbCRMProspects.List(lCnt1)
			////          lFolderId = lstbCRMProspects.ItemData(lCnt1)
			////          bSelected = lstbCRMProspects.Selected(lCnt1)
			////
			////          strQuery1 = "SELECT * FROM client_folder_index "
			////          strQuery1 = strQuery1 & "WHERE (cfoldind_cfolder_id = " & CStr(lFolderId) & ")"
			////          strQuery1 = strQuery1 & "AND ("
			////          strQuery1 = strQuery1 & "       (cfoldind_jetnet_comp_id = " & CStr(lHBCompId) & ") "
			////          If lMktCRMCompId > 0 Then
			////            strQuery1 = strQuery1 & "  OR (cfoldind_client_comp_id = " & CStr(lMktCRMCompId) & ") "
			////          End If
			////          strQuery1 = strQuery1 & "    )"
			////
			////          rstRec1.Open strQuery1, cntCRMMktConn, adOpenDynamic, adLockBatchOptimistic, adCmdText
			////
			////          If rstRec1.EOF = False And rstRec1.EOF = False Then
			////            If bSelected = False Then ' Delete
			////              rstRec1.Delete
			////              rstRec1.UpdateBatch
			////              Record_Event "CRM Marketing Prospect Folders", "Company Removed From Folder: [" & strFolderName & "]", 0, 0, lHBCompId
			////            Else
			////              If lMktCRMCompId > 0 Then
			////                rstRec1!cfoldind_jetnet_comp_id = 0
			////                rstRec1!cfoldind_client_comp_id = lMktCRMCompId
			////              Else
			////                rstRec1!cfoldind_jetnet_comp_id = lHBCompId
			////                rstRec1!cfoldind_client_comp_id = 0
			////              End If
			////
			////              rstRec1.UpdateBatch
			////            End If
			////          Else
			////            If bSelected = True Then ' Add
			////              rstRec1.AddNew
			////              If lMktCRMCompId > 0 Then
			////                rstRec1!cfoldind_jetnet_comp_id = 0
			////                rstRec1!cfoldind_client_comp_id = lMktCRMCompId
			////              Else
			////                rstRec1!cfoldind_jetnet_comp_id = lHBCompId
			////                rstRec1!cfoldind_client_comp_id = 0
			////              End If
			////              rstRec1!cfoldind_cfolder_id = lFolderId
			////              rstRec1.UpdateBatch
			////              Record_Event "CRM Marketing Prospect Folders", "Company Added To Folder: [" & strFolderName & "]", 0, 0, lHBCompId
			////            End If
			////          End If ' If rstRec1.EOF = False And rstRec1.EOF = False Then
			////
			////          rstRec1.Close
			////
			////        Next lCnt1
			////
			////        cntCRMMktConn.Close
			////
			////      End If ' If OpenMarketingCRMDatabase(cntCRMMktConn) = True Then
			////
			////    End If ' If lstbCRMProspects.ListCount > 0 Then
			////
			////  Else
			////    Update_Status_Bar SB, "Can ONLY Update Marketing CRM Prospect Folders On The LIVE Database", vbRed
			////  End If ' If gbl_Live_flag = True Then
			////
			////  Set rstRec1 = Nothing
			////  Set cntCRMMktConn = Nothing
			//
			//return;
			//
			//
			//
			////UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
			//modAdminCommon.Report_Error($"save_crm_marketing_prospect_folders_Error ({Information.Err().Number.ToString()}) {Information.Err().Description} CMPID:[{lHBCompId.ToString()}] JID:[0]", "Company (modCompany)");
			//
		//} // save_crm_marketing_prospect_folders


		private void Form_Closed(Object eventSender, EventArgs eventArgs)
		{

			// unload form
			try
			{
				Turn_Off_Company_Timers();

				modCommon.Unload_Form("frm_Tips");
				modCommon.Unload_Form("frm_Info");

				this.Cursor = CursorHelper.CursorDefault;


				modCommon.UnLockCompany(nReference_CompanyID, nReference_CompanyJID, modAdminCommon.gbl_User_ID);
				modCommon.UnLockCompany(nReference_CompanyID, 0, modAdminCommon.gbl_User_ID);
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Company_Form_UnLoad_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				this.Cursor = CursorHelper.CursorDefault;
			}
		}

		private void time_ac_timer_Tick(Object eventSender, EventArgs eventArgs)
		{

			time_ac_timer.Enabled = false; // Turn OFF The Timer

			if (!gb_time_ac_timerDoubleClick)
			{

				gb_time_ac_timerSingleClick = true;

				if (grd_company_aircraft.CurrentRowIndex > 0)
				{

					grd_company_aircraft_singleClickBodyCode();

				}

				gb_time_ac_timerSingleClick = false;

			} // If gb_time_ac_timerDoubleClick = False Then

		}

		private void time_cc_timer_Tick(Object eventSender, EventArgs eventArgs)
		{

			time_cc_timer.Enabled = false; // Turn OFF The Timer

			if (!gb_time_cc_timerDoubleClick)
			{

				gb_time_cc_timerSingleClick = true;

				if (grd_company_contacts.CurrentRowIndex > 0)
				{

					grd_company_contacts_singleClickBodyCode();

				}

				gb_time_cc_timerSingleClick = false;

			} // If gb_time_cc_timerDoubleClick = False Then

		}

		private void grd_company_aircraft_doubleClickBodyCode()
		{

			int nRef_AircraftID = 0;

			Form Frm = null;
			Form f = null;

			try
			{

				if (grd_company_aircraft.CurrentRowIndex > 0)
				{

					if (Convert.ToString(grd_company_aircraft[1, 3].Value).Trim().ToUpper() == ("No Aircraft Found").ToUpper())
					{
						search_off();
						return;
					} // UCase$(Trim$(grd_company_aircraft.TextMatrix(1, 3))) = UCase("No Aircraft Found")

					if (grd_company_aircraft.MouseCol == 15)
					{

						nRememberGridRow = grd_company_aircraft.MouseRow;
						nRememberGridCol = grd_company_aircraft.MouseCol;

						modGridEditCommon.InPlace_Grid_Edit(grd_company_aircraft, cbo_comp_purchase_question, false, true, null, grd_company_aircraft.Left * 15, grd_company_aircraft.Top * 15);

						bEdit_PurchQuest_Outstanding = true;

						return;

					}

					search_on("Loading Aircraft...");

					// 04/16/2008 - By David D. Cruger
					// Save Company Record Info for Return

					modGlobalVars.cfsiCompanyInfo.lCompId = nReference_CompanyID;
					modGlobalVars.cfsiCompanyInfo.lJournId = nReference_CompanyJID;
					modGlobalVars.cfsiCompanyInfo.iDeliveryPositionComboListIndex = (short) cbo_ac_delivery_position.SelectedIndex;
					modGlobalVars.cfsiCompanyInfo.ichkLimitAircraftList = (short) chk_limit_aircraft_list.CheckState;

					if (Convert.ToInt32(Conversion.Val(txt_only_show_first_aircraft_recs.Text.Trim())) > 0)
					{
						modGlobalVars.cfsiCompanyInfo.lHowManyAircraft = Convert.ToInt32(Conversion.Val(txt_only_show_first_aircraft_recs.Text.Trim()));
					}
					else
					{
						modGlobalVars.cfsiCompanyInfo.lHowManyAircraft = 0;
					}

					modGlobalVars.cfsiCompanyInfo.lAircraftGridRow = grd_company_aircraft.CurrentRowIndex;
					modGlobalVars.cfsiCompanyInfo.lAircraftGridTopRow = grd_company_aircraft.FirstDisplayedScrollingRowIndex;

					modCommon.Highlight_Grid_Row(grd_company_aircraft);

					modGlobalVars.cfsiCompanyInfo.iTab = 0; // Aircdraf Tab
					modGlobalVars.cfsiCompanyInfo.lDocInProcGridRow = 0;
					modGlobalVars.cfsiCompanyInfo.lDocInProcGridTopRow = 0;
					if (gdCompDocInProcess.CurrentRowIndex > 0)
					{
						modGlobalVars.cfsiCompanyInfo.lDocInProcGridRow = gdCompDocInProcess.CurrentRowIndex;
						modGlobalVars.cfsiCompanyInfo.lDocInProcGridTopRow = gdCompDocInProcess.FirstDisplayedScrollingRowIndex;
					}
					 // cfsiCompanyInfo

					// cleanup any aircraft forms and open a clean form
					foreach (Form FrmIterator in Application.OpenForms)
					{
						Frm = FrmIterator;
						f = Frm;
						if (f.Name.Trim() == "frm_Aircraft")
						{
							//UPGRADE_TODO: (1067) Member Unload_Aircraft_Form is not defined in type VB.Form. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
							(f as frm_aircraft).Unload_Aircraft_Form();
							f.Close();
							//UPGRADE_NOTE: (1029) Object f may not be destroyed until it is garbage collected. More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-1029
							f = null;
							break;
						}
						Frm = default(Form);
					}

					nRef_AircraftID = grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex);

					// need to leave this one
					modAdminCommon.gbl_Aircraft_ID = nRef_AircraftID;
					modAdminCommon.gbl_Aircraft_Journal_ID = nReference_CompanyJID;

					frm_aircraft.DefInstance.Form_Initialize();
					frm_aircraft.DefInstance.StartForm = StartForm;
					frm_aircraft.DefInstance.Reference_Aircraft_ID = modAdminCommon.gbl_Aircraft_ID;
					frm_aircraft.DefInstance.Reference_Journal_ID = modAdminCommon.gbl_Aircraft_Journal_ID;
					frm_aircraft.DefInstance.Reference_Company_ID = nReference_CompanyID;
					frm_aircraft.DefInstance.Show();
					//UPGRADE_WARNING: (2065) Form method frm_aircraft.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
					frm_aircraft.DefInstance.BringToFront();
					//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
					frm_aircraft.DefInstance.Form_Activated(frm_aircraft.DefInstance, new EventArgs());

					this.Cursor = CursorHelper.CursorDefault;

					Hide_MySelf(true, true);

				} // grd_company_aircraft.Row > 0
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"grd_company_aircraft_dblclick_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		private void grd_company_aircraft_singleClickBodyCode()
		{

			int nGridCol = 0;
			bool bAlreadyVerifiedFlag = false;

			try
			{

				if (Convert.ToString(grd_company_aircraft[1, 3].Value).Trim().ToUpper() == ("No Aircraft Found").ToUpper())
				{
					lbl_comp[AIRCRAFT_CONTACT_INDEX].Visible = false;
					cbo_company_research_contact.Visible = false;
					lst_aircraft_contact.Visible = false;
					return;
				} // UCase$(Trim$(grd_company_aircraft.TextMatrix(1, 3))) = UCase$("No Aircraft Found")

				if (grd_company_aircraft.CurrentRowIndex > 0)
				{

					if (bEdit_PurchQuest_Outstanding)
					{

						modGridEditCommon.InPlace_Grid_Reset(grd_company_aircraft, cbo_comp_purchase_question, nRememberGridRow, nRememberGridCol);

						bEdit_PurchQuest_Outstanding = false;

					}

					select_company_aircraft(grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex));

					cbo_company_research_contact.SelectedIndex = -1;
					if (strSelectedContact.Trim() != modGlobalVars.cEmptyString)
					{
						int tempForEndVar = cbo_company_research_contact.Items.Count - 1;
						for (int iLoop = 0; iLoop <= tempForEndVar; iLoop++)
						{
							if (cbo_company_research_contact.GetListItem(iLoop).Trim().ToLower() == strSelectedContact.Trim().ToLower())
							{
								cbo_company_research_contact.SelectedIndex = iLoop;
								break;
							}
						}
					}

					lbl_comp[AIRCRAFT_CONTACT_INDEX].Visible = true;
					cbo_company_research_contact.Visible = true;
					lst_aircraft_contact.Visible = true;

					bAlreadyVerifiedFlag = modCompany.has_aircraft_been_verified(grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex), arrConfirmAircraft);

					//ADDED MSW - 6/5/18
					cmd_ac_verify[7].Visible = false;
					grd_company_aircraft.CurrentColumnIndex = 8;
					if (grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim().IndexOf("OWNER") >= 0)
					{
						cmd_ac_verify[7].Visible = true;
					}

					if (!bAlreadyVerifiedFlag)
					{
						nGridCol = grd_company_aircraft.CurrentColumnIndex;
						grd_company_aircraft.CurrentColumnIndex = 8;

						if (ColorTranslator.ToOle(grd_company_aircraft.CellBackColor).ToString() == modAdminCommon.PrimaryColor)
						{
							cmd_ac_verify[0].Visible = true; // Verify Aircraft
							cmd_ac_verify[0].Text = "Verify A/C Status";
						}
						else if (ColorTranslator.ToOle(grd_company_aircraft.CellBackColor).ToString() == modAdminCommon.ExclusiveColor)
						{ 
							cmd_ac_verify[0].Visible = true; // Verify Aircraft
							cmd_ac_verify[0].Text = "Verify Exclusive Status";
						}
						else
						{
							cmd_ac_verify[0].Visible = false; // Verify Aircraft
						}
						grd_company_aircraft.CurrentColumnIndex = nGridCol;
					}
					else
					{
						cmd_ac_verify[0].Visible = false; // Verify Aircraft
					}

				}

				modGlobalVars.cfsiCompanyInfo.lAircraftGridRow = grd_company_aircraft.CurrentRowIndex;
				modGlobalVars.cfsiCompanyInfo.lAircraftGridTopRow = grd_company_aircraft.FirstDisplayedScrollingRowIndex;

				modCommon.Highlight_Grid_Row(grd_company_aircraft);

				grd_company_aircraft.Redraw = true;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"grd_company_aircraft_single_click_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		private void grd_company_aircraft_Click(Object eventSender, EventArgs eventArgs) => time_ac_timer.Enabled = true; // Turn On Timer


		private void grd_company_aircraft_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			int nRememberGridRow = 0;
			int nRememberGridCol = 0;

			time_ac_timer.Enabled = false; // Turn Off Timer So The Single Click Is Never Called

			gb_time_ac_timerDoubleClick = true;

			if (!gb_time_ac_timerSingleClick)
			{

				nRememberGridRow = grd_company_aircraft.MouseRow;
				nRememberGridCol = grd_company_aircraft.MouseCol;

				if (nRememberGridCol == 0 && nRememberGridRow > 0)
				{


					modAdminCommon.gbl_Aircraft_ID = grd_company_aircraft.get_RowData(grd_company_aircraft.CurrentRowIndex);
					//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					//VB.Global.Load(frm_WebReport.DefInstance);
					frm_WebReport.DefInstance.WhichReport = "Homebase Record";
					frm_WebReport.DefInstance.Show();

				}
				else
				{
					grd_company_aircraft_doubleClickBodyCode();
				}



			} // If gbACTimer1SingleClick = False Then

			gb_time_ac_timerDoubleClick = false;

		}

		private void grd_company_aircraft_MouseDown(Object eventSender, MouseEventArgs eventArgs)
		{
			int Button = (eventArgs.Button == MouseButtons.Left) ? 1 : ((eventArgs.Button == MouseButtons.Right) ? 2 : 4);
			int Shift = ((int) Control.ModifierKeys) / 65536;
			float X = eventArgs.X * 15;
			float Y = eventArgs.Y * 15;

			ac_reload_spot = 0; // clear every click
			int lRow1 = grd_company_aircraft.MouseRow;
			int lCol1 = grd_company_aircraft.MouseCol;


			if (grd_company_aircraft.CurrentRowIndex > 0)
			{

				if (Button == UpgradeHelpers.Utils.WinForms.MouseButtonsHelper.GetVB6ShortValue(MouseButtons.Right))
				{

					grd_company_aircraft.CurrentColumnIndex = lCol1;

					if (grd_company_aircraft.CurrentRowIndex != grd_company_aircraft.MouseRow)
					{

						grd_company_aircraft.CurrentRowIndex = lRow1;

						if (Convert.ToString(grd_company_aircraft[1, 3].Value).Trim().ToUpper() == ("No Aircraft Found").ToUpper())
						{
							search_off();
							return;
						} // UCase$(Trim$(grd_company_aircraft.TextMatrix(1, 3))) <> UCase$("No Aircraft Found")

						grd_company_aircraft_singleClickBodyCode();

					}

					grd_company_aircraft.CurrentColumnIndex = lCol1;

					//--------------------------------------------------
					// Click on the Company (Purple) To Call To Verify
					// Exclusive Broker or Sales Company/Contact
					mnuShowExclusiveBroker.Available = true;

					modCommon.Highlight_Grid_Row(grd_company_aircraft);

					//UPGRADE_WARNING: (6024) Default menues are not supported for Context Menues (Popup) More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6024
					Ctx_mnuRightClickAircraft.Show(this, PointToClient(Cursor.Position).X, PointToClient(Cursor.Position).Y);
					grd_company_aircraft.Redraw = true;

					//added MSW 7/7/2015 in order to re-go to the row
					if (grd_company_aircraft.CurrentRowIndex > 1)
					{
						grd_company_aircraft.FirstDisplayedScrollingRowIndex = grd_company_aircraft.CurrentRowIndex;
					}

				} // If Button = vbRightButton Then

			} // If grd_company_aircraft.Row > 0 Then

		} // grd_company_aircraft_MouseDown

		private void grd_company_contacts_doubleClickBodyCode()
		{

			frm_CompanyContact new_frm_CompanyContact = frm_CompanyContact.CreateInstance();
			int nContactID = 0;
			int nRememberGridRowCount = 0;

			try
			{

				if (grd_company_contacts.CurrentRowIndex > 0 && Convert.ToString(grd_company_contacts[1, 2].Value).Trim().ToUpper() != ("No Contacts Found").ToUpper())
				{

					nRememberGridRow = grd_company_contacts.CurrentRowIndex;
					nRememberGridRowCount = grd_company_contacts.RowsCount;

					nContactID = grd_company_contacts.get_RowData(nRememberGridRow);

					if (nContactID > 0)
					{

						new_frm_CompanyContact.nContactID = nContactID;
						new_frm_CompanyContact.nCompanyID = nReference_CompanyID;
						new_frm_CompanyContact.nJournID = nReference_CompanyJID;
						new_frm_CompanyContact.chk_hidden_comp.CheckState = chk_company_flag[1].CheckState;

						grd_company_contacts.CurrentColumnIndex = 1;
						new_frm_CompanyContact.company_contact_has_related = grd_company_contacts.CellBackColor == Color.Yellow;

						new_frm_CompanyContact.CompanyName_Renamed = modCommon.GetCompanyName(nReference_CompanyID, nReference_CompanyJID);
						new_frm_CompanyContact.ServicesUsed = modCommon.GetCompanyServiceName(nReference_CompanyID, nReference_CompanyJID, modGlobalVars.ServicesUsed_Array);

						this.Cursor = Cursors.WaitCursor;

						modCommon.CenterFormOnHomebaseMainForm(new_frm_CompanyContact);

						new_frm_CompanyContact.ShowDialog();

						new_frm_CompanyContact.Close();

						fill_phone_company_grid(); // added msw - 5/4/18

						new_frm_CompanyContact = null;

						this.Activate();

						fill_company_contact_grid();

						// if the contact grid changed then
						if (grd_company_contacts.RowsCount < nRememberGridRowCount)
						{

							if (grd_company_contacts.CurrentRowIndex > 0 && grd_company_contacts.ColumnsCount > 1)
							{

								if (Convert.ToString(grd_company_contacts[1, 2].Value).Trim().ToUpper() != ("No Contacts Found").ToUpper())
								{

									nRememberGridRow = 1; // reset to select the first contact in the list

									if (enter_company_info.s_comp_fractowr_id > 0 && grd_company_contacts.get_RowData(nRememberGridRow) > 0)
									{
										if (enter_company_info.s_comp_fractowr_contact_id != grd_company_contacts.get_RowData(nRememberGridRow))
										{
											modCompany.fill_fractional_owner_contact_list(nReference_CompanyID, nReference_CompanyJID, enter_company_info.s_comp_fractowr_contact_id, cbo_comp_fractowr_contact_id);
										}
										else
										{
											modCompany.fill_fractional_owner_contact_list(nReference_CompanyID, nReference_CompanyJID, grd_company_contacts.get_RowData(nRememberGridRow), cbo_comp_fractowr_contact_id);
										}
									}

									select_company_contact(grd_company_contacts.get_RowData(nRememberGridRow));

									grd_company_contacts.CurrentRowIndex = nRememberGridRow;
									grd_company_contacts.RowSel = grd_company_contacts.CurrentRowIndex;
									grd_company_contacts.ColSel = 0;
									grd_company_contacts.Redraw = true;

								} // If UCase$(Trim$(grd_company_contacts.TextMatrix(1, 2))) <> UCase$("No Contacts Found") Then

							} // If grd_company_contacts.Row > 0 And grd_company_contacts.Cols > 1 Then

						}
						else
						{

							if (enter_company_info.s_comp_fractowr_id > 0 && grd_company_contacts.get_RowData(nRememberGridRow) > 0)
							{
								if (enter_company_info.s_comp_fractowr_contact_id != grd_company_contacts.get_RowData(nRememberGridRow))
								{
									modCompany.fill_fractional_owner_contact_list(nReference_CompanyID, nReference_CompanyJID, enter_company_info.s_comp_fractowr_contact_id, cbo_comp_fractowr_contact_id);
								}
								else
								{
									modCompany.fill_fractional_owner_contact_list(nReference_CompanyID, nReference_CompanyJID, grd_company_contacts.get_RowData(nRememberGridRow), cbo_comp_fractowr_contact_id);
								}
							}

							select_company_contact(grd_company_contacts.get_RowData(nRememberGridRow));

							grd_company_contacts.CurrentRowIndex = nRememberGridRow;
							grd_company_contacts.RowSel = grd_company_contacts.CurrentRowIndex;
							grd_company_contacts.ColSel = 0;
							grd_company_contacts.Redraw = true;

						}

					} // nContactID > 0

					search_off();

				} // grd_company_contacts.Row > 0

				nRememberGridRow = 0;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"grd_company_contacts_dblclick_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				nRememberGridRow = 0;

				search_off();
			}

		}

		private void grd_company_contacts_singleClickBodyCode()
		{

			string strMsg = "";
			System.DateTime dtStartDate = DateTime.FromOADate(0);
			System.DateTime dtEndDate = DateTime.FromOADate(0);
			int lRow = 0;
			int lContactId = 0;

			try
			{

				if (grd_company_contacts.CurrentRowIndex > 0 && Convert.ToString(grd_company_contacts[1, 2].Value).Trim().ToUpper() != ("No Contacts Found").ToUpper())
				{

					lRow = grd_company_contacts.CurrentRowIndex;

					btn_array[3].Enabled = true;

					modCommon.Start_Activity_Monitor_Message("View Contact", ref strMsg, ref dtStartDate, ref dtEndDate);

					strMsg = $" - {Convert.ToString(grd_company_contacts[lRow, 2].Value)}"; // Contact Name
					lContactId = grd_company_contacts.get_RowData(grd_company_contacts.CurrentRowIndex);

					select_company_contact(lContactId);

					modCommon.End_Activity_Monitor_Message("View Contact", ref strMsg, dtStartDate, ref dtEndDate, 0, nReference_CompanyJID, nReference_CompanyID, 0, lContactId);

					grd_company_contacts.RowSel = grd_company_contacts.CurrentRowIndex;

				} // UCase(Trim(grd_company_contacts.TextMatrix(1, 2))) <> UCase("No Contacts Found")
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"grd_company_contacts_singleClick_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
			}

		}

		private void grd_company_contacts_Click(Object eventSender, EventArgs eventArgs)
		{

			if (grd_company_contacts.Enabled)
			{
				time_cc_timer.Enabled = true; // Turn On Timer
			}

		}

		private void grd_company_contacts_DoubleClick(Object eventSender, EventArgs eventArgs)
		{

			if (grd_company_contacts.Enabled)
			{

				time_cc_timer.Enabled = false; // Turn Off Timer So The Single Click Is Never Called

				gb_time_cc_timerDoubleClick = true;

				if (!gb_time_cc_timerSingleClick)
				{

					grd_company_contacts_doubleClickBodyCode();

				} // If gbCCTimer1SingleClick = False Then

				gb_time_cc_timerDoubleClick = false;

			} // If grd_company_contacts.Enabled = True Then

		}

		private void grd_company_relationships_Click(Object eventSender, EventArgs eventArgs)
		{

			int lRow = 0;
			int lCol = 0;
			int temper = 0;
			string temp_type = "";
			int comp1_id = 0;
			int comp2_id = 0;
			string sub_type = "";
			string type1_name = "";
			string type2_name = "";


			if (grd_company_relationships.CurrentRowIndex > 0)
			{

				cbo_comp_account[3].Visible = true;
				cbo_comp_account[4].Visible = true;
				lbl_comp[99].Visible = true;
				cbo_comp_account[3].Items.Clear();
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				modFillCompConControls.Fill_Contact_Type_ListFromArray(cbo_comp_account[3], lbl_comp[99], (modGlobalVars.e_find_form_entry_points) 8);


				lRow = grd_company_relationships.CurrentRowIndex;

				//---------- ADDED MSW - ADDING IN THE COMPANY TO COMPANY RELATIONSHIPS------------------------

				comp1_id = 0;
				comp2_id = 0;
				// check if we are the primary company
				string tempRefParam = "";
				Find_Company_References(ref comp1_id, ref comp2_id, ref type1_name, ref type2_name, Convert.ToInt32(Double.Parse(grd_company_relationships.get_RowData(grd_company_relationships.CurrentRowIndex).ToString())), ref tempRefParam);

				int tempForEndVar = cbo_comp_account[3].Items.Count - 1;
				for (int i = 0; i <= tempForEndVar; i++)
				{
					cbo_comp_account[3].SelectedIndex = i;
					if (cbo_comp_account[3].Text.IndexOf(type1_name) >= 0)
					{
						if (cbo_comp_account[3].Text.IndexOf(type2_name) >= 0)
						{
							break;
						}
					}
				}

				lbl_comp[100].Visible = false;
				cbo_comp_account[4].Visible = false;

				// MAKE THE LABEL FOR 3 be the current company rel
				if (Convert.ToInt32(Double.Parse(txt_comp_id.Text)) == comp1_id)
				{
					cbo_comp_account[4].SelectedIndex = 1;
					cbo_comp_account[4].Tag = $"{cbo_comp_account[3].Text}: {cbo_comp_account[4].Text}";
					cbo_comp_account[4].SelectedIndex = 0;
					cbo_comp_account[3].Tag = $"{cbo_comp_account[3].Text}: {cbo_comp_account[4].Text}";
				}
				else
				{
					cbo_comp_account[4].SelectedIndex = 0;
					cbo_comp_account[4].Tag = $"{cbo_comp_account[3].Text}: {cbo_comp_account[4].Text}";
					cbo_comp_account[4].SelectedIndex = 1;
					cbo_comp_account[3].Tag = $"{cbo_comp_account[3].Text}: {cbo_comp_account[4].Text}";
				}

				cbo_comp_account[4].Visible = true;

				if (bChk_CompRelationInternal_Outstanding)
				{
					modGridEditCommon.InPlace_Grid_Reset(grd_company_relationships, chk_internal_relation, nRememberGridRow, nRememberGridCol);
					bChk_CompRelationInternal_Outstanding = false;
				}

				if (Convert.ToString(grd_company_relationships[1, 0].Value).ToLower() != ("No Relationships Found").ToLower())
				{

					cmd_relationship_buttons[3].Visible = false;
					cmd_relationship_buttons[4].Visible = false; // MSW - 4
					display_related_grid_selection();

					// 03/19/2015 - By David D. Cruger
					// Added Hide Flag
					lbl_comp[COMPANY_HIDE_RELATIONSHIP].Visible = true;
					if (Convert.ToString(grd_company_relationships[lRow, 9].Value) == "Yes")
					{ // Hide Flag
						lbl_comp[COMPANY_HIDE_RELATIONSHIP].Text = "Un-Hide Relationship";
					}
					else
					{
						lbl_comp[COMPANY_HIDE_RELATIONSHIP].Text = "Hide Relationship";
					}

				}
				else
				{

					cmd_relationship_buttons[1].Visible = false; // Remove Relationship
					cmd_relationship_buttons[2].Visible = false; // Company
					cmd_relationship_buttons[3].Visible = false;
					cmd_relationship_buttons[4].Visible = false; // MSW - 4

				} // If LCase$(grd_company_relationships.TextMatrix(1, 0)) <> LCase$("No Relationships Found") Then

				grd_company_relationships.RowSel = lRow;

			} // If grd_company_relationships.Row > 0 Then

		} // grd_company_relationships_Click

		private void Clear_Company_Save_Info()
		{


			modGlobalVars.cfsiCompanyInfo.lCompId = 0; // Reset
			modGlobalVars.cfsiCompanyInfo.lJournId = 0;
			modGlobalVars.cfsiCompanyInfo.iDeliveryPositionComboListIndex = -1;
			modGlobalVars.cfsiCompanyInfo.ichkLimitAircraftList = (short) CheckState.Unchecked;
			modGlobalVars.cfsiCompanyInfo.lHowManyAircraft = 0;
			modGlobalVars.cfsiCompanyInfo.lAircraftGridRow = 0;
			modGlobalVars.cfsiCompanyInfo.lAircraftGridTopRow = 0;
			modGlobalVars.cfsiCompanyInfo.iTab = 0;
			modGlobalVars.cfsiCompanyInfo.lDocInProcGridRow = 0;
			modGlobalVars.cfsiCompanyInfo.lDocInProcGridTopRow = 0;
			 // cfsiCompanyInfo

		} // Clear_Company_Save_Info

		private void grd_company_relationships_DoubleClick(Object eventSender, EventArgs eventArgs)
		{


			grd_company_relationships.Enabled = false;

			if (grd_company_relationships.CurrentRowIndex > 0)
			{

				if (Convert.ToString(grd_company_relationships[1, 0].Value).ToLower() != ("No Relationships Found").ToLower())
				{

					if (grd_company_relationships.MouseCol == 3)
					{

						nRememberGridRow = grd_company_relationships.MouseRow;
						nRememberGridCol = grd_company_relationships.MouseCol;

						modGridEditCommon.InPlace_Grid_Edit(grd_company_relationships, chk_internal_relation, false, false, null, grd_company_relationships.Left * 15, grd_company_relationships.Top * 15, chk_internal_relation.Width * 15);

						bChk_CompRelationInternal_Outstanding = true;

					}
					else
					{

						// before we leave the record for the related company
						// save any changes
						bCompany_relation_DblClick = true;

						cmd_company_save_Click(cmd_company_save, new EventArgs());
						Application.DoEvents();

						bCompany_relation_DblClick = false;

						//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
						nReference_CompanyID = grd_company_relationships.BandData(grd_company_relationships.CurrentRowIndex);
						nReference_CompanyJID = 0;

						// 04/25/2008 - By David D. Cruger
						// When going from company to company through relationships
						// Reset all these values for Delivery Position
						Clear_Company_Save_Info();

						grdCompDupByAdd.Clear();
						grdCompDupByAdd.RowsCount = 2;
						grdCompDupByAdd.ColumnsCount = 2;

						cbo_ac_delivery_position.Items.Clear();
						cbo_ac_delivery_position.Enabled = false;
						// 8/31/2010 - Updated MSW/RTW, deleted second value inserted and added two booleans that are adjusted previously to compare and show desired results
						modFillCompConControls.Fill_Deliver_Position_List(cbo_ac_delivery_position, bCompany_Commercial_Records, bCompany_BusorHel_Records, modGlobalVars.cfsiCompanyInfo.iDeliveryPositionComboListIndex);
						cbo_ac_delivery_position.Enabled = true;

						//UPGRADE_WARNING: (2065) Form event Form.Activated has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
						Form_Activated(this, new EventArgs());

					} // If grd_company_relationships.MouseCol = 3 Then

				} // If grd_company_relationships.TextMatrix(grd_company_relationships.MouseRow, 0) <> "None Found" Then

			} // If grd_company_relationships.Row > 0 Then

		} // grd_company_relationships_DblClick

		private void search_on(string inMessage)
		{

			try
			{

				this.Cursor = Cursors.WaitCursor;
				pnl_update_message.Visible = true;
				//UPGRADE_ISSUE: (2064) Threed.SSPanel property pnl_update_Message.Caption was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				pnl_update_message.setCaption(inMessage.Trim());
				pnl_update_message.Refresh();
				modStatusBar.Update_Status_Bar(modAdminCommon.SB, inMessage, Color.Blue);
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Record_Error($"search_on_Error:  ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
			}

		}

		private void search_off()
		{

			this.Cursor = CursorHelper.CursorDefault;
			pnl_update_message.Visible = false;
			//UPGRADE_ISSUE: (2064) Threed.SSPanel property pnl_update_Message.Caption was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			pnl_update_message.setCaption(" ");
			pnl_update_message.Refresh();
			modStatusBar.Clear_Status_Bar(modAdminCommon.SB);
			Application.DoEvents();

		}

		private void Hide_MySelf(bool bAndUnload, bool bAndSaveOnClose)
		{

			try
			{

				modAdminCommon.Record_Event("Monitor Activity", "Hide_MySelf", 0, nReference_CompanyJID, nReference_CompanyID, false, 0, 0);

				if (bAndSaveOnClose)
				{
					bIsClosingForm = true;
				}

				if (!modAdminCommon.gbl_bHomeClicked)
				{
					tCompanyForm_ExitValues.tEntryPoint = tCompanyForm_EntryPoints;
				}

				this.Hide();

				if (bAndUnload)
				{
					modAdminCommon.Record_Event("Monitor Activity", "Hide_MySelf - bAndUnload = True", 0, nReference_CompanyJID, nReference_CompanyID, false, 0, 0);
					Turn_Off_Company_Timers();
					modCommon.UnLockCompany(nReference_CompanyID, nReference_CompanyJID, modAdminCommon.gbl_User_ID.Trim().ToLower());
					modAdminCommon.Record_Event("Monitor Activity", "Hide_MySelf - After UnLockCompany", 0, nReference_CompanyJID, nReference_CompanyID, false, 0, 0);
					this.Close();
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"Hide_MySelf_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}] EP:{modCommon.pubf_FindFormEntryPointsToString(tCompanyForm_ExitValues.tEntryPoint)}", "frm_company(HIDE)");
				modCommon.UnLockCompany(nReference_CompanyID, nReference_CompanyJID, modAdminCommon.gbl_User_ID.Trim().ToLower());

				this.Hide();
				this.Close();
			}

		}

		private void tbr_ToolBar_ButtonClick(Object eventSender, EventArgs eventArgs)
		{
			ToolStripItem Button = (ToolStripItem) eventSender;

			try
			{

				Application.DoEvents();
				Application.DoEvents();
				Application.DoEvents();
				Application.DoEvents();


				switch(Button.Name)
				{
					case "Home" : 

						 
						modAdminCommon.gbl_bHomeClicked = true; 
						 
						Turn_Off_Company_Timers(); 
						 
						this.Close(); 
						 
						//ADDED MSW - if you hit the home button, it clears the locks on the company 
						modCommon.UnLockCompany_ALL(0, modAdminCommon.gbl_User_ID.Trim().ToLower()); 
						 
						Application.DoEvents(); 
						 
						modCommon.DelaySeconds(1); 
						mdi_ResearchAssistant.DefInstance.Show(); 
						//UPGRADE_WARNING: (2065) MDIForm method mdi_ResearchAssistant.ZOrder has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065 
						mdi_ResearchAssistant.DefInstance.BringToFront(); 
						 
						break;
					case "Back" : 
						 
						modAdminCommon.Record_Event("Monitor Activity", "Back Button Clicked", 0, nReference_CompanyJID, nReference_CompanyID, false, 0, 0); 
						 
						mnuFileClose_Click(mnufileclose, new EventArgs()); 
						 
						break;
					default:
						MessageBox.Show("ToolBar Error", "Unrecognized Toolbar Reference", MessageBoxButtons.OK, MessageBoxIcon.Information); 
						 
						break;
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"tbr_ToolBar_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		private void toolbar_buttons_setup()
		{
			//*****************************************************************************************************
			// Function used to enable toolbar
			//**************************************************************************************************


			ToolStrip tbr = tbr_ToolBar; //gap-note ToolStrip instead of Control

			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[2].Visible = true;
			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[4].Visible = true;

			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[2].Enabled = true;
			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[4].Enabled = true;

		}

		private void toolbar_setup()
		{
			//*****************************************************************************************************
			// Function used to enable toolbar
			//**************************************************************************************************


			ToolStrip tbr = tbr_ToolBar; //gap-note ToolStrip instead of Control

			//UPGRADE_TODO: (1067) Member ImageList is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			//UPGRADE_WARNING: (1068) mdi_ResearchAssistant.imgNormal of type MSComctlLib.ImageList is being forced to Scalar. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			tbr.ImageList = mdi_ResearchAssistant.DefInstance.imgNormal;

			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			(tbr.Items[2] as ToolStripButton).Image = (Image) resources.GetObject( "Home");
			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			(tbr.Items[4] as ToolStripButton).Image = (Image) resources.GetObject( "Back");

			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[2].Text = "Home";
			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[4].Text = "Back";

			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[2].ToolTipText = "Go to Main Menu";
			//UPGRADE_TODO: (1067) Member Buttons is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
			tbr.Items[4].ToolTipText = "Go to Previous Screen";


		}

		private void Refresh_Form_Pnl_Lbl_Txt()
		{

			try
			{

				Control Control_Obj = null;

				//UPGRADE_WARNING: (2065) Form property frm_Company.Controls has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
				foreach (Control Control_ObjIterator in ContainerHelper.Controls(this))
				{
					Control_Obj = Control_ObjIterator;
					if ((Control_Obj is Panel) || (Control_Obj is Label) || (Control_Obj is TextBox))
					{
						//UPGRADE_TODO: (1067) Member Refresh is not defined in type object. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
						Control_Obj.Refresh();
					}
					//Control_Obj
					Control_Obj = default(Control);
				}
			}
			catch (System.Exception excep)
			{

				modAdminCommon.Report_Error("Refresh_Form_Pnl_Lbl_Txt_Error", excep.Message);
			}

		}

		private object fill_abi_services()
		{

			string Query = "";
			ADORecordSetHelper rsABIServiceInfo = null;

			string M = "";
			int nItemCounter = 0;
			int nCounter = 0;
			bool bServiceActive = false; // indicates if active services
			bool bServicePaid = false; // indicates if active services

			try
			{

				lst_abi_services.Items.Clear();
				lst_abi_services.Enabled = false;
				bServiceActive = false;
				bServicePaid = false;

				if (nReference_CompanyID > 0)
				{

					Query = "SELECT abiserv_name, abicserv_start_date, abicserv_end_date, abicserv_amount";
					Query = $"{Query} FROM ABI_Service WITH(NOLOCK) INNER JOIN ABI_Company_Service ON abiserv_code = abicserv_serv_code";
					Query = $"{Query} AND abicserv_comp_id  = {nReference_CompanyID.ToString()}";

					rsABIServiceInfo = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rsABIServiceInfo.Fields) && !(rsABIServiceInfo.BOF && rsABIServiceInfo.EOF))
					{
						lst_abi_services.AddItem(" ** ABI Services ** ", 0);


						while(!rsABIServiceInfo.EOF)
						{

							nItemCounter++;
							M = $"({(nCounter + 1).ToString()}) Service Name: {Convert.ToString(rsABIServiceInfo["abiserv_name"]).Trim()}";
							lst_abi_services.AddItem(M, nItemCounter);

							nItemCounter++;
							M = $"      From: {Convert.ToString(rsABIServiceInfo["abicserv_start_date"]).Trim()}";
							M = $"{M} To: {Convert.ToString(rsABIServiceInfo["abicserv_end_date"]).Trim()}";
							lst_abi_services.AddItem(M, nItemCounter);

							nItemCounter++;
							M = modGlobalVars.cEmptyString;
							lst_abi_services.AddItem(M, nItemCounter);

							// IDENTIFY IF THE COMPANY HAS ACTIVE SERVICES
							if (DateTime.Parse(Convert.ToString(rsABIServiceInfo["abicserv_end_date"])) >= DateTime.Now)
							{
								bServiceActive = true;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(rsABIServiceInfo["abicserv_amount"]))
								{
									if (Convert.ToDouble(rsABIServiceInfo["abicserv_amount"]) > 0)
									{
										bServicePaid = true;
									}
								}
							}

							rsABIServiceInfo.MoveNext();
							nCounter++;

						};

						// TURN ABI LABEL GREEN IF ACTIVE AND RED IF NOT
						if (bServiceActive)
						{
							lbl_comp[ABIFLAG].ForeColor = Color.Green;

							if (bServicePaid)
							{
								lbl_comp[ABIFLAG].Text = "ABI$";
							}
							else
							{
								lbl_comp[ABIFLAG].Text = "ABI";
							}

						}
						else
						{
							lbl_comp[ABIFLAG].ForeColor = Color.Red;
							lbl_comp[ABIFLAG].Text = "ABI";
						}

						lbl_comp[ABIFLAG].Visible = true;

					}
					else
					{

						lst_abi_services.AddItem(" ** NO ABI Services ** ", 0);
						lbl_comp[ABIFLAG].Visible = false;

					}

					lst_abi_services.Enabled = true;
					ListBoxHelper.SetSelectedIndex(lst_abi_services, 0);

					rsABIServiceInfo.Close();
					rsABIServiceInfo = null;

				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_abi_services_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

			return null;
		}

		private void fill_company_aircraft_grid(int starting_place = 0)
		{

			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO SELECT AND DISPLAY A LIST OF AIRCRAFT ASSOCIATED WITH THE CURRENT COMPANY.

			string strError_Note = "";
			try
			{

				string Query = "";
				string cellcolor = "";
				cellcolor = "";
				string sVerifyAc = "";
				sVerifyAc = "";
				int nPreviousAircraft = 0;
				nPreviousAircraft = 0;
				int nMaxAircraft = 0;
				nMaxAircraft = 0;
				int nLoop = 0;
				nLoop = 0;
				int nTotalAircraft = 0;
				nTotalAircraft = 0;
				int nPrimaryCount = 0;
				nPrimaryCount = 0;
				int nInactiveCount = 0;
				nInactiveCount = 0;
				int tmpRefID = 0;
				tmpRefID = 0;
				bool bHasShares = false;
				bHasShares = false;
				ADORecordSetHelper ado_aircraft = null; // used to define what portion of procedure caught error
				int lCnt1 = 0;
				int row_count = 0;
				row_count = 0;
				int i = 0;
				i = 0;
				int lACCnt = 0;
				StringBuilder strAPort = new StringBuilder();
				string strCOUNTRY = "";
				string strCountryAbbrev = "";

				search_on("Getting Company Aircraft....");

				txt_only_show_first_aircraft_recs.Text = txt_only_show_first_aircraft_recs.Text.Trim();

				strError_Note = "Setup Procedure";

				grd_company_aircraft.Visible = false;
				grd_company_aircraft.Enabled = false;
				grd_company_aircraft.Redraw = false;

				grd_company_aircraft.Clear();
				grd_company_aircraft.ColumnsCount = 16;
				grd_company_aircraft.RowsCount = 2;

				grd_company_aircraft.FixedRows = 1;
				grd_company_contacts.FixedColumns = 0;

				// ADDED IN MSW - 11/7/2018
				if (chk_view_eu.CheckState == CheckState.Checked)
				{

					grd_company_aircraft.CurrentRowIndex = 0;
					grd_company_aircraft.CurrentColumnIndex = 0;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 31);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Web";

					grd_company_aircraft.CurrentColumnIndex = 1;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 23);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "AF";

					grd_company_aircraft.CurrentColumnIndex = 2;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 20);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Seq";

					grd_company_aircraft.CurrentColumnIndex = 3;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 133);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Make/Model";

					grd_company_aircraft.CurrentColumnIndex = 4;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 73);
					
					grd_company_aircraft.ColAlignment[4] = DataGridViewContentAlignment.NotSet;
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Serial#";

					grd_company_aircraft.CurrentColumnIndex = 5;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 13);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Mfr/Dlv";

					grd_company_aircraft.CurrentColumnIndex = 6;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 100);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Name / IATA/ICAO";

					grd_company_aircraft.CurrentColumnIndex = 7;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 73);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Status";

					grd_company_aircraft.CurrentColumnIndex = 8;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 80);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Type";

					grd_company_aircraft.CurrentColumnIndex = 9;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 140);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Contact";

					grd_company_aircraft.CurrentColumnIndex = 10;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 53);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Reg #";

					grd_company_aircraft.CurrentColumnIndex = 11;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 60);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Asking";

					grd_company_aircraft.CurrentColumnIndex = 12;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 65);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Next Verify";

					grd_company_aircraft.CurrentColumnIndex = 13;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 39);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Last Verify";

					grd_company_aircraft.CurrentColumnIndex = 14;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 97);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "ReVerify Exclusive";

					grd_company_aircraft.CurrentColumnIndex = 15;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 201);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Purchase Question";

				}
				else
				{

					grd_company_aircraft.CurrentRowIndex = 0;
					grd_company_aircraft.CurrentColumnIndex = 0;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 31);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Web";

					grd_company_aircraft.CurrentColumnIndex = 1;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 23);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "AF";

					grd_company_aircraft.CurrentColumnIndex = 2;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 27);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Seq";

					grd_company_aircraft.CurrentColumnIndex = 3;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 157);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Make/Model";

					grd_company_aircraft.CurrentColumnIndex = 4;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 73);
					
					grd_company_aircraft.ColAlignment[4] = DataGridViewContentAlignment.NotSet;
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Serial#";

					grd_company_aircraft.CurrentColumnIndex = 5;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 60);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Mfr/Dlv";

					grd_company_aircraft.CurrentColumnIndex = 6;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 213);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Name / IATA/ICAO";

					grd_company_aircraft.CurrentColumnIndex = 7;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 73);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Status";

					grd_company_aircraft.CurrentColumnIndex = 8;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 140);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Type";

					grd_company_aircraft.CurrentColumnIndex = 9;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 140);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Contact";

					grd_company_aircraft.CurrentColumnIndex = 10;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 53);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Reg #";

					grd_company_aircraft.CurrentColumnIndex = 11;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 60);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Asking";

					grd_company_aircraft.CurrentColumnIndex = 12;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 70);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Next Verify";

					grd_company_aircraft.CurrentColumnIndex = 13;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 70);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Last Verify";

					grd_company_aircraft.CurrentColumnIndex = 14;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 97);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "ReVerify Exclusive";

					grd_company_aircraft.CurrentColumnIndex = 15;
					grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
					grd_company_aircraft.SetColumnWidth(grd_company_aircraft.CurrentColumnIndex, 201);
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "Purchase Question";

				}



				cbo_verify_aircraft.Visible = false;
				lst_aircraft.Visible = false;

				strError_Note = "Run Query";

				Query = $"EXEC HomebaseGetCompanyAircraftList {nReference_CompanyID.ToString()}, {nReference_CompanyJID.ToString()}";

				// 03/27/2012 - RTW - COMMENTED OUT
				// SPOKE WITH JACKIE AND NOBODY USES OR CARES ABOUT THIS.
				//nInactiveCount = modCompany.get_inactive_aircraft_count(nReference_CompanyID, nReference_CompanyJID)

				ado_aircraft = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				if (!ado_aircraft.BOF && !ado_aircraft.EOF)
				{

					strError_Note = "Filtering and Counting Aircraft";
					ado_aircraft.Filter = "";

					// Added Filter By Delivery Position Combo


					switch(cbo_ac_delivery_position.SelectedIndex)
					{
						case 0 :  // View No D.P 
							ado_aircraft.Filter = "(ac_lifecycle_stage <> 1) AND (cref_contact_type <> '42') and (amod_class_code <> 'E') "; 
							 
							break;
						case 1 :  // View Only D.P 
							// had to change the format wierdly  - MSW - 7/17/24 
							ado_aircraft.Filter = "((ac_lifecycle_stage = 1 and amod_class_code <> 'E') OR (amod_class_code <> 'E' and cref_contact_type = '42')) "; 
							 
							break;
						case 2 :  // View All Aircraft 
							// 06/04/2015 - Per Lucia For All Aircraft Do NOT Include Class E 
							ado_aircraft.Filter = "(amod_class_code <> 'E')"; 
							 
							//--------------------------------------- 
							// 11/11/2010 - By David D. Cruger 
							// New Options 
							 
							break;
						case 3 :  // Available Aircraft Only 
							ado_aircraft.Filter = "(ac_forsale_flag = 'Y') and (amod_class_code <> 'E')  "; 
							 
							break;
						case 4 :  // Available Aircraft W/Exclusive Only 
							ado_aircraft.Filter = "(ac_forsale_flag = 'Y') AND (ac_exclusive_flag = 'Y') and (amod_class_code <> 'E') "; 
							 
							break;
						case 5 :  // All Active Aircraft (No Written Off), and not class E - MSW - 11/10/22 
							ado_aircraft.Filter = "(ac_lifecycle_stage < 4) and (amod_class_code <> 'E') "; 
							 
							break;
						case 6 :  // Primary Aircraft Only 
							ado_aircraft.Filter = "(cref_primary_poc_flag = 'Y') and (amod_class_code <> 'E') "; 
							 
							break;
						case 7 :  // Leased A/C 
							ado_aircraft.Filter = "(ac_lease_flag = 'Y') and (amod_class_code <> 'E') "; 
							 
							break;
						case 8 :  // Class A 
							ado_aircraft.Filter = "(amod_class_code = 'A') and (amod_class_code <> 'E') "; 
							 
							break;
						case 9 :  // Class E 
							ado_aircraft.Filter = ""; 
							ado_aircraft.Filter = "(amod_class_code = 'E')"; 
							 
							break;
						case 10 :  // Business A/C 
							ado_aircraft.Filter = "(amod_airframe_type_code = 'F') AND (amod_product_business_flag = 'Y') AND (ac_product_business_flag = 'Y') AND (amod_class_code <> 'E')"; 
							 
							break;
						case 11 :  // Helicopters 
							ado_aircraft.Filter = "(amod_airframe_type_code = 'R') AND (amod_product_helicopter_flag = 'Y') AND (ac_product_helicopter_flag = 'Y') AND (amod_class_code <> 'E')"; 
							 
							break;
						case 12 :  // Commercial 
							ado_aircraft.Filter = "(amod_product_commercial_flag = 'Y') AND (ac_product_commercial_flag = 'Y') AND (amod_class_code <> 'E')"; 
							 
							break;
						case 13 :  // Reassigns 
							// RTW 10/29/2015 - MODIFIED TO ALLOW FOR SELECTION OF JUST REASSIGNED AIRCRAFT. 
							// NOTE THAT THIS REQUIED A CHANGE TO THE STORED PROCEDURE HOMEBASEGETCOMPANYAIRCRAFTLIST 
							ado_aircraft.Filter = "(Reassign >0)  and (amod_class_code <> 'E') "; 
							 
							break;
						case 14 : 
							ado_aircraft.Filter = "  cref_contact_type = '71' and (amod_class_code <> 'E')   "; 
							 
							break;
					} // Select Case cbo_ac_delivery_position.ListIndex


					nTotalAircraft = 0;
					if (!ado_aircraft.EOF)
					{
						do 
						{

							// COUNT UNIQUE AIRCRAFT
							if (nPreviousAircraft != Convert.ToDouble(ado_aircraft["ac_id"]))
							{
								nTotalAircraft++;
							}
							nPreviousAircraft = Convert.ToInt32(ado_aircraft["ac_id"]);
							ado_aircraft.MoveNext();

						}
						while(!ado_aircraft.EOF);
					}

					nMaxAircraft = nTotalAircraft;

					if (chk_limit_aircraft_list.CheckState == CheckState.Checked)
					{
						if (Information.IsNumeric(txt_only_show_first_aircraft_recs.Text))
						{
							if (Convert.ToInt32(Double.Parse(txt_only_show_first_aircraft_recs.Text)) <= nTotalAircraft)
							{
								nMaxAircraft = Convert.ToInt32(Double.Parse(txt_only_show_first_aircraft_recs.Text));
							}
						}
					}

					cmd_company_add_note.Visible = true;

					nPreviousAircraft = 0;

					strError_Note = "Loading the Data Grid";

					// reset record pointer
					if (nTotalAircraft > 0)
					{

						ado_aircraft.MoveFirst();

						cbo_verify_aircraft.Items.Clear();
						lst_aircraft.Items.Clear();

						grd_company_aircraft.CurrentRowIndex = 1;

						lCnt1 = 0;
						row_count = 0;
						lACCnt = 0;

						do 
						{ // Loop Until ado_aircraft.EOF = True

							row_count++;
							grd_company_aircraft.RowsCount = row_count + 1;
							grd_company_aircraft.CurrentRowIndex = row_count;

							strError_Note = "Checking for Sale Flag";
							cellcolor = modAdminCommon.NoColor;
							if (Convert.ToString(ado_aircraft["ac_forsale_flag"]).Trim().ToUpper() == "Y")
							{
								cellcolor = modAdminCommon.ForSaleColor;
							}

							strError_Note = "Checking Type/Airframe";
							// 01/28/2015 - By David D. Cruger
							// Per Jackie; If Aircraft Is Class D make Red
							if (($"{Convert.ToString(ado_aircraft["amod_airframe_type_code"])} ").Trim().ToUpper() == "F" && ($"{Convert.ToString(ado_aircraft["amod_class_code"])} ").Trim().ToUpper() == "D")
							{
								// 03/06/2015 - By David D. Cruger
								// Per Jackie; Remove the red for class D
							}

							strError_Note = "Checking Stage";
							if (Convert.ToDouble(ado_aircraft["ac_lifecycle_stage"]) == 4)
							{
								cellcolor = modAdminCommon.InactiveColor;
							}

							strError_Note = "Loading Seq No";
							grd_company_aircraft.CurrentColumnIndex = 2;
							grd_company_aircraft.CellForeColor = NORMAL_TXT_FORCOLOR;
							grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));

							if (Convert.ToDouble(ado_aircraft["cref_transmit_seq_no"]) < 99)
							{
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = Convert.ToString(ado_aircraft["cref_transmit_seq_no"]);
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(SEQENCE_BACKCOLOR);
								grd_company_aircraft.CellForeColor = SEQENCE_FORECOLOR;
							}

							if (nPreviousAircraft != Convert.ToInt32(ado_aircraft["ac_id"]))
							{

								if (Convert.ToString(cmd_ac_verify[6].Tag).Trim() != "")
								{
									if ((Convert.ToString(cmd_ac_verify[6].Tag).IndexOf($"'{Convert.ToString(ado_aircraft["ac_amod_id"])}'") + 1) == 0)
									{
										cmd_ac_verify[6].Tag = $"{Convert.ToString(cmd_ac_verify[6].Tag)},'{Convert.ToString(ado_aircraft["ac_amod_id"])}'";
									}
								}
								else
								{
									cmd_ac_verify[6].Tag = $"'{Convert.ToString(ado_aircraft["ac_amod_id"])}'";
								}

								grd_company_aircraft.CurrentColumnIndex = 0;

								strError_Note = "Loading Journ ID";
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_aircraft["cref_journ_id"]))
								{
									tmpRefID = Convert.ToInt32(ado_aircraft["cref_journ_id"]);
								}
								else
								{
									tmpRefID = 0;
								}

								strError_Note = "Picture Flag";
								// If HasPictures(ado_aircraft("ac_id").Value, tmpRefID, "N") Then
								grd_company_aircraft.CellPicture = pic_verify_ac[3].Image;
								grd_company_aircraft.CellAlignment = DataGridViewContentAlignment.TopCenter;
								//  End If

								strError_Note = "Loading Type of Aircraft";
								grd_company_aircraft.CurrentColumnIndex = 1;
								grd_company_aircraft.CellAlignment = DataGridViewContentAlignment.TopCenter;
								if (Convert.ToString(ado_aircraft["amod_airframe_type_code"]).Trim().ToUpper() == "F")
								{
									grd_company_aircraft.CellPicture = pic_verify_ac[1].Image;
								}
								else
								{
									//helicopter
									grd_company_aircraft.CellPicture = pic_verify_ac[2].Image;
								}

								strError_Note = "Loading Lease Flag";
								grd_company_aircraft.CurrentColumnIndex = 2;
								if (Convert.ToString(ado_aircraft["ac_lease_flag"]).Trim().ToUpper() == "Y")
								{
									grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.LeaseColor)));
									grd_company_aircraft.CellForeColor = NORMAL_TXT_FORCOLOR;
								}

								// DETERMINE IF THE AIRCRAFT HAS BEEN REASSIGNED - IF SO, THEN BOLD
								strError_Note = "Loading Reassign Status";
								grd_company_aircraft.CurrentColumnIndex = 3;
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

								Query = $"SELECT journ_id FROM Journal WITH(NOLOCK) WHERE journ_ac_id = {Convert.ToString(ado_aircraft["ac_id"])}";
								Query = $"{Query} AND journ_subcategory_code = 'AA'";

								//If Exist(Query) Then
								grd_company_aircraft.CellFontBold = Convert.ToDouble(ado_aircraft["reassign"]) > 0;

								strError_Note = "Loading Make/Model";
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = $"{($"{Convert.ToString(ado_aircraft["amod_make_name"])} ").Trim()}/{($"{Convert.ToString(ado_aircraft["amod_model_name"])} ").Trim()}";
								sVerifyAc = modGlobalVars.cEmptyString;
								sVerifyAc = grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim();

								strError_Note = "Loading for Serial Number";
								grd_company_aircraft.CurrentColumnIndex = 4;
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = ($"{Convert.ToString(ado_aircraft["ac_ser_no_full"])} ").Trim();
								sVerifyAc = $"{sVerifyAc} ({grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim()}) REG: ({Convert.ToString(ado_aircraft["ac_reg_no"]).Trim()})";

								// fill up the verify aircraft list when we fill company aircraft list
								strError_Note = "Load CBO Verify Aircraft";
								cbo_verify_aircraft.AddItem(sVerifyAc);
								cbo_verify_aircraft.SetItemData(cbo_verify_aircraft.Items.Count - 1, Convert.ToInt32(ado_aircraft["ac_id"]));

								strError_Note = "Load List Verify Aircraft";
								lst_aircraft.AddItem(sVerifyAc);
								lst_aircraft.SetItemData(lst_aircraft.Items.Count - 1, Convert.ToInt32(ado_aircraft["ac_id"]));



								strError_Note = "Loading Year";
								grd_company_aircraft.CurrentColumnIndex = 5;
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = $"{($"{Convert.ToString(ado_aircraft["ac_mfr_year"])}/").Trim()}{($"{Convert.ToString(ado_aircraft["ac_year"])} ").Trim()}";

								strError_Note = "Loading IATA/ICAO";
								grd_company_aircraft.CurrentColumnIndex = 6;
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

								strError_Note = "Loading for Airport Name";
								strAPort = new StringBuilder(($"{Convert.ToString(ado_aircraft["ac_aport_name"])} ").Trim());

								strError_Note = "Loading for State";
								if (strAPort.ToString() == "")
								{
									strAPort = new StringBuilder(($"{Convert.ToString(ado_aircraft["ac_aport_state"])} ").Trim());
								}
								else
								{
									strAPort.Append($", {($"{Convert.ToString(ado_aircraft["ac_aport_state"])} ").Trim()}");
								}

								strError_Note = "Loading for Country";

								strCOUNTRY = ($"{Convert.ToString(ado_aircraft["ac_aport_country"])} ").Trim();
								strCountryAbbrev = modCommon.DLookUp("country_abbrev", "Country", $"(country_name='{strCOUNTRY}')");

								if (strAPort.ToString() == modGlobalVars.cEmptyString)
								{
									strAPort = new StringBuilder(strCOUNTRY);
								}
								else
								{
									strAPort.Append($", {strCountryAbbrev}");
								}

								strAPort.Append($" [{($"{Convert.ToString(ado_aircraft["ac_aport_iata_code"])} ").Trim()} , {($"{Convert.ToString(ado_aircraft["ac_aport_icao_code"])} ").Trim()}]");
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = strAPort.ToString();


								// DETERMINE IF THE BASE NEEDS CONFIRMATION
								strError_Note = "Loading for airport verification";
								if (cellcolor != modAdminCommon.InactiveColor)
								{
									if (nReference_CompanyJID == 0)
									{
										//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
										if (!Convert.IsDBNull(ado_aircraft["ac_airport_code_verify_date"]))
										{
											if (Information.IsDate(ado_aircraft["ac_airport_code_verify_date"]))
											{
												if (modAircraft.BaseNeedsConfirm(Convert.ToString(ado_aircraft["ac_airport_code_verify_date"])))
												{
													grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
												}
											}
											else
											{
												grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
											}
										}
										else
										{
											grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
										}
									}
								} // If cellcolor <> InactiveColor Then

								strError_Note = "Loading for AC Status";
								grd_company_aircraft.CurrentColumnIndex = 7;
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = ($"{Convert.ToString(ado_aircraft["ac_status"])} ").Trim();

							} // nPreviousAircraft <> CLng(ado_Aircraft("ac_id").Value)

							grd_company_aircraft.CurrentColumnIndex = 8;
							grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));

							strError_Note = "Loading Primary Status";

							if (($"{Convert.ToString(ado_aircraft["cref_primary_poc_flag"])} ").Trim().ToUpper() == "Y")
							{

								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.PrimaryColor)));
								nPrimaryCount++;

							}
							else if (($"{Convert.ToString(ado_aircraft["cref_primary_poc_flag"])} ").Trim().ToUpper() == "X")
							{ 

								nPrimaryCount++;
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.ExclusiveColor)));

								// move to col 14 to set exclusive date
								strError_Note = "Loading Exclusive Status";
								grd_company_aircraft.CurrentColumnIndex = 14;
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_aircraft["ac_exclusive_verify_date"]))
								{
									if (Information.IsDate(ado_aircraft["ac_exclusive_verify_date"]))
									{
										grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = Convert.ToDateTime(ado_aircraft["ac_exclusive_verify_date"]).ToString("d");
									}
								}

								grd_company_aircraft.CurrentColumnIndex = 8;

							} // If UCase(Trim(ado_aircraft!cref_primary_poc_flag & " ")) = "Y" Then


							// GET THE CONTACT ABBREVIATION FOR THE REFERENCE
							strError_Note = "Loading for Contact Type";
							grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modCompany.get_aircraft_contact_type(($"{Convert.ToString(ado_aircraft["cref_contact_type"])} ").Trim());

							// IF FRACTIONAL AIRCRAFT THEN CHECK FOR RELATIONSHIPS TO DISPLAY
							strError_Note = "Loading for Ownership Type";

							if (($"{Convert.ToString(ado_aircraft["ac_ownership_type"])} ").Trim().ToUpper() == "F")
							{
								if (modCommon.GetImportantRelationships(Convert.ToInt32(ado_aircraft["cref_id"])))
								{
									grd_company_aircraft.CellFontBold = true;
									bHasShares = true;
								}
							}

							// DISPLAY THE OWNERSHIP PERCENTAGE IF ANY
							strError_Note = "Loading Owner Percent";
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_aircraft["cref_owner_percent"]))
							{
								if (Convert.ToDouble(ado_aircraft["cref_owner_percent"]) > 0)
								{
									grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = $"{grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString()} ({Convert.ToString(ado_aircraft["cref_owner_percent"])}%)";
								}
							}

							// DISPLAY THE BUSINESS TYPE ON THE REFERENCE RECORD
							strError_Note = "Loading for Business Type";
							grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = $"{grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString()} [{($"{Convert.ToString(ado_aircraft["cref_business_type"])} ").Trim()}]";


							//--------------------- MSW - 12/18/2020 ------------------
							Query = $"select top 1 * from Aircraft_Reference with (NOLOCK) where cref_verified_flag = 'N' and cref_ac_id = {Convert.ToString(ado_aircraft["ac_id"])}";
							Query = $"{Query} and cref_journ_id = {Convert.ToString(ado_aircraft["cref_journ_id"])} AND cref_comp_id = '{nReference_CompanyID.ToString()}' ";
							Query = $"{Query} and cref_contact_type = '{Convert.ToString(ado_aircraft["cref_contact_type"])}'  ";

							if (modAdminCommon.Exist(Query))
							{
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = $"{grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString()} -- [UNV] ";
								grd_company_aircraft.CellForeColor = Color.Red;
								grd_company_aircraft.CellFontBold = true;
							}
							//--------------------- MSW - 12/18/2020 ------------------

							// GET CONTACT INFORMATION FOR THE SPECIFIC REFERENCE SELECTED
							strError_Note = "Loading Cell Color Changes";
							grd_company_aircraft.CurrentColumnIndex = 9;

							if (nPreviousAircraft != Convert.ToInt32(ado_aircraft["ac_id"]))
							{
								if (cellcolor == modAdminCommon.ForSaleColor)
								{
									grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
								}
							}

							strError_Note = "Loading for Company/Contact info";
							grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modCompany.get_company_contact_information(Convert.ToInt32(ado_aircraft["cref_contact_id"]), Convert.ToInt32(ado_aircraft["cref_journ_id"]));

							if (nPreviousAircraft != Convert.ToInt32(ado_aircraft["ac_id"]))
							{

								// display the registration number
								grd_company_aircraft.CurrentColumnIndex = 10;
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

								strError_Note = "Loading for Reg No";
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = ($"{Convert.ToString(ado_aircraft["ac_reg_no"])} ").Trim();

								strError_Note = "Loading for Reg No Verify Date";
								if (cellcolor != modAdminCommon.InactiveColor)
								{
									if (nReference_CompanyJID == 0)
									{
										//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
										if (!Convert.IsDBNull(ado_aircraft["ac_reg_no_verify_date"]))
										{
											if (Information.IsDate(ado_aircraft["ac_reg_no_verify_date"]))
											{
												if (modAircraft.RegNeedsConfirm(Convert.ToString(ado_aircraft["ac_reg_no_verify_date"])))
												{
													grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
												}
											}
											else
											{
												grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
											}
										}
										else
										{
											grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
										}
									}
								} // If cellcolor <> InactiveColor Then

								// display the asking price
								strError_Note = "Loading Asking";
								grd_company_aircraft.CurrentColumnIndex = 11;
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								if (($"{Convert.ToString(ado_aircraft["ac_asking"])} ").Trim().ToUpper() == "PRICE")
								{
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_aircraft["ac_asking_price"]))
									{
										grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = Strings.FormatNumber(ado_aircraft.GetField("ac_asking_price"), 2, TriState.False, TriState.False, TriState.True);
									}
									else
									{
										if (Convert.ToString(ado_aircraft["ac_asking"]).Trim().ToUpper() != "UNKNOWN")
										{
											grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = ($"{Convert.ToString(ado_aircraft["ac_asking"])} ").Trim();
										} // if no information in asking field
									}
								}
								else
								{
									grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = ($"{Convert.ToString(ado_aircraft["ac_asking"])} ").Trim();
								} // If UCase(Trim(ado_aircraft!ac_asking & " ")) = "PRICE" Then

								// display the next verification date
								strError_Note = "Loading for Next Verify Date";
								grd_company_aircraft.CurrentColumnIndex = 12;
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_aircraft["ac_next_verified_date"]))
								{
									if (Information.IsDate(ado_aircraft["ac_next_verified_date"]))
									{
										grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = Convert.ToDateTime(ado_aircraft["ac_next_verified_date"]).ToString("d");
									}
								}

								// display the last verification date
								strError_Note = "Loading for Last Verify Date";
								grd_company_aircraft.CurrentColumnIndex = 13;
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_aircraft["ac_last_verified_date"]))
								{
									if (Information.IsDate(ado_aircraft["ac_last_verified_date"]))
									{
										grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = Convert.ToDateTime(ado_aircraft["ac_last_verified_date"]).ToString("d");
									}
								}

								grd_company_aircraft.CurrentColumnIndex = 14;
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));

								strError_Note = "Loading for Question";
								grd_company_aircraft.CurrentColumnIndex = 15;
								grd_company_aircraft.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = ($"{Convert.ToString(ado_aircraft["acpq_question"])} ").Trim();

							}
							else
							{

								strError_Note = "Loading Empty Strings";
								grd_company_aircraft.CurrentColumnIndex = 10;
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

								grd_company_aircraft.CurrentColumnIndex = 11;
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

								grd_company_aircraft.CurrentColumnIndex = 12;
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

								grd_company_aircraft.CurrentColumnIndex = 13;
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

								grd_company_aircraft.CurrentColumnIndex = 14;

								// only clear if there is no exclusive date in col
								if (grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString() == modGlobalVars.cEmptyString)
								{
									grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
								}

								grd_company_aircraft.CurrentColumnIndex = 15;
								grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

							} // nPreviousAircraft <> ado_Aircraft("ac_id").Value

							strError_Note = "Loading for AC ID and CREF ID";
							grd_company_aircraft.set_RowData(grd_company_aircraft.CurrentRowIndex,Convert.ToInt32( ado_aircraft.GetField("ac_id")));
							//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_aircraft.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							grd_company_aircraft.setBandData(Convert.ToInt32(ado_aircraft["cref_id"]), grd_company_aircraft.CurrentRowIndex);

							nPreviousAircraft = Convert.ToInt32(ado_aircraft["ac_id"]);

							lCnt1++;
							if (lCnt1 == 8)
							{
								grd_company_aircraft.Visible = true;
								grd_company_aircraft.Enabled = true;
								grd_company_aircraft.Redraw = true;
								Application.DoEvents();
								grd_company_aircraft.Enabled = false;
								grd_company_aircraft.Redraw = false;
							}

							ado_aircraft.MoveNext();

							if (!ado_aircraft.EOF)
							{
								if (Convert.ToDouble(ado_aircraft["ac_id"]) != nPreviousAircraft)
								{
									lACCnt++;
								}
							}

						}
						while(!(ado_aircraft.EOF || lACCnt >= nMaxAircraft));

						if (!ado_aircraft.EOF)
						{
							do 
							{ // Loop Until ado_aircraft.EOF = True
								if (Convert.ToString(cmd_ac_verify[6].Tag).Trim() != "")
								{
									if ((Convert.ToString(cmd_ac_verify[6].Tag).IndexOf($"'{Convert.ToString(ado_aircraft["ac_amod_id"])}'") + 1) == 0)
									{
										cmd_ac_verify[6].Tag = $"{Convert.ToString(cmd_ac_verify[6].Tag)},'{Convert.ToString(ado_aircraft["ac_amod_id"])}'";
									}
								}
								else
								{
									cmd_ac_verify[6].Tag = $"'{Convert.ToString(ado_aircraft["ac_amod_id"])}'";
								}
								lACCnt++;

								ado_aircraft.MoveNext();
							}
							while(!(ado_aircraft.EOF || lACCnt >= 300));
						}


						strError_Note = "Done with Grid Load";
						grd_company_aircraft.CurrentRowIndex = 1;

						//----------------------------------------
						// 04/16/2008 - By David D. Cruger;
						// Must be the same company/journid
						//----------------------------------------
						if (modGlobalVars.cfsiCompanyInfo.lCompId == nReference_CompanyID && modGlobalVars.cfsiCompanyInfo.lJournId == nReference_CompanyJID && modGlobalVars.cfsiCompanyInfo.lCompId > 0)
						{

							if (modGlobalVars.cfsiCompanyInfo.lAircraftGridRow > 0 && modGlobalVars.cfsiCompanyInfo.lAircraftGridRow < grd_company_aircraft.RowsCount)
							{ // changed to just < - JETDEV-907 - MSW - 3/1/24
								grd_company_aircraft.CurrentRowIndex = modGlobalVars.cfsiCompanyInfo.lAircraftGridRow;
								grd_company_aircraft.FirstDisplayedScrollingRowIndex = modGlobalVars.cfsiCompanyInfo.lAircraftGridTopRow;
								grd_company_aircraft.ColSel = 0;
								grd_company_aircraft.RowSel = grd_company_aircraft.CurrentRowIndex;
							}
							else
							{
								modGlobalVars.cfsiCompanyInfo.lAircraftGridRow = 0;
								modGlobalVars.cfsiCompanyInfo.lAircraftGridTopRow = 0;
							}

						}
						else
						{
							Clear_Company_Save_Info();
						}

						cmd_ac_verify[0].Visible = false; // Verify Aircraft
						cmd_ac_verify[1].Visible = true; // Verify All Aircraft
						cmd_ac_verify[2].Visible = true; // Verify All Helicopters
						cmd_ac_verify[3].Visible = true; // Verify All Fixed Wing

						cbo_verify_aircraft.SelectedIndex = -1;
						ListBoxHelper.SetSelectedIndex(lst_aircraft, -1);

					}
					else
					{
						// total aircraft = 0

						grd_company_aircraft.RowsCount = 2;
						strError_Note = "Total Aircraft = 0";
						grd_company_aircraft.CurrentRowIndex = 1;
						grd_company_aircraft.CurrentColumnIndex = 3;
						grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "No Aircraft Found";

						cmd_ac_verify[0].Visible = false; // Verify Aircraft
						cmd_ac_verify[1].Visible = false; // Verify All Aircraft
						cmd_ac_verify[2].Visible = false; // Verify All Helicopters
						cmd_ac_verify[3].Visible = false; // Verify All Fixed Wing

					} //IF TOTAL AIRCRAFT > 0

					grd_company_aircraft.Enabled = true;

				}
				else
				{

					grd_company_aircraft.RowsCount = 2;
					grd_company_aircraft.CurrentRowIndex = 1;
					grd_company_aircraft.CurrentColumnIndex = 3;
					grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].Value = "No Aircraft Found";

					cmd_ac_verify[0].Visible = false; // Verify Aircraft
					cmd_ac_verify[1].Visible = false; // Verify All Aircraft
					cmd_ac_verify[2].Visible = false; // Verify All Helicopters
					cmd_ac_verify[3].Visible = false; // Verify All Fixed Wing

					grd_company_aircraft.Enabled = false;

				} // If (ado_aircraft.BOF = False And ado_aircraft.EOF = False) Then

				ado_aircraft.Close();
				strError_Note = "Cleanup and Totals";

				if (starting_place > 0)
				{
					grd_company_aircraft.Redraw = true;

					// added this if statement in to make sure when you come back it doesnt error- MSW - 4/5/19
					if (grd_company_aircraft.RowsCount >= starting_place)
					{
						grd_company_aircraft.CurrentRowIndex = starting_place;
						grd_company_aircraft.RowSel = grd_company_aircraft.CurrentRowIndex;
						grd_company_aircraft.FirstDisplayedScrollingRowIndex = starting_place;
					}

					grd_company_aircraft.ColSel = 0;

					grd_company_aircraft.Visible = true;
				}
				else
				{


					grd_company_aircraft.Visible = true;
					grd_company_aircraft.Redraw = true;
				}

				txt_total_aircraft.Text = Strings.FormatNumber(nTotalAircraft, 0, TriState.True, TriState.False, TriState.True);


				search_off();

				ado_aircraft = null;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_company_aircraft_grid_Error ({Information.Err().Number.ToString()}) {excep.Message}-{strError_Note} GRDROWS:[{grd_company_aircraft.RowsCount.ToString()}] GRDROW:[{grd_company_aircraft.CurrentRowIndex.ToString()}] CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "frm_Company(FILLAC)");
				search_off();
			}

		}

		private void fill_company_contact_grid()
		{


			// Function used to fill company rep list
			// RTW - MODIFIED ON 9/22/2010 - INCLUDED INDEX HINT IN QUERY

			string Query = modGlobalVars.cEmptyString;
			string cellcolor = modGlobalVars.cEmptyString;
			ADORecordSetHelper ado_Contact = null;
			bool bIsContactRelated = false;
			int lCompId = 0;
			int lContactId = 0;
			int lJournId = 0;
			int lCnt1 = 0;
			string forecolor = "";

			try
			{

				search_on("Getting Company Contact(s)....");
				lbl_comp[CONTACT_COUNT_INDEX].Text = modGlobalVars.cEmptyString;

				//extract fields from contact table
				grd_company_contacts.Visible = false;
				grd_company_contacts.Enabled = false;
				grd_company_contacts.Redraw = false;

				//Clear the grid.
				grd_company_contacts.Clear();

				//Set the number of columns and rows in the grid.
				grd_company_contacts.ColumnsCount = 6;
				grd_company_contacts.RowsCount = 2;

				grd_company_contacts.FixedRows = 1;
				grd_company_contacts.FixedColumns = 0;

				//point to the first column and first row.
				grd_company_contacts.CurrentRowIndex = 0;

				grd_company_contacts.CurrentColumnIndex = 0;
				grd_company_contacts.SetColumnWidth(grd_company_contacts.CurrentColumnIndex, 33);
				grd_company_contacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = "Seq";

				grd_company_contacts.CurrentColumnIndex = 1;
				grd_company_contacts.SetColumnWidth(grd_company_contacts.CurrentColumnIndex, 167);
				grd_company_contacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = "Title";

				grd_company_contacts.CurrentColumnIndex = 2;
				grd_company_contacts.SetColumnWidth(grd_company_contacts.CurrentColumnIndex, 200);
				grd_company_contacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = "Name";

				grd_company_contacts.CurrentColumnIndex = 3;
				grd_company_contacts.SetColumnWidth(grd_company_contacts.CurrentColumnIndex, 100);
				grd_company_contacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = "Research Contact?";

				grd_company_contacts.CurrentColumnIndex = 4;
				grd_company_contacts.SetColumnWidth(grd_company_contacts.CurrentColumnIndex, 53);
				grd_company_contacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = "New Seq";

				grd_company_contacts.CurrentColumnIndex = 5; //aey 9/8/04
				grd_company_contacts.SetColumnWidth(grd_company_contacts.CurrentColumnIndex, 0);
				grd_company_contacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = "Active?";

				// 07/18/2019 - By David D. Cruger; Removed INDEX HINT
				//Query = "SELECT * FROM Contact WITH(NOLOCK, index(ix_contact_comp_journal_contact_id_key)) WHERE contact_comp_id = " & CStr(nReference_CompanyID)
				Query = "SELECT * FROM Contact WITH (NOLOCK) ";
				Query = $"{Query}WHERE (contact_comp_id = {nReference_CompanyID.ToString()}) ";
				Query = $"{Query}AND (contact_journ_id = {nReference_CompanyJID.ToString()}) ";

				if (chk_array[0].CheckState == CheckState.Unchecked)
				{
					Query = $"{Query} AND contact_active_flag = 'Y'";
				}

				if (cbo_order_by.Text != "" && cbo_order_by.Text != "Seq")
				{
					if (cbo_order_by.Text.Trim() == "Name")
					{
						Query = $"{Query} ORDER BY contact_first_name, contact_last_name, contact_acpros_seq_no";
					}
					else
					{
						Query = $"{Query} ORDER BY contact_title, contact_acpros_seq_no, contact_last_name, contact_first_name";
					}
					btn_array[2].Visible = false;
				}
				else
				{
					Query = $"{Query} ORDER BY contact_acpros_seq_no, contact_last_name, contact_first_name";
					btn_array[2].Visible = true;
				}

				ado_Contact = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(ado_Contact.Fields) && !(ado_Contact.BOF && ado_Contact.EOF))
				{

					grd_company_contacts.CurrentRowIndex = 1;

					lCnt1 = 0;

					while(!ado_Contact.EOF)
					{

						lCompId = Convert.ToInt32(ado_Contact["contact_comp_id"]);
						lContactId = Convert.ToInt32(ado_Contact["contact_id"]);
						lJournId = Convert.ToInt32(ado_Contact["contact_journ_id"]);
						forecolor = ColorTranslator.ToOle(Color.Black).ToString();

						if (Convert.ToString(ado_Contact["contact_active_flag"]).Trim().ToUpper() != "Y")
						{
							cellcolor = DISABLED_DARK_BACKCOLOR.ToString();
						}
						else if (Convert.ToString(ado_Contact["contact_hide_flag"]).Trim().ToUpper() == "Y")
						{ 
							cellcolor = ColorTranslator.ToOle(Color.Red).ToString(); //  HiddenColor
							forecolor = ColorTranslator.ToOle(Color.Black).ToString();
						}
						else
						{
							cellcolor = ColorTranslator.ToOle(NORMAL_TXT_BACKCOLOR).ToString();
							if (lJournId == 0)
							{
								bIsContactRelated = modCommon.IsContactRelatedToAnotherContact(lCompId, lContactId);
								if (bIsContactRelated)
								{
									cellcolor = ColorTranslator.ToOle(Color.Yellow).ToString();
								}
							}
						}


						grd_company_contacts.CurrentColumnIndex = 0;
						grd_company_contacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Contact["contact_acpros_seq_no"]))
						{
							grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = Convert.ToString(ado_Contact["contact_acpros_seq_no"]).Trim();
						}

						//set it back to normal
						if (Convert.ToString(ado_Contact["contact_hide_flag"]).Trim().ToUpper() == "Y")
						{
							cellcolor = ColorTranslator.ToOle(NORMAL_TXT_BACKCOLOR).ToString();
						}


						grd_company_contacts.CurrentColumnIndex = 1;
						grd_company_contacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_company_contacts.CellForeColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(forecolor)));
						grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Contact["contact_title"]))
						{
							grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = Convert.ToString(ado_Contact["contact_title"]).Trim();
						}

						grd_company_contacts.CurrentColumnIndex = 2;
						grd_company_contacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Contact["contact_sirname"]))
						{
							if (Convert.ToString(ado_Contact["contact_sirname"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = $"{Convert.ToString(ado_Contact["contact_sirname"]).Trim()} ";
							}
						}
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Contact["contact_first_name"]))
						{
							if (Convert.ToString(ado_Contact["contact_first_name"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = $"{grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].FormattedValue.ToString()}{Convert.ToString(ado_Contact["contact_first_name"]).Trim()} ";
							}
						}
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Contact["contact_middle_initial"]))
						{
							if (Convert.ToString(ado_Contact["contact_middle_initial"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = $"{grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].FormattedValue.ToString()}{Convert.ToString(ado_Contact["contact_middle_initial"]).Trim()}. ";
							}
						}
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Contact["contact_last_name"]))
						{
							if (Convert.ToString(ado_Contact["contact_last_name"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = $"{grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].FormattedValue.ToString()}{Convert.ToString(ado_Contact["contact_last_name"]).Trim()} ";
							}
						}
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Contact["contact_suffix"]))
						{
							if (Convert.ToString(ado_Contact["contact_suffix"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = $"{grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].FormattedValue.ToString()}{Convert.ToString(ado_Contact["contact_suffix"]).Trim()}";
							}
						}
						grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].FormattedValue.ToString().Trim();

						grd_company_contacts.CurrentColumnIndex = 3;
						grd_company_contacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Contact["contact_research_flag"]))
						{
							if (Convert.ToString(ado_Contact["contact_research_flag"]).Trim().ToUpper() == "Y")
							{
								grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = "Research Contact";
							}
						}

						if (Convert.ToString(ado_Contact["contact_hide_flag"]).Trim().ToUpper() == "Y")
						{
							cellcolor = ColorTranslator.ToOle(Color.Red).ToString();
						}

						grd_company_contacts.CurrentColumnIndex = 4;
						grd_company_contacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = Convert.ToString(ado_Contact["Contact_ID"]).Trim();

						grd_company_contacts.CurrentColumnIndex = 5; //aey 9/8/04
						grd_company_contacts.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(cellcolor)));
						grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Contact["contact_active_flag"]))
						{
							if (Convert.ToString(ado_Contact["contact_active_flag"]).Trim().ToUpper() == "Y")
							{
								grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = Convert.ToString(ado_Contact["contact_active_flag"]).Trim().ToUpper();
							}
						}

						grd_company_contacts.set_RowData(grd_company_contacts.CurrentRowIndex, Convert.ToInt32(ado_Contact["contact_id"]));

						grd_company_contacts.RowsCount++;
						grd_company_contacts.CurrentRowIndex++;

						lCnt1++;
						if (lCnt1 == 14)
						{
							grd_company_contacts.Visible = true;
							grd_company_contacts.Enabled = true;
							grd_company_contacts.Redraw = true;
							Application.DoEvents();
							grd_company_contacts.Enabled = false;
							grd_company_contacts.Redraw = false;
						}

						ado_Contact.MoveNext();

					};

					grd_company_contacts.RowsCount--;

					renumber_company_contact_grid();

					grd_company_contacts.CurrentRowIndex = 1;

					lbl_comp[CONTACT_COUNT_INDEX].Text = (grd_company_contacts.RowsCount - 1).ToString();

					grd_company_contacts.Enabled = true;

				}
				else
				{
					grd_company_contacts.CurrentRowIndex = 1;
					grd_company_contacts.CurrentColumnIndex = 2;
					grd_company_contacts[grd_company_contacts.CurrentRowIndex, grd_company_contacts.CurrentColumnIndex].Value = "No Contacts Found";
					grd_company_contacts.Enabled = false;
				} // If Not IsNull(ado_Contact) And Not (ado_Contact.BOF And ado_Contact.EOF) Then

				ado_Contact.Close();
				ado_Contact = null;

				fill_research_contact_list();

				grd_company_contacts.Visible = true;
				grd_company_contacts.Redraw = true;

				clear_contact_controls();

				if (cbo_order_by.Text != "")
				{
				}
				else
				{
					// add in drop down --------------
					cbo_order_by.Items.Clear();
					cbo_order_by.AddItem("Seq");
					cbo_order_by.AddItem("Title");
					cbo_order_by.AddItem("Name");
					//------------------------------
				}


				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_company_contact_grid_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}




		private void fill_cert_grid()
		{ // TEMP HOLD - MSW

			cert_edit_enter_frame.Visible = false;

			fill_cert_drop_down("");

			//fille grid if this is a fortune 1000 company
			string Query = "";
			ADORecordSetHelper ado_fortune = new ADORecordSetHelper();
			int CurRow = 0;

			try
			{

				search_on("Selecting Company Certifications....");

				grd_company_cert.Visible = true; // MSW - TEMP HOLD
				grd_company_cert.Enabled = true; // MSW - TEMP HOLD


				grd_company_cert.Clear();
				grd_company_cert.RowsCount = 2;
				grd_company_cert.FixedRows = 1;
				grd_company_cert.ColumnsCount = 5;
				grd_company_cert.CurrentRowIndex = 0;

				grd_company_cert.SetColumnWidth(0, 0);


				grd_company_cert.CurrentColumnIndex = 0;
				grd_company_cert[grd_company_cert.CurrentRowIndex, grd_company_cert.CurrentColumnIndex].Value = "ID";
				grd_company_cert.SetColumnWidth(grd_company_cert.CurrentColumnIndex, 33);

				grd_company_cert.CurrentColumnIndex = 1;
				grd_company_cert[grd_company_cert.CurrentRowIndex, grd_company_cert.CurrentColumnIndex].Value = "Certification Type";
				grd_company_cert.SetColumnWidth(grd_company_cert.CurrentColumnIndex, 100);

				grd_company_cert.CurrentColumnIndex = 2;
				grd_company_cert[grd_company_cert.CurrentRowIndex, grd_company_cert.CurrentColumnIndex].Value = "Certification Number";
				grd_company_cert.SetColumnWidth(grd_company_cert.CurrentColumnIndex, 113);

				grd_company_cert.CurrentColumnIndex = 3;
				grd_company_cert[grd_company_cert.CurrentRowIndex, grd_company_cert.CurrentColumnIndex].Value = "Certification Name";
				grd_company_cert.SetColumnWidth(grd_company_cert.CurrentColumnIndex, 107);

				grd_company_cert.CurrentColumnIndex = 4;
				grd_company_cert[grd_company_cert.CurrentRowIndex, grd_company_cert.CurrentColumnIndex].Value = "Certification Note";
				grd_company_cert.SetColumnWidth(grd_company_cert.CurrentColumnIndex, 260);


				Query = " SELECT ccerttype_type, ccert_number, ccert_name, ccert_note, ccerttype_id, ccert_id, ccerttype_note";
				Query = $"{Query} from Company_Certification WITH (NOLOCK) ";
				Query = $"{Query} INNER JOIN Company_Certification_type WITH (NOLOCK) ON ccert_type_id = ccerttype_id ";
				Query = $"{Query} Where (ccert_journ_id = 0) ";
				Query = $"{Query} And ccert_comp_id = {nReference_CompanyID.ToString()}";

				ado_fortune = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				if (!(ado_fortune.BOF && ado_fortune.EOF))
				{


					while(!ado_fortune.EOF)
					{
						CurRow = grd_company_cert.RowsCount - 1;
						grd_company_cert.RowsCount++;
						grd_company_cert.CurrentRowIndex = CurRow;

						grd_company_cert.CurrentColumnIndex = 0;
						grd_company_cert[grd_company_cert.CurrentRowIndex, grd_company_cert.CurrentColumnIndex].Value = $"{Convert.ToString(ado_fortune["ccert_id"])}{modGlobalVars.cEmptyString}";
						grd_company_cert.CellAlignment = DataGridViewContentAlignment.MiddleLeft;


						grd_company_cert.CurrentColumnIndex = 1;
						grd_company_cert[grd_company_cert.CurrentRowIndex, grd_company_cert.CurrentColumnIndex].Value = $"{Convert.ToString(ado_fortune["ccerttype_type"])}{modGlobalVars.cEmptyString}";
						grd_company_cert.CellAlignment = DataGridViewContentAlignment.MiddleLeft;

						grd_company_cert.CurrentColumnIndex = 2;
						grd_company_cert[grd_company_cert.CurrentRowIndex, grd_company_cert.CurrentColumnIndex].Value = $"{Convert.ToString(ado_fortune["ccert_number"])}{modGlobalVars.cEmptyString}";
						grd_company_cert.CellAlignment = DataGridViewContentAlignment.MiddleLeft;

						grd_company_cert.CurrentColumnIndex = 3;
						grd_company_cert[grd_company_cert.CurrentRowIndex, grd_company_cert.CurrentColumnIndex].Value = $"{Convert.ToString(ado_fortune["ccert_name"])}{modGlobalVars.cEmptyString}";
						grd_company_cert.CellAlignment = DataGridViewContentAlignment.MiddleLeft;

						grd_company_cert.CurrentColumnIndex = 4;
						grd_company_cert[grd_company_cert.CurrentRowIndex, grd_company_cert.CurrentColumnIndex].Value = $"{Convert.ToString(ado_fortune["ccert_note"])}{modGlobalVars.cEmptyString}";
						grd_company_cert.CellAlignment = DataGridViewContentAlignment.MiddleLeft;

						ado_fortune.MoveNext();
					};

					lbl_comp[92].Visible = false;
					grd_company_cert.Enabled = true;
					grd_company_cert.RowsCount--;
					grd_company_cert.Visible = true;
					grd_company_cert.Redraw = true;
				}
				else
				{
					grd_company_cert.Visible = false;
					lbl_comp[92].Visible = true;
				}

				ado_fortune.Close();
				ado_fortune = null;

				cmdCertCommand[4].Visible = true;
				cmdCertCommand[4].Enabled = true;

				cmdCertCommand[0].Visible = false; // Update
				cmdCertCommand[0].Enabled = false;

				cmdCertCommand[1].Visible = false; // Insert/Save
				cmdCertCommand[1].Enabled = false;

				cmdCertCommand[2].Visible = true; // Remove
				cmdCertCommand[2].Enabled = true;

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_cert_grid ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		public void fill_cert_drop_down(object selected_type)
		{
			ADORecordSetHelper ado_cert_name = new ADORecordSetHelper();
			int CurRow = 0;
			int counter1 = 0;
			int row_selected = grd_company_cert.RowSel;
			int counter_for_selected = 0;
			string Query = " Select distinct ccerttype_type from Company_Certification_type WITH (NOLOCK) order by ccerttype_type asc";

			ado_cert_name = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

			if (!(ado_cert_name.BOF && ado_cert_name.EOF))
			{

				cert_combo_drop_down[0].Items.Clear();



				while(!ado_cert_name.EOF)
				{



					if (selected_type == ado_cert_name["ccerttype_type"])
					{
						cert_combo_drop_down[0].AddItem(Convert.ToString(ado_cert_name["ccerttype_type"]));
						counter_for_selected = counter1;
					}
					else
					{
						cert_combo_drop_down[0].AddItem(Convert.ToString(ado_cert_name["ccerttype_type"]));
					}
					counter1++;

					ado_cert_name.MoveNext();
				};

				if (counter_for_selected > -1)
				{
					cert_combo_drop_down[0].SelectedIndex = (counter_for_selected);
				}
				else
				{
					cert_combo_drop_down[0].SelectedIndex = 0;
				}

			}
			else
			{
			}

		}

		public void fill_cert_drop_down_and_info(object selected_flag)
		{
			// MSW  6/2011 - making the grid that is filled with the company certification information
			//fille grid if this is a fortune 1000 company
			ADORecordSetHelper ado_cert_name = new ADORecordSetHelper();
			int CurRow = 0;
			int row_selected = grd_company_cert.RowSel;

			// making sure correct buttons are visible
			cmdCertCommand[4].Visible = true;
			cmdCertCommand[4].Enabled = true;

			cmdCertCommand[0].Visible = true; // Update
			cmdCertCommand[0].Enabled = true;

			cmdCertCommand[1].Visible = false; // Insert/Save
			cmdCertCommand[1].Enabled = false;

			string Query = " Select distinct ccerttype_type, ccert_type_id, ccert_number, ccert_note, ccerttype_note, ccert_name, ccert_id from Company_Certification ";
			Query = $"{Query} INNER JOIN Company_Certification_type WITH (NOLOCK) ON ccert_type_id = ccerttype_id ";
			Query = $"{Query} Where (ccert_journ_id = 0)";

			grd_company_cert.CurrentColumnIndex = 0;
			grd_company_cert.CurrentRowIndex = grd_company_cert.RowSel;
			//UPGRADE_WARNING: (1068) selected_flag of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
			if (Convert.ToString(selected_flag) == "Y")
			{
				Query = $"{Query} and ccert_id = {grd_company_cert[grd_company_cert.CurrentRowIndex, grd_company_cert.CurrentColumnIndex].FormattedValue.ToString()}";
			}

			ado_cert_name = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

			if (!(ado_cert_name.BOF && ado_cert_name.EOF))
			{

				cert_combo_drop_down[0].Items.Clear();



				while(!ado_cert_name.EOF)
				{


					//UPGRADE_WARNING: (1068) selected_flag of type Variant is being forced to string. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1068
					if (Convert.ToString(selected_flag) == "Y")
					{

						if (Convert.ToString(ado_cert_name["ccert_number"]) != "Null")
						{
							cert_number_textbox.Text = Convert.ToString(ado_cert_name["ccert_number"]);
						}
						else
						{
							cert_number_textbox.Text = "";
						}

						if (Convert.ToString(ado_cert_name["ccert_name"]) != "Null")
						{
							cert_name_textbox.Text = Convert.ToString(ado_cert_name["ccert_name"]);
						}
						else
						{
							cert_name_textbox.Text = "";
						}

						if (Convert.ToString(ado_cert_name["ccert_note"]) != "Null")
						{
							cert_note_textbox.Text = Convert.ToString(ado_cert_name["ccert_note"]);
						}
						else
						{
							cert_note_textbox.Text = "";
						}

						if (Convert.ToDouble(ado_cert_name["ccert_id"]) > 0)
						{
							lbl_comp[COMPANY_CERT_ID].Text = Convert.ToString(ado_cert_name["ccert_id"]);
						}
						else
						{
							lbl_comp[COMPANY_CERT_ID].Text = "";
						}


					}
					else
					{

						// if they are empty set them to blank
						cert_number_textbox.Text = "";
						cert_name_textbox.Text = "";
						cert_note_textbox.Text = "";
						lbl_comp[COMPANY_CERT_ID].Text = "";

					}




					Application.DoEvents();



					ado_cert_name.MoveNext();
				};

				ado_cert_name.MoveFirst();
				fill_cert_drop_down(ado_cert_name["ccerttype_type"]);

			}
			else
			{
			}


		}

		public void fill_historical_grid(int inQuantity = 0, bool with_amod = false)
		{

			// Function used to fill company history grid
			ADORecordSetHelper ado_History = null; // List of company history
			string Query = modGlobalVars.cEmptyString;

			int nFoundMatchingJID_GridRow = 0;

			try
			{

				search_on("Selecting Company History List ....");

				cmdCompHistoryTab[0].Visible = false; // View Current Company Record
				cmdCompHistoryTab[1].Visible = false; // Get All History Records

				lbl_comp[HISTORY_JOURNID_INDEX].Visible = false;
				lbl_comp[JOURNAL_ID_INDEX].Visible = false;

				grd_company_history.Visible = false;
				grd_company_history.Enabled = false;

				grd_company_history.Clear();
				grd_company_history.ColumnsCount = 7;
				grd_company_history.RowsCount = 2;

				grd_company_history.FixedRows = 1;
				grd_company_history.FixedColumns = 0;

				grd_company_history.CurrentRowIndex = 0;
				grd_company_history.CurrentColumnIndex = 0;
				grd_company_history.SetColumnWidth(0, 67);
				grd_company_history.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = "Date";

				grd_company_history.CurrentColumnIndex = 1;
				grd_company_history.SetColumnWidth(1, 367);
				grd_company_history.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = "Description";

				grd_company_history.CurrentColumnIndex = 2;
				grd_company_history.SetColumnWidth(2, 60);
				grd_company_history.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = "JournID";

				grd_company_history.CurrentColumnIndex = 3;
				grd_company_history.SetColumnWidth(3, 30);
				grd_company_history.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = "COM";


				grd_company_history.CurrentColumnIndex = 4;
				grd_company_history.SetColumnWidth(4, 28);
				grd_company_history.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = "BUS";


				grd_company_history.CurrentColumnIndex = 5;
				grd_company_history.SetColumnWidth(5, 28);
				grd_company_history.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = "HEL";

				grd_company_history.CurrentColumnIndex = 6;
				grd_company_history.SetColumnWidth(6, 20);
				grd_company_history.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = "YT";


				// RTW - 6/27/06 - NEW QUERY
				if (true)
				{

					if (inQuantity > 0)
					{
						Query = $"SELECT TOP {inQuantity.ToString()} ";
						cmdCompHistoryTab[1].Visible = true; // Get All History Records
						lbl_comp[HISTORY_JOURNID_INDEX].Visible = true;
						lbl_comp[JOURNAL_ID_INDEX].Visible = true;
					}
					else
					{
						Query = "SELECT ";
					}

				}
				else
				{
					Query = "SELECT TOP 25 ";
				}

				Query = $"{Query}journ_id, journ_date, journ_subject, jcat_subcategory_transtype, jcat_auto_subject_flag ";
				if (with_amod)
				{
					Query = $"{Query}, ac_amod_id  ";
				}



				Query = $"{Query}, (select COUNT(*) from Aircraft_Reference a2 with (NOLOCK) inner join Aircraft with (NOLOCK) on ac_id = cref_ac_id  and ac_journ_id = cref_journ_id where a2.cref_comp_id = {nReference_CompanyID.ToString()} and a2.cref_journ_id = journ_id and ac_product_helicopter_flag  = 'Y') as hcount";
				Query = $"{Query}, (select COUNT(*) from Aircraft_Reference a3 with (NOLOCK) inner join Aircraft with (NOLOCK) on ac_id = cref_ac_id  and ac_journ_id = cref_journ_id where a3.cref_comp_id = {nReference_CompanyID.ToString()} and a3.cref_journ_id = journ_id and ac_product_business_flag = 'Y') as bcount";
				Query = $"{Query}, (select COUNT(*) from Aircraft_Reference a4 with (NOLOCK) inner join Aircraft with (NOLOCK) on ac_id = cref_ac_id  and ac_journ_id = cref_journ_id where a4.cref_comp_id = {nReference_CompanyID.ToString()} and a4.cref_journ_id = journ_id and ac_product_commercial_flag  = 'Y') as ccount";
				Query = $"{Query}, (select COUNT(*) from Yacht_Reference with (NOLOCK) where  yr_comp_id = {nReference_CompanyID.ToString()} and yr_journ_id = journ_id) as ycount   ";



				Query = $"{Query}FROM Journal WITH(NOLOCK) ";
				Query = $"{Query}INNER JOIN Journal_Category WITH (NOLOCK) ON journ_subcategory_code = jcat_subcategory_code ";

				if (with_amod)
				{
					Query = $"{Query} inner join Aircraft with (NOLOCK) on ac_id = journ_ac_id ";
				}

				Query = $"{Query}WHERE (jcat_category_code IN ('AH','YH')) ";
				// Find A Reference To An Historical Aircraft
				Query = $"{Query}AND (";
				Query = $"{Query}      (journ_id IN (SELECT DISTINCT cref_journ_id ";
				Query = $"{Query}                    FROM Aircraft_Reference WITH (NOLOCK) ";
				Query = $"{Query}                    WHERE (cref_comp_id = {nReference_CompanyID.ToString()}))) ";
				Query = $"{Query}   OR (journ_id IN (SELECT DISTINCT yr_journ_id ";
				Query = $"{Query}                    FROM Yacht_Reference WITH (NOLOCK) ";
				Query = $"{Query}                    WHERE (yr_comp_id = {nReference_CompanyID.ToString()}))) ";
				Query = $"{Query}      ";
				Query = $"{Query}    ) ";



				// Find A Reference To An Historical Yacht
				Query = $"{Query}ORDER BY journ_date DESC";

				ado_History = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(ado_History.Fields) && !(ado_History.BOF && ado_History.EOF))
				{

					cmdCompHistoryTab[0].Visible = true; // View Current Comopany Record
					grd_company_history.CurrentRowIndex = 1;


					while(!ado_History.EOF)
					{

						if (grd_company_history.CurrentRowIndex == 1)
						{
							lbl_comp[JOURNAL_ID_INDEX].Text = Convert.ToString(ado_History["journ_id"]);
						}

						grd_company_history.CurrentColumnIndex = 0;
						grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_History["journ_date"]))
						{
							if (Information.IsDate(ado_History["journ_date"]))
							{
								grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = Convert.ToDateTime(ado_History["journ_date"]).ToString("d");
							}
						}

						if (with_amod)
						{
							if (Convert.ToString(cmd_ac_verify[6].Tag).Trim() != "")
							{
								if ((Convert.ToString(cmd_ac_verify[6].Tag).IndexOf($"'{Convert.ToString(ado_History["ac_amod_id"])}'") + 1) == 0)
								{
									cmd_ac_verify[6].Tag = $"{Convert.ToString(cmd_ac_verify[6].Tag)},'{Convert.ToString(ado_History["ac_amod_id"])}'";
								}
							}
							else
							{
								cmd_ac_verify[6].Tag = $"'{Convert.ToString(ado_History["ac_amod_id"])}'";
							}
						}

						grd_company_history.CurrentColumnIndex = 1;
						grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_History["jcat_auto_subject_flag"]))
						{
							if (Convert.ToString(ado_History["jcat_auto_subject_flag"]).Trim().ToUpper() == "Y")
							{

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_History["jcat_subcategory_transtype"]))
								{
									if (Convert.ToString(ado_History["jcat_subcategory_transtype"]).Trim() != modGlobalVars.cEmptyString)
									{
										grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = Convert.ToString(ado_History["jcat_subcategory_transtype"]).Trim();
									}
								}

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_History["journ_subject"]))
								{
									if (Convert.ToString(ado_History["journ_subject"]).Trim() != modGlobalVars.cEmptyString)
									{
										if (grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].FormattedValue.ToString().Trim() != modGlobalVars.cEmptyString)
										{
											grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = $"{grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].FormattedValue.ToString()} - {Convert.ToString(ado_History["journ_subject"]).Trim()}";
										}
										else
										{
											grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = Convert.ToString(ado_History["journ_subject"]).Trim();
										}
									}
								}

							}
							else
							{
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_History["journ_subject"]))
								{
									if (Convert.ToString(ado_History["journ_subject"]).Trim() != modGlobalVars.cEmptyString)
									{
										grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = Convert.ToString(ado_History["journ_subject"]).Trim();
									}
								}
							}
						}

						grd_company_history.CurrentColumnIndex = 2;
						grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = Convert.ToString(ado_History["journ_id"]);
						grd_company_history.set_RowData(grd_company_history.CurrentRowIndex, Convert.ToInt32(ado_History["journ_id"]));

						if (nReference_CompanyJID == Convert.ToInt32(ado_History["journ_id"]))
						{
							nFoundMatchingJID_GridRow = grd_company_history.CurrentRowIndex;
						}

						grd_company_history.CurrentColumnIndex = 3;
						grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = Convert.ToString(ado_History["ccount"]);

						grd_company_history.CurrentColumnIndex = 4;
						grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = Convert.ToString(ado_History["bcount"]);


						grd_company_history.CurrentColumnIndex = 5;
						grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = Convert.ToString(ado_History["hcount"]);

						grd_company_history.CurrentColumnIndex = 6;
						grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = Convert.ToString(ado_History["ycount"]);


						grd_company_history.RowsCount++;
						grd_company_history.CurrentRowIndex++;

						ado_History.MoveNext();

					};

					grd_company_history.RowsCount--;
					grd_company_history.CurrentRowIndex = 1;

					grd_company_history.Enabled = true;
					lbl_comp[HISTORY_COUNT_INDEX].Text = (grd_company_history.RowsCount - 1).ToString();

					grd_company_history_Click(grd_company_history, new EventArgs());

					if (nFoundMatchingJID_GridRow > 0)
					{
						grd_company_history.CurrentRowIndex = nFoundMatchingJID_GridRow;
						grd_company_history.RowSel = grd_company_history.CurrentRowIndex;
						grd_company_history.ColSel = 0;
						grd_company_history.ColSel = grd_company_history.ColumnsCount - 1;
					}

					ado_History.Close();

				}
				else
				{

					grd_company_history.CurrentRowIndex = 1;
					grd_company_history.CurrentColumnIndex = 1;
					grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].Value = "No Company History Found";

					grd_company_history_Click(grd_company_history, new EventArgs());

					grd_company_history.Enabled = false;

				}

				ado_History = null;

				grd_company_history.Visible = true;
				grd_company_history.Redraw = true;

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_historical_grid_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		private void cmd_company_all_history_records_Click()
		{

			if (mvHasFocus)
			{
				mvHasFocus = false;
			}

			fill_historical_grid(0);

		} // cmd_company_all_history_records_Click

		private void tab_company_admin_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			string Query = "";


			switch(SSTabHelper.GetSelectedIndex(tab_company_admin))
			{
				case 3 :  //company history 
					fill_historical_grid(25); 
					 
					break;
				case 4 :  //company relationships 
					 
					SSTabHelper.SetSelectedIndex(tab_company_rel, 0); 
					fill_relationships_grid(); 
					 
					break;
				case 5 :  //statistics 
					 
					fill_stats_grid(); 
					fill_abi_services(); 
					 
					break;
				case 6 : 
					 
					fill_cert_grid();  // TEMP HOLD MSW 
					 
					break;
			}

			//MSW - 6/2011 - this selects the company certification data and if any exists it then puts an X image on the tab
			Query = " SELECT ccert_id";
			Query = $"{Query} FROM Company WITH (NOLOCK) ";
			Query = $"{Query} INNER JOIN Company_Certification WITH (NOLOCK) ON comp_id = ccert_comp_id AND comp_journ_id = ccert_journ_id ";
			Query = $"{Query} INNER JOIN Company_Certification_type WITH (NOLOCK) ON ccert_type_id = ccerttype_id ";
			Query = $"{Query} Where (comp_journ_id = 0) ";
			Query = $"{Query} And comp_id = {nReference_CompanyID.ToString()}";

			if (modAdminCommon.Exist(Query))
			{
				tab_company_admin.ImageList.Images[6] = pic_verify_ac[0].Image; // the X image on the 6th tab - certifications
			}

			if (bChk_CompRelationInternal_Outstanding)
			{
				modGridEditCommon.InPlace_Grid_Reset(grd_company_relationships, chk_internal_relation, nRememberGridRow, nRememberGridCol);
				bChk_CompRelationInternal_Outstanding = false;
			}

			if (bEdit_PurchQuest_Outstanding)
			{
				modGridEditCommon.InPlace_Grid_Reset(grd_company_aircraft, cbo_comp_purchase_question, nRememberGridRow, nRememberGridCol);
				bEdit_PurchQuest_Outstanding = false;
			}

			tab_company_adminPreviousTab = tab_company_admin.SelectedIndex;
		}

		private void fill_company_journal_grid(UpgradeHelpers.DataGridViewFlex grd_company_journal)
		{

			// Function used to fill company journal list

			int nRememberTimeout = 0;
			try
			{

				string Query = "";
				Query = modGlobalVars.cEmptyString;
				StringBuilder TempSubject = new StringBuilder();
				ADORecordSetHelper ado_tmpRS = null;
				ADORecordSetHelper ado_Journal = new ADORecordSetHelper();

				string tmpCompName = "";
				tmpCompName = "";
				StringBuilder tmpContactName = new StringBuilder();
				tmpContactName = new StringBuilder("");
				StringBuilder tmpMakeModelName = new StringBuilder();
				tmpMakeModelName = new StringBuilder("");
				string whereIstheError = "";
				whereIstheError = "";

				int lCnt1 = 0;
				string strJSubject = "";

				search_on("Getting Company Journal Entries....");

				strJSubject = txtCompJournalSearch.Text.Trim();


				grd_company_journal.Visible = false;
				grd_company_journal.Enabled = false;
				grd_company_journal.Redraw = false;

				grd_company_journal.Clear();
				grd_company_journal.ColumnsCount = 7;
				grd_company_journal.RowsCount = 2;

				grd_company_journal.FixedRows = 1;
				grd_company_journal.FixedColumns = 0;

				grd_company_journal.CurrentRowIndex = 0;
				grd_company_journal.CurrentColumnIndex = 0;
				grd_company_journal.SetColumnWidth(grd_company_journal.CurrentColumnIndex, 67);
				grd_company_journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "Date";

				grd_company_journal.CurrentColumnIndex = 1;
				grd_company_journal.SetColumnWidth(grd_company_journal.CurrentColumnIndex, 100);
				grd_company_journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "User";

				grd_company_journal.CurrentColumnIndex = 2;
				grd_company_journal.SetColumnWidth(grd_company_journal.CurrentColumnIndex, 567);
				grd_company_journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_journal.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
				grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "Subject";

				grd_company_journal.CurrentColumnIndex = 3;
				grd_company_journal.SetColumnWidth(grd_company_journal.CurrentColumnIndex, 60);
				grd_company_journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "Description";

				grd_company_journal.CurrentColumnIndex = 4;
				grd_company_journal.SetColumnWidth(grd_company_journal.CurrentColumnIndex, 83);
				grd_company_journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "Customer Notes";

				grd_company_journal.CurrentColumnIndex = 5;
				grd_company_journal.SetColumnWidth(grd_company_journal.CurrentColumnIndex, 60);
				grd_company_journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "Type";

				grd_company_journal.CurrentColumnIndex = 6;
				grd_company_journal.SetColumnWidth(grd_company_journal.CurrentColumnIndex, 60);
				grd_company_journal.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "Journal ID";

				Query = modGlobalVars.cEmptyString;

				// IDENTIFY HOW MANY JOURNAL ENTRIES TO LIST
				if (chk_limit_journal_list.CheckState == CheckState.Checked)
				{
					if (!Information.IsNumeric(txt_only_show_first_journal_recs.Text))
					{
						txt_only_show_first_journal_recs.Text = "20";
					}
					Query = $"SELECT TOP {txt_only_show_first_journal_recs.Text} Journal.*, Journal_Category.*, contact_first_name, contact_last_name, contact_title, user_first_name, user_last_name ";
				}
				else
				{
					Query = "SELECT Journal.*, Journal_Category.*, contact_first_name, contact_last_name, contact_title, user_first_name, user_last_name ";
				}

				//Query = Query & " FROM Journal WITH(NOLOCK), Journal_Category WITH(NOLOCK)"
				Query = $"{Query}FROM Journal WITH(NOLOCK) ";


				switch(cbo_journal_note_type.Text.Substring(0, Math.Min(2, cbo_journal_note_type.Text.Length)).Trim().ToUpper())
				{
					case "SN" : 
						Query = $"{Query}LEFT OUTER JOIN Journal_Category WITH (NOLOCK) ON journ_subcategory_code = jcat_subcategory_code "; 
						break;
					default:
						Query = $"{Query}INNER JOIN Journal_Category WITH (NOLOCK) ON journ_subcategory_code = jcat_subcategory_code "; 
						break;
				}


				Query = $"{Query}LEFT OUTER JOIN Contact WITH (NOLOCK) ON journ_contact_id = contact_id AND contact_journ_id = 0 ";
				Query = $"{Query}LEFT OUTER JOIN [User] WITH (NOLOCK) ON journ_user_id = [user].user_id ";

				if (strJSubject != "")
				{
					Query = $"{Query} left outer join Aircraft with (NOLOCK) on ac_id = journ_ac_id and ac_journ_id = 0 ";
					Query = $"{Query} left outer join Aircraft_Model with (NOLOCK) on ac_amod_id = amod_id ";
				}

				Query = $"{Query}WHERE journ_id > 0 ";

				if (modAdminCommon.gbl_User_ID == "mvit" || modAdminCommon.gbl_User_ID == "dcr" || modAdminCommon.gbl_User_ID == "jkc" || modAdminCommon.gbl_User_ID == "mah")
				{
				}
				else
				{
					Query = $"{Query}AND (jcat_subcategory_code <> 'SP') ";
				}

				Query = $"{Query} and (jcat_subcategory_code <> 'HDPE') ";


				if (grd_company_journal.Name == "grd_marketing_crm_notes")
				{


					// for the marketing notes section
					Query = $"{Query} AND (jcat_category_code = 'MR') AND (journ_subject NOT LIKE '%Marketing Representative Note DEMO%')  ";

					if (txt_market_note[0].Text.Trim() != "")
					{
						Query = $"{Query} and (journ_subject LIKE '%{txt_market_note[0].Text.Trim()}%' or journ_description LIKE '%{txt_market_note[0].Text.Trim()}%' or contact_first_name LIKE '%{txt_market_note[0].Text.Trim()}%' or contact_last_name LIKE '%{txt_market_note[0].Text.Trim()}%'  or user_first_name LIKE '%{txt_market_note[0].Text.Trim()}%' or user_last_name LIKE '%{txt_market_note[0].Text.Trim()}%' )  ";
					}


					// RTW - 3/18/2004 - CHECK TO SEE IF USER HAS SPECIFIED A SPECIFIC TYPE OF JOURNAL NOTE
				}
				else if (cbo_journal_note_type.SelectedIndex > 0)
				{  //index 0=all aey 5/7/2004


					switch(cbo_journal_note_type.Text.Substring(0, Math.Min(2, cbo_journal_note_type.Text.Length)).Trim().ToUpper())
					{
						case "TN" : 
							Query = $"{Query}AND (jcat_category_code = 'TR') "; 
							// 08/15/2019 - By David D. Cruger 
							// Only Display Technical Notes NOT Subscription Notes 
							//Query = Query & "AND (journ_subcategory_code = 'TN') " 
							break;
						case "RS" :  // Research 
							Query = $"{Query}AND (journ_subcategory_code in ('RN', 'iQ', 'IDNOTE', 'PBNOTE', 'RADN', 'RVEAT','MEMO', 'CC','PROJ','DOCAT','RAAT','CNAME'))  "; 

							 
							break;
						case "RN" :  // Account Representative Note 
							Query = $"{Query}AND (jcat_category_code = 'AR' OR jcat_category_code = 'AH') "; 
							Query = $"{Query}AND (journ_subcategory_code not in ('AA', 'AAC', 'AAV', 'ANV', 'YN', 'IQ', 'iQ','PBNOTE','PROJ','DOCAT','RAAT'))  "; 
							 
							break;
						case "RE" : 
							//MSW - RTW 2/5/13 
							Query = $"{Query}AND (journ_subcategory_code in ('AA', 'AAC', 'AAV', 'ANV'))  "; 
							 
							break;
						case "MN" :  // Marketing Representative Note 
							if (cbo_journal_note_type.Text.IndexOf("DEMO") >= 0)
							{
								Query = $"{Query}AND (jcat_category_code = 'MR') AND (journ_subject LIKE '%Marketing Representative Note DEMO%')   ";
							}
							else
							{
								Query = $"{Query}AND (jcat_category_code = 'MR') AND (journ_subject NOT LIKE '%Marketing Representative Note DEMO%')  ";
							} 
							 
							break;
						case "ML" :  // Mail List Note 
							Query = $"{Query}AND (jcat_category_code = 'ML') "; 
							 
							break;
						case "AH" :  // Aircraft History Notes 
							Query = $"{Query}AND (jcat_category_code = 'AH') "; 
							 
							// 07/24/2014 - By David D. Cruger; Added 
							break;
						case "YH" :  // Yacht History Notes 
							Query = $"{Query}AND (jcat_category_code = 'YH') "; 
							 
							// 01/23/2013 - By David D. Cruger 
							// Per Lu; Added this option in the Journal Drop down 
							break;
						case "AN" :  // Aircraft Delivery Notes 
							Query = $"{Query}AND (jcat_category_code = 'AN') "; 
							Query = $"{Query}AND (jcat_subcategory_code = 'ADN') "; 
							 
							break;
						case "ID" : 
							Query = $"{Query}AND (journ_subcategory_code = 'IDNOTE') "; 
							 
							break;
						case "PB" :  // 03/08/2017 - By David D. Cruger; Added 
							Query = $"{Query}AND (journ_subcategory_code = 'PBNOTE') "; 
							 
							// 03/01/2012 - By David D. Cruger 
							// Per Lu; Added this option in the Journal Drop down 
							break;
						case "IQ" :  // JETNET iQ 
							Query = $"{Query}AND (((jcat_category_code = 'AR') "; 
							Query = $"{Query}AND (journ_subcategory_code = 'RN') "; 
							Query = $"{Query}AND (journ_subject LIKE '%iQ Survey%')) "; 
							Query = $"{Query}OR  (journ_subcategory_code = 'iQ')) "; 
							 
							break;
						case "YN" :  // Aircraft Delivery Notes 
							Query = $"{Query}AND (jcat_subcategory_code = 'YN') "; 
							 
							break;
						case "CN" :  // Aircraft Delivery Notes 
							Query = $"{Query}AND (jcat_subcategory_code = 'CN') "; 
							 
							break;
						case "FN" :  // Aircraft Delivery Notes 
							Query = $"{Query}AND (jcat_subcategory_code = 'FN') "; 
							 
							break;
						case "RA" :  // Reassign Attempted 
							 
							if (cbo_journal_note_type.Text.Trim().ToUpper().StartsWith("RAAT", StringComparison.Ordinal))
							{
								Query = $"{Query}AND (jcat_subcategory_code = 'RAAT') ";
							} 
							if (cbo_journal_note_type.Text.Trim().ToUpper().StartsWith("RADN", StringComparison.Ordinal))
							{
								Query = $"{Query}AND (jcat_subcategory_code = 'RADN') ";
							} 
							 
							break;
						case "RV" :  // Reverify Exclusive Attempted 
							Query = $"{Query}AND (jcat_subcategory_code = 'RVEAT') "; 
							 
							break;
						case "DO" :  // Doc Attempted 
							Query = $"{Query}AND (jcat_subcategory_code = 'DOCAT') "; 
							break;
						//UPGRADE_NOTE: (7001) The following case (switch) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
						//case "PB" : 
							//Query = $"{Query}AND (jcat_subcategory_code = 'PBNOTE') "; 
							//break;
						case "PR" : 
							Query = $"{Query}AND (jcat_subcategory_code = 'PROJ') "; 
							break;
						case "ME" : 
							Query = $"{Query}AND (jcat_subcategory_code = 'MEMO') "; 
							break;
						case "CU" :  // custom 
							Query = $"{Query}AND (jcat_subcategory_code = 'MEMO') "; 
							break;
						case "CS" :  // cusomter support 
							Query = $"{Query}AND (journ_subcategory_code in ('CSAC', 'CSCO', 'CSCS'))  "; 
							break;
						case "CC" :  // custom  - company formal name change 
							Query = $"{Query}  AND   (journ_subject LIKE '%Formally Changed Company Name%') "; 
							break;
						case "SN" :  // Reverify Exclusive Attempted 
							Query = $"{Query}AND (jcat_subcategory_code = 'SN') "; 
							break;
					}
				} // If cbo_journal_note_type.ListIndex > 0 Then    'index 0=all aey 5/7/2004

				Query = $"{Query} AND (journ_subcategory_code not in ('AIAI')) ";

				// ADD THE COMPANY ID TO THE QUERY IF THE MENU OPTION FOR COMPANY
				// JOURNAL ENTRIES WAS FLAGGED
				if (((ToolStripMenuItem) mnuViewJournalSubType[1]).Checked && nReference_CompanyID != 0)
				{
					Query = $"{Query}AND journ_comp_id = {nReference_CompanyID.ToString()} ";
				}
				else
				{
					if (((ToolStripMenuItem) mnuViewJournalSubType[1]).Checked && nReference_CompanyID == 0)
					{
						MessageBox.Show("No Current Company Selected", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
						search_off();
						return;
					}
				}

				// ADD THE CONTACT TO THE QUERY IF THE MENU OPTION FOR CONTACT
				// JOURNAL ENTRIES WAS FLAGGED
				if (((ToolStripMenuItem) mnuViewJournalSubType[2]).Checked && nSelectedContactID != 0)
				{
					Query = $"{Query}AND journ_contact_id = {nSelectedContactID.ToString()} ";
				}
				else
				{
					if (((ToolStripMenuItem) mnuViewJournalSubType[2]).Checked && nSelectedContactID == 0)
					{
						MessageBox.Show("No Current Contact Selected", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
						search_off();
						return;
					}
				}

				// ADD THE AIRCRAFT TO THE QUERY IF THE MENU OPTION FOR AIRCRAFT
				// JOURNAL ENTRIES WAS FLAGGED
				if (((ToolStripMenuItem) mnuViewJournalSubType[3]).Checked && nSelectedAircraftID != 0)
				{
					Query = $"{Query}AND journ_ac_id = {nSelectedAircraftID.ToString()} ";
				}
				else
				{
					if (((ToolStripMenuItem) mnuViewJournalSubType[3]).Checked && nSelectedAircraftID == 0)
					{
						MessageBox.Show("No Current Aircraft Selected", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()));
						search_off();
						return;
					}
				}

				if (strJSubject != "")
				{
					Query = $"{Query}AND (";
					Query = $"{Query}       (journ_subject LIKE '%{StringsHelper.Replace(strJSubject, "'", "''", 1, -1, CompareMethod.Binary)}%') ";
					Query = $"{Query}    OR (journ_description LIKE '%{StringsHelper.Replace(strJSubject, "'", "''", 1, -1, CompareMethod.Binary)}%') ";
					Query = $"{Query}    OR (ac_ser_no_full LIKE '%{StringsHelper.Replace(strJSubject, "'", "''", 1, -1, CompareMethod.Binary)}%') ";
					Query = $"{Query}    OR (amod_make_name LIKE '%{StringsHelper.Replace(strJSubject, "'", "''", 1, -1, CompareMethod.Binary)}%') ";
					Query = $"{Query}    OR (amod_model_name LIKE '%{StringsHelper.Replace(strJSubject, "'", "''", 1, -1, CompareMethod.Binary)}%') ";
					Query = $"{Query} OR (user_first_name  like '%{StringsHelper.Replace(strJSubject.Trim(), "'", "''", 1, -1, CompareMethod.Binary)}%') "; // replace added MSW - 8/18/21
					Query = $"{Query}    ) ";
				} // If strJSubject <> "" Then

				Query = $"{Query} {strJournalOrderBy}";
				nRememberTimeout = UpgradeHelpers.DB.DbConnectionHelper.GetCommandTimeOut(modAdminCommon.LOCAL_ADO_DB);
				UpgradeHelpers.DB.DbConnectionHelper.SetCommandTimeOut(modAdminCommon.LOCAL_ADO_DB, 5000);
				//UPGRADE_ISSUE: (2064) ADODB.Connection property LOCAL_ADO_DB.CursorLocation was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				modAdminCommon.LOCAL_ADO_DB.setCursorLocation(CursorLocationEnum.adUseClient);
				//Set ado_Journal = LOCAL_ADO_DB.Execute(Query, , adCmdText)
				ado_Journal.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
				lbl_comp[JOURNAL_COUNT_INDEX].Text = modGlobalVars.cEmptyString;

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(ado_Journal.Fields) && !(ado_Journal.BOF && ado_Journal.EOF))
				{

					ado_Journal.ActiveConnection = null;

					grd_company_journal.CurrentRowIndex = 1;

					lCnt1 = 0;

					while(!ado_Journal.EOF)
					{

						tmpCompName = modGlobalVars.cEmptyString;
						tmpContactName = new StringBuilder(modGlobalVars.cEmptyString);
						tmpMakeModelName = new StringBuilder(modGlobalVars.cEmptyString);

						// THIS SECTION APPLIES IF USER SELECTED AIRCRAFT JOURNAL ENTRIES
						if (Convert.ToDouble(ado_Journal["journ_ac_id"]) > 0 && ((ToolStripMenuItem) mnuViewJournalSubType[3]).Checked)
						{

							if (Convert.ToDouble(ado_Journal["journ_comp_id"]) > 0)
							{
								tmpCompName = txt_comp_name.Text;
							}

							if (Convert.ToDouble(ado_Journal["journ_contact_id"]) > 0)
							{

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Journal.Fields))
								{
									if (!(ado_Journal.BOF && ado_Journal.EOF))
									{
										//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
										if (!Convert.IsDBNull(ado_Journal["contact_first_name"]))
										{
											if (Convert.ToString(ado_Journal["contact_first_name"]).Trim() != modGlobalVars.cEmptyString)
											{
												tmpContactName = new StringBuilder(Convert.ToString(ado_Journal["contact_first_name"]).Trim());
											}
										}
										//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
										if (!Convert.IsDBNull(ado_Journal["contact_last_name"]))
										{
											if (Convert.ToString(ado_Journal["contact_last_name"]).Trim() != modGlobalVars.cEmptyString)
											{
												tmpContactName.Append($" {Convert.ToString(ado_Journal["contact_last_name"]).Trim()}");
											}
										}
										if (tmpContactName.ToString().Trim() == modGlobalVars.cEmptyString)
										{
											//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
											if (!Convert.IsDBNull(ado_Journal["contact_title"]))
											{
												if (Convert.ToString(ado_Journal["contact_title"]).Trim() != modGlobalVars.cEmptyString)
												{
													tmpContactName.Append($" {Convert.ToString(ado_Journal["contact_title"]).Trim()}");
												}
											}
										}
										//ado_tmpRS.Close
										//tmpContactName = Trim$(tmpContactName)
									}

								} //Not IsNull(ado_tmpRS) And Not (ado_tmpRS.BOF And ado_tmpRS.EOF)

							} //ado_Journal("journ_contact_id").Value > 0

						} //ado_Journal("journ_ac_id").Value > 0 And mnuViewJournalSubType(3).Checked = True

						// THIS SECTION APPLIES IF USER SELECTED COMPANY JOURNAL ENTRIES
						if (Convert.ToDouble(ado_Journal["journ_comp_id"]) > 0 && ((ToolStripMenuItem) mnuViewJournalSubType[1]).Checked)
						{

							if (Convert.ToDouble(ado_Journal["journ_contact_id"]) > 0)
							{
								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Journal.Fields) && !(ado_Journal.BOF && ado_Journal.EOF))
								{
									if (!(ado_Journal.BOF && ado_Journal.EOF))
									{
										//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
										if (!Convert.IsDBNull(ado_Journal["contact_first_name"]))
										{
											if (Convert.ToString(ado_Journal["contact_first_name"]).Trim() != modGlobalVars.cEmptyString)
											{
												tmpContactName = new StringBuilder(Convert.ToString(ado_Journal["contact_first_name"]).Trim());
											}
										}
										//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
										if (!Convert.IsDBNull(ado_Journal["contact_last_name"]))
										{
											if (Convert.ToString(ado_Journal["contact_last_name"]).Trim() != modGlobalVars.cEmptyString)
											{
												tmpContactName.Append($" {Convert.ToString(ado_Journal["contact_last_name"]).Trim()}");
											}
										}
										if (tmpContactName.ToString().Trim() == modGlobalVars.cEmptyString)
										{
											//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
											if (!Convert.IsDBNull(ado_Journal["contact_title"]))
											{
												if (Convert.ToString(ado_Journal["contact_title"]).Trim() != modGlobalVars.cEmptyString)
												{
													tmpContactName.Append($" {Convert.ToString(ado_Journal["contact_title"]).Trim()}");
												}
											}
										}
										// ado_tmpRS.Close
										// tmpContactName = Trim$(tmpContactName)
									}

								} //Not IsNull(ado_tmpRS) And Not (ado_tmpRS.BOF And ado_tmpRS.EOF)

							} //ado_Journal("journ_contact_id").Value > 0

							if (Convert.ToDouble(ado_Journal["journ_ac_id"]) > 0)
							{

								// changed, msw, to select current ac for display purposes, it was just picking one and displaying
								Query = " select amod_make_name, amod_model_name, ac_ser_no_full, ac_reg_no  ";
								Query = $"{Query} from Aircraft WITH(NOLOCK) ";
								Query = $"{Query} inner join Aircraft_Model WITH(NOLOCK) on amod_id = ac_amod_id ";
								Query = $"{Query} where ac_id = {Convert.ToString(ado_Journal["journ_ac_id"])}";
								Query = $"{Query} and ac_journ_id = 0 ";

								whereIstheError = "Before Execute: If ado_Journal(''journ_ac_id'').Value > 0 Then";

								ado_tmpRS = null;
								ado_tmpRS = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");
								whereIstheError = "After Execute: If ado_Journal(''journ_ac_id'').Value > 0 Then";

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_tmpRS.Fields) && !(ado_tmpRS.BOF && ado_tmpRS.EOF))
								{
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_tmpRS["amod_make_name"]))
									{
										if (Convert.ToString(ado_tmpRS["amod_make_name"]).Trim() != modGlobalVars.cEmptyString)
										{
											tmpMakeModelName = new StringBuilder($"Aircraft {Convert.ToString(ado_tmpRS["amod_make_name"]).Trim()}");
										}
									}
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_tmpRS["amod_model_name"]))
									{
										if (Convert.ToString(ado_tmpRS["amod_model_name"]).Trim() != modGlobalVars.cEmptyString)
										{
											tmpMakeModelName.Append($"/{Convert.ToString(ado_tmpRS["amod_model_name"]).Trim()}");
										}
									}
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_tmpRS["ac_ser_no_full"]))
									{
										if (Convert.ToString(ado_tmpRS["ac_ser_no_full"]).Trim() != modGlobalVars.cEmptyString)
										{
											tmpMakeModelName.Append($",{Convert.ToString(ado_tmpRS["ac_ser_no_full"]).Trim()}");
										}
									}
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_tmpRS["ac_reg_no"]))
									{
										if (Convert.ToString(ado_tmpRS["ac_reg_no"]).Trim() != modGlobalVars.cEmptyString)
										{
											tmpMakeModelName.Append($",{Convert.ToString(ado_tmpRS["ac_reg_no"]).Trim()}");
										}
									}

									ado_tmpRS.Close();
									tmpMakeModelName = new StringBuilder(tmpMakeModelName.ToString().Trim());
								} //Not IsNull(ado_tmpRS) And Not (ado_tmpRS.BOF And ado_tmpRS.EOF)

							} //ado_Journal("journ_ac_id").Value > 0

						} // ado_Journal("journ_comp_id").Value > 0 And mnuViewJournalTypeCompany.Checked = True

						// THIS SECTION APPLIES IF USER SELECTED CONTACT JOURNAL ENTRIES
						if (Convert.ToDouble(ado_Journal["journ_contact_id"]) > 0 && ((ToolStripMenuItem) mnuViewJournalSubType[2]).Checked)
						{

							if (Convert.ToDouble(ado_Journal["journ_comp_id"]) > 0)
							{
								tmpCompName = txt_comp_name.Text;
							}

							if (Convert.ToDouble(ado_Journal["journ_ac_id"]) > 0)
							{
								Query = "SELECT amod_make_name,amod_model_name,ac_ser_no_full";
								Query = $"{Query} FROM Aircraft WITH(NOLOCK), Aircraft_Model WITH(NOLOCK)";
								Query = $"{Query} WHERE ac_id = {Convert.ToString(ado_Journal["journ_ac_id"])}";
								Query = $"{Query} and amod_id = ac_amod_id";
								whereIstheError = "Before Execute:  If ado_Journal(''journ_ac_id'').Value > 0 Then CONTACT JOURNAL ENTRIES";

								ado_tmpRS = null;
								ado_tmpRS = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_tmpRS.Fields) && !(ado_tmpRS.BOF && ado_tmpRS.EOF))
								{
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_tmpRS["amod_make_name"]))
									{
										if (Convert.ToString(ado_tmpRS["amod_make_name"]).Trim() != modGlobalVars.cEmptyString)
										{
											tmpMakeModelName = new StringBuilder($"Aircraft {Convert.ToString(ado_tmpRS["amod_make_name"]).Trim()}");
										}
									}
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_tmpRS["amod_model_name"]))
									{
										if (Convert.ToString(ado_tmpRS["amod_model_name"]).Trim() != modGlobalVars.cEmptyString)
										{
											tmpMakeModelName.Append($"/{Convert.ToString(ado_tmpRS["amod_model_name"]).Trim()}");
										}
									}
									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_tmpRS["ac_ser_no_full"]))
									{
										if (Convert.ToString(ado_tmpRS["ac_ser_no_full"]).Trim() != modGlobalVars.cEmptyString)
										{
											tmpMakeModelName.Append($",{Convert.ToString(ado_tmpRS["ac_ser_no_full"]).Trim()}");
										}
									}
									ado_tmpRS.Close();
									tmpMakeModelName = new StringBuilder(tmpMakeModelName.ToString().Trim());
								} //Not IsNull(ado_tmpRS) And Not (ado_tmpRS.BOF And ado_tmpRS.EOF)

							} //ado_Journal("journ_ac_id").Value > 0

						} //ado_Journal("journ_contact_id").Value > 0 And mnuViewJournalSubType(2).Checked = True

						//Date
						grd_company_journal.CurrentColumnIndex = 0;
						grd_company_journal.CellAlignment = DataGridViewContentAlignment.TopCenter;
						grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Journal["journ_date"]))
						{
							if (Information.IsDate(ado_Journal["journ_date"]) && Convert.ToString(ado_Journal["journ_date"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = Convert.ToDateTime(ado_Journal["journ_date"]).ToString("d");
							}
						}

						//User
						grd_company_journal.CurrentColumnIndex = 1;
						grd_company_journal.CellAlignment = DataGridViewContentAlignment.TopCenter;
						grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Journal["journ_user_id"]))
						{

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Journal["user_first_name"]))
							{
								if (Convert.ToString(ado_Journal["user_first_name"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = $"{Convert.ToString(ado_Journal["user_first_name"]).Trim()} {Convert.ToString(ado_Journal["user_last_name"]).Trim()}";
								}
								else
								{
									if (Convert.ToString(ado_Journal["journ_user_id"]).Trim() != modGlobalVars.cEmptyString)
									{
										grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = Convert.ToString(ado_Journal["journ_user_id"]).Trim();
									}
									else
									{
										if (Convert.ToString(ado_Journal["journ_user_id"]).Trim() == "adm")
										{
											grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "Admin";
										}
									}
								}
							}
							else
							{
								if (Convert.ToString(ado_Journal["journ_user_id"]).Trim() == "adm")
								{
									grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "Admin";
								}
								else
								{
									if (Convert.ToString(ado_Journal["journ_user_id"]).Trim() != modGlobalVars.cEmptyString)
									{
										grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = Convert.ToString(ado_Journal["journ_user_id"]).Trim();
									}
								}
							}
						}

						// DISPLAY SUBJECT
						grd_company_journal.CurrentColumnIndex = 2;
						grd_company_journal.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
						grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						TempSubject = new StringBuilder(modGlobalVars.cEmptyString);
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Journal["jcat_auto_subject_flag"]))
						{
							if (Convert.ToString(ado_Journal["jcat_auto_subject_flag"]).Trim() != modGlobalVars.cEmptyString)
							{
								if (Convert.ToString(ado_Journal["jcat_auto_subject_flag"]).Trim().ToUpper() == "Y")
								{

									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_Journal["jcat_subcategory_transtype"]))
									{
										if (Convert.ToString(ado_Journal["jcat_subcategory_transtype"]).Trim() != modGlobalVars.cEmptyString)
										{
											TempSubject = new StringBuilder($"{Convert.ToString(ado_Journal["jcat_subcategory_transtype"]).Trim()} - ");
										}
									}

									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_Journal["journ_subject"]))
									{
										if (Convert.ToString(ado_Journal["journ_subject"]).Trim() != modGlobalVars.cEmptyString)
										{
											TempSubject = new StringBuilder($"{Convert.ToString(ado_Journal["journ_subject"]).Trim()} ");
										}
									}

								}
								else
								{

									//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
									if (!Convert.IsDBNull(ado_Journal["journ_subject"]))
									{
										if (Convert.ToString(ado_Journal["journ_subject"]).Trim() != modGlobalVars.cEmptyString)
										{
											TempSubject = new StringBuilder($"{Convert.ToString(ado_Journal["journ_subject"]).Trim()} ");
										}
									}

								} // UCase$(Trim$(ado_Journal("jcat_auto_subject_flag").Value)) = "Y"

							}
						}

						// DISPLAY AIRCRAFT INFORMATION
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Journal["journ_ac_id"]))
						{
							if (Convert.ToInt32(ado_Journal["journ_ac_id"]) > 0 && ((ToolStripMenuItem) mnuViewJournalSubType[3]).Checked)
							{

								if (tmpCompName.Trim() != modGlobalVars.cEmptyString)
								{
									TempSubject.Append($"{modGlobalVars.cHyphen} {tmpCompName} ");
								}

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Journal["journ_contact_id"]))
								{
									if (Convert.ToInt32(ado_Journal["journ_contact_id"]) > 0)
									{
										if (tmpContactName.ToString().Trim() != modGlobalVars.cEmptyString)
										{
											TempSubject.Append($"--> {tmpContactName.ToString()} ");
										}
									}
								}

							}

						}

						// DISPLAY COMPANY INFORMATION
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Journal["journ_comp_id"]))
						{
							if (Convert.ToInt32(ado_Journal["journ_comp_id"]) > 0 && ((ToolStripMenuItem) mnuViewJournalSubType[1]).Checked)
							{

								if (tmpContactName.ToString().Trim() != modGlobalVars.cEmptyString)
								{
									TempSubject.Append($"--> {tmpContactName.ToString()} ");
								}

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Journal["journ_ac_id"]))
								{
									if (Convert.ToInt32(ado_Journal["journ_ac_id"]) > 0)
									{
										TempSubject.Append($"{modGlobalVars.cHyphen} {tmpMakeModelName.ToString()} ");
									}
								}

							}

						}

						//  DISPLAY CONTACT INFORMATION
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Journal["journ_contact_id"]))
						{
							if (Convert.ToInt32(ado_Journal["journ_comp_id"]) > 0 && ((ToolStripMenuItem) mnuViewJournalSubType[2]).Checked)
							{

								if (tmpCompName.Trim() != modGlobalVars.cEmptyString)
								{
									TempSubject.Append($"{modGlobalVars.cHyphen} {tmpCompName} ");
								}

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Journal["journ_ac_id"]))
								{
									if (Convert.ToInt32(ado_Journal["journ_ac_id"]) > 0)
									{
										TempSubject.Append($"{modGlobalVars.cHyphen} {tmpMakeModelName.ToString()} ");
									}
								}

							}

						}


						if (Convert.ToString(ado_Journal["jcat_subcategory_code"]).Trim().StartsWith("MN", StringComparison.Ordinal))
						{
							grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "";

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Journal["journ_subject"]))
							{
								//  If Trim(ado_Journal("journ_subject")) <> "MN - Marketing Representative Note" Then
								if (Convert.ToString(ado_Journal["journ_subject"]).IndexOf(" - ") >= 0)
								{
									grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = $"{Convert.ToString(ado_Journal["journ_subject"]).Trim().Substring(Math.Max(Convert.ToString(ado_Journal["journ_subject"]).Trim().Length - (Strings.Len(Convert.ToString(ado_Journal["journ_subject"]).Trim()) - (Convert.ToString(ado_Journal["journ_subject"]).Trim().IndexOf(" - ") + 1) - 2), 0))} - ";
								}
								else
								{
									grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = $"{Convert.ToString(ado_Journal["journ_subject"])} - ";
								}



								//  End If
							}

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Journal["journ_description"]))
							{
								if (Convert.ToString(ado_Journal["journ_description"]).Trim() != modGlobalVars.cEmptyString)
								{
									grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = $"{grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].FormattedValue.ToString()}{Convert.ToString(ado_Journal["journ_description"])}";
								}
							}
						}
						else
						{
							// DISPLAY SUBJECT
							grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = TempSubject.ToString().Trim();
						}



						// DISPLAY DESCRIPTION
						grd_company_journal.CurrentColumnIndex = 3;
						grd_company_journal.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
						grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Journal["journ_description"]))
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_Journal["journ_description"]) && !Convert.IsDBNull(ado_Journal["journ_subject"]))
							{
								if (Convert.ToString(ado_Journal["journ_description"]).Trim() == Convert.ToString(ado_Journal["journ_subject"]).Trim())
								{
									grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = ""; // if they are equal then dont show it 2/2/23
								}
								else if (Convert.ToString(ado_Journal["journ_description"]).Trim() != modGlobalVars.cEmptyString)
								{ 
									grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "X";
								}
							}
							else if (Convert.ToString(ado_Journal["journ_description"]).Trim() != modGlobalVars.cEmptyString)
							{ 
								grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "X";
							}


						}

						//Customer note
						if (($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Journal["journ_customer_note"])}").Trim() != modGlobalVars.cEmptyString)
						{
							grd_company_journal.CurrentColumnIndex = 4;
							grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "X";
							grd_company_journal.CellBackColor = NORMAL_TXT_BACKCOLOR; //white
							grd_company_journal.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
						}
						else if (($"{modGlobalVars.cEmptyString}{Convert.ToString(ado_Journal["journ_subcategory_code"])}").Trim().ToUpper() == "RN")
						{ 
							//grey out customer note if not applicable.
							grd_company_journal.CurrentColumnIndex = 4;
							grd_company_journal.CellBackColor = DISABLED_BACKCOLOR; //grey
							grd_company_journal.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
						}
						else
						{
							grd_company_journal.CurrentColumnIndex = 4;
							grd_company_journal.CellBackColor = NORMAL_TXT_BACKCOLOR; //white
							grd_company_journal.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
						}

						grd_company_journal.CurrentColumnIndex = 4;
						grd_company_journal.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
						grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						grd_company_journal.CellBackColor = NORMAL_TXT_BACKCOLOR; //white
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Journal["journ_customer_note"]))
						{
							if (Convert.ToString(ado_Journal["journ_customer_note"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "X";
							}
							else
							{

								//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
								if (!Convert.IsDBNull(ado_Journal["journ_subcategory_code"]))
								{
									if (Convert.ToString(ado_Journal["journ_subcategory_code"]).Trim() != modGlobalVars.cEmptyString)
									{
										if (Convert.ToString(ado_Journal["journ_subcategory_code"]).Trim().ToUpper() == "RN")
										{
											grd_company_journal.CellBackColor = DISABLED_BACKCOLOR; //grey
										}
									}
								}

							}
						}

						//Type
						grd_company_journal.CurrentColumnIndex = 5;
						grd_company_journal.CellAlignment = DataGridViewContentAlignment.MiddleLeft;
						grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Journal["journ_subcategory_code"]))
						{
							if (Convert.ToString(ado_Journal["journ_subcategory_code"]).Trim() != modGlobalVars.cEmptyString)
							{
								grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = Convert.ToString(ado_Journal["journ_subcategory_code"]).Trim();
							}
						}

						//Journal ID
						grd_company_journal.CurrentColumnIndex = 6;
						grd_company_journal.CellAlignment = DataGridViewContentAlignment.MiddleRight;
						grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_Journal["journ_id"]))
						{
							if (Convert.ToInt32(ado_Journal["journ_id"]) > 0)
							{
								grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = Convert.ToString(ado_Journal["journ_id"]).Trim();
							}
						}

						grd_company_journal.set_RowData(grd_company_journal.CurrentRowIndex, Convert.ToInt32(ado_Journal["journ_id"]));

						grd_company_journal.RowsCount++;
						grd_company_journal.CurrentRowIndex++;

						lCnt1++;
						if (lCnt1 == 13)
						{
							grd_company_journal.Visible = true;
							grd_company_journal.Enabled = true;
							grd_company_journal.Redraw = true;
							Application.DoEvents();
							grd_company_journal.Enabled = false;
							grd_company_journal.Redraw = false;
						}

						ado_Journal.MoveNext();

					};

					grd_company_journal.RowsCount--;
					grd_company_journal.CurrentRowIndex = 1;

					lbl_comp[JOURNAL_COUNT_INDEX].Text = $"{(grd_company_journal.RowsCount - 1).ToString()} Entries";

					UpgradeHelpers.DB.DbConnectionHelper.SetCommandTimeOut(modAdminCommon.LOCAL_ADO_DB, nRememberTimeout);
					//UPGRADE_ISSUE: (2064) ADODB.Connection property LOCAL_ADO_DB.CursorLocation was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					modAdminCommon.LOCAL_ADO_DB.setCursorLocation(CursorLocationEnum.adUseServer);

					grd_company_journal.Enabled = true;

				}
				else
				{

					grd_company_journal.CurrentRowIndex = 1;
					grd_company_journal.CurrentColumnIndex = 2;
					grd_company_journal[grd_company_journal.CurrentRowIndex, grd_company_journal.CurrentColumnIndex].Value = "No Journal Entries Found";
					lbl_comp[JOURNAL_COUNT_INDEX].Text = modGlobalVars.cEmptyString;
					grd_company_journal.Enabled = false;

				} // If Not IsNull(ado_Journal) And Not (ado_Journal.BOF And ado_Journal.EOF) Then

				ado_Journal.Close();

				grd_company_journal.Visible = true;
				grd_company_journal.Redraw = true;

				search_off();

				ado_Journal = null;
				ado_tmpRS = null;
			}
			catch (System.Exception excep)
			{

				UpgradeHelpers.DB.DbConnectionHelper.SetCommandTimeOut(modAdminCommon.LOCAL_ADO_DB, nRememberTimeout);
				//UPGRADE_ISSUE: (2064) ADODB.Connection property LOCAL_ADO_DB.CursorLocation was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				modAdminCommon.LOCAL_ADO_DB.setCursorLocation(CursorLocationEnum.adUseServer);
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_company_journal_grid_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				search_off();
			}

		}

		public void fill_relationships_grid()
		{

			try
			{

				string Query = "";
				bool bFoundRegAs = false;
				bFoundRegAs = false;
				string tmpRelationship = "";
				ADORecordSetHelper ado_CompanyRelationship = new ADORecordSetHelper();
				int iCol = 0;
				int lCellBKColor = 0;

				search_on("Getting Company Relationships....");

				lbl_comp[COMPANY_HIDE_RELATIONSHIP].Visible = false;
				lbl_comp[COMPANY_HIDE_RELATIONSHIP].Text = "Hide Relationship";

				cmd_relationship_buttons[1].Visible = false; // Remove Relationship
				cmd_relationship_buttons[4].Visible = false; // MSW - 4

				cmd_relationship_buttons[2].Visible = false;
				cmd_relationship_buttons[3].Visible = false;

				grd_company_relationships.Clear();
				grd_company_relationships.RowsCount = 2;
				grd_company_relationships.ColumnsCount = 11;
				grd_company_relationships.CurrentRowIndex = 0;

				grd_company_relationships.Visible = false;
				grd_company_relationships.Enabled = false;

				iCol = 0;
				grd_company_relationships.CurrentColumnIndex = iCol;
				grd_company_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "Relationship";
				grd_company_relationships.SetColumnWidth(iCol, 160);

				iCol++;
				grd_company_relationships.CurrentColumnIndex = iCol;
				grd_company_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "Company";
				grd_company_relationships.SetColumnWidth(iCol, 157);

				iCol++;
				grd_company_relationships.CurrentColumnIndex = iCol;
				grd_company_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "Contact";
				grd_company_relationships.SetColumnWidth(iCol, 123);

				iCol++;
				grd_company_relationships.CurrentColumnIndex = iCol;
				grd_company_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "Internal";
				grd_company_relationships.SetColumnWidth(iCol, 47);

				iCol++;
				grd_company_relationships.CurrentColumnIndex = iCol;
				grd_company_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "#AC";
				grd_company_relationships.SetColumnWidth(iCol, 37);

				iCol++;
				grd_company_relationships.CurrentColumnIndex = iCol;
				grd_company_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "#P-AC";
				grd_company_relationships.SetColumnWidth(iCol, 37);

				iCol++;
				grd_company_relationships.CurrentColumnIndex = iCol;
				grd_company_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "Yacht #";
				grd_company_relationships.SetColumnWidth(iCol, 47);

				iCol++;
				grd_company_relationships.CurrentColumnIndex = iCol;
				grd_company_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "Contact ID";
				grd_company_relationships.SetColumnWidth(iCol, 63);

				iCol++;
				grd_company_relationships.CurrentColumnIndex = iCol;
				grd_company_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "Ref Company ID";
				grd_company_relationships.SetColumnWidth(iCol, 90);

				// 03/19/2015 - By David D. Cruger
				// Added Hide Flag
				iCol++;
				grd_company_relationships.CurrentColumnIndex = iCol;
				grd_company_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "Hide";
				grd_company_relationships.SetColumnWidth(iCol, 50);


				iCol++;
				grd_company_relationships.CurrentColumnIndex = iCol;
				grd_company_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "TYPE";
				grd_company_relationships.SetColumnWidth(iCol, 0);


				grd_company_relationships.CurrentRowIndex = 1;
				Application.DoEvents();

				Query = "SELECT Company_Reference.*, ";

				Query = $"{Query} replace(replace(replace(STUFF(( ";
				Query = $"{Query} select svud_desc + ', ' as svud_desc from Company_Services_Used with (NOLOCK) ";
				Query = $"{Query} inner join Services_Used with (NOLOCK) on svud_id = csu_svud_id ";
				Query = $"{Query} Where csu_comp_id = comp_id ";
				Query = $"{Query} FOR XML PATH('')),1,1,''), '<svud_desc>', ''), '</svud_desc>', ''), 'svud_desc>', '') As comp_service, ";



				Query = $"{Query}actype_name, actype_compref_internal_flag, actype_compref_twoway_flag, actype_compref_name2, ";

				Query = $"{Query}(SELECT COUNT(DISTINCT cref_ac_id) ";
				Query = $"{Query} FROM Aircraft_Reference WITH (NOLOCK) ";
				Query = $"{Query} WHERE (cref_comp_id = compref_comp_id) ";
				Query = $"{Query} AND (cref_journ_id = compref_journ_id) ";
				Query = $"{Query} AND (cref_primary_poc_flag IN ('X','Y')) ";
				Query = $"{Query} ) As AC_Primary_Count_Main, ";

				Query = $"{Query}(SELECT COUNT(DISTINCT cref_ac_id) ";
				Query = $"{Query} FROM Aircraft_Reference WITH (NOLOCK) ";
				Query = $"{Query} WHERE (cref_comp_id = compref_rel_comp_id) ";
				Query = $"{Query} AND (cref_journ_id = compref_journ_id) ";
				Query = $"{Query} AND (cref_primary_poc_flag IN ('X','Y')) ";
				Query = $"{Query} ) As AC_Primary_Count_Rel, ";

				Query = $"{Query}(SELECT COUNT(DISTINCT yr_yt_id) ";
				Query = $"{Query} FROM Yacht_Reference WITH (NOLOCK) ";
				Query = $"{Query} WHERE (yr_comp_id = compref_comp_id) ";
				Query = $"{Query} AND (yr_journ_id = compref_journ_id) ";
				Query = $"{Query}) AS Yacht_Count_Main, ";

				Query = $"{Query}(SELECT COUNT(DISTINCT yr_yt_id) ";
				Query = $"{Query} FROM Yacht_Reference WITH (NOLOCK) ";
				Query = $"{Query} WHERE (yr_comp_id = compref_rel_comp_id) ";
				Query = $"{Query} AND (yr_journ_id = compref_journ_id) ";
				Query = $"{Query}) AS Yacht_Count_Rel ";

				Query = $"{Query}FROM Company_Reference WITH (NOLOCK) ";
				Query = $"{Query}INNER JOIN Aircraft_Contact_Type WITH (NOLOCK) ON actype_code = compref_contact_type ";
				Query = $"{Query} left outer join Company with (NOLOCK) on (comp_id = compref_comp_id or comp_id = compref_rel_comp_id) and comp_journ_id = {nReference_CompanyJID.ToString()} And comp_id <> {nReference_CompanyID.ToString()}";
				Query = $"{Query}WHERE (compref_comp_id = {nReference_CompanyID.ToString()} OR compref_rel_comp_id = {nReference_CompanyID.ToString()}) ";
				Query = $"{Query}AND (compref_journ_id = {nReference_CompanyJID.ToString()}) ";
				Query = $"{Query}ORDER BY actype_name,actype_compref_name2";

				ado_CompanyRelationship.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!ado_CompanyRelationship.BOF && !ado_CompanyRelationship.EOF)
				{

					do 
					{ // Loop Until ado_CompanyRelationship.EOF = True

						has_other_companies_relationship = true;

						lCellBKColor = ColorTranslator.ToOle(NORMAL_TXT_BACKCOLOR);
						if (($"{Convert.ToString(ado_CompanyRelationship["compref_hide_flag"])} ").Trim() == "Y")
						{
							lCellBKColor = ColorTranslator.ToOle(DISABLED_BACKCOLOR);
						}

						if (($"{Convert.ToString(ado_CompanyRelationship["comp_service"])} ").Trim().StartsWith("J", StringComparison.Ordinal))
						{
							lCellBKColor = 0xF2E8C4;
						}

						iCol = 0;
						grd_company_relationships.CurrentColumnIndex = iCol;
						grd_company_relationships.CellBackColor = ColorTranslator.FromOle(lCellBKColor);

						if (Convert.ToInt32(ado_CompanyRelationship["compref_comp_id"]) == nReference_CompanyID)
						{

							if (Convert.ToString(ado_CompanyRelationship["actype_compref_twoway_flag"]).Trim().ToUpper() == "Y")
							{
								tmpRelationship = Convert.ToString(ado_CompanyRelationship["actype_compref_name2"]).Trim();
							}
							else
							{
								tmpRelationship = Convert.ToString(ado_CompanyRelationship["actype_name"]).Trim();
							}

						}
						else
						{
							tmpRelationship = Convert.ToString(ado_CompanyRelationship["actype_name"]).Trim();
						}


						switch(tmpRelationship.ToLower())
						{
							case "registered as" : 
								tmpRelationship = $"is {tmpRelationship}"; 
								 
								break;
							default:
								tmpRelationship = $"has a {tmpRelationship} of"; 
								 
								break;
						}

						grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = tmpRelationship;
						tmpRelationship = modGlobalVars.cEmptyString;

						iCol++;
						grd_company_relationships.CurrentColumnIndex = iCol;
						grd_company_relationships.CellBackColor = ColorTranslator.FromOle(lCellBKColor);

						if (Convert.ToInt32(ado_CompanyRelationship["compref_comp_id"]) == nReference_CompanyID)
						{
							grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = modCommon.GetCompanyName(Convert.ToInt32(ado_CompanyRelationship["compref_rel_comp_id"]), 0).Trim();
						}
						else
						{
							grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = modCommon.GetCompanyName(Convert.ToInt32(ado_CompanyRelationship["compref_comp_id"]), 0).Trim();
						}

						iCol++;
						grd_company_relationships.CurrentColumnIndex = iCol;
						grd_company_relationships.CellBackColor = ColorTranslator.FromOle(lCellBKColor);

						// if the reference company is the current company, then display then show the other one ' CHANGED - MSW - 11/26/19
						if (Convert.ToInt32(ado_CompanyRelationship["compref_rel_comp_id"]) == nReference_CompanyID)
						{
							if (Convert.ToInt32(ado_CompanyRelationship["compref_contact_id"]) > 0)
							{
								grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = modCommon.GetContactName(Convert.ToInt32(ado_CompanyRelationship["compref_contact_id"]), 0).Trim();
							}
							else
							{
								grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							}
						}
						else
						{
							if (Convert.ToInt32(ado_CompanyRelationship["compref_rel_contact_id"]) > 0)
							{
								grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = modCommon.GetContactName(Convert.ToInt32(ado_CompanyRelationship["compref_rel_contact_id"]), 0).Trim();
							}
							else
							{
								grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
							}

						}

						iCol++;
						grd_company_relationships.CurrentColumnIndex = iCol;
						grd_company_relationships.CellBackColor = ColorTranslator.FromOle(lCellBKColor);

						if (Convert.ToString(ado_CompanyRelationship["compref_internal_flag"]).Trim().ToUpper() == "Y")
						{
							grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "Yes";
						}
						else
						{
							grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "No";
						}

						iCol++;
						grd_company_relationships.CurrentColumnIndex = iCol;
						grd_company_relationships.CellBackColor = ColorTranslator.FromOle(lCellBKColor);

						if (Convert.ToInt32(ado_CompanyRelationship["compref_comp_id"]) == nReference_CompanyID)
						{
							grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = modCompany.get_aicraft_count(Convert.ToInt32(ado_CompanyRelationship["compref_rel_comp_id"]), 0);
						}
						else
						{
							grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = modCompany.get_aicraft_count(Convert.ToInt32(ado_CompanyRelationship["compref_comp_id"]), 0);
						}

						// 11/05/2015 - By David D. Cruger
						// Added Number of Primary Aircraft

						iCol++;
						grd_company_relationships.CurrentColumnIndex = iCol;
						grd_company_relationships.CellBackColor = ColorTranslator.FromOle(lCellBKColor);
						grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						if (Convert.ToInt32(ado_CompanyRelationship["compref_comp_id"]) == nReference_CompanyID)
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_CompanyRelationship["AC_Primary_Count_Rel"]))
							{
								grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = Convert.ToString(ado_CompanyRelationship["AC_Primary_Count_Rel"]);
							}
						}
						else
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_CompanyRelationship["AC_Primary_Count_Main"]))
							{
								grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = Convert.ToString(ado_CompanyRelationship["AC_Primary_Count_Main"]);
							}
						}

						iCol++;
						grd_company_relationships.CurrentColumnIndex = iCol;
						grd_company_relationships.CellBackColor = ColorTranslator.FromOle(lCellBKColor);
						grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;

						if (Convert.ToDouble(ado_CompanyRelationship["compref_comp_id"]) == nReference_CompanyID)
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_CompanyRelationship["yacht_count_rel"]))
							{
								grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = StringsHelper.Format(ado_CompanyRelationship["yacht_count_rel"], "#,##0");
							}
						}
						else
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_CompanyRelationship["yacht_count_main"]))
							{
								grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = StringsHelper.Format(ado_CompanyRelationship["yacht_count_main"], "#,##0");
							}
						}

						iCol++;
						grd_company_relationships.CurrentColumnIndex = iCol;
						grd_company_relationships.CellBackColor = ColorTranslator.FromOle(lCellBKColor);

						if (Convert.ToInt32(ado_CompanyRelationship["compref_comp_id"]) == nReference_CompanyID)
						{
							grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = Convert.ToString(ado_CompanyRelationship["compref_rel_contact_id"]).Trim();
						}
						else
						{
							grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = Convert.ToString(ado_CompanyRelationship["compref_contact_id"]).Trim();
						}

						iCol++;
						grd_company_relationships.CurrentColumnIndex = iCol;
						grd_company_relationships.CellBackColor = ColorTranslator.FromOle(lCellBKColor);

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_CompanyRelationship["compref_comp_id"]))
						{
							grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = Convert.ToString(ado_CompanyRelationship["compref_comp_id"]).Trim();
						}
						else
						{
							grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						}

						// 03/19/2015 - By David D. Cruger
						// Added Hide Flag

						iCol++;
						grd_company_relationships.CurrentColumnIndex = iCol;
						grd_company_relationships.CellBackColor = ColorTranslator.FromOle(lCellBKColor);

						grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = modCommon.ReturnYesNo(($"{Convert.ToString(ado_CompanyRelationship["compref_hide_flag"])} ").Trim());

						if (Convert.ToInt32(ado_CompanyRelationship["compref_comp_id"]) == nReference_CompanyID)
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_CompanyRelationship["compref_rel_comp_id"]))
							{
								//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								grd_company_relationships.setBandData(Convert.ToInt32(ado_CompanyRelationship["compref_rel_comp_id"]), grd_company_relationships.CurrentRowIndex);
							}
							else
							{
								//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								grd_company_relationships.setBandData(0, grd_company_relationships.CurrentRowIndex);
							}
						}
						else
						{
							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_CompanyRelationship["compref_comp_id"]))
							{
								//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								grd_company_relationships.setBandData(Convert.ToInt32(ado_CompanyRelationship["compref_comp_id"]), grd_company_relationships.CurrentRowIndex);
							}
							else
							{
								//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
								grd_company_relationships.setBandData(0, grd_company_relationships.CurrentRowIndex);
							}
						}

						grd_company_relationships.set_RowData(grd_company_relationships.CurrentRowIndex, Convert.ToInt32(ado_CompanyRelationship["compref_key"]));

						if (Convert.ToString(ado_CompanyRelationship["compref_contact_type"]).Trim() == "79")
						{
							grd_company_relationships.CurrentColumnIndex = 0;
							if (grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].FormattedValue.ToString().Trim().ToLower() == ("Actual").ToLower())
							{
								bFoundRegAs = true;
							}
						}

						iCol++;
						grd_company_relationships.CurrentColumnIndex = iCol;
						grd_company_relationships.CellBackColor = ColorTranslator.FromOle(lCellBKColor);

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_CompanyRelationship["actype_name"]))
						{
							grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = Convert.ToString(ado_CompanyRelationship["actype_name"]).Trim();
						}
						else
						{
							grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = modGlobalVars.cEmptyString;
						}


						grd_company_relationships.RowsCount++;
						grd_company_relationships.CurrentRowIndex++;

						ado_CompanyRelationship.MoveNext();

					}
					while(!ado_CompanyRelationship.EOF);

					grd_company_relationships.CurrentRowIndex = 1;
					grd_company_relationships.RowsCount--;
					grd_company_relationships.FixedRows = 1;

					cmd_relationship_buttons[0].Enabled = !bFoundRegAs;

					grd_company_relationships.Enabled = true;

				}
				else
				{

					grd_company_relationships.CurrentRowIndex = 1;
					grd_company_relationships.CurrentColumnIndex = 0;
					grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].Value = "No Relationships Found";
					grd_company_relationships.Enabled = false;

				} // If (ado_CompanyRelationship.BOF = False And ado_CompanyRelationship.EOF = False) Then

				grd_company_relationships.FixedRows = 1;

				ado_CompanyRelationship.Close();
				ado_CompanyRelationship = null;

				// shut off detail list and combo till user selects a row on grid
				lst_related_company.Visible = false;
				lst_related_contact.Visible = false;
				cbo_related_company_contact.Visible = false;

				grd_company_relationships.Visible = true;
				grd_company_relationships.Redraw = true;
				cmd_relationship_buttons[0].Visible = true;

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_relationships_grid_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		public void fill_contact_relationships_grid()
		{

			ADORecordSetHelper ado_CompanyRelationship = new ADORecordSetHelper();
			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			ADORecordSetHelper rstRec2 = new ADORecordSetHelper();
			ADORecordSetHelper rstRec3 = new ADORecordSetHelper();
			string strQuery1 = "";
			string strQuery2 = "";
			string strQuery3 = "";
			StringBuilder strContact = new StringBuilder();

			bool bFoundRegAs = false;
			string tmpRelationship = "";

			int lCellColor = 0;

			try
			{

				search_on("Getting Company Relationships....");

				cmd_relationship_buttons[1].Visible = false; // Remove Relationship
				cmd_relationship_buttons[4].Visible = false; // MSW - 4

				cmd_relationship_buttons[2].Visible = false;
				cmd_relationship_buttons[3].Visible = false;

				grd_company_contact_relationships.Clear();

				grd_company_contact_relationships.RowsCount = 2;
				grd_company_contact_relationships.ColumnsCount = 3;
				grd_company_contact_relationships.CurrentRowIndex = 0;

				grd_company_contact_relationships.Visible = false;
				grd_company_contact_relationships.Enabled = false;

				// Company Id
				grd_company_contact_relationships.CurrentColumnIndex = 0;
				grd_company_contact_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_contact_relationships[grd_company_contact_relationships.CurrentRowIndex, grd_company_contact_relationships.CurrentColumnIndex].Value = "CompId";
				grd_company_contact_relationships.SetColumnWidth(0, 50);

				cmd_relationship_buttons[3].Tag = "";

				// Company
				grd_company_contact_relationships.CurrentColumnIndex = 1;
				grd_company_contact_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_contact_relationships[grd_company_contact_relationships.CurrentRowIndex, grd_company_contact_relationships.CurrentColumnIndex].Value = "Company";
				grd_company_contact_relationships.SetColumnWidth(1, 267);

				// Contacts
				grd_company_contact_relationships.CurrentColumnIndex = 2;
				grd_company_contact_relationships.CellBackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.HeadingColor)));
				grd_company_contact_relationships[grd_company_contact_relationships.CurrentRowIndex, grd_company_contact_relationships.CurrentColumnIndex].Value = "Contact(s)";
				grd_company_contact_relationships.SetColumnWidth(2, 293);

				grd_company_contact_relationships.CurrentRowIndex = 1;

				strQuery1 = "";
				strQuery1 = $"{strQuery1}SELECT DISTINCT 'M' As MainComp, cr_comp_id As comp_id, 0 As JournId, comp_name ";
				strQuery1 = $"{strQuery1} FROM Contact_Reference WITH (NOLOCK)";
				strQuery1 = $"{strQuery1} INNER JOIN Company WITH (NOLOCK) ON comp_id = cr_comp_id AND comp_journ_id = 0";
				strQuery1 = $"{strQuery1} WHERE (";
				strQuery1 = $"{strQuery1} cr_comp_id IN (SELECT cr_comp_id FROM Contact_Reference AS CR1 ";
				strQuery1 = $"{strQuery1} WHERE (cr_comp_id = {nReference_CompanyID.ToString()} OR cr_comp_rel_id = {nReference_CompanyID.ToString()})";
				strQuery1 = $"{strQuery1} )";
				strQuery1 = $"{strQuery1} AND cr_contact_id IN (SELECT cr_contact_id FROM Contact_Reference AS CR1 ";
				strQuery1 = $"{strQuery1} WHERE (cr_comp_id = {nReference_CompanyID.ToString()} OR cr_comp_rel_id = {nReference_CompanyID.ToString()})";
				strQuery1 = $"{strQuery1} )";
				strQuery1 = $"{strQuery1}) ";
				strQuery1 = $"{strQuery1} OR    (";
				strQuery1 = $"{strQuery1} cr_comp_rel_id IN (SELECT cr_comp_id FROM Contact_Reference AS CR1 ";
				strQuery1 = $"{strQuery1} WHERE (cr_comp_id = {nReference_CompanyID.ToString()}  OR cr_comp_rel_id = {nReference_CompanyID.ToString()})";
				strQuery1 = $"{strQuery1}  )";
				strQuery1 = $"{strQuery1} AND cr_contact_rel_id IN (SELECT cr_contact_id FROM Contact_Reference AS CR1 ";
				strQuery1 = $"{strQuery1}  WHERE (cr_comp_id = {nReference_CompanyID.ToString()} OR cr_comp_rel_id = {nReference_CompanyID.ToString()})";
				strQuery1 = $"{strQuery1} )";
				strQuery1 = $"{strQuery1} )";
				strQuery1 = $"{strQuery1} AND (cr_journ_id = 0)";
				strQuery1 = $"{strQuery1} Union";
				strQuery1 = $"{strQuery1} SELECT DISTINCT 'R' As MainComp, cr_comp_rel_id As CompId, 0 As JournId, comp_name As CName";
				strQuery1 = $"{strQuery1} FROM Contact_Reference WITH (NOLOCK)";
				strQuery1 = $"{strQuery1} INNER JOIN Company WITH (NOLOCK) ON comp_id = cr_comp_rel_id AND comp_journ_id = 0";
				strQuery1 = $"{strQuery1} WHERE (";
				strQuery1 = $"{strQuery1} cr_comp_id IN (SELECT cr_comp_id FROM Contact_Reference AS CR1 ";
				strQuery1 = $"{strQuery1} WHERE (cr_comp_id = {nReference_CompanyID.ToString()} OR cr_comp_rel_id = {nReference_CompanyID.ToString()})";
				strQuery1 = $"{strQuery1} )";
				strQuery1 = $"{strQuery1} AND cr_contact_id IN (SELECT cr_contact_id FROM Contact_Reference AS CR1 ";
				strQuery1 = $"{strQuery1} WHERE (cr_comp_id = {nReference_CompanyID.ToString()} OR cr_comp_rel_id = {nReference_CompanyID.ToString()})";
				strQuery1 = $"{strQuery1}  )";
				strQuery1 = $"{strQuery1} )";
				strQuery1 = $"{strQuery1}  OR    (";
				strQuery1 = $"{strQuery1} cr_comp_rel_id IN (SELECT cr_comp_id FROM Contact_Reference AS CR1 ";
				strQuery1 = $"{strQuery1} WHERE (cr_comp_id = {nReference_CompanyID.ToString()}  OR cr_comp_rel_id = {nReference_CompanyID.ToString()})";
				strQuery1 = $"{strQuery1}  )";
				strQuery1 = $"{strQuery1} AND cr_contact_rel_id IN (SELECT cr_contact_id FROM Contact_Reference AS CR1 ";
				strQuery1 = $"{strQuery1}  WHERE (cr_comp_id = {nReference_CompanyID.ToString()} OR cr_comp_rel_id = {nReference_CompanyID.ToString()})";
				strQuery1 = $"{strQuery1}  )";
				strQuery1 = $"{strQuery1}  )";
				strQuery1 = $"{strQuery1} AND (cr_journ_id = {nReference_CompanyJID.ToString()})";

				strQuery1 = $"{strQuery1} ORDER BY comp_name";

				rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!rstRec1.BOF && !rstRec1.EOF)
				{

					// Find Main Company Id

					do 
					{ // Loop Until rstRec1.EOF = True

						lCellColor = Convert.ToInt32(Double.Parse(modAdminCommon.NoColor));
						if (Convert.ToString(rstRec1["MainComp"]).Trim() == "M")
						{
							lCellColor = ColorTranslator.ToOle(Color.Cyan);
						}

						if (Convert.ToDouble(rstRec1["comp_id"]) != nReference_CompanyID)
						{

							// Get Contacts
							strQuery2 = "SELECT DISTINCT ";
							strQuery2 = $"{strQuery2}dbo.CreateContactFullNameTitle(contact_sirname, contact_first_name, contact_middle_initial, contact_last_name, contact_suffix, '') As ContactName ";
							strQuery2 = $"{strQuery2}FROM ReturnContactIdRelationshipsByCompId({Convert.ToString(rstRec1["comp_id"])}) ";
							strQuery2 = $"{strQuery2}INNER JOIN Contact WITH (NOLOCK) ON contact_id = ContactId AND contact_journ_id = 0 ";
							strQuery2 = $"{strQuery2}WHERE (CompID = {Convert.ToString(rstRec1["comp_id"])}) ";
							strQuery2 = $"{strQuery2}AND (contact_journ_id = 0) ";

							strContact = new StringBuilder("");
							rstRec2.Open(strQuery2, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);
							if (!rstRec2.BOF && !rstRec2.EOF)
							{
								do 
								{
									strContact.Append(($"{Convert.ToString(rstRec2["ContactName"])} ").Trim());


									rstRec2.MoveNext();
									if (!rstRec2.EOF)
									{
										strContact.Append(", ");
									}
								}
								while(!rstRec2.EOF);
							}
							rstRec2.Close();

							grd_company_contact_relationships.CurrentColumnIndex = 0;
							grd_company_contact_relationships.CellBackColor = ColorTranslator.FromOle(lCellColor);
							grd_company_contact_relationships[grd_company_contact_relationships.CurrentRowIndex, grd_company_contact_relationships.CurrentColumnIndex].Value = Convert.ToString(rstRec1["comp_id"]);

							grd_company_contact_relationships.CurrentColumnIndex = 1;
							grd_company_contact_relationships.CellBackColor = ColorTranslator.FromOle(lCellColor);
							grd_company_contact_relationships[grd_company_contact_relationships.CurrentRowIndex, grd_company_contact_relationships.CurrentColumnIndex].Value = ($"{Convert.ToString(rstRec1["comp_name"])} ").Trim();

							grd_company_contact_relationships.CurrentColumnIndex = 2;
							grd_company_contact_relationships.CellBackColor = ColorTranslator.FromOle(lCellColor);
							grd_company_contact_relationships[grd_company_contact_relationships.CurrentRowIndex, grd_company_contact_relationships.CurrentColumnIndex].Value = strContact.ToString();

							grd_company_contact_relationships.set_RowData(grd_company_contact_relationships.CurrentRowIndex,Convert.ToInt32( rstRec1.GetField("comp_id")));

							grd_company_contact_relationships.RowsCount++;
							grd_company_contact_relationships.CurrentRowIndex++;

						} // If rstRec1!Comp_id <> nReference_CompanyID Then

						rstRec1.MoveNext();
						Application.DoEvents();

					}
					while(!rstRec1.EOF);

					grd_company_contact_relationships.CurrentRowIndex = 1;
					grd_company_contact_relationships.RowsCount--;
					grd_company_contact_relationships.FixedRows = 1;
					grd_company_contact_relationships.FixedColumns = 0;

					cmd_relationship_buttons[0].Enabled = !bFoundRegAs;

					grd_company_contact_relationships.Enabled = true;

				}
				else
				{

					grd_company_contact_relationships.CurrentRowIndex = 1;
					grd_company_contact_relationships.CurrentColumnIndex = 1;
					grd_company_contact_relationships[grd_company_contact_relationships.CurrentRowIndex, grd_company_contact_relationships.CurrentColumnIndex].Value = "No Relationships Found";
					grd_company_contact_relationships.Enabled = false;

				} // If (rstRec1.BOF = False And rstRec1.EOF = False) Then

				rstRec1.Close();

				grd_company_contact_relationships.FixedRows = 1;

				rstRec3 = null;
				rstRec2 = null;
				rstRec1 = null;

				// shut off detail list and combo till user selects a row on grid
				lst_related_company.Visible = false;
				lst_related_contact.Visible = false;
				cbo_related_company_contact.Visible = false;

				grd_company_contact_relationships.Visible = true;
				grd_company_contact_relationships.Redraw = true;

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_relationships_grid_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		private void fill_research_contact_list()
		{

			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO FILL A LIST/COMBO OF CONTACTS FOR THE SELECTED COMPANY.
			// RTW - MODIFIED ON 9/22/2010 - INCLUDED THE INDEX HINT IN QUERY

			try
			{
				string Query = "";
				Query = "";
				string TempName = "";
				TempName = "";
				string TempTitle = "";
				TempTitle = "";
				ADORecordSetHelper ado_ResearchContact = new ADORecordSetHelper();

				search_on("Getting Research Contacts ...");

				cbo_company_research_contact.Enabled = false;
				cbo_company_research_contact.Items.Clear();
				cbo_company_research_contact.AddItem("", 0);
				cbo_company_research_contact.SetItemData(cbo_company_research_contact.Items.Count - 1, 0);
				cbo_company_research_contact.SelectedIndex = -1;

				//extract fields from contact table
				Query = "SELECT contact_id, contact_sirname, contact_first_name, contact_middle_initial, contact_last_name, contact_suffix, contact_title ";
				// 07/18/2019 - By David D. Cruger; Removed INDEX HINT
				//Query = Query & "FROM Contact WITH(NOLOCK, index(ix_contact_comp_journal_contact_id_key)) "
				Query = $"{Query}FROM Contact WITH (NOLOCK) ";
				Query = $"{Query}WHERE contact_comp_id = {nReference_CompanyID.ToString()}";
				Query = $"{Query} AND contact_journ_id = {nReference_CompanyJID.ToString()}";
				Query = $"{Query} AND contact_active_flag = 'Y'";
				Query = $"{Query} ORDER BY contact_first_name, contact_last_name";

				ado_ResearchContact = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(ado_ResearchContact.Fields) && !(ado_ResearchContact.BOF && ado_ResearchContact.EOF))
				{

					while(!ado_ResearchContact.EOF)
					{
						TempName = "";
						TempTitle = "";

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchContact["contact_first_name"]) && !Convert.IsDBNull(ado_ResearchContact["contact_last_name"]))
						{

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_ResearchContact["contact_first_name"]))
							{
								if (Convert.ToString(ado_ResearchContact["contact_first_name"]).Trim() != modGlobalVars.cEmptyString)
								{
									TempName = $"{TempName}{Convert.ToString(ado_ResearchContact["contact_first_name"]).Trim()}{modGlobalVars.cSingleSpace}";
								}
							}

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_ResearchContact["contact_middle_initial"]))
							{
								if (Convert.ToString(ado_ResearchContact["contact_middle_initial"]).Trim() != modGlobalVars.cEmptyString)
								{
									TempName = $"{TempName}{Convert.ToString(ado_ResearchContact["contact_middle_initial"]).Trim()}.{modGlobalVars.cSingleSpace}";
								}
							}

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_ResearchContact["contact_last_name"]))
							{
								if (Convert.ToString(ado_ResearchContact["contact_last_name"]).Trim() != modGlobalVars.cEmptyString)
								{
									TempName = $"{TempName}{Convert.ToString(ado_ResearchContact["contact_last_name"]).Trim()}{modGlobalVars.cSingleSpace}";
								}
							}

							//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
							if (!Convert.IsDBNull(ado_ResearchContact["contact_suffix"]))
							{
								if (Convert.ToString(ado_ResearchContact["contact_suffix"]).Trim() != modGlobalVars.cEmptyString)
								{
									TempName = $"{TempName}{Convert.ToString(ado_ResearchContact["contact_suffix"]).Trim()}";
								}
							}
						}
						else
						{
							TempName = modGlobalVars.cEmptyString;
						}


						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchContact["contact_sirname"]))
						{
							if (Convert.ToString(ado_ResearchContact["contact_sirname"]).Trim() != modGlobalVars.cEmptyString)
							{
								TempName = $"{TempName} ({Convert.ToString(ado_ResearchContact["contact_sirname"]).Trim()}){modGlobalVars.cSingleSpace}";
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ResearchContact["Contact_Title"]))
						{
							TempTitle = Convert.ToString(ado_ResearchContact["Contact_Title"]).Trim();
						}
						else
						{
							TempTitle = modGlobalVars.cEmptyString;
						}

						if (TempName.Trim() != modGlobalVars.cEmptyString && TempTitle.Trim() != modGlobalVars.cEmptyString)
						{
							TempName = $"{TempName.Trim()} / {TempTitle.Trim()}";
						}
						else if (TempName.Trim() == modGlobalVars.cEmptyString && TempTitle.Trim() != modGlobalVars.cEmptyString)
						{ 
							TempName = $"[No Contact Name] / {TempTitle.Trim()}";
						}
						else if (TempName.Trim() != modGlobalVars.cEmptyString && TempTitle.Trim() == modGlobalVars.cEmptyString)
						{ 
							TempName = $"{TempName.Trim()} / [No Contact Title]";
						}

						if (TempName.Trim() != "")
						{

							cbo_company_research_contact.AddItem(TempName);
							cbo_company_research_contact.SetItemData(cbo_company_research_contact.Items.Count - 1, Convert.ToInt32(ado_ResearchContact["Contact_ID"]));

						}

						ado_ResearchContact.MoveNext();
					};

					ado_ResearchContact.Close();

				}

				ado_ResearchContact = null;

				cmd_aircraft_contact_change.Visible = false;
				cmd_aircraft_all_contact_change.Visible = false;
				chk_change_same_ac_contact_type_only.Visible = false;

				if (Convert.ToString(grd_company_aircraft[1, 3].Value).Trim().ToUpper() == ("No Aircraft Found").ToUpper() || cbo_company_research_contact.Items.Count == 1)
				{
					lbl_comp[AIRCRAFT_CONTACT_INDEX].Visible = false;
					cbo_company_research_contact.Visible = false;
					lst_aircraft_contact.Visible = false;
				}
				else
				{
					lbl_comp[AIRCRAFT_CONTACT_INDEX].Visible = true;
					cbo_company_research_contact.Visible = true;
					cbo_company_research_contact.Enabled = true;
					lst_aircraft_contact.Visible = true;
				} // UCase$(Trim$(grd_company_aircraft.TextMatrix(1, 3))) <> UCase$("No Aircraft Found")
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"fill_research_contact_list_Error ({Information.Err().Number.ToString()}) {excep.Message} LSTCT:[{cbo_company_research_contact.Items.Count.ToString()}] CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		private void renumber_company_contact_grid()
		{


			int tempForEndVar = grd_company_contacts.RowsCount - 1;
			for (int i = 1; i <= tempForEndVar; i++)
			{
				grd_company_contacts[i, 4].Value = i.ToString();
			}

		}

		private void cbo_comp_pnum_type_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				ToolTipMain.SetToolTip(cbo_comp_pnum_type, cbo_comp_pnum_type.Text);
			}

		}

		private void check_for_Survey_sent()
		{

			string Query = "";
			ADORecordSetHelper ado_Category = null;

			try
			{

				// add code to enable the menu item if Company had a survey sent Previous
				mnuSurveyResponse.Enabled = false;

				Query = "SELECT journ_comp_id, journ_subcategory_code ";
				Query = $"{Query}FROM Journal WITH(NOLOCK) ";
				Query = $"{Query}WHERE (journ_subcategory_code LIKE 'SSRVY') ";
				Query = $"{Query}AND (journ_comp_id = {nReference_CompanyID.ToString()}) ";

				ado_Category = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				if (!(ado_Category.BOF && ado_Category.EOF))
				{
					if (Convert.ToString(ado_Category["journ_subcategory_code"]).Trim().ToUpper() == "SSRVY" && Convert.ToInt32(ado_Category["journ_comp_id"]) == nReference_CompanyID)
					{
						mnuSurveyResponse.Enabled = true;
						ado_Category.Close();
					}
				}

				ado_Category = null;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"check_for_Survey_sent_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		private bool clear_contact_controls()
		{

			// Function used for clearing contact screen fields

			bool result = false;
			try
			{

				bIsClearContactData = true;

				chk_contact_active_flag.Enabled = true;
				chk_contact_active_flag.CheckState = CheckState.Unchecked;

				chk_contact_research_flag.Enabled = true;
				chk_contact_research_flag.CheckState = CheckState.Unchecked;

				chk_contact_hide_flag.Enabled = true;
				chk_contact_hide_flag.CheckState = CheckState.Unchecked;

				cbo_contact_title.Enabled = true;
				cbo_contact_title.BackColor = NORMAL_TXT_BACKCOLOR;
				cbo_contact_title.SelectedIndex = -1;

				cbo_contact_sirname.Enabled = true;
				cbo_contact_sirname.BackColor = NORMAL_TXT_BACKCOLOR;
				cbo_contact_sirname.Text = "";
				cbo_contact_sirname.SelectedIndex = -1;

				cbo_contact_suffix.Enabled = true;
				cbo_contact_suffix.BackColor = NORMAL_TXT_BACKCOLOR;
				cbo_contact_suffix.Text = "";
				cbo_contact_suffix.SelectedIndex = -1;

				txt_contact_id.Text = modGlobalVars.cEmptyString;
				txt_contact_id.Enabled = false;

				txt_contact_last_name.Enabled = true;
				txt_contact_last_name.Text = modGlobalVars.cEmptyString;
				txt_contact_last_name.BackColor = NORMAL_TXT_BACKCOLOR;

				txt_contact_first_name.Enabled = true;
				txt_contact_first_name.Text = modGlobalVars.cEmptyString;
				txt_contact_first_name.BackColor = NORMAL_TXT_BACKCOLOR;

				txt_contact_middle_initial.Enabled = true;
				txt_contact_middle_initial.Text = modGlobalVars.cEmptyString;
				txt_contact_middle_initial.BackColor = NORMAL_TXT_BACKCOLOR;

				txt_contact_description.Enabled = true;
				txt_contact_description.Text = modGlobalVars.cEmptyString;
				txt_contact_description.BackColor = NORMAL_TXT_BACKCOLOR;

				txt_contact_email_address.Enabled = true;
				txt_contact_email_address.Text = modGlobalVars.cEmptyString;
				txt_contact_email_address.BackColor = NORMAL_TXT_BACKCOLOR;

				pnl_company_contact_details.Visible = false;

				bIsClearContactData = false;

				return true;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"clear_contact_controls_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				result = false;
			}
			return result;
		}

		private bool clear_wanted_controls()
		{

			bool result = false;
			try
			{

				bIsClearWantedData = true;

				txt_amwant_listed_date.Text = DateTime.Now.ToString("d");
				txt_amwant_start_year.Text = "Open";
				txt_amwant_end_year.Text = modGlobalVars.cEmptyString;
				txt_amwant_yearnote.Text = modGlobalVars.cEmptyString;
				txt_amwant_pricenote.Text = modGlobalVars.cEmptyString;
				txt_amwant_max_price.Text = "0";
				txt_amwant_max_aftt.Text = "0";
				txt_amwant_notes.Text = modGlobalVars.cEmptyString;

				cbo_amwant_accept_damage_hist.SelectedIndex = -1;
				cbo_amwant_accept_damage_cur.SelectedIndex = -1;

				txt_amwant_auto_unsuscribe_date.Text = modGlobalVars.cEmptyString;
				txt_amwant_auto_distribute_email.Text = modGlobalVars.cEmptyString;
				txt_amwant_auto_distribute_replyname.Text = modGlobalVars.cEmptyString;

				cmd_wanted_add.Visible = nReference_CompanyJID == 0;

				cmd_wanted_delete.Visible = false;

				pnl_company_wanted.Visible = false;

				bIsClearWantedData = false;


				return true;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"clear_wanted_controls_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				result = false;
			}
			return result;
		}

		private bool clear_phone_controls()
		{

			bool result = false;
			try
			{

				bIsClearPhoneData = true;

				txt_pnum_cntry_code.Text = modGlobalVars.cEmptyString;
				txt_pnum_area_code.Text = modGlobalVars.cEmptyString;
				txt_pnum_number.Text = modGlobalVars.cEmptyString;
				txt_pnum_prefix.Text = modGlobalVars.cEmptyString;
				cbo_comp_pnum_type.SelectedIndex = -1;
				chk_comp_pnum_hide_customer.CheckState = CheckState.Unchecked;

				cbo_comp_pnum_type.BackColor = NORMAL_TXT_BACKCOLOR;
				txt_pnum_cntry_code.BackColor = NORMAL_TXT_BACKCOLOR;
				txt_pnum_area_code.BackColor = NORMAL_TXT_BACKCOLOR;
				txt_pnum_prefix.BackColor = NORMAL_TXT_BACKCOLOR;
				txt_pnum_number.BackColor = NORMAL_TXT_BACKCOLOR;

				bIsClearPhoneData = false;


				return true;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"clear_phone_controls_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				result = false;
			}
			return result;
		}

		private bool clear_company_controls()
		{

			bool result = false;
			Control lcontrol = null;
			try
			{

				bIsClearCompanyData = true;

				txt_comp_name.Text = modGlobalVars.cEmptyString;
				txt_comp_name_alt.Text = modGlobalVars.cEmptyString;
				txt_comp_address1.Text = modGlobalVars.cEmptyString;
				txt_comp_address2.Text = modGlobalVars.cEmptyString;
				txt_comp_city.Text = modGlobalVars.cEmptyString;
				txt_comp_zip_code.Text = modGlobalVars.cEmptyString;
				//  txt_comp_account_callback_date.Text = cEmptyString
				txt_company_field[1].Text = modGlobalVars.cEmptyString;
				txt_company_field[0].Text = modGlobalVars.cEmptyString;
				txt_company_field[iCompAirportId].Text = "0";
				txt_comp_web_address.Text = modGlobalVars.cEmptyString;
				txt_comp_email_address.Text = modGlobalVars.cEmptyString;

				// 05/08/2014 - By David D. Cruger
				chkCompDoNotSendEMail.Enabled = false;
				chkCompDoNotSendEMail.CheckState = CheckState.Unchecked;
				ToolTipMain.SetToolTip(txt_comp_email_address, "");

				txt_comp_description.Text = modGlobalVars.cEmptyString;
				txt_comp_fractowr_id.Text = modGlobalVars.cEmptyString;

				chk_company_flag[iCompActiveFlag].CheckState = CheckState.Unchecked;
				chk_company_flag[iCompHideFlag].CheckState = CheckState.Unchecked;
				chk_include_on_ac_pros.CheckState = CheckState.Unchecked;

				if (chk_dont_color_confirm.CheckState == CheckState.Checked)
				{
					chk_dont_color_confirm.CheckState = CheckState.Checked;
				}
				else
				{
					chk_dont_color_confirm.CheckState = CheckState.Unchecked;
				}

				cbo_comp_name_alt_type.SelectedIndex = -1;
				cbo_comp_timezone.SelectedIndex = -1;
				cbo_comp_country.SelectedIndex = -1;
				cbo_comp_account[COMP_ACCOUNT_REP].SelectedIndex = -1;

				TextBox lcontrolTyped = null;
				Label lcontrolTyped2 = null;
				//UPGRADE_WARNING: (2065) Form property frm_Company.Controls has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
				foreach (Control lcontrolIterator in ContainerHelper.Controls(this))
				{
					lcontrol = lcontrolIterator;

					// Make sure you add "N" to any contols manualy controled

					if (lcontrol is ComboBox)
					{
						if (Convert.ToString(ControlHelper.GetTag(lcontrol)) != "N")
						{
							//UPGRADE_TODO: (1067) Member ListIndex is not defined in type VB.Control. More Information: https://docs.mobilize.net/vbuc/ewis/todos#id-1067
							(lcontrol as ComboBox).SelectedIndex = (-1); //gap-note this line must be checked during stabilization. VB6 uses listindex
							lcontrol.BackColor = Color.White;
						}
					}

					if (lcontrol is TextBox)
					{
						lcontrolTyped = (TextBox) lcontrol;
						if (Convert.ToString(lcontrolTyped.Tag) != "N")
						{
							lcontrolTyped.BackColor = Color.White;
						}
					}

					if (lcontrol is Label)
					{
						lcontrolTyped2 = (Label) lcontrol;
						if (Convert.ToString(lcontrolTyped2.Tag) != "N")
						{
							lcontrolTyped2.ForeColor = Color.Black;
						}
					}

					//lcontrol
					lcontrol = default(Control);
				}

				bIsClearCompanyData = false;


				return true;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"clear_company_controls_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				result = false;
			}
			return result;
		}

		private bool clear_save_info(ref modGlobalVars.t_company_save_info in_company_info)
		{

			bool result = false;
			try
			{

				//reset the save wanted info
				in_company_info.s_comp_id = 0;
				in_company_info.s_comp_name = "";
				in_company_info.s_comp_name_alt_type = "";
				in_company_info.s_comp_name_alt = "";
				in_company_info.s_comp_address1 = "";
				in_company_info.s_comp_address2 = "";
				in_company_info.s_comp_city = "";
				in_company_info.s_comp_state = "";
				in_company_info.s_comp_country = "";
				in_company_info.s_comp_zip_code = "";
				in_company_info.s_comp_timezone = "";
				in_company_info.s_comp_language = "";
				in_company_info.s_comp_web_address = "";
				in_company_info.s_comp_email_address = "";
				in_company_info.s_comp_ticker_symbol = "";
				in_company_info.s_comp_description = "";
				in_company_info.s_comp_marketing_notes = "";
				in_company_info.s_comp_sic_code = "";
				in_company_info.s_comp_dunnandbrad = "";
				in_company_info.s_comp_fractowr_contact_id = 0;
				in_company_info.s_comp_fractowr_id = 0;
				in_company_info.s_comp_fractowr_notes = "";
				in_company_info.s_comp_assign_flag = "";
				in_company_info.s_comp_account_id = "";
				in_company_info.s_comp_acpros_flag = "";
				in_company_info.s_comp_government_id = 0;
				in_company_info.s_comp_agency_type = "";
				in_company_info.s_comp_business_type = "";
				in_company_info.s_comp_account_type = "";
				in_company_info.s_comp_account_callback_date = "";
				in_company_info.s_comp_abi_callback_date = "";
				in_company_info.s_comp_last_contact_date = "";
				in_company_info.s_comp_abi_last_contact_date = "";
				in_company_info.s_comp_service = "";
				in_company_info.s_comp_active_flag = "";
				in_company_info.s_comp_hide_flag = "";
				in_company_info.s_comp_awaitdoc_flag = "";
				in_company_info.s_comp_product_business_flag = "";
				in_company_info.s_comp_product_commercial_flag = "";
				in_company_info.s_comp_product_helicopter_flag = "";
				in_company_info.s_comp_product_airbp_flag = "";
				in_company_info.s_comp_product_abi_flag = "";
				in_company_info.s_comp_product_regional_flag = "";
				// in_company_info.s_comp_product_yacht_flag = ""
				in_company_info.s_comp_marketing_rep = "";
				in_company_info.s_comp_line_access_code = "";
				in_company_info.s_comp_contact_address_flag = "";
				in_company_info.s_comp_secondary_callback = "";
				in_company_info.s_comp_aport_id = 0;


				return true;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"clear_save_info_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				result = false;
			}
			return result;
		}

		private bool clear_save_wanted_info(ref modGlobalVars.t_company_save_wanted_info in_wanted_info)
		{

			bool result = false;
			try
			{

				//reset the save wanted info
				in_wanted_info.save_amwant_id = -1;
				in_wanted_info.save_amwant_accept_damage_cur = "";
				in_wanted_info.save_amwant_accept_damage_hist = "";
				in_wanted_info.save_amwant_end_year = "";
				in_wanted_info.save_amwant_listed_date = "";
				in_wanted_info.save_amwant_max_aftt = 0;
				in_wanted_info.save_amwant_max_price = 0d;
				in_wanted_info.save_amwant_model = "";
				in_wanted_info.save_amwant_modelID = 0;
				in_wanted_info.save_amwant_notes = "";
				in_wanted_info.save_amwant_pricenote = "";
				in_wanted_info.save_amwant_start_year = "";
				in_wanted_info.save_amwant_verified_date = "";
				in_wanted_info.save_amwant_yearnote = "";
				in_wanted_info.save_amwant_auto_distribute_flag = 0;
				in_wanted_info.save_amwant_auto_distribute_email = "";
				in_wanted_info.save_amwant_auto_distribute_replyname = "";


				return true;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"clear_save_wanted_info_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				result = false;
			}
			return result;
		}

		private bool clear_save_phone_info(ref modGlobalVars.t_company_save_phone_info in_phone_info)
		{

			bool result = false;
			try
			{

				//reset the save phone info
				in_phone_info.company_phone_delete_flag = false;
				in_phone_info.company_phone_delete_subject = "";
				in_phone_info.company_phone_delete_number = "";

				in_phone_info.company_phone1_changed_flag = false;
				in_phone_info.company_phone2_changed_flag = false;

				in_phone_info.company_phone_add_flag = false;
				in_phone_info.company_only_change_is_hide_flag = false;

				in_phone_info.company_phone_original_full = "";
				in_phone_info.company_phone_original_type = "";
				in_phone_info.company_phone_original_hide = (short) CheckState.Unchecked;
				in_phone_info.company_phone_original_row = 0;

				in_phone_info.company_phone_new_number = "";
				in_phone_info.company_phone_confirmdate = "";

				in_phone_info.contact_phone_new = "";
				in_phone_info.contact_phone_typeNew = "";
				in_phone_info.contact_phone_toEdit = "";
				in_phone_info.contact_phone_typeToEdit = "";

				in_phone_info.company_phone_id = 0; // MSW - 9/6/22


				return true;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"clear_save_phone_info_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				result = false;
			}
			return result;
		}

		private bool Select_Company()
		{

			// Notes      : This procedure selects and displays company information to the screen.
			//              If a company is found, then it also fills lists of dependent information such as
			//              aircraft, representatives, contacts, phone numbers,etc.

			// 02/02/2012 - By David D. Cruger
			// For Monitoring

			// ADDED MSW/RTWW 7/8/13 FOR ISSUE WITH BACK BUTTON BUGGING OUT
			bool result = false;
			tbr_ToolBar.Visible = false;
			tbr_ToolBar.Enabled = false;

			string strMsg = "";
			System.DateTime dtStartDate = DateTime.FromOADate(0);
			System.DateTime dtEndDate = DateTime.FromOADate(0);

			string Query = "";
			bool isABIOnly = false;
			ADORecordSetHelper ado_Current_Company = new ADORecordSetHelper();
			ADORecordSetHelper ado_Current_Company2 = new ADORecordSetHelper();
			string strAVDataId = "";
			bool is_financial = false;
			int temp_group = 0;


			try
			{

				isABIOnly = false;
				result = false;

				search_on("Selecting Company Information....");

				modCommon.Start_Activity_Monitor_Message("Open Company", ref strMsg, ref dtStartDate, ref dtEndDate);

				Query = "SELECT * ";
				Query = $"{Query} , (select top 1 comp_ticker_symbol from Company_Ticker with (NOLOCK) where comp_ticker_jetnet_comp_id = comp_id) as ticker_symbol ";
				Query = $"{Query} , (select top 1 comp_ticker_name from Company_Ticker with (NOLOCK) where comp_ticker_jetnet_comp_id = comp_id) as ticker_name ";
				Query = $"{Query} FROM Company WITH (NOLOCK)";
				Query = $"{Query}WHERE (comp_id = {nReference_CompanyID.ToString()}) ";
				Query = $"{Query}AND (comp_journ_id = {nReference_CompanyJID.ToString()}) ";

				ado_Current_Company.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!ado_Current_Company.BOF && !ado_Current_Company.EOF)
				{

					// 02/09/2016 - By David D. Cruger
					// Check To See If Company Has An AVData Id  - If Not Create One

					if (($"{Convert.ToString(ado_Current_Company["comp_avdata_id"])} ").Trim() == "")
					{
						if (nReference_CompanyJID == 0)
						{
							modCompany.UpdateCompanyRecordWithNewAVDataId(nReference_CompanyID, nReference_CompanyJID);
							ado_Current_Company.Requery();
						}
					}

					strMsg = $"{strMsg} - {($"{Convert.ToString(ado_Current_Company["comp_name"])} ").Trim()}";

					// added- MSW - 4/24/2012
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(ado_Current_Company["comp_business_type"]))
					{
						selected_bus_type = Convert.ToString(ado_Current_Company["comp_business_type"]);
					}

					// get the awaiting documentation flag
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(ado_Current_Company["comp_awaitdoc_flag"]))
					{
						enter_company_info.s_comp_awaitdoc_flag = Convert.ToString(ado_Current_Company["comp_awaitdoc_flag"]).Trim().ToUpper();
					}

					SSTabHelper.SetTabVisible(tab_company_admin, 6, true);
					//UPGRADE_ISSUE: (2064) TabDlg.SSTab property tab_company_admin.TabsPerRow was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					tab_company_admin.setTabsPerRow(7);


					// moved up above the ABI = Y checkbox, it is checking a value loaded in this box - MSW 2/16/15
					// NOW I HAVE MOVED IT UP ABOVE EVERYTHING ELSE THAT LOADS, SO THAT IT DOENST GET MESSED UP IN FAST CLICKING BETWEEEN COMPANIES
					// 11/3/16 - MSW
					display_company(ado_Current_Company);

					// 9/2/2010 - Updated MSW/RTW, deleted second value inserted and added two booleans that are adjusted previously to compare and show desired results
					// CALLS FILL-COMPANY-AIRCRAFT-GRID NOTE THAT THIS WILL CAUSE THE FILL OF THE AIRCRAFT GRID
					// ALSO PASSES THE POSITION OF THE DELIVERY POSITION COMBO IN CASE IT IS RETURNING FROM A PAST SELECTION USED ON THE FORM.
					cbo_ac_delivery_position.Enabled = true;
					modFillCompConControls.Fill_Deliver_Position_List(cbo_ac_delivery_position, bCompany_Commercial_Records, bCompany_BusorHel_Records, modGlobalVars.cfsiCompanyInfo.iDeliveryPositionComboListIndex);

					fill_wanted_grid();

					fill_company_contact_grid();
					fill_phone_company_grid();
					fill_company_aircraft_grid();

					// NOT SURE WHY THIS ABI FLAG FIELD WOULD BE BLANK WHEN THE
					// COMPANY IS FLAGGED AS ABI
					if (enter_company_info.s_comp_product_abi_flag == "Y")
					{

						if (enter_company_info.s_comp_product_business_flag != "Y" && enter_company_info.s_comp_product_commercial_flag != "Y" && enter_company_info.s_comp_product_helicopter_flag != "Y" && enter_company_info.s_comp_product_airbp_flag != "Y")
						{
							isABIOnly = true;
						}

						modFillCompConControls.Fill_Company_Business_Types(nReference_CompanyID, nReference_CompanyJID, lst_business_types, cbo_comp_business_type, ref bBlockAirBp, true, isABIOnly);

					}
					else
					{
						modFillCompConControls.Fill_Company_Business_Types(nReference_CompanyID, nReference_CompanyJID, lst_business_types, cbo_comp_business_type, ref bBlockAirBp, false, false);
					}

					check_for_Survey_sent();

					//check for current or history record
					if (nReference_CompanyJID == 0)
					{ // deal with items only necessary for active companies

						// commented out, changed to new hotbox notes
						// Call fill_hotbox_list

						lbl_comp[41].Text = "Double Click to Go Back to Hot Box";
						int tempRefParam = 0;
						modCommon.fill_research_action_list(nReference_CompanyID, 0, lst_research_notes, null, "", 0, ref tempRefParam, false, false, "", -1, tab_company_admin);
						lbl_message.Text = "CURRENT COMPANY";

						chk_dont_color_confirm.Visible = true;
						txt_history_date.Text = modGlobalVars.cEmptyString;
						txt_history_date.Visible = false;

					}
					else
					{
						// deal with items only necessary for historical companies

						lbl_message.Text = "HISTORICAL COMPANY AS OF ";

						txt_history_date.Text = modCommon.Get_Journal_Date(nReference_CompanyJID);
						txt_history_date.Visible = true;
						txt_history_date.Enabled = false;

						mnuReportList[2].Enabled = false;

						cmd_ac_verify[0].Visible = false; // Verify Aircraft
						cmd_ac_verify[1].Visible = false; // Verify All Aircraft
						cmd_ac_verify[2].Visible = false; // Verify All Helicopters
						cmd_ac_verify[3].Visible = false; // Verify All Fixed Wing

						btn_array[0].Visible = false;
						chk_dont_color_confirm.Visible = false;

						pnl_research_notes.Visible = false;
						lst_research_notes.Enabled = false;
						lst_research_notes.Items.Clear();

					} // if current (not historical) company

					cbo_comp_business_type.Enabled = false;

					cmd_relationship_buttons[0].Visible = true;
					cmd_company_add_note.Visible = true;
					cmd_edit_business_types.Visible = true;

					lst_business_types.Visible = true;

					tab_company_details.Visible = true;

					// 8/21/03 - rtw - added code to tell researcher when account rep is not assigned.
					if (nReference_CompanyJID == 0)
					{
						if (cbo_comp_account[COMP_ACCOUNT_REP].Text.Trim() == modGlobalVars.cEmptyString)
						{
							MessageBox.Show("Note that no account representative has been assigned to this company. Please repair before saving.", "Company : Select Company", MessageBoxButtons.OK, MessageBoxIcon.Information);
						}
					}

					SSTabHelper.SetTabVisible(tab_company_details, 6, false); //new tab aey 6/15/04

					Query = "SELECT aclease_type, aclease_term, aclease_expiration_date, aclease_percentage, aclease_note, ac_ser_no, ac_id,";
					Query = $"{Query}comp_id,comp_journ_id,comp_name,ac_amod_id";
					Query = $"{Query} FROM Aircraft_Lease WITH(NOLOCK), Aircraft WITH(NOLOCK), Aircraft_Reference WITH(NOLOCK), Company WITH(NOLOCK)";
					Query = $"{Query} WHERE ((aclease_expiration_date <='{DateTime.Now.ToString("d")}') OR (aclease_expiration_date Is Null and aclease_entry_date <='{DateTime.Now.AddYears(-2).ToString("d")}'))";
					// expiration is null, and was entered atleast 2 years ago
					Query = $"{Query} AND aclease_expired <> 'Y'";
					Query = $"{Query} AND (ac_id=cref_ac_id AND ac_journ_id=cref_journ_id) AND (cref_primary_poc_flag='Y' OR cref_primary_poc_flag='X')";
					Query = $"{Query} AND (ac_id=aclease_ac_id AND ac_journ_id=0)";
					Query = $"{Query} AND (comp_id=cref_comp_id AND comp_journ_id=cref_journ_id)";
					Query = $"{Query} AND (comp_ID = {nReference_CompanyID.ToString()})";
					Query = $"{Query} AND (comp_journ_id = {nReference_CompanyJID.ToString()})";
					Query = $"{Query} ORDER BY aclease_expiration_date";

					if (modAdminCommon.Exist(Query))
					{
						SSTabHelper.SetTabVisible(tab_company_details, 6, true);
						tab_company_details.ImageList.Images[6] = pic_verify_ac[0].Image; //aey 6/15/04
						SSTabHelper.SetTabVisible(tab_company_details, 6, true);
					}
					else
					{
						SSTabHelper.SetTabVisible(tab_company_details, 6, false);
					}


					Query = " select top 1 publist_process_status as type_of, pub_name as SOURCE,  ";
					Query = $"{Query} publist_clear_date as CLEARDATE, publist_entry_date as PUBDATE, publist_status,";
					Query = $"{Query} publist_url as WEBLINK, publist_ac_id,  publist_id, ";
					Query = $"{Query} publist_description as LASTNOTES";
					Query = $"{Query} from Publication_Listing with (NOLOCK) ";
					Query = $"{Query}  left outer join Publications with (NOLOCK) on pub_id = publist_source ";
					Query = $"{Query} where publist_comp_id = {nReference_CompanyID.ToString()} and publist_status in ('O','I') ";

					if (modAdminCommon.Exist(Query))
					{
						tab_company_details.ImageList.Images[10] = pic_verify_ac[0].Image;
					}


					int tempForEndVar = lst_business_types.Items.Count - 1;
					for (int i = 0; i <= tempForEndVar; i++)
					{
						if (lst_business_types.GetListItem(i).StartsWith("FI", StringComparison.Ordinal) || lst_business_types.GetListItem(i).StartsWith("FI", StringComparison.Ordinal))
						{
							is_financial = true;
						}
						is_dealer_broker = false;
						if (lst_business_types.GetListItem(i).StartsWith("DB", StringComparison.Ordinal))
						{
							is_dealer_broker = true;
						}
					}

					if (is_financial)
					{
						lbl_comp[101].Visible = true;
						lbl_comp[101].Tag = "0";
						Query = "SELECT COUNT(*) as DOCS";
						Query = $"{Query} FROM Aircraft_Document WITH(NOLOCK)";
						Query = $"{Query} INNER JOIN Aircraft WITH(NOLOCK) ON ac_id = adoc_ac_id AND ac_journ_id = adoc_journ_id";
						Query = $"{Query} INNER JOIN aircraft_model WITH(NOLOCK) ON ac_amod_id = amod_id";
						Query = $"{Query} INNER JOIN Journal WITH(NOLOCK) ON ac_journ_id = journ_id";
						Query = $"{Query} INNER JOIN company WITH(NOLOCK) ON adoc_infavor_comp_id = comp_id and comp_journ_id = 0";
						Query = $"{Query} inner join Business_Type_Reference with (NOLOCK) on comp_id =bustypref_comp_id and comp_journ_id = bustypref_journ_id and bustypref_type='FI'";
						Query = $"{Query} LEFT OUTER JOIN Financial_Institution_Company_Reference WITH(NOLOCK) ON ficr_sub_comp_id = adoc_infavor_comp_id";
						Query = $"{Query} LEFT OUTER JOIN Financial_Institution_Primary_Group WITH(NOLOCK) ON fipg_main_comp_id = ficr_main_comp_id";
						Query = $"{Query} WHERE  journ_internal_trans_flag = 'N' AND journ_subcat_code_part2 NOT LIKE 'IT'";
						Query = $"{Query} and fipg_generic_name is NULL";
						Query = $"{Query} and comp_id = {nReference_CompanyID.ToString()}";

						ado_Current_Company2.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

						if (!ado_Current_Company2.BOF && !ado_Current_Company.EOF)
						{

							if (Convert.ToDouble(ado_Current_Company2["DOCS"]) > 0)
							{
								SSTabHelper.SetTabVisible(tab_company_details, 5, true);
								tab_company_details.ImageList.Images[5] = pic_verify_ac[0].Image; //aey 6/15/04
								SSTabHelper.SetTabVisible(tab_company_details, 5, true);

								lbl_comp[101].Text = $"{lbl_comp[101].Text}                                               ";
								lbl_comp[101].Text = $"{lbl_comp[101].Text}{Convert.ToInt32(ado_Current_Company2["DOCS"]).ToString()} Documenets That Are Not Connected to a Financial Institution";
								lbl_comp[101].ForeColor = Color.Red;
							}
						}
						ado_Current_Company2.Close();

						if (ColorTranslator.ToOle(lbl_comp[101].ForeColor).ToString().Trim() == ColorTranslator.ToOle(Color.Red).ToString())
						{ // then its disconnected
							temp_group = 0;
						}
						else
						{
							Query = "SELECT DISTINCT comp_id AS COMPID, ";
							//Query = Query & " dbo.GetPrimaryCompanybyCompID(comp_id) AS MAINCOMPID, "
							Query = $"{Query} comp_name AS COMPNAME, fipg_generic_name as FINGROUP,";
							Query = $"{Query} ficr_main_comp_id as GROUPCOMP, ficr_id,  COUNT(*) as DOCS";
							Query = $"{Query} FROM Aircraft_Document WITH(NOLOCK)";
							Query = $"{Query} INNER JOIN Aircraft WITH(NOLOCK) ON ac_id = adoc_ac_id AND ac_journ_id = adoc_journ_id";
							Query = $"{Query} INNER JOIN aircraft_model WITH(NOLOCK) ON ac_amod_id = amod_id";
							Query = $"{Query} INNER JOIN Journal WITH(NOLOCK) ON ac_journ_id = journ_id";
							Query = $"{Query} INNER JOIN company WITH(NOLOCK) ON adoc_infavor_comp_id = comp_id and comp_journ_id = 0";
							Query = $"{Query} LEFT OUTER JOIN Financial_Institution_Company_Reference WITH(NOLOCK) ON ficr_sub_comp_id = adoc_infavor_comp_id";
							Query = $"{Query} LEFT OUTER JOIN Financial_Institution_Primary_Group WITH(NOLOCK) ON fipg_main_comp_id = ficr_main_comp_id";
							Query = $"{Query} WHERE  journ_internal_trans_flag = 'N' AND journ_subcat_code_part2 NOT LIKE 'IT'";
							Query = $"{Query} and comp_id in (select distinct bustypref_comp_id bustyperef_type from Business_Type_Reference with (NOLOCK)";
							Query = $"{Query} where bustypref_type='FI' and comp_journ_id = 0)";
							Query = $"{Query} and fipg_generic_name is not  NULL";
							Query = $"{Query} and comp_id = {nReference_CompanyID.ToString()}";
							Query = $"{Query} group by comp_id , comp_name, fipg_generic_name, ficr_main_comp_id, ficr_id";
							// Query = Query & "  , dbo.GetPrimaryCompanybyCompID(comp_id), comp_name,fipg_generic_name,ficr_main_comp_id"
							// Query = Query & " order by comp_name,fipg_generic_name"
							//Query = Query & " , dbo.GetPrimaryCompanybyCompID(comp_id)"
							ado_Current_Company2.Open(Query, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

							if (!ado_Current_Company2.BOF && !ado_Current_Company.EOF)
							{

								if (Convert.ToDouble(ado_Current_Company2["DOCS"]) > 0)
								{
									temp_group = Convert.ToInt32(ado_Current_Company2["GROUPCOMP"]);
									lbl_comp[101].Tag = Convert.ToString(ado_Current_Company2["ficr_id"]);
								}
							}
							ado_Current_Company2.Close();
						}


						Fill_Financial_Group_Drop_Down(temp_group);
						cbo_comp_account[5].Visible = true;
					}
					else
					{
						cbo_comp_account[5].Visible = false;
					}






					check_company_permissions();

					result = true;

				}
				else
				{
					// no company record was found

					if (nReference_CompanyJID > 0)
					{
						lbl_message.Text = "HISTORICAL COMPANY NOT FOUND";
					}
					else
					{
						lbl_message.Text = "CURRENT COMPANY NOT FOUND";
					}

					grd_company_aircraft.Clear();
					grd_company_phone.Clear();

					search_off();

				} // If ado_Current_Company.BOF = False And ado_Current_Company.EOF = False Then

				ado_Current_Company.Close();
				ado_Current_Company = null;

				modCommon.End_Activity_Monitor_Message("Open Company", ref strMsg, dtStartDate, ref dtEndDate, 0, nReference_CompanyJID, nReference_CompanyID, 0, 0);

				frm_UserHistory.DefInstance.Refresh_User_History_Grids("Company");

				search_off();

				// ADDED MSW/RTWW 7/8/13 FOR ISSUE WITH BACK BUTTON BUGGING OUT
				tbr_ToolBar.Visible = true;
				tbr_ToolBar.Enabled = true;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"select_company_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
				result = false;
			}

			return result;
		} // Select_Company
		public void Fill_Financial_Group_Drop_Down(int group_id)
		{


			ADORecordSetHelper RS_GroupList = new ADORecordSetHelper();

			//'''''''''''''''''''''''''''''''''
			// Populate the combobox
			//'''''''''''''''''''''''''''''''''
			string Query = "select fipg_generic_name, fipg_main_comp_id ";
			Query = $"{Query}from Financial_Institution_Primary_Group ";
			Query = $"{Query}order by fipg_generic_name, fipg_main_comp_id";

			//Call RS_GroupList.Open(Query, LOCAL_ADO_DB, adOpenForwardOnly, adLockOptimistic, adCmdText)
			RS_GroupList = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

			//If Not IsNull(RS_GroupList) And (RS_GroupList.EOF And RS_GroupList.BOF) Then
			if (!(RS_GroupList.EOF && RS_GroupList.BOF))
			{
				cbo_comp_account[5].AddItem("None Selected");
				cbo_comp_account[5].SetItemData(cbo_comp_account[5].GetNewIndex(), 0);
				cbo_comp_account[5].AddItem("Create New Financial Group");
				cbo_comp_account[5].SetItemData(cbo_comp_account[5].GetNewIndex(), 0);
				RS_GroupList.MoveFirst();

				while(!RS_GroupList.EOF)
				{
					cbo_comp_account[5].AddItem(Convert.ToString(RS_GroupList["fipg_generic_name"]));
					cbo_comp_account[5].SetItemData(cbo_comp_account[5].GetNewIndex(), Convert.ToInt32(RS_GroupList["fipg_main_comp_id"]));

					if (group_id.ToString().Trim() == Convert.ToString(RS_GroupList["fipg_main_comp_id"]).Trim())
					{
						cbo_comp_account[5].SelectedIndex = cbo_comp_account[5].GetNewIndex();
					}

					RS_GroupList.MoveNext();
				};

				RS_GroupList.Close();

				if (group_id == 0)
				{
					cbo_comp_account[5].SelectedIndex = 0;
				}
			}
			else
			{
				cbo_comp_account[5].SelectedIndex = 0;
			}
		}

		private object check_company_permissions()
		{

			// Function used for checking permissions per logons


			// *************************************************************************
			// RTW - 11/10/2011 - ADDED A CHECK TO SEE IF COMPANY IS AN AERODEX CUSTOMER
			string Query = "select distinct sub_comp_id from subscription with (NOLOCK) ";
			Query = $"{Query}where sub_start_date <= '{DateTime.Now.ToString()}' and ";
			Query = $"{Query}(sub_end_date is NULL or sub_end_date >= '{DateTime.Now.ToString()}') ";
			Query = $"{Query}and sub_comp_id = {nReference_CompanyID.ToString()}";
			IsAerodex = modAdminCommon.Exist(Query);

			string strOwner = modCommon.CompanyLocked(nReference_CompanyID, nReference_CompanyJID).ToLower();
			ToolTipMain.SetToolTip(lbl_message, "");

			if (strOwner != "false" && strOwner != modAdminCommon.gbl_User_ID.ToLower())
			{

				lbl_comp[6].Visible = true;
				// MODIFED BY RTW - 3/22/2011 - TO ACCOMODATE LOCKING BY HOMEBASE FOR DUPLCIATE REMOVAL
				if (strOwner == "hcc")
				{
					lbl_comp[6].Text = "Locked for Duplicate Removal!";
					cmd_company_save.Text = "Locked for Duplicate Removal!";
					lbl_message.Text = lbl_comp[6].Text.ToUpper();
				}
				else
				{
					lbl_comp[6].Text = $"Locked by {strOwner}!";
					cmd_company_save.Text = $"Locked by {strOwner}!";
					lbl_message.Text = $"{lbl_message.Text} {lbl_comp[6].Text.ToUpper()}";
					ToolTipMain.SetToolTip(lbl_message, $"Locked By: {modCommon.DLookUp("user_first_name+' '+user_last_name", "[User]", $"(user_id='{strOwner}')")}");
				}

				pnl_company_main.BackColor = LOCKED_BACKCOLOR;
				chk_company_flag[iCompActiveFlag].BackColor = LOCKED_BACKCOLOR;
				chk_company_flag[iCompHideFlag].BackColor = LOCKED_BACKCOLOR;
				chk_dont_color_confirm.BackColor = LOCKED_BACKCOLOR;

				//disable all fields so there can't be any updates.
				disable_company();

			}
			else
			{

				if (cbo_comp_business_type.Text.Substring(0, Math.Min(2, cbo_comp_business_type.Text.Length)).Trim().ToUpper() == "DB" || cbo_comp_business_type.Text.Substring(0, Math.Min(2, cbo_comp_business_type.Text.Length)).Trim().ToUpper() == "FI" || cbo_comp_business_type.Text.Substring(0, Math.Min(2, cbo_comp_business_type.Text.Length)).Trim().ToUpper() == "MF" || cbo_comp_business_type.Text.Substring(0, Math.Min(2, cbo_comp_business_type.Text.Length)).Trim().ToUpper() == "DS")
				{

					change_background("DB");

				}
				else
				{

					if (IsAerodex)
					{
						change_background("AERODEX");
					}
					else
					{
						change_background("NORMAL");
					}

					//pnl_company_main.BackColor = NORMAL_CTRL_BACKCOLOR
					chk_company_flag[iCompActiveFlag].BackColor = NORMAL_CTRL_BACKCOLOR;
					chk_company_flag[iCompHideFlag].BackColor = NORMAL_CTRL_BACKCOLOR;
					chk_dont_color_confirm.BackColor = NORMAL_CTRL_BACKCOLOR;

				}

				lbl_comp[6].Visible = false;
				lbl_comp[6].Text = modGlobalVars.cEmptyString;

				cmd_company_save.Text = "Save Company";


				modCommon.UnLockCompany_ALL(nReference_CompanyJID, modAdminCommon.gbl_User_ID.Trim().ToLower());

				modCommon.LockCompany(nReference_CompanyID, nReference_CompanyJID, modAdminCommon.gbl_User_ID.Trim().ToLower());


				enable_company();

			}

			return null;
		}

		private object disable_company()
		{

			// Function used to disable company textboxes, comboboxes, etc.

			try
			{

				cal_comp_callback_date.Enabled = false;

				cbo_comp_state.Enabled = false;
				cbo_comp_timezone.Enabled = false;
				cbo_comp_name_alt_type.Enabled = false;
				cbo_comp_country.Enabled = false;
				cbo_comp_language.Enabled = false;
				cbo_comp_business_type.Enabled = false;
				cbo_comp_agency_type.Enabled = false;
				cbo_comp_account[COMP_ACCOUNT_REP].Enabled = false;
				cbo_comp_account[COMP_ACCOUNT_TYPE].Enabled = false;
				cbo_comp_account[COMP_MARKETING_REP].Enabled = false;
				cbo_comp_account[COMP_LINE_ACCESS].Enabled = false;
				cbo_comp_services_used.Enabled = false;
				cbo_company_research_contact.Enabled = false;
				cbo_ac_delivery_position.Enabled = false;

				chk_company_flag[iCompActiveFlag].Enabled = false;
				chk_company_flag[iCompHideFlag].Enabled = false;
				chk_company_assign_flag.Enabled = false;
				chk_dont_color_confirm.Enabled = false;
				chk_include_on_ac_pros.Enabled = false;
				chk_array[0].Enabled = false;
				chkCompContactAddressFlag.Enabled = false;

				int tempForEndVar = chk_comp_product_code.GetUpperBound(0);
				for (int X = 0; X <= tempForEndVar; X++)
				{
					chk_comp_product_code[X].Enabled = false;
				}

				cmd_company_save.Enabled = false;
				cmd_company_add_note.Enabled = false;
				cmd_edit_business_types.Enabled = false;
				cmd_company_button[1].Enabled = false; // cmd_company_called_no_statu
				cmd_company_button[0].Enabled = false;
				cmd_company_update_callback_date[0].Enabled = false;
				cmd_company_update_callback_date[1].Enabled = false;
				cmd_company_update_stats.Enabled = false;
				cmd_relationship_buttons[0].Enabled = false;

				cmd_aircraft_contact_change.Enabled = false;
				cmd_aircraft_all_contact_change.Enabled = false;

				cmd_ac_verify[0].Enabled = false; // Verify Aircraft
				cmd_ac_verify[1].Enabled = false; // Verify All Aircraft
				cmd_ac_verify[2].Enabled = false; // Verify All Helicopters
				cmd_ac_verify[3].Enabled = false; // Verify All Fixed Wing

				cmd_contact_seq_down.Enabled = false;
				cmd_contact_seq_up.Enabled = false;
				btn_array[2].Enabled = false;
				btn_array[3].Enabled = false;
				cmd_wanted_add.Enabled = false;

				grd_company_contacts.Enabled = false;
				grd_company_aircraft.Enabled = false;
				grd_company_phone.Enabled = false;
				grd_company_wanted.Enabled = false;
				grd_company_shares.Enabled = false;
				grd_company_documents.Enabled = false;
				grd_company_expired_leases.Enabled = false;
				grd_company_relationships.Enabled = false;
				grd_company_journal.Enabled = false;

				lst_research_notes.Enabled = false;

				mnueditaddcompany.Enabled = false;
				mnueditaddcompanyphone.Enabled = false;
				mnueditremovecompanyphone.Enabled = false;

				txt_comp_name.Enabled = false;
				txt_comp_name_alt.Enabled = false;
				txt_comp_address1.Enabled = false;
				txt_comp_address2.Enabled = false;
				txt_comp_city.Enabled = false;

				txt_comp_zip_code.Enabled = false;
				txt_comp_web_address.Enabled = false;
				txt_comp_email_address.Enabled = false;
				chkCompDoNotSendEMail.Enabled = false;

				txt_comp_description.Enabled = false;
				txt_comp_fractowr_notes.Enabled = false;
				txt_company_field[0].Enabled = false;
				txt_company_field[1].Enabled = false;
				txt_company_field[iCompAirportId].Enabled = false;

				txt_comp_sic_code.Enabled = false;
				txt_comp_dunnandbrad.Enabled = false;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"disable_company_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
			}

			return null;
		}

		public object enable_company()
		{

			// Function used to enable company text boxes, combo boxes, etc. that were disabled during processing

			try
			{

				cal_comp_callback_date.Enabled = true;

				cbo_comp_state.Enabled = true;
				//cbo_comp_timezone.Enabled = True ' commented out MSW - 12/1/23
				cbo_comp_name_alt_type.Enabled = true;
				cbo_comp_country.Enabled = true;
				cbo_comp_language.Enabled = true;
				// COMMENTED OUT MSW 5/2/2012
				// cbo_comp_business_type.Enabled = True
				cbo_comp_agency_type.Enabled = true;
				cbo_comp_account[COMP_ACCOUNT_TYPE].Enabled = true;
				cbo_comp_account[COMP_ACCOUNT_REP].Enabled = true;
				cbo_comp_account[COMP_MARKETING_REP].Enabled = true;
				cbo_comp_account[COMP_LINE_ACCESS].Enabled = true;
				cbo_comp_services_used.Enabled = true;
				cbo_company_research_contact.Enabled = true;
				cbo_ac_delivery_position.Enabled = true;

				chk_company_flag[iCompActiveFlag].Enabled = true;
				chk_company_flag[iCompHideFlag].Enabled = true;
				chk_company_assign_flag.Enabled = true;
				chk_dont_color_confirm.Enabled = true;
				chk_include_on_ac_pros.Enabled = true;
				chk_array[0].Enabled = true;
				chkCompContactAddressFlag.Enabled = true;

				int tempForEndVar = chk_comp_product_code.GetUpperBound(0);
				for (int X = 0; X <= tempForEndVar; X++)
				{
					//If X = CHK_REGIONAL_IDX Then Exit For    ' dont enable regional
					if (X == modGlobalVars.CHK_AIRBP_IDX && bBlockAirBp)
					{
						break;
					}
					chk_comp_product_code[X].Enabled = true;
				}

				cmd_company_save.Enabled = true;
				cmd_company_add_note.Enabled = true;
				cmd_edit_business_types.Enabled = true;
				cmd_company_button[1].Enabled = true;
				cmd_company_button[0].Enabled = true;
				cmd_company_update_callback_date[0].Enabled = true;
				cmd_company_update_callback_date[1].Enabled = true;
				cmd_company_update_stats.Enabled = true;
				cmd_relationship_buttons[0].Enabled = true;

				cmd_aircraft_contact_change.Enabled = true;
				cmd_aircraft_all_contact_change.Enabled = true;

				cmd_ac_verify[0].Enabled = true; // Verify Aircraft
				cmd_ac_verify[1].Enabled = true; // Verify All Aircraft
				cmd_ac_verify[2].Enabled = true; // Verify All Helicopters
				cmd_ac_verify[3].Enabled = true; // Verify All Fixed Wing

				cmd_contact_seq_down.Enabled = true;
				cmd_contact_seq_up.Enabled = true;
				btn_array[2].Enabled = true;
				btn_array[3].Enabled = true;
				cmd_wanted_add.Enabled = true;

				grd_company_contacts.Enabled = true;
				grd_company_aircraft.Enabled = true;
				grd_company_phone.Enabled = true;
				grd_company_wanted.Enabled = true;
				grd_company_shares.Enabled = true;
				grd_company_documents.Enabled = true;
				grd_company_expired_leases.Enabled = true;
				grd_company_relationships.Enabled = true;
				grd_company_journal.Enabled = true;

				lst_research_notes.Enabled = true;

				mnueditaddcompany.Enabled = true;
				mnueditaddcompanyphone.Enabled = true;
				mnueditremovecompanyphone.Enabled = true;

				txt_comp_name.Enabled = true;
				txt_comp_name_alt.Enabled = true;
				txt_comp_address1.Enabled = true;
				txt_comp_address2.Enabled = true;
				txt_comp_city.Enabled = true;

				txt_comp_zip_code.Enabled = true;
				txt_comp_web_address.Enabled = true;
				txt_comp_email_address.Enabled = true;
				chkCompDoNotSendEMail.Enabled = true;
				txt_comp_description.Enabled = true;
				txt_comp_fractowr_notes.Enabled = true;


				txt_company_field[0].Enabled = true;
				txt_company_field[1].Enabled = true;
				txt_company_field[iCompAirportId].Enabled = true;

				txt_comp_sic_code.Enabled = true;
				txt_comp_dunnandbrad.Enabled = true;
			}
			catch (System.Exception excep)
			{
				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"enable_company_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
			}

			return null;
		}

		private void select_company_contact(int n_inSelectedContactID)
		{

			// Function used to Select company contact

			try
			{

				if (n_inSelectedContactID > 0)
				{
					strSelectedContact = get_selected_contact(n_inSelectedContactID);
					nSelectedContactID = n_inSelectedContactID;
				}
				else
				{
					nSelectedContactID = 0;
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"select_company_contact_Error({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		private void select_company_aircraft(int n_inSelectedAircraftID)
		{

			// Function used to Select company aircraft from grid
			try
			{

				strSelectedAircraft = "";

				if (n_inSelectedAircraftID > 0)
				{
					strSelectedAircraft = get_selected_aircraft(n_inSelectedAircraftID);
					nSelectedAircraftID = n_inSelectedAircraftID;
				}

				if (strSelectedAircraft != "")
				{
					txt_journal_ac_selected.Text = strSelectedAircraft;
					txt_journal_ac_selected.Visible = true;
				}
				else
				{
					txt_journal_ac_selected.Text = "";
					txt_journal_ac_selected.Visible = false;
					nSelectedAircraftID = 0;
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"select_company_aircraft_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		private string get_selected_aircraft(int in_AircraftID)
		{


			string result = "";
			int RememberCol = grd_company_aircraft.CurrentColumnIndex;
			int RememberRow = grd_company_aircraft.CurrentRowIndex;

			if (in_AircraftID > 0)
			{
				grd_company_aircraft.CurrentColumnIndex = 3;
				result = grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim();

				// find the aircraft info

				while(result.Trim() == modGlobalVars.cEmptyString)
				{
					grd_company_aircraft.CurrentRowIndex--;
					result = grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim();
				};

				grd_company_aircraft.CurrentColumnIndex = 4;
				result = $"{result}, {grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim()}";

				grd_company_aircraft.CurrentColumnIndex = 10;
				result = $"{result} ({grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim()})";

				grd_company_aircraft.CurrentColumnIndex = 7;
				result = $"{result} - {grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim()}";

			}

			result = result.Trim();

			grd_company_aircraft.CurrentColumnIndex = RememberCol;
			grd_company_aircraft.CurrentRowIndex = RememberRow;

			return result;
		}

		private bool get_selected_wanted(int in_WantedID)
		{

			bool result = false;
			ADORecordSetHelper rstRec1 = new ADORecordSetHelper();
			string strQuery1 = "";

			try
			{

				result = false;

				strQuery1 = "SELECT amod_make_name, amod_model_name, amod_start_year, amod_end_year, Aircraft_Model_Wanted.* ";
				strQuery1 = $"{strQuery1}FROM Aircraft_Model WITH (NOLOCK) ";
				strQuery1 = $"{strQuery1}INNER JOIN Aircraft_Model_Wanted WITH (NOLOCK) ON amwant_amod_id = amod_id ";
				strQuery1 = $"{strQuery1}WHERE (amwant_id = {in_WantedID.ToString()}) ";

				rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

				if (!rstRec1.BOF && !rstRec1.EOF)
				{

					// fake out controls so the click events dont fire when we dispalay data
					bFormLoad = true;

					//move to the correct make/model unlock the drop down to set index
					//UPGRADE_ISSUE: (2064) ComboBox property cbo_amwant_model.Locked was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					cbo_amwant_model.setLocked(false);
					cbo_amwant_model.SelectedIndex = -1;
					lbl_comp[WANT_MOD_BUILD_YR_INDEX].Text = modGlobalVars.cEmptyString;
					int tempForEndVar = cbo_amwant_model.Items.Count - 1;
					for (int i = 0; i <= tempForEndVar; i++)
					{
						if (cbo_amwant_model.GetListItem(i).Trim() == $"{($"{Convert.ToString(rstRec1["amod_make_name"])} ").Trim()}/{($"{Convert.ToString(rstRec1["amod_model_name"])} ").Trim()}")
						{
							cbo_amwant_model.SelectedIndex = i;
							lbl_comp[WANT_MOD_BUILD_YR_INDEX].Text = $"{($"{Convert.ToString(rstRec1["amod_start_year"])} ").Trim()} -> {($"{Convert.ToString(rstRec1["amod_end_year"])} ").Trim()}";
							break;
						}
					}
					//UPGRADE_ISSUE: (2064) ComboBox property cbo_amwant_model.Locked was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
					cbo_amwant_model.setLocked(true);
					// relock drop down so it cant get edited

					txt_amwant_listed_date.Text = modGlobalVars.cEmptyString;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["amwant_listed_date"]))
					{
						if (Information.IsDate(rstRec1["amwant_listed_date"]))
						{
							txt_amwant_listed_date.Text = Convert.ToDateTime(rstRec1["amwant_listed_date"]).ToString("d");
						}
					}

					txt_amwant_date_verified.Text = modGlobalVars.cEmptyString;
					txt_amwant_date_verified.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.NoColor)));
					chk_amwant_date_is_verified.CheckState = CheckState.Unchecked;

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["amwant_verified_date"]))
					{
						if (Information.IsDate(rstRec1["amwant_verified_date"]))
						{
							txt_amwant_date_verified.Text = Convert.ToDateTime(rstRec1["amwant_verified_date"]).ToString("d");
							chk_amwant_date_is_verified.CheckState = CheckState.Checked;
						}
					}

					if (txt_amwant_date_verified.Text.Trim() == modGlobalVars.cEmptyString)
					{
						txt_amwant_date_verified.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.ConfirmColor)));
					}
					else if (((int) DateAndTime.DateDiff("d", DateTime.Parse(txt_amwant_date_verified.Text.Trim()), DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)), FirstDayOfWeek.Sunday, FirstWeekOfYear.Jan1)) > modAdminCommon.gbl_ConfirmDays)
					{ 
						txt_amwant_date_verified.BackColor = ColorTranslator.FromOle(Convert.ToInt32(Double.Parse(modAdminCommon.ConfirmColor)));
					}

					txt_amwant_yearnote.Text = ($"{Convert.ToString(rstRec1["amwant_year_note"])} ").Trim();
					txt_amwant_pricenote.Text = ($"{Convert.ToString(rstRec1["amwant_amount_note"])} ").Trim();
					txt_amwant_start_year.Text = ($"{Convert.ToString(rstRec1["amwant_start_year"])} ").Trim();
					txt_amwant_end_year.Text = ($"{Convert.ToString(rstRec1["amwant_end_year"])} ").Trim();

					txt_amwant_max_price.Text = "";
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["amwant_max_price"]))
					{
						if (Information.IsNumeric(rstRec1["amwant_max_price"]))
						{
							txt_amwant_max_price.Text = $"${Strings.FormatNumber(rstRec1.GetField("amwant_max_price"), 2, TriState.False, TriState.False, TriState.True)}";
						}
					}

					txt_amwant_max_aftt.Text = "";
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["amwant_max_aftt"]))
					{
						if (Information.IsNumeric(rstRec1["amwant_max_aftt"]))
						{
							txt_amwant_max_aftt.Text = Strings.FormatNumber(rstRec1.GetField("amwant_max_aftt"), 0, TriState.False, TriState.False, TriState.True);
						}
					}

					cbo_amwant_accept_damage_hist.SelectedIndex = -1;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["amwant_accept_damage_hist"]))
					{
						if (($"{Convert.ToString(rstRec1["amwant_accept_damage_hist"])} ").Trim() != "")
						{
							int tempForEndVar2 = cbo_amwant_accept_damage_hist.Items.Count - 1;
							for (int i = 0; i <= tempForEndVar2; i++)
							{
								if (cbo_amwant_accept_damage_hist.GetListItem(i).Trim() == ($"{Convert.ToString(rstRec1["amwant_accept_damage_hist"])} ").Trim().ToUpper())
								{
									cbo_amwant_accept_damage_hist.SelectedIndex = i;
									break;
								}
							}
						}
					}

					cbo_amwant_accept_damage_cur.SelectedIndex = -1;
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["amwant_accept_dam_cur"]))
					{
						if (($"{Convert.ToString(rstRec1["amwant_accept_dam_cur"])} ").Trim() != "")
						{
							int tempForEndVar3 = cbo_amwant_accept_damage_cur.Items.Count - 1;
							for (int i = 0; i <= tempForEndVar3; i++)
							{
								if (cbo_amwant_accept_damage_cur.GetListItem(i).Trim() == ($"{Convert.ToString(rstRec1["amwant_accept_dam_cur"])} ").Trim().ToUpper())
								{
									cbo_amwant_accept_damage_cur.SelectedIndex = i;
									break;
								}
							}
						}
					}

					txt_amwant_notes.Text = ($"{Convert.ToString(rstRec1["amwant_notes"])} ").Trim();

					chk_amwant_auto_distribute_flag.CheckState = CheckState.Unchecked;
					if (($"{Convert.ToString(rstRec1["amwant_auto_distribute_flag"])} ").Trim().ToUpper() == "Y")
					{
						chk_amwant_auto_distribute_flag.CheckState = CheckState.Checked;
					}

					txt_amwant_auto_distribute_email.Text = ($"{Convert.ToString(rstRec1["amwant_auto_distribute_email"])} ").Trim();
					txt_amwant_auto_distribute_replyname.Text = ($"{Convert.ToString(rstRec1["amwant_auto_distribute_replyname"])} ").Trim();

					txt_amwant_auto_unsuscribe_date.Text = "";
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(rstRec1["amwant_auto_unsubscribe_date"]))
					{
						txt_amwant_auto_unsuscribe_date.Text = Convert.ToDateTime(rstRec1["amwant_auto_unsubscribe_date"]).ToString();
					}

					pnl_company_wanted.Visible = true;
					pnl_company_wanted.Refresh();

					result = true;

					save_wanted_selection(ref save_wanted_info);

					rstRec1.Close();

					bFormLoad = false;

				}

				rstRec1 = null;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"get_selected_wanted_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");

				pnl_company_wanted.Visible = false;
				search_off();
			}

			return result;
		} // get_selected_wanted

		private string get_selected_contact(int in_ContactID)
		{

			// Function used to Select contact

			string result = "";
			string Query = "";
			ADORecordSetHelper ado_ContactInfo = null;

			string sContactName = "";
			string sContactNameWTitle = "";
			System.DateTime tempconfirmdate = DateTime.FromOADate(0);
			int i = 0;
			bool bIsContactRelated = false;
			string strText = "";

			try
			{

				result = modGlobalVars.cEmptyString;

				txt_contact_id.Tag = "";

				if (in_ContactID > 0)
				{

					clear_contact_controls();

					pnl_company_contact_details.BackColor = SystemColors.Control;
					if (nReference_CompanyJID == 0)
					{
						bIsContactRelated = modCommon.IsContactRelatedToAnotherContact(nReference_CompanyID, in_ContactID);
						if (bIsContactRelated)
						{
							pnl_company_contact_details.BackColor = Color.Yellow;
						}
					}


					// fill in the contact info on the aircraft tab
					lst_aircraft_contact.Items.Clear();
					lst_aircraft_contact.Visible = true;

					Query = "SELECT *, ";
					Query = $"{Query}dbo.CreateContactFullNameTitle(contact_sirname, contact_first_name, contact_middle_initial, contact_last_name, contact_suffix, '') As Contact ";
					Query = $"{Query}FROM Contact WITH(NOLOCK) ";
					Query = $"{Query}WHERE (contact_id = {in_ContactID.ToString()}) ";
					Query = $"{Query}AND (contact_journ_id = {nReference_CompanyJID.ToString()}) ";

					ado_ContactInfo = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

					if (!(ado_ContactInfo.BOF && ado_ContactInfo.EOF))
					{

						txt_contact_id.Text = Convert.ToString(ado_ContactInfo["contact_id"]).Trim();

						sContactName = "";
						txt_contact_id.Tag = ($"{Convert.ToString(ado_ContactInfo["CONTACT"])} ").Trim();

						// SIRNAME
						cbo_contact_sirname.Text = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_sirname"]))
						{
							if (Convert.ToString(ado_ContactInfo["contact_sirname"]).Trim() != modGlobalVars.cEmptyString)
							{
								sContactName = $"{sContactName}{Convert.ToString(ado_ContactInfo["contact_sirname"]).Trim()}{modGlobalVars.cSingleSpace}";
								cbo_contact_sirname.Text = Convert.ToString(ado_ContactInfo["contact_sirname"]).Trim();
							}
						}
						cbo_contact_sirname.Enabled = false;

						// FIRST NAME
						txt_contact_first_name.Text = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_first_name"]))
						{
							if (Convert.ToString(ado_ContactInfo["contact_first_name"]).Trim() != modGlobalVars.cEmptyString)
							{
								sContactName = $"{sContactName}{Convert.ToString(ado_ContactInfo["contact_first_name"]).Trim()}{modGlobalVars.cSingleSpace}";
								txt_contact_first_name.Text = Convert.ToString(ado_ContactInfo["contact_first_name"]).Trim();
							}
						}
						txt_contact_first_name.Enabled = false;

						// MIDDLE INITIAL
						txt_contact_middle_initial.Text = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_middle_initial"]))
						{
							if (Convert.ToString(ado_ContactInfo["contact_middle_initial"]).Trim() != modGlobalVars.cEmptyString)
							{
								sContactName = $"{sContactName}{Convert.ToString(ado_ContactInfo["contact_middle_initial"]).Trim()}. ";
								txt_contact_middle_initial.Text = Convert.ToString(ado_ContactInfo["contact_middle_initial"]).Trim();
							}
						}
						txt_contact_middle_initial.Enabled = false;

						// LAST NAME
						txt_contact_last_name.Text = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_last_name"]))
						{
							if (Convert.ToString(ado_ContactInfo["contact_last_name"]).Trim() != modGlobalVars.cEmptyString)
							{
								sContactName = $"{sContactName}{Convert.ToString(ado_ContactInfo["contact_last_name"]).Trim()}{modGlobalVars.cSingleSpace}";
								txt_contact_last_name.Text = Convert.ToString(ado_ContactInfo["contact_last_name"]).Trim();
							}
						}
						txt_contact_last_name.Enabled = false;

						// SUFFIX
						cbo_contact_suffix.Text = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_suffix"]))
						{
							if (Convert.ToString(ado_ContactInfo["contact_suffix"]).Trim() != modGlobalVars.cEmptyString)
							{
								sContactName = $"{sContactName}{Convert.ToString(ado_ContactInfo["contact_suffix"]).Trim()}";
								cbo_contact_suffix.Text = Convert.ToString(ado_ContactInfo["contact_suffix"]).Trim();
							}
						}
						cbo_contact_suffix.Enabled = false;

						// CONTACT TITLE
						cbo_contact_title.Text = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_title"]))
						{
							if (Convert.ToString(ado_ContactInfo["contact_title"]).Trim() != modGlobalVars.cEmptyString)
							{
								cbo_contact_title.Text = Convert.ToString(ado_ContactInfo["contact_title"]);
								sContactNameWTitle = $"{sContactName.Trim()} [{Convert.ToString(ado_ContactInfo["contact_title"]).Trim()}]";

							}
						}

						cbo_contact_title.Enabled = false;

						chk_contact_hide_flag.CheckState = CheckState.Unchecked;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_hide_flag"]))
						{
							if (Convert.ToString(ado_ContactInfo["contact_hide_flag"]).Trim().ToUpper() == "Y")
							{
								chk_contact_hide_flag.CheckState = CheckState.Checked;
							}
						}
						chk_contact_hide_flag.Enabled = false;

						chk_contact_active_flag.CheckState = CheckState.Unchecked;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_active_flag"]))
						{
							if (Convert.ToString(ado_ContactInfo["contact_active_flag"]).Trim().ToUpper() == "Y")
							{
								chk_contact_active_flag.CheckState = CheckState.Checked;
							}
						}
						chk_contact_active_flag.Enabled = false;

						chk_contact_research_flag.CheckState = CheckState.Unchecked;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_research_flag"]))
						{
							if (Convert.ToString(ado_ContactInfo["contact_research_flag"]).Trim().ToUpper() == "Y")
							{
								chk_contact_research_flag.CheckState = CheckState.Checked;
							}
						}
						chk_contact_research_flag.Enabled = false;

						// 03/04/2014 - By David D. Cruger
						// If EMail Is On Do Not Send List
						// Add ToolTip To the Mailing Label Button
						ToolTipMain.SetToolTip(cmd_EditMailList, "");
						txt_contact_email_address.Enabled = false;
						txt_market_note[5].Enabled = false;
						txt_contact_email_address.Tag = "";

						// moved down from aboove the tag clear, so it doesnt mess up the blank email addresses
						//MSW 6/6/16
						txt_contact_email_address.Text = modGlobalVars.cEmptyString;

						modFillCompConControls.Fill_EMail_Notice_List(cmbContactEMail, "Contact", true);
						ToolTipMain.SetToolTip(cmbContactEMail, "");

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_email_address"]))
						{
							txt_contact_email_address.Text = Convert.ToString(ado_ContactInfo["contact_email_address"]).Trim();
							txt_contact_email_address.Tag = txt_contact_email_address.Text;
							txt_contact_email_address.Enabled = true;
							if (modCommon.DLookUp("DNSEMail_Id", "Do_Not_Send_EMail", $"DNSEMail_Address='{txt_contact_email_address.Text}'") != "")
							{
								ToolTipMain.SetToolTip(cmd_EditMailList, "This EMail Address Is Currently On The JETNET Do Not Send List");
							}
							if (modCommon.IsContactOnDoNotSendJNiQSurveyList(nReference_CompanyID, in_ContactID))
							{
								modFillCompConControls.Fill_EMail_Notice_List(cmbContactEMail, "Contact", false);
								ToolTipMain.SetToolTip(cmbContactEMail, "This EMail Address Is Currently On The Do Not Send JNiQ Survey List");
							}
						}

						// ADDED IN MSW - 12/19/19 to make this visible without clicking into contact
						txt_market_note[5].Text = "";
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_research_email_address"]))
						{
							txt_market_note[5].Text = Convert.ToString(ado_ContactInfo["contact_research_email_address"]).Trim();
						}


						// DESCRIPTION
						txt_contact_description.Text = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_description"]))
						{
							txt_contact_description.Text = Convert.ToString(ado_ContactInfo["contact_description"]).Trim();
						}
						txt_contact_description.Enabled = false;

						lst_aircraft_contact.AddItem(sContactName.Trim());

						if (($"{Convert.ToString(ado_ContactInfo["contact_title"])} ").Trim() != "")
						{
							lst_aircraft_contact.AddItem(($"{Convert.ToString(ado_ContactInfo["contact_title"])} ").Trim());
						}

						if (txt_contact_email_address.Text.Trim() != modGlobalVars.cEmptyString)
						{
							lst_aircraft_contact.AddItem($"EMail: {txt_contact_email_address.Text.Trim()}");
						}

						// GET PHONE NUMBERS FOR CONTACT
						fill_phone_contact_grid(in_ContactID);

						if (($"{Convert.ToString(ado_ContactInfo["contact_description"])} ").Trim() != "")
						{
							lst_aircraft_contact.AddItem("");
							lst_aircraft_contact.AddItem($"Notes: {($"{Convert.ToString(ado_ContactInfo["contact_description"])} ").Trim()}");
						}

						//------------------------------------------------
						// 11/11/2015 - By David D. Cruger
						// Show Info Form With All Contact Information
						// If Form Is Already open

						strText = "";
						int tempForEndVar = lst_aircraft_contact.Items.Count - 1;
						for (int lCnt1 = 0; lCnt1 <= tempForEndVar; lCnt1++)
						{
							strText = $"{strText}{($"{lst_aircraft_contact.GetListItem(lCnt1)} ").Trim()}{Environment.NewLine}";
						}

						if (strText != "")
						{

							if (frm_Info.DefInstance != null && frm_info2.DefInstance != null)
							{

								if (frm_Info.DefInstance.Visible && frm_info2.DefInstance.Visible)
								{
									// then do nothing
								}
								else if (frm_Info.DefInstance.Visible && !frm_info2.DefInstance.Visible)
								{ 
									frm_info2.DefInstance.SetFormCaption("Contact Information");
									frm_info2.DefInstance.SetText(strText);
									frm_info2.DefInstance.SetTextEnabled(false);
									frm_info2.DefInstance.Show();
								}
								else if (!frm_Info.DefInstance.Visible && frm_info2.DefInstance.Visible)
								{ 
									frm_Info.DefInstance.SetFormCaption("Contact Information");
									frm_Info.DefInstance.SetText(strText);
									frm_Info.DefInstance.SetTextEnabled(false);
									frm_Info.DefInstance.Show();

								}

							}
							else if ((frm_Info.DefInstance == null) && frm_info2.DefInstance != null)
							{ 
								if (frm_info2.DefInstance.Visible)
								{

									frm_info2.DefInstance.SetFormCaption("Contact Information");
									frm_info2.DefInstance.SetText(strText);
									frm_info2.DefInstance.SetTextEnabled(false);
									frm_info2.DefInstance.Show();
								}
							}
							else if (frm_Info.DefInstance != null && (frm_info2.DefInstance == null))
							{ 
								if (frm_info2.DefInstance.Visible)
								{

									frm_info2.DefInstance.SetFormCaption("Contact Information");
									frm_info2.DefInstance.SetText(strText);
									frm_info2.DefInstance.SetTextEnabled(false);
									frm_info2.DefInstance.Show();
								}
							}

						} // If strText <> "" Then

						// DETERMINE IF CONTACT FIELDS REQUIRE CONFIRMATION

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_name_confirm_date"]))
						{
							tempconfirmdate = DateTime.Parse(Convert.ToString(ado_ContactInfo["contact_name_confirm_date"])).AddDays(modAdminCommon.gbl_ConfirmDays);
						}
						else
						{
							tempconfirmdate = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
						}

						if (DateTime.Parse(DateTimeHelper.ToString(tempconfirmdate)) <= DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)) && nReference_CompanyJID == 0)
						{
							txt_contact_first_name.BackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
							txt_contact_last_name.BackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
							txt_contact_middle_initial.BackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
							cbo_contact_sirname.BackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
							cbo_contact_suffix.BackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
							lbl_comp[CONTACT_NAME_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
						}
						else
						{
							txt_contact_first_name.BackColor = NORMAL_TXT_BACKCOLOR;
							txt_contact_last_name.BackColor = NORMAL_TXT_BACKCOLOR;
							txt_contact_middle_initial.BackColor = NORMAL_TXT_BACKCOLOR;
							cbo_contact_sirname.BackColor = NORMAL_TXT_BACKCOLOR;
							cbo_contact_suffix.BackColor = NORMAL_TXT_BACKCOLOR;
							lbl_comp[CONTACT_NAME_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
						}

						// CHECK CONTACT TITLE
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_title_confirm_date"]))
						{
							tempconfirmdate = DateTime.Parse(Convert.ToString(ado_ContactInfo["contact_title_confirm_date"])).AddDays(modAdminCommon.gbl_ConfirmDays);
						}
						else
						{
							tempconfirmdate = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
						}

						if (DateTime.Parse(DateTimeHelper.ToString(tempconfirmdate)) <= DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)) && nReference_CompanyJID == 0)
						{
							cbo_contact_title.BackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
							lbl_comp[CONTACT_TITLE_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
						}
						else
						{
							cbo_contact_title.BackColor = NORMAL_TXT_BACKCOLOR;
							lbl_comp[CONTACT_TITLE_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
						}

						// CHECK CONTACT EMAIL
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_email_confirm_date"]))
						{
							tempconfirmdate = DateTime.Parse(Convert.ToString(ado_ContactInfo["contact_email_confirm_date"])).AddDays(modAdminCommon.gbl_ConfirmDays);
						}
						else
						{
							tempconfirmdate = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
						}

						if (DateTime.Parse(DateTimeHelper.ToString(tempconfirmdate)) <= DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)) && nReference_CompanyJID == 0)
						{
							txt_contact_email_address.BackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
							lbl_comp[CONTACT_EMAIL_ADDRESS_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
						}
						else
						{
							txt_contact_email_address.BackColor = NORMAL_TXT_BACKCOLOR;
							lbl_comp[CONTACT_EMAIL_ADDRESS_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
						}

						// clean up verified fields on each selection
						sVerifiedContactFields = modGlobalVars.cEmptyString;

						if (sContactName.Trim() != modGlobalVars.cEmptyString)
						{
							result = sContactName.Trim();
						}
						else if (sContactNameWTitle.Trim() != modGlobalVars.cEmptyString)
						{ 
							result = sContactNameWTitle.Trim();
						}

						//------------------------------------------------------------------------------
						// 03/25/2009 - By David D. Cruger - Added
						// If No EMail Address or Historical Record Then Disable The Company/Contact
						// EMail Notification Button
						//------------------------------------------------------------------------------
						cmbContactEMail.Enabled = false;
						cmbContactEMail.Text = cmbContactEMail.GetListItem(0);
						cmbContactEMail.Enabled = true;
						if (($"{txt_contact_email_address.Text} ").Trim() == "" || (nReference_CompanyJID > 0) || (chk_company_flag[iCompActiveFlag].CheckState == CheckState.Checked))
						{
							cmbContactEMail.Enabled = false;
						}

						// added MSW - 4/16/21
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_iq_email_address"]))
						{
							txt_market_note[7].Text = Convert.ToString(ado_ContactInfo["contact_iq_email_address"]);
						}
						else
						{
							txt_market_note[7].Text = "";
						}


						// added MSW - 4/16/21
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(ado_ContactInfo["contact_iq_status"]))
						{
							if (Convert.ToString(ado_ContactInfo["contact_iq_status"]).Trim() == "Y")
							{
								chk_array[5].CheckState = CheckState.Checked;
							}
							else
							{
								chk_array[5].CheckState = CheckState.Unchecked;
							}
						}
						else
						{
							chk_array[5].CheckState = CheckState.Unchecked;
						}


					} // If Not (ado_ContactInfo.BOF And ado_ContactInfo.EOF) Then

					ado_ContactInfo.Close();

					ado_ContactInfo = null;

				} // If in_ContactID > 0 Then

				if (result.Trim() != modGlobalVars.cEmptyString)
				{
					pnl_company_contact_details.Visible = true;
					pnl_company_contact_details.Refresh();
				}

				txt_market_note[5].Enabled = true;

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"get_selected_contact_Error: {Information.Err().Number.ToString()} {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				pnl_company_contact_details.Visible = false;
				search_off();
			}

			return result;
		}

		private void display_related_grid_selection()
		{

			int nClickedColumn = 0;
			int tmpContactId = 0;

			try
			{

				lst_related_company.Items.Clear();
				//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				modCommon.Build_Company_NameAddress(lst_related_company, grd_company_relationships.BandData(grd_company_relationships.CurrentRowIndex), nReference_CompanyJID);
				lst_related_company.Visible = true;

				lst_related_contact.Items.Clear();
				lst_related_contact.Visible = false;

				nClickedColumn = grd_company_relationships.CurrentColumnIndex;
				grd_company_relationships.CurrentColumnIndex = 7;
				if (grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].FormattedValue.ToString().Trim() != "")
				{
					if (Convert.ToInt32(Conversion.Val(grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].FormattedValue.ToString().Trim())) > 0)
					{
						tmpContactId = Convert.ToInt32(Conversion.Val(grd_company_relationships[grd_company_relationships.CurrentRowIndex, grd_company_relationships.CurrentColumnIndex].FormattedValue.ToString().Trim()));
						modCommon.Build_Contact_Info(lst_related_contact, tmpContactId, nReference_CompanyJID, false);
						lst_related_contact.Visible = true;
					}
				}
				grd_company_relationships.CurrentColumnIndex = nClickedColumn;

				cmd_relationship_buttons[1].Visible = true;
				cmd_relationship_buttons[0].Visible = true;

				if (nReference_CompanyJID == 0)
				{ //disallow historicals aey 8/16/04

					// 06/10/2008 - By David D. Cruger
					// Per Lucia Fronteria The Confirm Company
					cmd_relationship_buttons[2].Visible = false;

					// only show confirm button if contact is visible
					if (lst_related_contact.Visible)
					{
						cmd_relationship_buttons[3].Visible = true;
					}

				}

				//UPGRADE_ISSUE: (2064) MSHierarchicalFlexGridLib.MSHFlexGrid property grd_company_relationships.BandData was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				modCompany.fill_related_company_contact_list(grd_company_relationships.BandData(grd_company_relationships.CurrentRowIndex), nReference_CompanyJID, tmpContactId, cbo_related_company_contact);

				if (grd_company_relationships.Visible)
				{
					cmd_relationship_buttons[4].Visible = true; // MSW - 4
				}
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"display_related_grid_selection_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}
		}

		private void display_historical_grid_selection()
		{

			// Function used to Select company history records

			ADORecordSetHelper rstRec1 = new ADORecordSetHelper(); // Journal Record
			ADORecordSetHelper rstRec2 = new ADORecordSetHelper(); // History Record Aircraft or Yacht

			string strQuery1 = "";
			string strQuery2 = "";

			int lACId = 0;
			int lCompId = 0;
			int lYachtId = 0;
			int lJournId = 0;

			try
			{

				txt_historical_ac_description.Text = "";

				// Read The Journal Record First
				lJournId = grd_company_history.get_RowData(grd_company_history.CurrentRowIndex);
				lCompId = nReference_CompanyID;

				if (lJournId > 0)
				{

					strQuery1 = $"SELECT * FROM Journal WITH (NOLOCK) WHERE (journ_id = {lJournId.ToString()}) ";
					rstRec1.Open(strQuery1, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

					if (!rstRec1.BOF && !rstRec1.EOF)
					{

						lACId = Convert.ToInt32(rstRec1["journ_ac_id"]);
						lYachtId = Convert.ToInt32(rstRec1["journ_yacht_id"]);

						if (lACId > 0)
						{

							strQuery2 = "SELECT DISTINCT amod_make_name, amod_model_name, ac_ser_no_full, actype_name ";
							strQuery2 = $"{strQuery2}FROM Aircraft_Model WITH (NOLOCK) ";
							strQuery2 = $"{strQuery2}INNER JOIN Aircraft WITH (NOLOCK) ON amod_id = ac_amod_id ";
							strQuery2 = $"{strQuery2}INNER JOIN Aircraft_Reference WITH (NOLOCK) ON ac_id = cref_ac_id AND ac_journ_id = cref_journ_id ";
							strQuery2 = $"{strQuery2}INNER JOIN Aircraft_Contact_Type WITH (NOLOCK) ON cref_contact_type = actype_code ";
							strQuery2 = $"{strQuery2}WHERE (cref_comp_id = {lCompId.ToString()}) ";
							strQuery2 = $"{strQuery2}AND (ac_journ_id = {lJournId.ToString()}) ";

							rstRec2.Open(strQuery2, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

							if (!rstRec2.BOF && !rstRec2.EOF)
							{

								txt_historical_ac_description.Text = $"{($"{Convert.ToString(rstRec2["actype_name"])} ").Trim()} (" +
								                                     $"{($"{Convert.ToString(rstRec2["amod_make_name"])} ").Trim()} / " +
								                                     $"{($"{Convert.ToString(rstRec2["amod_model_name"])} ").Trim()} " +
								                                     $"{($"{Convert.ToString(rstRec2["ac_ser_no_full"])} ").Trim()})";

							} // If rstRec2.BOF = False And rstRec2.EOF = False Then

							rstRec2.Close();

						} // If lACId > 0 Then

						if (lYachtId > 0)
						{

							strQuery2 = "SELECT DISTINCT ym_brand_name, ym_model_name, yt_yacht_name, yct_name ";
							strQuery2 = $"{strQuery2}FROM Yacht_Model WITH (NOLOCK) ";
							strQuery2 = $"{strQuery2}INNER JOIN Yacht WITH (NOLOCK) ON yt_model_id = ym_model_id ";
							strQuery2 = $"{strQuery2}INNER JOIN Yacht_Reference WITH (NOLOCK) ON yr_yt_id = yt_id AND yr_journ_id = yt_journ_id ";
							strQuery2 = $"{strQuery2}INNER JOIN Yacht_Contact_Type WITH (NOLOCK) ON yct_code = yr_contact_type ";
							strQuery2 = $"{strQuery2}WHERE (yr_comp_id = {lCompId.ToString()}) ";
							strQuery2 = $"{strQuery2}AND (yt_journ_id = {lJournId.ToString()}) ";

							rstRec2.Open(strQuery2, modAdminCommon.LOCAL_ADO_DB, UpgradeHelpers.DB.LockTypeEnum.LockReadOnly);

							if (!rstRec2.BOF && !rstRec2.EOF)
							{

								txt_historical_ac_description.Text = $"{($"{Convert.ToString(rstRec2["yct_name"])} ").Trim()} (" +
								                                     $"{($"{Convert.ToString(rstRec2["ym_brand_name"])} ").Trim()} / " +
								                                     $"{($"{Convert.ToString(rstRec2["ym_model_name"])} ").Trim()} " +
								                                     $"{($"{Convert.ToString(rstRec2["yt_yacht_name"])} ").Trim()})";

							} // If rstRec2.BOF = False And rstRec2.EOF = False Then

							rstRec2.Close();

						} // If lYachtId > 0 Then

						grd_company_history.CurrentColumnIndex = 1;

					} // If rstRec1.BOF = False And rstRec1.EOF = False Then

					rstRec1.Close();

				} // If lJournId > 0 Then

				rstRec2 = null;
				rstRec1 = null;

				txt_historical_ac_description.Text = $"{txt_historical_ac_description.Text} - {grd_company_history[grd_company_history.CurrentRowIndex, grd_company_history.CurrentColumnIndex].FormattedValue.ToString().Trim()}";
				lbl_comp[JOURNAL_ID_INDEX].Text = grd_company_history.get_RowData(grd_company_history.CurrentRowIndex).ToString();

				lbl_comp[HISTORY_JOURNID_INDEX].Visible = true;
				lbl_comp[JOURNAL_ID_INDEX].Visible = true;

				grd_company_history.CurrentColumnIndex = 0;
				grd_company_history.ColSel = grd_company_history.ColumnsCount - 1;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"display_historical_grid_selection_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		} // display_historical_grid_selection

		public void display_company(ADORecordSetHelper in_CompanyRS)
		{

			// Function used to display comapny fields to screen

			System.DateTime tempconfirmdate = DateTime.FromOADate(0);
			string tempaccount = "";
			string tmpVar = "";
			string Query = "";
			string strQuery1 = "";
			int i = 0;

			string[] State_Values = null;
			string strInactive = "";
			string strLineAccess = "";
			string strAPortId = "";
			string strAPortName = "";
			string temp_abbrev = "";

			try
			{

				txt_comp_id.Enabled = false;

				txt_comp_id.Text = modGlobalVars.cEmptyString;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_id"]))
				{
					if (Convert.ToInt32(in_CompanyRS["comp_id"]) > 0)
					{
						txt_comp_id.Text = Convert.ToString(in_CompanyRS["comp_id"]).Trim();
						enter_company_info.s_comp_id = Convert.ToInt32(in_CompanyRS["comp_id"]);
					}
				}

				txt_comp_name.Text = modGlobalVars.cEmptyString;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_name"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_name"]).Trim() != modGlobalVars.cEmptyString)
					{
						txt_comp_name.Text = Convert.ToString(in_CompanyRS["comp_name"]).Trim();
						enter_company_info.s_comp_name = Convert.ToString(in_CompanyRS["comp_name"]).Trim();
					}
				}

				cbo_comp_name_alt_type.SelectedIndex = -1;
				cbo_comp_name_alt_type.Tag = "0";
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_name_alt_type"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_name_alt_type"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_name_alt_type = Convert.ToString(in_CompanyRS["comp_name_alt_type"]).Trim();
						int tempForEndVar = cbo_comp_name_alt_type.Items.Count - 1;
						for (i = 0; i <= tempForEndVar; i++)
						{
							if (Convert.ToString(in_CompanyRS["comp_name_alt_type"]).Trim().ToLower() == cbo_comp_name_alt_type.GetListItem(i).Trim().ToLower())
							{
								cbo_comp_name_alt_type.SelectedIndex = i;
								cbo_comp_name_alt_type.Tag = cbo_comp_name_alt_type.SelectedIndex.ToString();
								break;
							}
						}
					}
				}

				txt_comp_name_alt.Text = modGlobalVars.cEmptyString;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_name_alt"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_name_alt"]).Trim() != modGlobalVars.cEmptyString)
					{
						txt_comp_name_alt.Text = Convert.ToString(in_CompanyRS["comp_name_alt"]).Trim();
						enter_company_info.s_comp_name_alt = Convert.ToString(in_CompanyRS["comp_name_alt"]).Trim();
					}
				}

				txt_comp_address1.Text = "";
				txt_comp_address1.Tag = "";
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_address1"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_address1"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_address1 = Convert.ToString(in_CompanyRS["comp_address1"]).Trim();
						txt_comp_address1.Text = Convert.ToString(in_CompanyRS["comp_address1"]).Trim();
						txt_comp_address1.Tag = txt_comp_address1.Text;
					}
				}

				txt_comp_address2.Text = "";
				txt_comp_address2.Tag = "";
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_address2"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_address2"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_address2 = Convert.ToString(in_CompanyRS["comp_address2"]).Trim();
						txt_comp_address2.Text = Convert.ToString(in_CompanyRS["comp_address2"]).Trim();
						txt_comp_address2.Tag = txt_comp_address2.Text;
					}
				}

				txt_comp_city.Text = "";
				txt_comp_city.Tag = "";
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_city"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_city"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_city = Convert.ToString(in_CompanyRS["comp_city"]).Trim();
						txt_comp_city.Text = Convert.ToString(in_CompanyRS["comp_city"]).Trim();
						txt_comp_city.Tag = txt_comp_city.Text;
					}
				}

				//move to the correct country.
				cbo_comp_country.SelectedIndex = -1;
				cbo_comp_country.Tag = "-1";
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_country"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_country"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_country = Convert.ToString(in_CompanyRS["comp_country"]).Trim();
						int tempForEndVar2 = cbo_comp_country.Items.Count - 1;
						for (i = 0; i <= tempForEndVar2; i++)
						{
							if (Convert.ToString(in_CompanyRS["comp_country"]).Trim().ToLower() == cbo_comp_country.GetListItem(i).Trim().ToLower())
							{
								cbo_comp_country.SelectedIndex = i;
								cbo_comp_country.Tag = cbo_comp_country.SelectedIndex.ToString();
								break;
							}
						}
					}
				}

				// move to correct state
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_state"]))
				{

					cbo_comp_state.SelectedIndex = -1;

					if (Convert.ToString(in_CompanyRS["comp_state"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_state = Convert.ToString(in_CompanyRS["comp_state"]).Trim();

						int tempForEndVar3 = cbo_comp_state.Items.Count - 1;
						for (i = 0; i <= tempForEndVar3; i++)
						{
							if (cbo_comp_state.GetListItem(i) != modGlobalVars.cEmptyString)
							{
								State_Values = cbo_comp_state.GetListItem(i).Split(',');

								if (State_Values[0].Trim() == "NL")
								{
									cbo_comp_state.Tag = Convert.ToString(cbo_comp_state.Tag);
								}

								if (State_Values[0].Trim().ToLower() == Convert.ToString(in_CompanyRS["comp_state"]).Trim().ToLower() && State_Values[1].Trim().ToLower() == cbo_comp_country.Text.Trim().ToLower())
								{

									cbo_comp_state.SelectedIndex = i;
									cbo_comp_state.Tag = cbo_comp_state.SelectedIndex.ToString();
									lbl_comp[0].Tag = cbo_comp_state.Text;
									break;

								}
							}
						}

					}
					else
					{

						int tempForEndVar4 = cbo_comp_state.Items.Count - 1;
						for (i = 0; i <= tempForEndVar4; i++)
						{
							if (cbo_comp_state.GetListItem(i) != modGlobalVars.cEmptyString)
							{
								if (cbo_comp_state.GetListItem(i).Substring(0, Math.Min(cbo_comp_state.GetListItem(i).IndexOf(", "), cbo_comp_state.GetListItem(i).Length)).Trim().ToLower() == Convert.ToString(in_CompanyRS["comp_state"]).Trim().ToLower())
								{
									cbo_comp_state.SelectedIndex = i;
									cbo_comp_state.Tag = cbo_comp_state.SelectedIndex.ToString();
									break;
								}
							}
						}

					} // Trim$(in_CompanyRS("comp_state").Value) <> cEmptyString

				}
				else
				{
					cbo_comp_state.SelectedIndex = -1;
					lbl_comp[0].Tag = "";
					cbo_comp_state.Tag = "-1";
				} // not isnull(in_CompanyRS("comp_state"))

				// move to timezone
				cbo_comp_timezone.SelectedIndex = -1;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_timezone"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_timezone"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_timezone = Convert.ToString(in_CompanyRS["comp_timezone"]).Trim();
						int tempForEndVar5 = cbo_comp_timezone.Items.Count - 1;
						for (i = 0; i <= tempForEndVar5; i++)
						{
							if (cbo_comp_timezone.GetListItem(i).Trim().ToLower() == Convert.ToString(in_CompanyRS["comp_timezone"]).Trim().ToLower())
							{
								cbo_comp_timezone.SelectedIndex = i;
								break;
							}
						}
					}
				}

				txt_comp_zip_code.Text = modGlobalVars.cEmptyString;
				txt_comp_zip_code.Tag = modGlobalVars.cEmptyString;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_zip_code"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_zip_code"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_zip_code = Convert.ToString(in_CompanyRS["comp_zip_code"]).Trim();
						txt_comp_zip_code.Text = Convert.ToString(in_CompanyRS["comp_zip_code"]).Trim();
						txt_comp_zip_code.Tag = txt_comp_zip_code.Text;
					}
				}

				txt_comp_web_address.Text = modGlobalVars.cEmptyString;
				txt_comp_web_address.Tag = "";
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_web_address"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_web_address"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_web_address = Convert.ToString(in_CompanyRS["comp_web_address"]).Trim();
						txt_comp_web_address.Text = Convert.ToString(in_CompanyRS["comp_web_address"]).Trim();
						txt_comp_web_address.Tag = txt_comp_web_address.Text; // Save So We Can Check To See If it Changed
					}
				}

				// 03/04/2014 - By David D. Cruger
				chkCompDoNotSendEMail.Enabled = false;
				chkCompDoNotSendEMail.CheckState = CheckState.Unchecked;
				ToolTipMain.SetToolTip(txt_comp_email_address, "");

				txt_comp_email_address.Text = modGlobalVars.cEmptyString;
				txt_comp_email_address.Tag = "";

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_email_address"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_email_address"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_email_address = Convert.ToString(in_CompanyRS["comp_email_address"]).Trim();
						txt_comp_email_address.Text = Convert.ToString(in_CompanyRS["comp_email_address"]).Trim();
						txt_comp_email_address.Tag = txt_comp_email_address.Text; // Save So We Can Check If Changed Later

						// 05/08/2014 - By David D. Cruger
						if (txt_comp_email_address.Text != "")
						{
							if (modCommon.DLookUp("DNSEMail_Id", "Do_Not_Send_EMail", $"DNSEMail_Address='{txt_comp_email_address.Text}'") != "")
							{
								chkCompDoNotSendEMail.CheckState = CheckState.Checked;
								ToolTipMain.SetToolTip(txt_comp_email_address, "This EMail Address Is Currently On The JETNET Do Not Send List");
							}
						}

					}
				}
				chkCompDoNotSendEMail.Enabled = true;

				txt_comp_description.Text = modGlobalVars.cEmptyString;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_description"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_description"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_description = Convert.ToString(in_CompanyRS["comp_description"]).Trim();
						txt_comp_description.Text = Convert.ToString(in_CompanyRS["comp_description"]).Trim();
					}
				}


				// added in MSW - 6/9/22
				txt_company_field[4].Text = modGlobalVars.cEmptyString;
				lbl_comp[116].Text = "";
				lbl_comp[116].Visible = false;
				txt_company_field[4].Tag = "";
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["ticker_symbol"]))
				{
					if (Convert.ToString(in_CompanyRS["ticker_symbol"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_ticker_symbol = Convert.ToString(in_CompanyRS["ticker_symbol"]).Trim();
						txt_company_field[4].Text = Convert.ToString(in_CompanyRS["ticker_symbol"]).Trim();
						txt_company_field[4].Tag = "MAIN";

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(in_CompanyRS["ticker_name"]))
						{
							if (Convert.ToString(in_CompanyRS["ticker_name"]).Trim() != modGlobalVars.cEmptyString)
							{
								lbl_comp[116].Text = Convert.ToString(in_CompanyRS["ticker_name"]);
								lbl_comp[116].Visible = true;
							}
						}
					}
				}

				// added in MSw - 6/17/22
				txt_company_field[4].Enabled = true;
				if (txt_company_field[4].Text.Trim() == "")
				{
					txt_company_field[4].Text = modCommon.DLookUp("comp_ticker_symbol", "view_company_ticker", $"(tickercompid <> comp_id and tickercompid = '{nReference_CompanyID.ToString()}')");
					// if we find it, then un enable it
					if (txt_company_field[4].Text.Trim() != "")
					{
						txt_company_field[4].Enabled = false;
						txt_company_field[4].Tag = "SUB";
						lbl_comp[116].Text = modCommon.DLookUp("Company_Ticker.comp_ticker_name", "view_company_ticker   inner join Company_Ticker with (NOLOCK) on Company_Ticker.comp_ticker_jetnet_comp_id = view_company_ticker.comp_id ", $"(tickercompid <> comp_id and tickercompid = '{nReference_CompanyID.ToString()}')");
						lbl_comp[116].Visible = true;
					}
				}


				//ADDED MSW - 11/14/19
				txt_market_note[4].Text = modGlobalVars.cEmptyString;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_marketing_notes"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_marketing_notes"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_marketing_notes = Convert.ToString(in_CompanyRS["comp_marketing_notes"]).Trim();
						txt_market_note[4].Text = Convert.ToString(in_CompanyRS["comp_marketing_notes"]).Trim();
					}
				}

				txt_comp_sic_code.Text = modGlobalVars.cEmptyString;
				txt_comp_sic_code.Tag = "";
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_sic_code"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_sic_code"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_sic_code = Convert.ToString(in_CompanyRS["comp_sic_code"]).Trim();
						txt_comp_sic_code.Text = Convert.ToString(in_CompanyRS["comp_sic_code"]).Trim();
						txt_comp_sic_code.Tag = txt_comp_sic_code.Text;
					}
				}

				txt_comp_dunnandbrad.Text = modGlobalVars.cEmptyString;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_dunnandbrad"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_dunnandbrad"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_dunnandbrad = Convert.ToString(in_CompanyRS["comp_dunnandbrad"]).Trim();
						txt_comp_dunnandbrad.Text = Convert.ToString(in_CompanyRS["comp_dunnandbrad"]).Trim();
					}
				}

				// move to account type
				cbo_comp_account[COMP_ACCOUNT_TYPE].SelectedIndex = -1;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_account_type"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_account_type"]).Trim().ToLower() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_account_type = Convert.ToString(in_CompanyRS["comp_account_type"]).Trim();

						switch(Convert.ToString(in_CompanyRS["comp_account_type"]).Trim().ToLower())
						{
							case "eu" : 
								tempaccount = "End User"; 
								break;
							case "db" : 
								tempaccount = "Dealer Broker"; 
								break;
							case "fo" : 
								tempaccount = "Fractional Owner"; 
								break;
							case "ui" : 
								tempaccount = "Unidentified"; 
								break;
							case "na" : 
								tempaccount = "Non-Aviation"; 
								break;
							default:
								tempaccount = modGlobalVars.cEmptyString; 
								break;
						}

						int tempForEndVar6 = cbo_comp_account[COMP_ACCOUNT_TYPE].Items.Count - 1;
						for (i = 0; i <= tempForEndVar6; i++)
						{
							if (cbo_comp_account[COMP_ACCOUNT_TYPE].GetListItem(i).Trim().ToLower() == tempaccount.Trim().ToLower())
							{
								cbo_comp_account[COMP_ACCOUNT_TYPE].SelectedIndex = i;
								break;
							}
						}

					}

				}

				//move to account rep
				cbo_comp_account[COMP_ACCOUNT_REP].SelectedIndex = -1;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_account_id"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_account_id"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_account_id = Convert.ToString(in_CompanyRS["comp_account_id"]).Trim();
						int tempForEndVar7 = cbo_comp_account[COMP_ACCOUNT_REP].Items.Count - 1;
						for (i = 0; i <= tempForEndVar7; i++)
						{
							if (cbo_comp_account[COMP_ACCOUNT_REP].GetListItem(i).Trim().ToLower() == Convert.ToString(in_CompanyRS["comp_account_id"]).Trim().ToLower())
							{
								cbo_comp_account[COMP_ACCOUNT_REP].SelectedIndex = i;
								break;
							}
						}
					}
				}

				// 02/22/2018 - By David D. Cruger - Added
				strLineAccess = ($"{Convert.ToString(in_CompanyRS["comp_line_access_code"])} ").Trim();
				enter_company_info.s_comp_line_access_code = strLineAccess;

				switch(strLineAccess)
				{
					case "" :  // Blank 
						cbo_comp_account[COMP_LINE_ACCESS].SelectedIndex = 0; 
						break;
					case "7" :  // Long Distance No Caller Id 
						cbo_comp_account[COMP_LINE_ACCESS].SelectedIndex = 1; 
						break;
					case "5" :  // Long Distance With Caller Id 
						cbo_comp_account[COMP_LINE_ACCESS].SelectedIndex = 2; 
						break;
				} // Case strLineAccess

				strInactive = modCommon.DLookUp("user_password", "[User]", $"([user_id] = '{($"{Convert.ToString(in_CompanyRS["COMP_MARKETING_REP"])} ").Trim()}')").ToLower();

				//----------------------------------------------------------
				// 04/04/2017 - By David D. Cruger
				// If Not Inactive Then ONLY Load Active Account Reps
				if (strInactive != "inactive")
				{
					modFillCompConControls.Fill_Company_Marketing_Rep_ComboBox(cbo_comp_account[COMP_MARKETING_REP], true);
				}
				else
				{
					//----------------------------------------------------------
					// If Inactive Then Load ALL Account Reps
					modFillCompConControls.Fill_Company_Marketing_Rep_ComboBox(cbo_comp_account[COMP_MARKETING_REP], false);
				}

				modCommon.Set_Company_Marketing_Rep_Combo_Box(cbo_comp_account[COMP_MARKETING_REP], ($"{Convert.ToString(in_CompanyRS["COMP_MARKETING_REP"])} ").Trim());

				// show callback date
				cal_comp_callback_date.SetDate(DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)));
				//  txt_comp_account_callback_date.Text = FormatDateTime(Now(), vbShortDate)
				lbl_comp[COMP_CALLBACK_DATE_INDEX].Text = DateTime.Now.ToString("d");

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_account_callback_date"]))
				{
					if (Information.IsDate(in_CompanyRS["comp_account_callback_date"]))
					{
						cal_comp_callback_date.SetDate(DateTime.Parse(Convert.ToString(in_CompanyRS["comp_account_callback_date"])));

						lbl_comp[COMP_CALLBACK_DATE_INDEX].Text = Convert.ToDateTime(in_CompanyRS["comp_account_callback_date"]).ToString("d");
						enter_company_info.s_comp_account_callback_date = lbl_comp[COMP_CALLBACK_DATE_INDEX].Text.Trim();
					}
				}

				// secondary callback date
				txt_company_field[0].Text = modGlobalVars.cEmptyString;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_secondary_callback"]))
				{
					if (Information.IsDate(in_CompanyRS["comp_secondary_callback"]))
					{
						txt_company_field[0].Text = Convert.ToDateTime(in_CompanyRS["comp_secondary_callback"]).ToString("d");
						enter_company_info.s_comp_secondary_callback = txt_company_field[0].Text.Trim();
					}
				}

				// show abi callback date
				txt_company_field[1].Text = modGlobalVars.cEmptyString;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_abi_callback_date"]))
				{
					if (Information.IsDate(in_CompanyRS["comp_abi_callback_date"]))
					{
						txt_company_field[1].Text = Convert.ToDateTime(in_CompanyRS["comp_abi_callback_date"]).ToString("d");
						enter_company_info.s_comp_abi_callback_date = txt_company_field[1].Text.Trim();
					}
				}

				// 06/18/2019 - By David D. Cruger; Added
				txt_company_field[iCompAirportId].Text = "0";
				lbl_comp[113].Text = "{Airport Name}";
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_aport_id"]))
				{

					strAPortId = Convert.ToString(in_CompanyRS["comp_aport_id"]);
					strAPortName = modCommon.DLookUp("aport_name", "Airport", $"(aport_id = {strAPortId})");

					if (strAPortName != "")
					{
						txt_company_field[iCompAirportId].Text = strAPortId;
						enter_company_info.s_comp_aport_id = Convert.ToInt32(Double.Parse(strAPortId));
						lbl_comp[113].Text = strAPortName;
					}

				} // If IsNull(in_CompanyRS!comp_aport_id) = False Then

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_last_contact_date"]))
				{
					if (Information.IsDate(in_CompanyRS["comp_last_contact_date"]))
					{
						lbl_comp[LAST_CALLED_INDEX].Text = Convert.ToDateTime(in_CompanyRS["comp_last_contact_date"]).ToString("d");
						enter_company_info.s_comp_last_contact_date = lbl_comp[LAST_CALLED_INDEX].Text.Trim();
					}
					else
					{
						lbl_comp[LAST_CALLED_INDEX].Text = "None";
					}
				}
				else
				{
					lbl_comp[LAST_CALLED_INDEX].Text = "Never";
				}

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_abi_last_contact_date"]))
				{
					if (Information.IsDate(in_CompanyRS["comp_abi_last_contact_date"]))
					{
						lbl_comp[LAST_ABI_CALLED_INDEX].Text = Convert.ToDateTime(in_CompanyRS["comp_abi_last_contact_date"]).ToString("d");
						enter_company_info.s_comp_abi_last_contact_date = lbl_comp[LAST_ABI_CALLED_INDEX].Text.Trim();
					}
					else
					{
						lbl_comp[LAST_ABI_CALLED_INDEX].Text = "None";
					}
				}
				else
				{
					lbl_comp[LAST_ABI_CALLED_INDEX].Text = "Never";
				}

				//--------------- TBD REMOVE------------------------------
				lbl_comp[ENTRY_USER_DATE_INDEX_NEW].Text = "Entry User/Date: ";

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_ent_user_id"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_ent_user_id"]).Trim() != modGlobalVars.cEmptyString)
					{
						lbl_comp[ENTRY_USER_DATE_INDEX_NEW].Text = $"{lbl_comp[ENTRY_USER_DATE_INDEX_NEW].Text}{Convert.ToString(in_CompanyRS["comp_ent_user_id"]).Trim()}";
					}
				}

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_ent_date"]))
				{
					if (Information.IsDate(in_CompanyRS["comp_ent_date"]))
					{
						lbl_comp[ENTRY_USER_DATE_INDEX_NEW].Text = $"{lbl_comp[ENTRY_USER_DATE_INDEX_NEW].Text}  /  ";
						lbl_comp[ENTRY_USER_DATE_INDEX_NEW].Text = $"{lbl_comp[ENTRY_USER_DATE_INDEX_NEW].Text}{Convert.ToDateTime(in_CompanyRS["comp_ent_date"]).ToString()}";
					}
				}

				lbl_comp[UPDATE_USER_DATE_INDEX_NEW].Text = "Update User/Date: ";

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_upd_user_id"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_upd_user_id"]).Trim() != modGlobalVars.cEmptyString)
					{
						lbl_comp[UPDATE_USER_DATE_INDEX_NEW].Text = $"{lbl_comp[UPDATE_USER_DATE_INDEX_NEW].Text}{Convert.ToString(in_CompanyRS["comp_upd_user_id"]).Trim()}";
					}
				}

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_upd_date"]))
				{
					if (Information.IsDate(in_CompanyRS["comp_upd_date"]))
					{
						lbl_comp[UPDATE_USER_DATE_INDEX_NEW].Text = $"{lbl_comp[UPDATE_USER_DATE_INDEX_NEW].Text}  /  ";
						lbl_comp[UPDATE_USER_DATE_INDEX_NEW].Text = $"{lbl_comp[UPDATE_USER_DATE_INDEX_NEW].Text}{Convert.ToDateTime(in_CompanyRS["comp_upd_date"]).ToString()}";
					}
				}

				//--------------- TBD REMOVE------------------------------

				// reverse logic control is named " inactive " , checked if inactive, unchecked if active
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_active_flag"]))
				{

					sCompanyActiveFlag = Convert.ToString(in_CompanyRS["comp_active_flag"]).Trim().ToUpper();
					enter_company_info.s_comp_active_flag = Convert.ToString(in_CompanyRS["comp_active_flag"]).Trim().ToUpper();

					if (Convert.ToString(in_CompanyRS["comp_active_flag"]).Trim().ToUpper() == "Y")
					{
						chk_company_flag[iCompActiveFlag].CheckState = CheckState.Unchecked;
						chk_company_flag[iCompActiveFlag].Tag = "Y"; // set Y if its active
					}
					else
					{
						chk_company_flag[iCompActiveFlag].CheckState = CheckState.Checked;
						chk_company_flag[iCompActiveFlag].Tag = "N"; // set n if its inactive
					}
				}
				else
				{
					chk_company_flag[iCompActiveFlag].CheckState = CheckState.Checked;
					chk_company_flag[iCompActiveFlag].Tag = "N";
				}

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_hide_flag"]))
				{
					enter_company_info.s_comp_hide_flag = Convert.ToString(in_CompanyRS["comp_hide_flag"]).Trim().ToUpper();
					if (Convert.ToString(in_CompanyRS["comp_hide_flag"]).Trim().ToUpper() == "Y")
					{
						chk_company_flag[iCompHideFlag].CheckState = CheckState.Checked;
					}
					else
					{
						chk_company_flag[iCompHideFlag].CheckState = CheckState.Unchecked;
					}
				}
				else
				{
					chk_company_flag[iCompHideFlag].CheckState = CheckState.Unchecked;
				}

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_acpros_flag"]))
				{
					enter_company_info.s_comp_acpros_flag = Convert.ToString(in_CompanyRS["comp_acpros_flag"]).Trim().ToUpper();
					if (Convert.ToString(in_CompanyRS["comp_acpros_flag"]).Trim().ToUpper() == "Y")
					{
						chk_include_on_ac_pros.CheckState = CheckState.Checked;
					}
					else
					{
						chk_include_on_ac_pros.CheckState = CheckState.Unchecked;
					}
				}
				else
				{
					chk_include_on_ac_pros.CheckState = CheckState.Unchecked;
				}


				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_do_not_solicit"]))
				{
					enter_company_info.s_comp_do_not_solicit = Convert.ToString(in_CompanyRS["comp_do_not_solicit"]).Trim().ToUpper();
					if (Convert.ToString(in_CompanyRS["comp_do_not_solicit"]).Trim().ToUpper() == "Y")
					{
						chk_array[6].CheckState = CheckState.Checked;
					}
					else
					{
						chk_array[6].CheckState = CheckState.Unchecked;
					}
				}
				else
				{
					chk_array[6].CheckState = CheckState.Unchecked;
				}
				// 02/19/2016 - By David D. Cruger; Added
				chkCompContactAddressFlag.CheckState = CheckState.Unchecked;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_contact_address_flag"]))
				{
					if (($"{Convert.ToString(in_CompanyRS["comp_contact_address_flag"])} ").Trim() == "Y")
					{
						chkCompContactAddressFlag.CheckState = CheckState.Checked;
					}
				}

				//move to agency type
				cbo_comp_agency_type.SelectedIndex = -1;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_agency_type"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_agency_type"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_agency_type = Convert.ToString(in_CompanyRS["comp_agency_type"]).Trim().ToUpper();
						int tempForEndVar8 = cbo_comp_agency_type.Items.Count - 1;
						for (i = 0; i <= tempForEndVar8; i++)
						{
							if (cbo_comp_agency_type.GetListItem(i).Substring(0, Math.Min(1, cbo_comp_agency_type.GetListItem(i).Length)).Trim().ToLower() == Convert.ToString(in_CompanyRS["comp_agency_type"]).Trim().ToLower())
							{
								cbo_comp_agency_type.SelectedIndex = i;
								break;
							}
						}
					}
				}

				// show gov't subcode if agency type is 'g'
				if (cbo_comp_agency_type.GetListItem(i).Substring(0, Math.Min(1, cbo_comp_agency_type.GetListItem(i).Length)).Trim().ToLower() != "g")
				{
					cbo_comp_govsub_code.Visible = false;
					lbl_comp[GOVT_SUBCODE_INDEX].Text = "";
					lbl_comp[GOVT_SUBCODE_INDEX].Visible = false;
				}
				else
				{

					cbo_comp_govsub_code.SelectedIndex = -1;

					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(in_CompanyRS["comp_government_Id"]))
					{

						enter_company_info.s_comp_government_id = (short) Convert.ToInt32(in_CompanyRS["comp_government_Id"]);


						switch(Convert.ToInt32(in_CompanyRS["comp_government_Id"]))
						{
							case 1 : 
								tmpVar = "F"; 
								break;
							default:
								tmpVar = "O"; 
								 
								break;
						}

						int tempForEndVar9 = cbo_comp_govsub_code.Items.Count - 1;
						for (i = 0; i <= tempForEndVar9; i++)
						{
							if (cbo_comp_govsub_code.GetListItem(i).Substring(0, Math.Min(1, cbo_comp_govsub_code.GetListItem(i).Length)).Trim().ToLower() == tmpVar.Trim().ToLower())
							{
								cbo_comp_govsub_code.SelectedIndex = i;
								break;
							}
						}

					}

					cbo_comp_govsub_code.Visible = true;
					lbl_comp[GOVT_SUBCODE_INDEX].Text = "Gvt SubCode:";
					lbl_comp[GOVT_SUBCODE_INDEX].Visible = true;

				}

				// move to language
				cbo_comp_language.SelectedIndex = -1;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_language"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_language"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_language = Convert.ToString(in_CompanyRS["comp_language"]).Trim();
						int tempForEndVar10 = cbo_comp_language.Items.Count - 1;
						for (i = 0; i <= tempForEndVar10; i++)
						{
							if (cbo_comp_language.GetListItem(i).Trim().ToLower() == Convert.ToString(in_CompanyRS["comp_language"]).Trim().ToLower())
							{
								cbo_comp_language.SelectedIndex = i;
								break;
							}
						}
					}
				}

				// move to business type
				cbo_comp_business_type.SelectedIndex = -1;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_business_type"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_business_type"]).Trim() != modGlobalVars.cEmptyString)
					{
						enter_company_info.s_comp_business_type = Convert.ToString(in_CompanyRS["comp_business_type"]).Trim();
						int tempForEndVar11 = cbo_comp_business_type.Items.Count - 1;
						for (i = 0; i <= tempForEndVar11; i++)
						{
							if (cbo_comp_business_type.GetListItem(i).Substring(0, Math.Min(2, cbo_comp_business_type.GetListItem(i).Length)).Trim().ToLower() == Convert.ToString(in_CompanyRS["comp_business_type"]).Trim().ToLower())
							{
								cbo_comp_business_type.SelectedIndex = i;
								break;
							}
						}
					}
				}


				//added MSW - 9/11/19
				lbl_comp[114].Visible = true;
				lbl_comp[114].Text = modFillCommonArrays.Fill_Company_Services_Used(Convert.ToInt32(in_CompanyRS["comp_id"]), ref temp_abbrev);

				cbo_comp_services_used.Items.Clear();
				cbo_comp_services_used.AddItem(temp_abbrev);
				cbo_comp_services_used.SelectedIndex = 0;

				// if this company is a dealer/broker manufacturer fininical institution, change background
				if (cbo_comp_business_type.Text.Substring(0, Math.Min(2, cbo_comp_business_type.Text.Length)).Trim().ToUpper() == "DB" || cbo_comp_business_type.Text.Substring(0, Math.Min(2, cbo_comp_business_type.Text.Length)).Trim().ToUpper() == "FI" || cbo_comp_business_type.Text.Substring(0, Math.Min(2, cbo_comp_business_type.Text.Length)).Trim().ToUpper() == "MF" || cbo_comp_business_type.Text.Substring(0, Math.Min(2, cbo_comp_business_type.Text.Length)).Trim().ToUpper() == "DS")
				{

					change_background("DB");
				}
				else
				{
					change_background("NORMAL");
				}

				chk_company_assign_flag.CheckState = CheckState.Unchecked;
				cbo_comp_account[COMP_ACCOUNT_REP].Enabled = false;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_assign_flag"]))
				{
					enter_company_info.s_comp_assign_flag = Convert.ToString(in_CompanyRS["comp_assign_flag"]).Trim();
					if (Convert.ToString(in_CompanyRS["comp_assign_flag"]).Trim().ToUpper() == "A")
					{
						chk_company_assign_flag.CheckState = CheckState.Checked;
					}
					else
					{
						cbo_comp_account[COMP_ACCOUNT_REP].Enabled = true;
					}
				}

				// display fractional owner stuff if we have info to display
				mnuRemoveFractional.Enabled = false;
				mnuEditAddFractional.Enabled = true;

				pnl_fractional_owner.Visible = false;

				txt_comp_fractowr_id.Text = modGlobalVars.cEmptyString;
				txt_comp_fractowr_id.Visible = false;
				txt_comp_fractowr_notes.Text = modGlobalVars.cEmptyString;
				txt_comp_fractowr_notes.Visible = false;

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_fractowr_id"]))
				{

					if (Convert.ToInt32(in_CompanyRS["comp_fractowr_id"]) > 0)
					{

						mnuRemoveFractional.Enabled = true;
						mnuEditAddFractional.Enabled = false;

						txt_comp_fractowr_id.Text = Convert.ToString(in_CompanyRS["comp_fractowr_id"]).Trim();
						txt_comp_fractowr_id.Enabled = false;
						enter_company_info.s_comp_fractowr_id = Convert.ToInt32(in_CompanyRS["comp_fractowr_id"]);

						txt_comp_fractowr_notes.Text = modGlobalVars.cEmptyString;
						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(in_CompanyRS["comp_fractowr_notes"]))
						{
							if (Convert.ToString(in_CompanyRS["comp_fractowr_notes"]).Trim() != modGlobalVars.cEmptyString)
							{
								txt_comp_fractowr_notes.Text = Convert.ToString(in_CompanyRS["comp_fractowr_notes"]).Trim();
								enter_company_info.s_comp_fractowr_notes = Convert.ToString(in_CompanyRS["comp_fractowr_notes"]).Trim();
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(in_CompanyRS["comp_fractowr_contact_id"]))
						{
							if (Convert.ToInt32(in_CompanyRS["comp_fractowr_contact_id"]) > 0)
							{
								enter_company_info.s_comp_fractowr_contact_id = Convert.ToInt32(in_CompanyRS["comp_fractowr_contact_id"]);
								modCompany.fill_fractional_owner_contact_list(nReference_CompanyID, nReference_CompanyJID, Convert.ToInt32(in_CompanyRS["comp_fractowr_contact_id"]), cbo_comp_fractowr_contact_id);
							}
							else
							{
								modCompany.fill_fractional_owner_contact_list(nReference_CompanyID, nReference_CompanyJID, 0, cbo_comp_fractowr_contact_id);
							}
						}

						txt_comp_fractowr_id.Visible = true;
						txt_comp_fractowr_notes.Visible = true;
						pnl_fractional_owner.Visible = true;
						SSTabHelper.SetTabVisible(tab_comp_description, 1, true);

					}
					else
					{
						// added msw 4/1/2013
						SSTabHelper.SetTabVisible(tab_comp_description, 1, false);
					}
				}
				else
				{
					// added msw 4/1/2013
					SSTabHelper.SetTabVisible(tab_comp_description, 1, false);
				} // If Not IsNull(in_CompanyRS("comp_fractowr_id")) Then

				SSTabHelper.SetTabVisible(tab_company_details, 9, false);

				if (nReference_CompanyJID == 0)
				{
					if (modCommon.DoesCompanyHaveDocumentsInProcess(nReference_CompanyID))
					{
						SSTabHelper.SetTabVisible(tab_company_details, 9, true);
					}
				}

				txt_comp_address1.BackColor = NORMAL_TXT_BACKCOLOR;
				txt_comp_address2.BackColor = NORMAL_TXT_BACKCOLOR;
				lbl_comp[ADDRESS_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;

				txt_comp_email_address.BackColor = NORMAL_TXT_BACKCOLOR;
				lbl_comp[EMAIL_ADDRESS_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;

				chkCompDoNotSendEMail.BackColor = NORMAL_TXT_BACKCOLOR;

				txt_comp_web_address.BackColor = NORMAL_TXT_BACKCOLOR;
				lbl_comp[WEB_ADDRESS_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;

				if (nReference_CompanyJID == 0)
				{

					// CHECK THE ADDRESS CONFIRM
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(in_CompanyRS["comp_address_confirm_date"]))
					{
						if (Information.IsDate(in_CompanyRS["comp_address_confirm_date"]))
						{
							tempconfirmdate = Convert.ToDateTime(in_CompanyRS["comp_address_confirm_date"]).AddDays(modAdminCommon.gbl_ConfirmDays);

							if (tempconfirmdate <= DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)))
							{
								txt_comp_address1.BackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
								txt_comp_address2.BackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
								lbl_comp[ADDRESS_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
							}
						}
					}

					// CHECK THE REASIGN PROCEDURE DATE - MSW - 10/8/21
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(in_CompanyRS["comp_abi_callback_date"]))
					{
						if (Information.IsDate(in_CompanyRS["comp_abi_callback_date"]))
						{
							tempconfirmdate = Convert.ToDateTime(in_CompanyRS["comp_abi_callback_date"]).AddDays(365);

							if (tempconfirmdate <= DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)))
							{
								txt_company_field[1].BackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
								lbl_comp[38].ForeColor = NORMAL_TXT_FORCOLOR;
							}
						}
					}

					// CHECK THE EMAIL CONFIRM
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(in_CompanyRS["comp_email_confirm_date"]))
					{
						if (Information.IsDate(in_CompanyRS["comp_email_confirm_date"]))
						{
							tempconfirmdate = Convert.ToDateTime(in_CompanyRS["comp_email_confirm_date"]).AddDays(modAdminCommon.gbl_ConfirmDays);

							if (tempconfirmdate <= DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)))
							{
								txt_comp_email_address.BackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
								lbl_comp[EMAIL_ADDRESS_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
							}
						}
					}

					// CHECK THE WEB CONFIRM
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(in_CompanyRS["comp_web_confirm_date"]))
					{
						if (Information.IsDate(in_CompanyRS["comp_web_confirm_date"]))
						{
							tempconfirmdate = Convert.ToDateTime(in_CompanyRS["comp_web_confirm_date"]).AddDays(modAdminCommon.gbl_ConfirmDays);

							if (tempconfirmdate <= DateTime.Parse(DateTimeHelper.ToString(DateTime.Now)))
							{
								txt_comp_web_address.BackColor = ColorTranslator.FromOle(CONFIRM_BACKCOLOR);
								lbl_comp[WEB_ADDRESS_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
							}
						}
					}

				} //CLng(nReference_CompanyJID) = 0

				// 08/04/2004 - By David D. Cruger
				// If TechId is not all 000000 then enable the web
				// report to view technical departments customer record
				mnuReportList[2].Enabled = false;
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_techid"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_techid"]).Trim() != modGlobalVars.cEmptyString)
					{
						if (Conversion.Val(Convert.ToString(in_CompanyRS["comp_techid"]).Trim()) > Conversion.Val(("000000").Trim()))
						{
							mnuReportList[2].Enabled = true;
						}
					}
				}

				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(in_CompanyRS["comp_yacht_callback_date"]))
				{
					if (Convert.ToString(in_CompanyRS["comp_yacht_callback_date"]).Trim() != "")
					{
						cal_comp_yacht_callback_date.SetDate(Convert.ToDateTime(in_CompanyRS["comp_yacht_callback_date"]));
						lbl_comp[YACHT_CALLBACK_DATE_INDEX].Text = Convert.ToString(in_CompanyRS["comp_yacht_callback_date"]);
						enter_company_info.s_comp_yacht_callback_date = Convert.ToString(in_CompanyRS["comp_yacht_callback_date"]);
					}
				}

				// added in MSW 7/19/13 - then modified 12/30/13 with first if statement for test
				string tempRefParam = Convert.ToString(in_CompanyRS["comp_logo_flag"]);
				display_company_logo(Convert.ToString(in_CompanyRS["comp_id"]), ref tempRefParam);

				display_company_product_codes(in_CompanyRS);

				if (chk_comp_product_code[5].CheckState == CheckState.Checked)
				{
					cal_comp_yacht_callback_date.Visible = true;
					cmd_company_update_callback_date[1].Visible = true;
					lbl_comp[YACHT_CALLBACK_DATE_INDEX].Visible = true;
					lbl_comp[COMP_YACHT_LABEL_INDEX].Visible = true;
				}
				else
				{
					cal_comp_yacht_callback_date.Visible = false;
					cmd_company_update_callback_date[1].Visible = false;
					lbl_comp[YACHT_CALLBACK_DATE_INDEX].Visible = false;
					lbl_comp[COMP_YACHT_LABEL_INDEX].Visible = false;
				}


				if (chk_comp_product_code[0].CheckState == CheckState.Checked || chk_comp_product_code[1].CheckState == CheckState.Checked || chk_comp_product_code[2].CheckState == CheckState.Checked || chk_comp_product_code[3].CheckState == CheckState.Checked || chk_comp_product_code[4].CheckState == CheckState.Checked)
				{
					cal_comp_callback_date.Visible = true;
					cmd_company_update_callback_date[0].Visible = true;
					lbl_comp[57].Visible = true;
					lbl_comp[COMP_CALLBACK_DATE_INDEX].Visible = true;
				}
				else
				{
					cal_comp_callback_date.Visible = false;
					cmd_company_update_callback_date[0].Visible = false;
					lbl_comp[57].Visible = false;
					lbl_comp[COMP_CALLBACK_DATE_INDEX].Visible = false;
				}

				// 02/25/2016 - By David D. Cruger Added
				if (Convert.ToDouble(in_CompanyRS["comp_journ_id"]) == 0)
				{

					//UPGRADE_WARNING: (2065) TabDlg.SSTab property tab_company_details.TabCaption has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
					SSTabHelper.SetTabCaption(tab_company_details, 9, "Docs in Process");

					strQuery1 = "SELECT DISTINCT FDL1.faalog_id ";
					strQuery1 = $"{strQuery1}FROM FAA_Document_Log AS FDL1 WITH (NOLOCK) ";
					strQuery1 = $"{strQuery1}INNER JOIN Aircraft_Reference AS AR1 WITH (NOLOCK) ON AR1.cref_ac_id = FDL1.faalog_ac_id AND AR1.cref_journ_id = FDL1.faalog_journ_id ";
					strQuery1 = $"{strQuery1}INNER JOIN Aircraft AS A1 WITH (NOLOCK) ON A1.ac_id = FDL1.faalog_ac_id AND A1.ac_journ_id = FDL1.faalog_journ_id ";
					strQuery1 = $"{strQuery1}INNER JOIN Aircraft_Model AS AM1 WITH (NOLOCK) ON AM1.amod_id = A1.ac_amod_id ";
					strQuery1 = $"{strQuery1}WHERE (cref_comp_id = {nReference_CompanyID.ToString()}) ";
					strQuery1 = $"{strQuery1}AND (faalog_journ_id = 0) ";
					// added msw 9/18/23
					strQuery1 = $"{strQuery1} and amod_class_code <> 'E' ";

					if (modAdminCommon.Exist(strQuery1))
					{
						//UPGRADE_WARNING: (2065) TabDlg.SSTab property tab_company_details.TabCaption has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
						SSTabHelper.SetTabCaption(tab_company_details, 9, "Docs in Process");
						tab_company_details.ImageList.Images[9] = mdi_ResearchAssistant.DefInstance.imgNormal.Images["Delete"];
					}

				} // If in_CompanyRS!comp_journ_id = 0 Then

				search_off();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"display_company_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		public object display_company_logo(string comp_id, ref string comp_image_flag)
		{

			string strFileName = "";
			double dRatio = 0;

			// THIS FUNCTION SELECTS AND DISPLAYS THE COMPANY LOGO
			try
			{

				company_logo_path = modCommon.DLookUp("aconfig_company_logo_dir", "Application_Configuration");

				company_logo.Visible = false;
				company_logo.SizeMode = PictureBoxSizeMode.StretchImage;

				if (comp_image_flag.Trim() == "Y")
				{

					strFileName = $"{company_logo_path}{comp_id}.jpg";

					if (File.Exists(strFileName))
					{

						company_logo.BorderStyle = BorderStyle.None;
						company_logo.Image = Image.FromFile(strFileName);
						cmd_delete_logo.Visible = true;

					}
					else
					{
						company_logo.BorderStyle = BorderStyle.Fixed3D;
						company_logo.Image = Image.FromFile($"{company_logo_path}no-logo.gif");
					}

				}
				else
				{
					company_logo.BorderStyle = BorderStyle.Fixed3D;
					company_logo.Image = Image.FromFile($"{company_logo_path}no-logo.gif");
				}

				// Try To Get The Correct Aspect Ration
				// in a 2500/1500 Picture Object
				if (company_logo.Width * 15 > company_logo.Height * 15)
				{

					if (company_logo.Width * 15 > 2500)
					{
						dRatio = company_logo.Width * 15 / 2500d;
						company_logo.Width = 167;
						company_logo.Height = Convert.ToInt32(company_logo.Height / dRatio);
					}

				}
				else
				{

					if (company_logo.Height * 15 > 1500)
					{
						dRatio = company_logo.Height * 15 / 1500d;
						company_logo.Height = 100;
						company_logo.Width = Convert.ToInt32(company_logo.Width / dRatio);
					}

				} // If company_logo.Width > company_logo.Height Then

				company_logo.Visible = true;
			}
			catch (Exception e)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				if (Information.Err().Number == 481)
				{
					MessageBox.Show($"Company Logo Is Invalid Or Too Large{Environment.NewLine}{Environment.NewLine}Try Resizing Smaller", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
				}
				else
				{
					MessageBox.Show($"Display_Company_Logo_Error: {e.Message}", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK, MessageBoxIcon.Error);
				}

				company_logo.Visible = true;
				company_logo.BorderStyle = BorderStyle.Fixed3D;
				company_logo.Image = Image.FromFile($"{company_logo_path}no-logo.gif");

				comp_image_flag = "N";
			}

			return null;
		} // display_company_logo

		private void display_company_product_codes(ADORecordSetHelper in_CompanyRS)
		{

			bool bIsBusiness = false;
			bool bIsHelicopter = false;
			bool bIsCommercial = false;
			bool bIsRegional = false;
			bool bIsAirBP = false;
			bool bIsABI = false;
			bool bIsYacht = false;

			// first turn off all check boxes
			int tempForEndVar = chk_comp_product_code.GetUpperBound(0);
			for (int X = 0; X <= tempForEndVar; X++)
			{
				chk_comp_product_code[X].Visible = false;
				chk_comp_product_code[X].Enabled = false;
				chk_comp_product_code[X].CheckState = CheckState.Unchecked;
			}
			chk_comp_product_code[5].Enabled = true;

			if (in_CompanyRS != null)
			{

				if (in_CompanyRS.State == ConnectionState.Open)
				{

					if (!(in_CompanyRS.EOF && in_CompanyRS.BOF))
					{

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(in_CompanyRS["comp_product_business_flag"]))
						{
							if (Convert.ToString(in_CompanyRS["comp_product_business_flag"]).Trim().ToUpper() == "Y")
							{
								enter_company_info.s_comp_product_business_flag = Convert.ToString(in_CompanyRS["comp_product_business_flag"]).Trim().ToUpper();
								bIsBusiness = true;
							}
							else
							{
								enter_company_info.s_comp_product_business_flag = Convert.ToString(in_CompanyRS["comp_product_business_flag"]).Trim().ToUpper();
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(in_CompanyRS["comp_product_helicopter_flag"]))
						{
							if (Convert.ToString(in_CompanyRS["comp_product_helicopter_flag"]).Trim().ToUpper() == "Y")
							{
								bIsHelicopter = true;
								enter_company_info.s_comp_product_helicopter_flag = Convert.ToString(in_CompanyRS["comp_product_helicopter_flag"]).Trim().ToUpper();
							}
							else
							{
								enter_company_info.s_comp_product_helicopter_flag = Convert.ToString(in_CompanyRS["comp_product_helicopter_flag"]).Trim().ToUpper();
							}
						}

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(in_CompanyRS["comp_product_commercial_flag"]))
						{
							if (Convert.ToString(in_CompanyRS["comp_product_commercial_flag"]).Trim().ToUpper() == "Y")
							{
								bIsCommercial = true;
								enter_company_info.s_comp_product_commercial_flag = Convert.ToString(in_CompanyRS["comp_product_commercial_flag"]).Trim().ToUpper();
							}
							else
							{
								enter_company_info.s_comp_product_commercial_flag = Convert.ToString(in_CompanyRS["comp_product_commercial_flag"]).Trim().ToUpper();
							}
						}

						// 03/27/2012 - By David D. Cruger
						// Per Meeting if AirBP company disable the A/C Survey button
						//cmd_contact_send_email_ac_survey.Enabled = True

						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(in_CompanyRS["comp_product_airbp_flag"]))
						{
							if (Convert.ToString(in_CompanyRS["comp_product_airbp_flag"]).Trim().ToUpper() == "Y")
							{
								bIsAirBP = true;
								bisAirBPstart = true; // checks the starting status of the airbp checkbox
								enter_company_info.s_comp_product_airbp_flag = Convert.ToString(in_CompanyRS["comp_product_airbp_flag"]).Trim().ToUpper();
								//cmd_contact_send_email_ac_survey.Enabled = False
							}
							else
							{
								bisAirBPstart = false; // checks the starting status of the airbp checkbox
								enter_company_info.s_comp_product_airbp_flag = Convert.ToString(in_CompanyRS["comp_product_airbp_flag"]).Trim().ToUpper();
							}
						}
						else
						{
							bisAirBPstart = false; // checks the starting status of the airbp checkbox
						}
						// ADDED MSW - 4/24/12 - To put in yacht checkbox

						// commented out MSW - 5/14/24
						//        enter_company_info.s_comp_product_yacht_flag = UCase(Trim(in_CompanyRS!comp_product_yacht_flag & " "))
						//        If Not IsNull(in_CompanyRS("comp_product_yacht_flag")) Then
						//          If UCase$(Trim$(in_CompanyRS("comp_product_yacht_flag").Value)) = "Y" Then
						//            bIsYacht = True
						//          Else
						//            bIsYacht = False ' checks the starting status of the airbp checkbox
						//          End If
						//        Else
						//          bIsYacht = False ' checks the starting status of the airbp checkbox
						//        End If

						// 04/25/2011 - By David D. Cruger; Display the AVData Id in the tool tip for the AirBP Check Box
						if (($"{Convert.ToString(in_CompanyRS["comp_avdata_id"])} ").Trim() != "")
						{
							ToolTipMain.SetToolTip(chk_comp_product_code[modGlobalVars.CHK_AIRBP_IDX], $"AVData Id: [{($"{Convert.ToString(in_CompanyRS["comp_avdata_id"])} ").Trim()}]");
						}
						else
						{
							ToolTipMain.SetToolTip(chk_comp_product_code[modGlobalVars.CHK_AIRBP_IDX], "AVData Id: [N/A]");
						}
						chk_comp_product_code[modGlobalVars.CHK_AIRBP_IDX].Visible = false; // Make this invisible MSW - 2/18/23


						//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
						if (!Convert.IsDBNull(in_CompanyRS["comp_product_abi_flag"]))
						{
							if (Convert.ToString(in_CompanyRS["comp_product_abi_flag"]).Trim().ToUpper() == "Y")
							{
								bIsABI = true;
								enter_company_info.s_comp_product_abi_flag = Convert.ToString(in_CompanyRS["comp_product_abi_flag"]).Trim().ToUpper();
							}
							else
							{
								enter_company_info.s_comp_product_abi_flag = Convert.ToString(in_CompanyRS["comp_product_abi_flag"]).Trim().ToUpper();
							}
						}

						// special case if there is no product codes selected warn the user that
						// until a product code is selected the aircraft will not be transmitted

						if (!bIsBusiness && !bIsHelicopter && !bIsCommercial && !bIsAirBP && !bIsABI && !bIsRegional && !bControlProductCodeMsg && !bIsYacht)
						{

							bControlProductCodeMsg = true; // make sure this only pops up once per form load.
							MessageBox.Show($"** NO PRODUCT CODE SELECTED **{Environment.NewLine}Plese Select a PRODUCT CODE before SAVING Company", "Company : NO PRODUCT CODE", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);

						}

						int tempForEndVar2 = chk_comp_product_code.GetUpperBound(0);
						for (int X = 0; X <= tempForEndVar2; X++)
						{


							switch((X))
							{
								case modGlobalVars.CHK_BUSINESS_IDX : 
									 
									chk_comp_product_code[X].Visible = true; 
									if (bIsBusiness)
									{
										chk_comp_product_code[X].Enabled = true;
										chk_comp_product_code[X].CheckState = CheckState.Checked;
									} 
									 
									break;
								case modGlobalVars.CHK_HELICOPTER_IDX : 
									 
									chk_comp_product_code[X].Visible = true; 
									if (bIsHelicopter)
									{
										chk_comp_product_code[X].Enabled = true;
										chk_comp_product_code[X].CheckState = CheckState.Checked;
									} 
									 
									break;
								case modGlobalVars.CHK_COMMERCIAL_IDX : 
									 
									chk_comp_product_code[X].Visible = true; 
									if (bIsCommercial)
									{
										chk_comp_product_code[X].Enabled = true;
										chk_comp_product_code[X].CheckState = CheckState.Checked;
									} 
									 
									break;
								case modGlobalVars.CHK_ABI_IDX : 
									 
									chk_comp_product_code[X].Visible = true; 
									if (bIsABI)
									{
										chk_comp_product_code[X].Enabled = true;
										chk_comp_product_code[X].CheckState = CheckState.Checked;
									} 
									 
									// added MSW - make invisible always 
									chk_comp_product_code[X].Visible = false; 
									 
									break;
								case modGlobalVars.CHK_AIRBP_IDX :  // TEMP HOLD 
									 
									chk_comp_product_code[X].Visible = true; 
									if (bIsAirBP && !bBlockAirBp)
									{
										chk_comp_product_code[X].Enabled = true;
										chk_comp_product_code[X].CheckState = CheckState.Checked;
									}
									else
									{
										chk_comp_product_code[X].Enabled = false;
										chk_comp_product_code[X].Visible = false; // added MSW - made invisible - 2/13/24
									} 
									 
									break;
								default:
									goto exit_for;
							}

						}
						exit_for:;

					}

				}

			}

		}

		//UPGRADE_WARNING: (2050) MSComCtl2.MonthView Event cal_comp_callback_date.DateClick was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2050
		private void cal_comp_callback_date_DateClick(System.DateTime DateClicked)
		{

			if (!bFormLoad)
			{

				if (lbl_comp[COMP_CALLBACK_DATE_INDEX].Text.Trim() != modGlobalVars.cEmptyString)
				{

					bUser_Changed_Callback_Date = (cal_comp_callback_date.SelectionRange.Start.ToString("d") != DateTime.Parse(lbl_comp[COMP_CALLBACK_DATE_INDEX].Text.Trim()).ToString("d"));

					lbl_comp[COMP_CALLBACK_DATE_INDEX].Text = cal_comp_callback_date.SelectionRange.Start.ToString("d");

				}


			}

		}

		private void cal_comp_callback_date_Enter(Object eventSender, EventArgs eventArgs) => mvHasFocus = true;


		private void cbo_verify_aircraft_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				ToolTipMain.SetToolTip(cbo_verify_aircraft, cbo_verify_aircraft.Text);
			}

		}

		//UPGRADE_NOTE: (7001) The following declaration (cbo_comp_account_Clicked) seems to be dead code More Information: https://docs.mobilize.net/vbuc/ewis/notes#id-7001
		//private void cbo_comp_account_Clicked(int Index)
		//{
			//
			//if (!bFormLoad)
			//{
				//
				//
				//switch(Index)
				//{
					//case COMP_ACCOUNT_TYPE : 
						// 
						//if (chk_company_assign_flag.CheckState == CheckState.Checked)
						//{
							//modFillCompConControls.assign_account_rep(txt_comp_name.Text, cbo_comp_account[COMP_ACCOUNT_TYPE], cbo_comp_account[COMP_ACCOUNT_REP]);
						//} 
						//ToolTipMain.SetToolTip(cbo_comp_account[COMP_ACCOUNT_TYPE], cbo_comp_account[COMP_ACCOUNT_TYPE].Text); 
						// 
						//break;
					//case COMP_ACCOUNT_REP : 
						// 
						//ToolTipMain.SetToolTip(cbo_comp_account[COMP_ACCOUNT_REP], cbo_comp_account[COMP_ACCOUNT_REP].Text); 
						// 
						//break;
				//}
				//
			//} // If bFormLoad = False Then
			//
		//} // cbo_comp_account_Clicked

		private void cbo_comp_agency_type_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				ToolTipMain.SetToolTip(cbo_comp_agency_type, cbo_comp_agency_type.Text);

				if (cbo_comp_agency_type.Text.Substring(Math.Min(0, cbo_comp_agency_type.Text.Length), Math.Min(1, Math.Max(0, cbo_comp_agency_type.Text.Length))).Trim().ToLower() != "g")
				{
					cbo_comp_govsub_code.Visible = false;
					lbl_comp[28].Visible = false;
				}
				else
				{
					cbo_comp_govsub_code.Visible = true;
					lbl_comp[28].Visible = true;
				}

			}

		}

		private void cbo_comp_business_type_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				ToolTipMain.SetToolTip(cbo_comp_business_type, cbo_comp_business_type.Text);
			}

		}

		private void cbo_comp_country_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				n_country_timezone_adjustment = modCompany.get_country_timezone_adjustment(cbo_comp_country.Text, cbo_comp_state.Text, cbo_comp_timezone.Text);
				ToolTipMain.SetToolTip(cbo_comp_country, cbo_comp_country.Text);
			}

		}

		private void cbo_comp_country_DoubleClick(Object eventSender, EventArgs eventArgs) => confirm_company_field("comp_country");


		private void cbo_comp_fractowr_contact_id_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				ToolTipMain.SetToolTip(cbo_comp_fractowr_contact_id, cbo_comp_fractowr_contact_id.Text);
			}

		}

		private void cbo_comp_language_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				ToolTipMain.SetToolTip(cbo_comp_language, cbo_comp_language.Text);
			}

		}

		private void cbo_comp_name_alt_type_SelectionChangeCommitted(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				ToolTipMain.SetToolTip(cbo_comp_name_alt_type, cbo_comp_name_alt_type.Text);
			}

			// added MSW - 11/4/21
			if (txt_comp_name.Text.Trim() != "Awaiting Documentation" && (cbo_comp_name_alt_type.Text.Trim() == "UNID" || cbo_comp_name_alt_type.Text.Trim() == "UDO"))
			{
				MessageBox.Show("You can only set 'UNID' or 'UDO' for companies that are 'Awaiting Documentation'", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.OK);
				cbo_comp_name_alt_type.Text = "";
			}
			else
			{
				if (txt_comp_name_alt.Text.Trim() == "")
				{
					if (cbo_comp_name_alt_type.Text.Trim() == "UNID")
					{
						txt_comp_name_alt.Text = "Unidentified Owner";
					}
					else if (cbo_comp_name_alt_type.Text.Trim() == "UDO")
					{ 
						txt_comp_name_alt.Text = "Undisclosed Owner";
					}
				}

				if (cbo_comp_name_alt_type.Text.Trim() == "UNID" || cbo_comp_name_alt_type.Text.Trim() == "UDO")
				{

				}

			}

		}

		private void cbo_comp_state_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				select_state();
				ToolTipMain.SetToolTip(cbo_comp_state, cbo_comp_state.Text);
			}

		}

		private void cbo_comp_timezone_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				n_country_timezone_adjustment = modCompany.get_country_timezone_adjustment(cbo_comp_country.Text, cbo_comp_state.Text, cbo_comp_timezone.Text);
				ToolTipMain.SetToolTip(cbo_comp_timezone, cbo_comp_timezone.Text);
			}

		}

		private void cbo_company_research_contact_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			int lContactId = 0;
			int lCnt1 = 0;

			if (!bFormLoad)
			{

				if (nReference_CompanyJID > 0)
				{ // exit this procedure if this is a historical record.
					cmd_aircraft_contact_change.Visible = false;
					cmd_aircraft_all_contact_change.Visible = false;
					chk_change_same_ac_contact_type_only.Visible = false;
				}
				else if (Convert.ToString(grd_company_aircraft[1, 3].Value).Trim().ToUpper() != ("No Aircraft Found").ToUpper())
				{ 

					cmd_aircraft_contact_change.Visible = true;
					cmd_aircraft_all_contact_change.Visible = true;
					chk_change_same_ac_contact_type_only.Visible = true;

					if (cbo_company_research_contact.Text != "")
					{

						lContactId = cbo_company_research_contact.GetItemData(cbo_company_research_contact.SelectedIndex);

						if (grd_company_contacts.RowsCount > 1)
						{
							lCnt1 = 0;
							do 
							{
								lCnt1++;
								if (grd_company_contacts.get_RowData(lCnt1) == lContactId)
								{
									grd_company_contacts.CurrentRowIndex = lCnt1;
									grd_company_contacts_singleClickBodyCode();
								}
							}
							while(!(grd_company_contacts.get_RowData(lCnt1) == lContactId || lCnt1 >= grd_company_contacts.RowsCount));

						} // If grd_company_contacts.Rows > 1 Then

					} // If cbo_company_research_contact.Text <> "" Then

				} // ElseIf UCase$(Trim$(grd_company_aircraft.TextMatrix(1, 3))) <> UCase$("No Aircraft Found") Then

			} // If bFormLoad = False Then

		} // cbo_company_research_contact_Click

		// 04/15/2008 - By David D. Cruger
		private void cbo_ac_delivery_position_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			cmd_company_fill_aircraft_Click();
			ToolTipMain.SetToolTip(cbo_ac_delivery_position, cbo_ac_delivery_position.Text);

		}

		private void cbo_comp_govsub_code_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				ToolTipMain.SetToolTip(cbo_comp_govsub_code, cbo_comp_govsub_code.Text);
			}

		}

		private void cbo_verify_journal_subject_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad)
			{
				if (cbo_verify_journal_subject.Text.Trim() != modGlobalVars.cEmptyString)
				{
					lbl_comp[VERIFY_STATUS_INDEX].Text = $"for company {txt_comp_name.Text.Trim()} on: {DateTime.Now.ToString("d")}";
					lbl_comp[VERIFY_STATUS_INDEX].Visible = true;
				}
				else
				{
					lbl_comp[VERIFY_STATUS_INDEX].Text = modGlobalVars.cEmptyString;
					lbl_comp[VERIFY_STATUS_INDEX].Visible = false;
				}
				ToolTipMain.SetToolTip(cbo_verify_journal_subject, cbo_verify_journal_subject.Text);
			}

		}

		private void cbo_journal_note_type_SelectedIndexChanged(Object eventSender, EventArgs eventArgs)
		{

			if (!bFormLoad && !bIsClearCompanyData)
			{

				fill_company_journal_grid(grd_company_journal);
				search_off();

			}

		}

		private void save_wanted_selection(ref modGlobalVars.t_company_save_wanted_info tmpWanted)
		{

			try
			{

				if (grd_company_wanted.CurrentRowIndex > 0 && Convert.ToString(grd_company_wanted[1, 1].Value).Trim().ToUpper() != ("No Wanted Aircraft Found").ToUpper())
				{
					tmpWanted.save_amwant_id = grd_company_wanted.get_RowData(grd_company_wanted.CurrentRowIndex); // pull this from grid row
				}
				else
				{
					tmpWanted.save_amwant_id = -1;
				}

				tmpWanted.save_amwant_model = cbo_amwant_model.Text.Trim();
				tmpWanted.save_amwant_modelID = cbo_amwant_model.GetItemData(cbo_amwant_model.SelectedIndex);

				tmpWanted.save_amwant_listed_date = txt_amwant_listed_date.Text.Trim();
				tmpWanted.save_amwant_verified_date = txt_amwant_date_verified.Text.Trim();

				tmpWanted.save_amwant_start_year = txt_amwant_start_year.Text.Substring(0, Math.Min(4, txt_amwant_start_year.Text.Length)).Trim();
				tmpWanted.save_amwant_end_year = txt_amwant_end_year.Text.Substring(0, Math.Min(4, txt_amwant_end_year.Text.Length)).Trim();

				if (txt_amwant_max_price.Text.Trim() != "")
				{
					tmpWanted.save_amwant_max_price = modCommon.pubf_ReturnNumberFromDollarAmt(txt_amwant_max_price.Text);
				}
				else
				{
					tmpWanted.save_amwant_max_price = 0d;
				}

				if (txt_amwant_max_aftt.Text.Trim() != "")
				{ // strip commas out of number
					tmpWanted.save_amwant_max_aftt = Convert.ToInt32(Conversion.Val(StringsHelper.Replace(txt_amwant_max_aftt.Text.Trim(), ",", "", 1, -1, CompareMethod.Binary)));
				}
				else
				{
					tmpWanted.save_amwant_max_aftt = 0;
				}

				tmpWanted.save_amwant_accept_damage_cur = cbo_amwant_accept_damage_cur.Text.Trim();
				tmpWanted.save_amwant_accept_damage_hist = cbo_amwant_accept_damage_hist.Text.Trim();

				tmpWanted.save_amwant_notes = txt_amwant_notes.Text.Substring(0, Math.Min(250, txt_amwant_notes.Text.Length)).Trim();
				tmpWanted.save_amwant_yearnote = txt_amwant_yearnote.Text.Substring(0, Math.Min(15, txt_amwant_yearnote.Text.Length)).Trim();
				tmpWanted.save_amwant_pricenote = txt_amwant_pricenote.Text.Substring(0, Math.Min(15, txt_amwant_pricenote.Text.Length)).Trim();
				tmpWanted.save_amwant_auto_distribute_flag = (short) chk_amwant_auto_distribute_flag.CheckState;
				tmpWanted.save_amwant_auto_distribute_email = txt_amwant_auto_distribute_email.Text.Substring(0, Math.Min(70, txt_amwant_auto_distribute_email.Text.Length)).Trim();
				tmpWanted.save_amwant_auto_distribute_replyname = txt_amwant_auto_distribute_replyname.Text.Substring(0, Math.Min(70, txt_amwant_auto_distribute_replyname.Text.Length)).Trim();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"save_wanted_selection_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
			}

		}

		private bool verify_wanted_controls()
		{

			bool result = false;

			if (cbo_amwant_model.Text.Trim() == modGlobalVars.cEmptyString)
			{
				MessageBox.Show("You must select a model. Please Correct!", "Company: Verify Wanted", MessageBoxButtons.OK, MessageBoxIcon.Information);
				cbo_amwant_model.Focus();
				return result;
			}

			if (txt_amwant_max_price.Text.Trim() != modGlobalVars.cEmptyString)
			{
				if (!Information.IsNumeric(txt_amwant_max_price.Text.Trim()))
				{
					MessageBox.Show("Maximum Price must be numeric. Please Correct!", "Company: Verify Wanted", MessageBoxButtons.OK, MessageBoxIcon.Information);
					txt_amwant_max_price.Focus();
					return result;
				}
			}

			if (txt_amwant_max_aftt.Text.Trim() != modGlobalVars.cEmptyString)
			{
				if (!Information.IsNumeric(txt_amwant_max_aftt.Text.Trim()))
				{
					MessageBox.Show("Maximum AFTT must be numeric. Please Correct!", "Company: Verify Wanted", MessageBoxButtons.OK, MessageBoxIcon.Information);
					txt_amwant_max_aftt.Focus();
					return result;
				}
			}

			if (txt_amwant_listed_date.Text.Trim() != modGlobalVars.cEmptyString)
			{
				if (!Information.IsDate(txt_amwant_listed_date.Text.Trim()))
				{
					MessageBox.Show("Date Listed Field Does not Contain a Valid Date. Please Correct!", "Company: Verify Wanted", MessageBoxButtons.OK, MessageBoxIcon.Information);
					txt_amwant_listed_date.Focus();
					return result;
				}
			}

			if (txt_amwant_end_year.Text.Trim() != modGlobalVars.cEmptyString)
			{
				if (!Information.IsNumeric(txt_amwant_end_year.Text.Trim()))
				{
					MessageBox.Show("End Year is Not Valid. Please Correct!", "Company: Verify Wanted", MessageBoxButtons.OK, MessageBoxIcon.Information);
					txt_amwant_end_year.Focus();
					return result;
				}
			}

			if (chk_amwant_auto_distribute_flag.CheckState == CheckState.Checked)
			{

				if (txt_amwant_auto_distribute_email.Text.Trim() == modGlobalVars.cEmptyString)
				{
					MessageBox.Show("Auto Distribute Email Address is BLANK. Please Correct!", "Company: Verify Wanted", MessageBoxButtons.OK, MessageBoxIcon.Information);
					txt_amwant_auto_distribute_email.Focus();
					return result;
				}

				if (!modCommon.QuickCheckEmailAddress(txt_amwant_auto_distribute_email.Text))
				{
					MessageBox.Show("ABI Alert E-Mail address error! Please Correct!", "Company : Verify Wanted", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
					txt_amwant_auto_distribute_email.Focus();
					return result;
				}

				if (txt_amwant_auto_distribute_replyname.Text.Trim() == modGlobalVars.cEmptyString)
				{
					MessageBox.Show("Auto Distribute Reply TO name is BLANK. Please Correct!", "Company: Verify Wanted", MessageBoxButtons.OK, MessageBoxIcon.Information);
					txt_amwant_auto_distribute_replyname.Focus();
					return result;
				}

			}

			return true;

		}

		private void select_state()
		{

			// PURPOSE: THE PURPOSE OF THIS PROCEDURE IS TO ALIGN THE COUNTRY
			// AND TIMEZONE CBOS BASE ON THE STATE SELECTED BY CLICKING IN THE  STATE CBO.
			string[] State_Values = null; // MAKE ARRAY OF STATE VALUES

			Application.DoEvents();
			Application.DoEvents();
			if (cbo_comp_state.SelectedIndex > 0)
			{
				// IF THERE WAS A STATE SELECTED IN THE STATE COMBO
				// THEN SPLIT THE COMBO TEXT INTO 3 FIELDS INCLUDING
				// 0=STATE CODE, 1=COUNTRY, 2=TIMEZONE
				State_Values = cbo_comp_state.Text.Split(',');

				if (cbo_comp_state.SelectedIndex > -1)
				{
					// ALIGN THE TIMEZONE CBO TO THE TIMEZONE OF THE STATE SELECTED
					cbo_comp_timezone.SelectedIndex = -1;
					int tempForEndVar = cbo_comp_timezone.Items.Count - 1;
					for (int i = 0; i <= tempForEndVar; i++)
					{
						if (cbo_comp_timezone.GetListItem(i).Trim() == State_Values[2].Trim())
						{
							cbo_comp_timezone.SelectedIndex = i;
						}
					}

					Application.DoEvents();
					Application.DoEvents();
					// ALIGN THE COUNTRY CBO TO THE COUNTRY OF THE STATE SELECTED
					cbo_comp_country.SelectedIndex = -1;
					int tempForEndVar2 = cbo_comp_country.Items.Count - 1;
					for (int i = 0; i <= tempForEndVar2; i++)
					{
						if (cbo_comp_country.GetListItem(i).Trim() == State_Values[1].Trim())
						{
							cbo_comp_country.SelectedIndex = i;
						}
					}
				}

			}

			Application.DoEvents();
			Application.DoEvents();

		}

		private void change_background(string bChangeBack)
		{
			// Function used for changing background colors
			Control cControl = null;

			// *****************************************************************************
			// RTW - 11/10/2011 - MODIFIED TO CHANGE BACKGROUND BASED ON DB OR AERODEX USER


			//UPGRADE_WARNING: (2065) Form property frm_Company.Controls has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2065
			foreach (Control cControlIterator in ContainerHelper.Controls(this))
			{
				try
				{
					cControl = cControlIterator;
				}
				catch
				{
				}

				if (ErrorHandlingHelper.ResumeNextExpr<bool>(() => !(cControl is TextBox || cControl is ComboBox || cControl is UpgradeHelpers.DataGridViewFlex || cControl is ListBox || cControl is ToolStripMenuItem || cControl is Timer || cControl is ToolStrip || cControl.Name.ToLower() == ("tbr_toolbar").ToLower() || cControl.Name.ToLower() == ("lbl_comp").ToLower() || cControl.Name.ToLower() == ("pnl_update_message").ToLower() || cControl.Name.ToLower() == ("lbl_abi_flag").ToLower() || cControl.Name.ToLower() == ("company_logo").ToLower())))
				{

					// TEMP HOLD MSW - RGB ISSUE
					if (cControl.Name != modGlobalVars.cEmptyString)
					{
						if (bChangeBack == "DB")
						{
							try
							{
								//cControl.BackColor = RGB(247, 240, 192)  ' TAN - RGB
								cControl.BackColor = Color.FromArgb(247, 240, 192); // TAN - HEX
								//cControl.BackColor = 12644599            ' TAN - DECIMAL
							}
							catch
							{
							}
						}
						else
						{
							// RTW - TURN A DIFFERENT COLOR FOR AERODEX - 11/10/2011
							if (bChangeBack == "AERODEX")
							{
								try
								{
									//cControl.BackColor = RGB(196, 232, 242)  ' LIGHT BLUE - RGB
									cControl.BackColor = Color.FromArgb(196, 232, 242); // LIGHT BLUE - HEX
									//cControl.BackColor = 15919300            ' LIGHT BLUE - DECIMAL
								}
								catch
								{
								}

							}
							else
							{
								try
								{
									cControl.BackColor = NORMAL_CTRL_BACKCOLOR;
								}
								catch
								{
								}
							}
						}
					}


				}

				if (cControl is ShapeHelper)
				{

					for (int i = 0; i <= shp_dealer_background.Length - 1; i++)
					{
						if (!(shp_dealer_background[i] is null))
						{

							if (bChangeBack == "DB")
							{
								try
								{
									//sShape.BackColor = RGB(247, 240, 192)  ' TAN - RGB
									shp_dealer_background[i].BackColor = Color.FromArgb(247, 240, 192); // TAN - HEX
									//sShape.BackColor = 12644599            ' TAN - DECIMAL
								}
								catch
								{
								}
								shp_dealer_background[i].Visible = true;
							}
							else
							{
								// RTW - TURN A DIFFERENT COLOR FOR AERODEX - 11/10/2011
								if (bChangeBack == "AERODEX")
								{
									try
									{
										//sShape.BackColor = RGB(196, 232, 242)  ' LIGHT BLUE - RGB
										shp_dealer_background[i].BackColor = Color.FromArgb(196, 232, 242); // LIGHT BLUE - HEX
										//sShape.BackColor = 15919300            ' LIGHT BLUE - DECIMAL
									}
									catch
									{
									}
									shp_dealer_background[i].Visible = true;
								}
								else
								{
									try
									{
										shp_dealer_background[i].BackColor = NORMAL_CTRL_BACKCOLOR;
									}
									catch
									{
									}
									shp_dealer_background[i].Visible = false;
								}
							}

						}
					}

				}

				//cControl
				cControl = default(Control);
			}

		}

		private void select_automated_account_rep()
		{
			// Function used to Select Automated Account Rep from Account_Rep_Assignment table

			string Query = "";
			string sAssignRep = "";
			ADORecordSetHelper ado_AccountRep = null;

			try
			{

				Query = $"SELECT assign_eu_account_id FROM Account_Rep_Assignment WITH(NOLOCK) WHERE assign_character = '{txt_comp_name.Text.Trim().Substring(0, Math.Min(1, txt_comp_name.Text.Trim().Length)).ToUpper()}'";

				ado_AccountRep = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");
				//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
				if (!Convert.IsDBNull(ado_AccountRep.Fields) && !(ado_AccountRep.BOF && ado_AccountRep.EOF))
				{
					//UPGRADE_WARNING: (1049) Use of Null/IsNull() detected. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-1049
					if (!Convert.IsDBNull(ado_AccountRep["assign_eu_account_id"]))
					{
						if (Convert.ToString(ado_AccountRep["assign_eu_account_id"]).Trim() != modGlobalVars.cEmptyString)
						{

							cbo_comp_account[COMP_ACCOUNT_REP].SelectedIndex = -1;
							sAssignRep = Convert.ToString(ado_AccountRep["assign_eu_account_id"]).Trim().ToUpper();

							int tempForEndVar = cbo_comp_account[COMP_ACCOUNT_REP].Items.Count - 1;
							for (int i = 0; i <= tempForEndVar; i++)
							{
								if (cbo_comp_account[COMP_ACCOUNT_REP].GetListItem(i).Trim().ToUpper() == sAssignRep)
								{
									cbo_comp_account[COMP_ACCOUNT_REP].SelectedIndex = i;
									break;
								}
							}

							if (sAssignRep.Trim() != modGlobalVars.cEmptyString)
							{
								modFillCompConControls.assign_account_rep(txt_comp_name.Text, cbo_comp_account[COMP_ACCOUNT_TYPE], cbo_comp_account[COMP_ACCOUNT_REP]);
							}

						}
					}
				}

				ado_AccountRep = null;
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"select_automated_account_rep_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				search_off();
			}

		}

		//
		//
		public void confirm_company_field(string vfield)
		{
			// Function used to confirm company fields

			StringBuilder Query = new StringBuilder();
			string tmpField = modGlobalVars.cEmptyString;

			try
			{

				bool bIsCompanyRelated = false;
				string related_comp_ids = "";
				string[] related_comp_ids_array = null;
				int i = 0;
				string Query2 = "";
				if (chk_dont_color_confirm.CheckState == CheckState.Unchecked)
				{

					if ((sVerifiedCompanyFields.IndexOf(vfield) + 1) == 0)
					{

						if (sVerifiedCompanyFields.Trim() == modGlobalVars.cEmptyString)
						{
							sVerifiedCompanyFields = vfield;
						}
						else
						{
							sVerifiedCompanyFields = $"{sVerifiedCompanyFields},{vfield}";
						}

						tmpField = vfield;

						switch(vfield)
						{
							case "comp_address" : 
								if (txt_comp_address1.Text.Trim() != modGlobalVars.cEmptyString)
								{
									tmpField = StringsHelper.Replace(tmpField, vfield, "Address", 1, -1, CompareMethod.Binary);
									lbl_comp[ADDRESS_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
									txt_comp_address1.BackColor = NORMAL_TXT_BACKCOLOR;
									txt_comp_address2.BackColor = NORMAL_TXT_BACKCOLOR;
								}
								else
								{
									tmpField = StringsHelper.Replace(tmpField, vfield, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);
								} 
								 
								break;
							case "comp_email" : 
								if (txt_comp_email_address.Text.Trim() != modGlobalVars.cEmptyString)
								{
									tmpField = StringsHelper.Replace(tmpField, vfield, "Email", 1, -1, CompareMethod.Binary);
									lbl_comp[EMAIL_ADDRESS_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
									txt_comp_email_address.BackColor = NORMAL_TXT_BACKCOLOR;
								}
								else
								{
									tmpField = StringsHelper.Replace(tmpField, vfield, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);
								} 
								 
								break;
							case "comp_web" : 
								if (txt_comp_web_address.Text.Trim() != modGlobalVars.cEmptyString)
								{
									tmpField = StringsHelper.Replace(tmpField, vfield, "Web Address", 1, -1, CompareMethod.Binary);
									lbl_comp[WEB_ADDRESS_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
									txt_comp_web_address.BackColor = NORMAL_TXT_BACKCOLOR;
								}
								else
								{
									tmpField = StringsHelper.Replace(tmpField, vfield, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);
								} 
								 
								break;
						}

						if (tmpField.Trim() != modGlobalVars.cEmptyString)
						{

							Query = new StringBuilder($"UPDATE company SET {vfield}_confirm_date = '{DateTime.Now.ToString()}'");
							Query.Append($" WHERE comp_id = {nReference_CompanyID.ToString()} AND comp_journ_id = 0");

							modAdminCommon.ADO_Transaction("BeginTrans");
							DbCommand TempCommand = null;
							TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
							TempCommand.CommandText = Query.ToString();
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
							TempCommand.ExecuteNonQuery();

							// INSERT A COMPANY CONFIRMATION JOURNAL ENTRY

							modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject($"Confirmed Company: {tmpField}", "CPCFM", 0, nReference_CompanyID);


							modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CPCFM";
							modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
							modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;
							modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
							modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
							modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_status = "A";
							modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

							frm_Journal.DefInstance.Commit_Journal_Entry();


							modAdminCommon.ADO_Transaction("CommitTrans");

							if (vfield == "comp_address")
							{
								bIsCompanyRelated = modCommon.DoesSameAddressRelatedCompanyExist(Convert.ToInt32(Double.Parse(txt_comp_id.Text)), ref related_comp_ids);

								if (bIsCompanyRelated)
								{
									if (MessageBox.Show("Would you like to Confirm the Address for Related Companies with Matching Addresses?", AssemblyHelper.GetTitle(System.Reflection.Assembly.GetExecutingAssembly()), MessageBoxButtons.YesNo) == System.Windows.Forms.DialogResult.Yes)
									{
										i = 0;
										Query = new StringBuilder("");


										related_comp_ids_array = related_comp_ids.Split(',');

										modAdminCommon.ADO_Transaction("BeginTrans");

										int tempForEndVar = related_comp_ids_array.GetUpperBound(0);
										for (i = 0; i <= tempForEndVar; i++)
										{
											related_comp_ids_array[i] = StringsHelper.Replace(related_comp_ids_array[i], ",", "", 1, -1, CompareMethod.Binary);

											Query = new StringBuilder($"UPDATE company SET {vfield}_confirm_date = '{DateTime.Now.ToString()}'");
											Query.Append($" WHERE comp_id = {related_comp_ids_array[i]} AND comp_journ_id = 0");
											DbCommand TempCommand_2 = null;
											TempCommand_2 = modAdminCommon.ADODB_Trans_conn.CreateCommand();
											UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
											TempCommand_2.CommandText = Query.ToString();
											//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
											//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
											TempCommand_2.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
											UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
											TempCommand_2.ExecuteNonQuery();

											modAdminCommon.Rec_Journal_Info.journ_subject = $"Confirmed Company: {tmpField}";
											modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
											modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
											modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CPCFM";
											modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
											modAdminCommon.Rec_Journal_Info.journ_comp_id = Convert.ToInt32(Double.Parse(related_comp_ids_array[i]));
											modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
											modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
											modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
											modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
											modAdminCommon.Rec_Journal_Info.journ_status = "A";
											modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

											frm_Journal.DefInstance.Commit_Journal_Entry();
										}

										modAdminCommon.ADO_Transaction("CommitTrans");
									}
								}
							}


						}


					} // InStr(1, sVerifiedCompanyFields, vfield) = 0

				} // chk_dont_color_confirm.Value = vbUnchecked
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"confirm_company_field_Error ({Information.Err().Number.ToString()}) {excep.Message} ACID:[{nReference_AircraftID.ToString()}] CMPID[{nReference_CompanyID.ToString()}] JID[{nReference_CompanyJID.ToString()}]", "frm_Company(CONFIRM)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();
			}

		}

		private void confirm_contact_field(string vfield)
		{

			// Function used to confirm contact fields

			string Query = "";
			string tmpField = "";

			try
			{

				if (chk_dont_color_confirm.CheckState == CheckState.Unchecked)
				{

					if ((sVerifiedContactFields.IndexOf(vfield) + 1) == 0)
					{

						if (sVerifiedContactFields.Trim() == modGlobalVars.cEmptyString)
						{
							sVerifiedContactFields = vfield;
						}
						else
						{
							sVerifiedContactFields = $"{sVerifiedContactFields},{vfield}";
						}

						tmpField = vfield;

						switch(vfield)
						{
							case "contact_title" : 
								if (cbo_contact_title.Text.Trim() != modGlobalVars.cEmptyString)
								{
									tmpField = StringsHelper.Replace(tmpField, vfield, "Title", 1, -1, CompareMethod.Binary);
									cbo_contact_title.BackColor = NORMAL_TXT_BACKCOLOR;
									lbl_comp[CONTACT_TITLE_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
								}
								else
								{
									tmpField = StringsHelper.Replace(tmpField, vfield, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);
								} 

								 
								break;
							case "contact_email" : 
								if (txt_contact_email_address.Text.Trim() != modGlobalVars.cEmptyString)
								{
									tmpField = StringsHelper.Replace(tmpField, vfield, "Email", 1, -1, CompareMethod.Binary);
									txt_contact_email_address.BackColor = NORMAL_TXT_BACKCOLOR;
									lbl_comp[CONTACT_EMAIL_ADDRESS_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
								}
								else
								{
									tmpField = StringsHelper.Replace(tmpField, vfield, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);
								} 

								 
								break;
							case "contact_name" : 
								if (txt_contact_first_name.Text.Trim() != modGlobalVars.cEmptyString || txt_contact_middle_initial.Text.Trim() != modGlobalVars.cEmptyString || txt_contact_last_name.Text.Trim() != modGlobalVars.cEmptyString || cbo_contact_sirname.Text.Trim() != modGlobalVars.cEmptyString || cbo_contact_suffix.Text.Trim() != modGlobalVars.cEmptyString)
								{
									tmpField = StringsHelper.Replace(tmpField, vfield, "Name", 1, -1, CompareMethod.Binary);
									lbl_comp[CONTACT_NAME_INDEX].ForeColor = NORMAL_TXT_FORCOLOR;
									txt_contact_first_name.BackColor = NORMAL_TXT_BACKCOLOR;
									txt_contact_middle_initial.BackColor = NORMAL_TXT_BACKCOLOR;
									txt_contact_last_name.BackColor = NORMAL_TXT_BACKCOLOR;
									cbo_contact_sirname.BackColor = NORMAL_TXT_BACKCOLOR;
									cbo_contact_suffix.BackColor = NORMAL_TXT_BACKCOLOR;
								}
								else
								{
									tmpField = StringsHelper.Replace(tmpField, vfield, modGlobalVars.cEmptyString, 1, -1, CompareMethod.Binary);
								} 
								 
								break;
						}

						if (tmpField.Trim() != modGlobalVars.cEmptyString)
						{

							Query = $"UPDATE Contact SET {vfield}_confirm_date = '{DateTime.Now.ToString()}'";
							Query = $"{Query} WHERE contact_id = {nSelectedContactID.ToString()} AND contact_journ_id = 0";

							modAdminCommon.ADO_Transaction("BeginTrans");
							DbCommand TempCommand = null;
							TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
							UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
							TempCommand.CommandText = Query;
							//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
							//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
							TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
							UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
							TempCommand.ExecuteNonQuery();

							// INSERT A CONTACT CONFIRMATION JOURNAL ENTRY
							// Rec_Journal_Info.journ_subject = "Confirmed Contact: " & tmpField
							modAdminCommon.Rec_Journal_Info.journ_subject = modAdminCommon.Create_Confirm_Verify_Subject($"Confirmed Contact: {tmpField}", "CNCFM", 0, nReference_CompanyID, Convert.ToInt32(Double.Parse(nSelectedContactID.ToString())));
							modAdminCommon.Rec_Journal_Info.journ_description = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
							modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "CNCFM";
							modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(DateTimeHelper.ToString(DateTime.Now));
							modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;
							modAdminCommon.Rec_Journal_Info.journ_contact_id = Convert.ToInt32(Double.Parse(nSelectedContactID.ToString()));
							modAdminCommon.Rec_Journal_Info.journ_user_id = modAdminCommon.gbl_User_ID;
							modAdminCommon.Rec_Journal_Info.journ_account_id = modAdminCommon.gbl_Account_ID;
							modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
							modAdminCommon.Rec_Journal_Info.journ_status = "A";
							modAdminCommon.Rec_Journal_Info.journ_category_code = "AR";

							frm_Journal.DefInstance.Commit_Journal_Entry();

							modAdminCommon.ADO_Transaction("CommitTrans");

						}


					} // InStr(1, sVerifiedContactFields, vfield) = 0

				} // chk_dont_color_confirm.Value = vbUnchecked
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"confirm_contact_field_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				search_off();
			}

		}

		private void clear_company_research_action()
		{

			// Function used for updating jounral entries

			string Query = "";
			ADORecordSetHelper ado_CurrentItem = null;
			string strUser = "Unknown";
			string strSubject = "";

			try
			{

				Query = $"SELECT journ_user_id FROM Journal WITH(NOLOCK) WHERE journ_id = {lst_research_notes.GetItemData(ListBoxHelper.GetSelectedIndex(lst_research_notes)).ToString()}";

				ado_CurrentItem = ADORecordSetHelper.Open(Query, modAdminCommon.LOCAL_ADO_DB, "");

				if (!(ado_CurrentItem.BOF && ado_CurrentItem.EOF))
				{
					if (Convert.ToString(ado_CurrentItem["journ_user_id"]).Trim() != modGlobalVars.cEmptyString)
					{
						strUser = Convert.ToString(ado_CurrentItem["journ_user_id"]).Trim();
					}
					ado_CurrentItem.Close();
				}

				ado_CurrentItem = null;

				Query = $"UPDATE Journal SET journ_status='A', journ_subcategory_code='RN', journ_user_id = '{modAdminCommon.gbl_User_ID}'";

				Query = $"{Query}, journ_comp_id = {nReference_CompanyID.ToString()}";

				if (!modCommon.GetTransWeb("RN"))
				{
					Query = $"{Query}, journ_action_date = '{DateTime.Now.ToString("d")}'";
				}
				else
				{
					Query = $"{Query}, journ_action_date = '{DateTime.Parse("1/1/1900").ToString("d")}'";
				}

				strSubject = StringsHelper.Replace(lst_research_notes.Text, lst_research_notes.Text.Substring(0, Math.Min(lst_research_notes.Text.IndexOf(modGlobalVars.cHyphen), lst_research_notes.Text.Length)), $"{DateTime.Now.ToString("d")} ", 1, -1, CompareMethod.Binary);

				if (Strings.Len(strSubject) + 45 > 120)
				{
					strSubject = $"{strSubject.Trim().Substring(0, Math.Min(74, strSubject.Trim().Length))} (ACTION CLEARED - Originally entered by {strUser})";
				}
				else
				{
					strSubject = $"{strSubject.Trim()} (ACTION CLEARED - Originally entered by {strUser})";
				}

				Query = $"{Query}, journ_subject = '{modAdminCommon.Fix_Quote(strSubject.Trim())}'";

				if (txt_extra_research_note.Text.Trim() != modGlobalVars.cEmptyString)
				{
					Query = $"{Query}, journ_description = '{modAdminCommon.Fix_Quote(txt_extra_research_note.Text.Trim()).Substring(0, Math.Min(4000, modAdminCommon.Fix_Quote(txt_extra_research_note.Text.Trim()).Length))}'";
				}

				Query = $"{Query} WHERE journ_id = {lst_research_notes.GetItemData(ListBoxHelper.GetSelectedIndex(lst_research_notes)).ToString()}";

				modAdminCommon.ADO_Transaction("BeginTrans");
				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();
				modAdminCommon.ADO_Transaction("CommitTrans");

				// RTW - 2/14/2012 - MODIFIED TO UPDATE THE HOT BOX SUMMARY TABLE AS WELL.
				Query = $"update Hot_Box_Summary set hbs_status='X' where hbs_journ_id = {lst_research_notes.GetItemData(ListBoxHelper.GetSelectedIndex(lst_research_notes)).ToString()}";

				DbCommand TempCommand_2 = null;
				TempCommand_2 = modAdminCommon.LOCAL_ADO_DB.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand_2);
				TempCommand_2.CommandText = Query;
				TempCommand_2.CommandType = CommandType.Text;
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand_2);
				TempCommand_2.ExecuteNonQuery();
				pnl_research_notes.Visible = false;

				lbl_comp[HOTBOX_DETAIL_INDEX].Text = modGlobalVars.cEmptyString;

				string strSubject_hb = "";
				strSubject_hb = strSubject;

				if (strSubject_hb.Trim().IndexOf('-') >= 0)
				{
					strSubject_hb = strSubject_hb.Trim().Substring(Math.Max(strSubject_hb.Trim().Length - (Strings.Len(strSubject_hb.Trim()) - (strSubject_hb.Trim().IndexOf('-') + 1) - 1), 0));
				}

				// added in MSW - 4/10/20
				modAdminCommon.Record_Event("HOTBOX", $"Clear Hot Box Item:=[{modAdminCommon.Fix_Quote(strSubject_hb.Trim())}]", modAdminCommon.gbl_Aircraft_ID, Convert.ToInt32(Double.Parse(lst_research_notes.GetItemData(ListBoxHelper.GetSelectedIndex(lst_research_notes)).ToString())), Convert.ToInt32(Double.Parse(nReference_CompanyID.ToString())), false, 0, 0);


				fill_hotbox_list();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"clear_company_research_action_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
				ado_CurrentItem = null;
				search_off();
			}

		}

		private void display_verify_aircraft_status_pnl(string in_sVerifyWhat)
		{

			// Function used to display contact fields to screen

			string Tname = modGlobalVars.cEmptyString;
			int RememberCol = 0;
			int RememberRow = 0;

			try
			{

				//UPGRADE_ISSUE: (2064) Threed.SSPanel property pnl_verify_aircraft_status.Caption was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				pnl_verify_aircraft_status.setCaption("Verify Aircraft Status:");
				pnl_verify_aircraft_status.Visible = true;
				pnl_verify_aircraft_status.BringToFront(); //gap-note Manual change to fix BringToFront rule failing sometimes

				frame_verify_pnl.Visible = false;

				cbo_verify_journal_subject.Visible = false;
				cbo_verify_aircraft.Visible = false;
				cbo_verify_note_type.Visible = false;

				chk_verify_contact.Visible = false;
				chk_verify_contact.CheckState = CheckState.Checked;

				opt_verify_aircraft[modGlobalVars.opt_verify_ac_NONE].Visible = false;
				opt_verify_aircraft[modGlobalVars.opt_verify_ac_ONE].Visible = false;
				opt_verify_aircraft[modGlobalVars.opt_verify_ac_ALL].Visible = false;
				opt_verify_aircraft[modGlobalVars.opt_verify_ac_PRIMARY].Visible = false;
				opt_verify_aircraft[5].Visible = false; // added MSW - 4/19/19

				lbl_comp[VERIFY_NOTETYPE_INDEX].Visible = false;
				lbl_comp[VERIFY_ACLABEL_INDEX].Visible = false;
				lbl_comp[VERIFY_NOTELABEL_INDEX].Visible = false;
				lbl_comp[VERIFY_STATUS_INDEX].Visible = false;

				Shape1[0].Visible = false;
				Shape1[2].Visible = false;

				Shape1[1].Visible = true;
				lbl_comp[VERIFY_CONTACTLABEL_INDEX].Text = "Please Select A Contact To Verify Status:";
				lbl_comp[VERIFY_CONTACTLABEL_INDEX].Visible = true;

				sVerifyAircraftStatus = in_sVerifyWhat.ToUpper();

				modCompany.fill_verify_contact_list(nReference_CompanyID, nReference_CompanyJID, nSelectedContactID, cbo_verify_other_contacts);

				if (sVerifyAircraftStatus == ("All").ToUpper())
				{
					lbl_comp[VERIFY_STATUS_INDEX].Text = $"Verify All Aircraft with Primary Contact on: {DateTime.Now.ToString()}";
					lbl_comp[VERIFY_STATUS_INDEX].Visible = true;
				}
				else if (sVerifyAircraftStatus == ("One").ToUpper())
				{ 
					if (grd_company_aircraft.CurrentRowIndex > 0 && Convert.ToString(grd_company_aircraft[1, 3].Value).Trim().ToUpper() != ("No Aircraft Found").ToUpper())
					{
						RememberCol = grd_company_aircraft.CurrentColumnIndex;
						RememberRow = grd_company_aircraft.CurrentRowIndex;

						grd_company_aircraft.CurrentColumnIndex = 8; // poc

						if (ColorTranslator.ToOle(grd_company_aircraft.CellBackColor).ToString() == modAdminCommon.ExclusiveColor)
						{
							grd_company_aircraft.CurrentColumnIndex = 3; // make/model name
							// find the aircraft info

							while(grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim() == modGlobalVars.cEmptyString)
							{
								grd_company_aircraft.CurrentRowIndex--;
							};
							Tname = $"Verify Exclusive Status of {grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim()} on: {DateTime.Now.ToString()}";
							lbl_comp[VERIFY_STATUS_INDEX].Text = Tname.Trim();
						}
						else if (ColorTranslator.ToOle(grd_company_aircraft.CellBackColor).ToString() == modAdminCommon.PrimaryColor)
						{ 
							grd_company_aircraft.CurrentColumnIndex = 3; // make/model name
							// find the aircraft info

							while(grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim() == modGlobalVars.cEmptyString)
							{
								grd_company_aircraft.CurrentRowIndex--;
							};
							Tname = $"Verify Status of {grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim()} as ";
							grd_company_aircraft.CurrentColumnIndex = 7;
							Tname = $"{Tname}{grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim()} on: {DateTime.Now.ToString()}";
							lbl_comp[VERIFY_STATUS_INDEX].Text = Tname.Trim();

						}

						lbl_comp[VERIFY_STATUS_INDEX].Visible = true;
						grd_company_aircraft.CurrentColumnIndex = RememberCol;
						grd_company_aircraft.CurrentRowIndex = RememberRow;

					}


				}
				else if (sVerifyAircraftStatus == ("OWNER").ToUpper())
				{ 

					if (yacht_owner_id > 0)
					{


					}
					else
					{
						if (grd_company_aircraft.CurrentRowIndex > 0 && Convert.ToString(grd_company_aircraft[1, 3].Value).Trim().ToUpper() != ("No Aircraft Found").ToUpper())
						{
							RememberCol = grd_company_aircraft.CurrentColumnIndex;
							RememberRow = grd_company_aircraft.CurrentRowIndex;

							grd_company_aircraft.CurrentColumnIndex = 8; // poc


							grd_company_aircraft.CurrentColumnIndex = 3; // make/model name
							Tname = "Verified Aircraft owner as ";
							grd_company_aircraft.CurrentColumnIndex = 9;
							Tname = $"{Tname}{grd_company_aircraft[grd_company_aircraft.CurrentRowIndex, grd_company_aircraft.CurrentColumnIndex].FormattedValue.ToString().Trim()}";
							lbl_comp[VERIFY_STATUS_INDEX].Text = Tname.Trim();

							lbl_comp[VERIFY_STATUS_INDEX].Visible = true;
							grd_company_aircraft.CurrentColumnIndex = RememberCol;
							grd_company_aircraft.CurrentRowIndex = RememberRow;

						}
					}


				}
				else if (sVerifyAircraftStatus == ("Rotary").ToUpper())
				{ 
					lbl_comp[VERIFY_STATUS_INDEX].Text = $"Verify All Rotary Aircraft with Primary Contact on: {DateTime.Now.ToString()}";
					lbl_comp[VERIFY_STATUS_INDEX].Visible = true;

				}
				else if (sVerifyAircraftStatus == ("Fixed").ToUpper())
				{ 
					lbl_comp[VERIFY_STATUS_INDEX].Text = $"Verify All Fixed Wing Aircraft with Primary Contact on: {DateTime.Now.ToString()}";
					lbl_comp[VERIFY_STATUS_INDEX].Visible = true;
				}
				else if (sVerifyAircraftStatus == ("AVAILABLE").ToUpper())
				{ 
					lbl_comp[VERIFY_STATUS_INDEX].Text = $"Verify All Available Aircraft with Primary Contact on: {DateTime.Now.ToString()}";
					lbl_comp[VERIFY_STATUS_INDEX].Visible = true;

				}

				search_off();

				cbo_verify_other_contacts.Refresh();
				cbo_verify_other_contacts.Focus();
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"display_verify_aircraft_status_pnl_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
			}

		}

		public bool update_last_contact_date(bool bAddJournalEntry, string internal_note = "")
		{

			string Query = "";
			string strToday = DateTime.Now.ToString("d");

			try
			{

				Query = $"UPDATE Company SET comp_last_contact_date = '{strToday.Trim()}'";
				Query = $"{Query} WHERE comp_id = {nReference_CompanyID.ToString()} AND comp_journ_id = {nReference_CompanyJID.ToString()}";

				modAdminCommon.ADO_Transaction("BeginTrans");

				DbCommand TempCommand = null;
				TempCommand = modAdminCommon.ADODB_Trans_conn.CreateCommand();
				UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(TempCommand);
				TempCommand.CommandText = Query;
				//UPGRADE_ISSUE: (2064) ADODB.ExecuteOptionEnum property ExecuteOptionEnum.adExecuteNoRecords was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
				//UPGRADE_WARNING: (6021) Casting 'int' to Enum may cause different behaviour. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-6021
				TempCommand.CommandType = (CommandType) (((int) UpgradeStubs.ADODB_ExecuteOptionEnum.getadExecuteNoRecords()) + ((int) CommandType.Text));
				UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(TempCommand);
				TempCommand.ExecuteNonQuery();

				lbl_comp[LAST_CALLED_INDEX].Text = strToday.Trim();

				// set these to the new values so they don't trigger a save
				enter_company_info.s_comp_last_contact_date = strToday.Trim();
				exit_company_info.s_comp_last_contact_date = strToday.Trim();

				if (bAddJournalEntry)
				{
					modAdminCommon.Rec_Journal_Info.journ_date = DateTime.Parse(strToday.Trim());
					modAdminCommon.Rec_Journal_Info.journ_subcategory_code = "RN";
					modAdminCommon.Rec_Journal_Info.journ_subject = "Attempted to Contact";
					modAdminCommon.Rec_Journal_Info.journ_description = internal_note;
					modAdminCommon.Rec_Journal_Info.journ_ac_id = 0;
					modAdminCommon.Rec_Journal_Info.journ_comp_id = nReference_CompanyID;

					if (SSTabHelper.GetSelectedIndex(tab_company_details) == 1)
					{
						if (grd_company_contacts.CurrentRowIndex > 0)
						{
							modAdminCommon.Rec_Journal_Info.journ_contact_id = grd_company_contacts.get_RowData(grd_company_contacts.CurrentRowIndex);
						}
					}
					else
					{
						modAdminCommon.Rec_Journal_Info.journ_contact_id = 0;
					}

					modAdminCommon.Rec_Journal_Info.journ_account_id = cbo_comp_account[COMP_ACCOUNT_REP].Text.Trim();
					modAdminCommon.Rec_Journal_Info.journ_prior_account_id = modGlobalVars.cEmptyString;
					modAdminCommon.Rec_Journal_Info.journ_status = "A";

					frm_Journal.DefInstance.Commit_Journal_Entry();
				}

				modAdminCommon.ADO_Transaction("CommitTrans");
			}
			catch (System.Exception excep)
			{

				//UPGRADE_WARNING: (2081) Err.Number has a new behavior. More Information: https://docs.mobilize.net/vbuc/ewis/warnings#id-2081
				modAdminCommon.Report_Error($"update_last_contact_date_Error ({Information.Err().Number.ToString()}) {excep.Message} CMPID:[{nReference_CompanyID.ToString()}] JID:[{nReference_CompanyJID.ToString()}]", "Company (frm_Company)");
				modAdminCommon.ADO_Transaction("RollbackTrans");
			}

			return false;
		}

		private void txt_comp_city_Leave(Object eventSender, EventArgs eventArgs)
		{

			try
			{

				string sTmp = "";
				sTmp = modGlobalVars.cEmptyString;
				string sTmp1 = "";
				sTmp1 = modGlobalVars.cEmptyString;
				int K = 0;
				K = 0;

				if (txt_comp_city.Text.Trim() != modGlobalVars.cEmptyString)
				{
					// take the text from the text box and put in temp string
					sTmp = $"{txt_comp_city.Text.Trim()}{modGlobalVars.cSingleSpace}";

					// logic - if in the first gcCITY_FORT_STR characters is there a gcCITY_FORT_STR in here
					// if so change it to gcCITY_FT_STR

					if (sTmp.Substring(Math.Min(0, sTmp.Length), Math.Min(Strings.Len(modGlobalVars.gcCITY_FORT_STR), Math.Max(0, sTmp.Length))).ToLower() == modGlobalVars.gcCITY_FORT_STR.ToLower())
					{
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_FORT_STR, modGlobalVars.gcCITY_FT_STR, 1, 1, CompareMethod.Binary);
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_FORT_STR.ToLower(), modGlobalVars.gcCITY_FT_STR, 1, 1, CompareMethod.Binary);
					}
					else if (sTmp.Substring(Math.Min(0, sTmp.Length), Math.Min(Strings.Len(modGlobalVars.gcCITY_MOUNT_STR), Math.Max(0, sTmp.Length))).ToLower() == modGlobalVars.gcCITY_MOUNT_STR.ToLower())
					{ 
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_MOUNT_STR, modGlobalVars.gcCITY_MT_STR, 1, 1, CompareMethod.Binary);
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_MOUNT_STR.ToLower(), modGlobalVars.gcCITY_MT_STR, 1, 1, CompareMethod.Binary);
					}
					else if (sTmp.Substring(Math.Min(0, sTmp.Length), Math.Min(Strings.Len(modGlobalVars.gcCITY_SAINT_STR), Math.Max(0, sTmp.Length))).ToLower() == modGlobalVars.gcCITY_SAINT_STR.ToLower())
					{ 
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_SAINT_STR, modGlobalVars.gcCITY_ST_STR, 1, 1, CompareMethod.Binary);
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_SAINT_STR.ToLower(), modGlobalVars.gcCITY_ST_STR, 1, 1, CompareMethod.Binary);
					}
					else if (sTmp.Substring(Math.Min(0, sTmp.Length), Math.Min(Strings.Len(modGlobalVars.gcCITY_SAINTE_STR), Math.Max(0, sTmp.Length))).ToLower() == modGlobalVars.gcCITY_SAINTE_STR.ToLower())
					{ 
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_SAINTE_STR, modGlobalVars.gcCITY_ST_STR, 1, 1, CompareMethod.Binary);
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_SAINTE_STR.ToLower(), modGlobalVars.gcCITY_ST_STR, 1, 1, CompareMethod.Binary);
					}
					else if (sTmp.Substring(Math.Min(0, sTmp.Length), Math.Min(Strings.Len(modGlobalVars.gcCITY_FORT_STR_SHORT), Math.Max(0, sTmp.Length))).ToLower() == modGlobalVars.gcCITY_FORT_STR_SHORT.ToLower())
					{ 
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_FORT_STR_SHORT, modGlobalVars.gcCITY_FT_STR, 1, 1, CompareMethod.Binary);
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_FORT_STR_SHORT.ToLower(), modGlobalVars.gcCITY_FT_STR, 1, 1, CompareMethod.Binary);
					}
					else if (sTmp.Substring(Math.Min(0, sTmp.Length), Math.Min(Strings.Len(modGlobalVars.gcCITY_MOUNT_STR_SHORT), Math.Max(0, sTmp.Length))).ToLower() == modGlobalVars.gcCITY_MOUNT_STR_SHORT.ToLower())
					{ 
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_MOUNT_STR_SHORT, modGlobalVars.gcCITY_MT_STR, 1, 1, CompareMethod.Binary);
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_MOUNT_STR_SHORT.ToLower(), modGlobalVars.gcCITY_MT_STR, 1, 1, CompareMethod.Binary);
					}
					else if (sTmp.Substring(Math.Min(0, sTmp.Length), Math.Min(Strings.Len(modGlobalVars.gcCITY_SAINT_STR_SHORT), Math.Max(0, sTmp.Length))).ToLower() == modGlobalVars.gcCITY_SAINT_STR_SHORT.ToLower())
					{ 
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_SAINT_STR_SHORT, modGlobalVars.gcCITY_ST_STR, 1, 1, CompareMethod.Binary);
						sTmp = StringsHelper.Replace(sTmp, modGlobalVars.gcCITY_SAINT_STR_SHORT.ToLower(), modGlobalVars.gcCITY_ST_STR, 1, 1, CompareMethod.Binary);
					}

					txt_comp_city.Text = sTmp.Trim();
				}
			}
			catch
			{
			}



		}

		private void txtCompJournalSearch_KeyPress(Object eventSender, KeyPressEventArgs eventArgs)
		{
			int KeyAscii = Convert.ToInt32(eventArgs.KeyChar);
			try
			{

				if (KeyAscii == Strings.Asc("\r"[0]))
				{
					if (txtCompJournalSearch.Text != "")
					{
						fill_company_journal_grid(grd_company_journal);
					}
				}
			}
			finally
			{
				if (KeyAscii == 0)
				{
					eventArgs.Handled = true;
				}
				eventArgs.KeyChar = Convert.ToChar(KeyAscii);
			}

		} // txtCompJournalSearch_KeyPress

		public void ViewCompany_Click(Object eventSender, EventArgs eventArgs)
		{

			//UPGRADE_ISSUE: (2064) Void method Global.Load was not upgraded. More Information: https://docs.mobilize.net/vbuc/ewis/issues#id-2064
			//VB.Global.Load(frm_WebReport.DefInstance);
			frm_WebReport.DefInstance.PassedCompID = nReference_CompanyID;
			frm_WebReport.DefInstance.WhichReport = "Company Details HB";
			frm_WebReport.DefInstance.Show();
		}
	}
}